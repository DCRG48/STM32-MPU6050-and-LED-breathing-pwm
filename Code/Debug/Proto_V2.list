
Proto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002648  08002648  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002648  08002648  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002648  08002648  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800265c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800265c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096d4  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001970  00000000  00000000  0002974b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084b  00000000  00000000  0002bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015188  00000000  00000000  0002c3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c097  00000000  00000000  0004154b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000899b6  00000000  00000000  0004d5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002624  00000000  00000000  000d6f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d95bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800259c 	.word	0x0800259c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800259c 	.word	0x0800259c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fabc 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f810 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f912 	bl	8000450 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022c:	f000 f86a 	bl	8000304 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000230:	23a0      	movs	r3, #160	; 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2102      	movs	r1, #2
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fd8f 	bl	8000d5a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800023c:	23fa      	movs	r3, #250	; 0xfa
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fb31 	bl	80008a8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000246:	e7f3      	b.n	8000230 <main+0x14>

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b093      	sub	sp, #76	; 0x4c
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	2410      	movs	r4, #16
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2338      	movs	r3, #56	; 0x38
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 f973 	bl	8002544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	003b      	movs	r3, r7
 8000260:	0018      	movs	r0, r3
 8000262:	2310      	movs	r3, #16
 8000264:	001a      	movs	r2, r3
 8000266:	2100      	movs	r1, #0
 8000268:	f002 f96c 	bl	8002544 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fd8d 	bl	8000d90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2202      	movs	r2, #2
 800027a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2280      	movs	r2, #128	; 0x80
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000284:	0021      	movs	r1, r4
 8000286:	187b      	adds	r3, r7, r1
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	187b      	adds	r3, r7, r1
 800028e:	2240      	movs	r2, #64	; 0x40
 8000290:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	187b      	adds	r3, r7, r1
 8000294:	2202      	movs	r2, #2
 8000296:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000298:	187b      	adds	r3, r7, r1
 800029a:	2202      	movs	r2, #2
 800029c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2200      	movs	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2208      	movs	r2, #8
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2280      	movs	r2, #128	; 0x80
 80002ae:	0292      	lsls	r2, r2, #10
 80002b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	0492      	lsls	r2, r2, #18
 80002b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0592      	lsls	r2, r2, #22
 80002c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fda3 	bl	8000e10 <HAL_RCC_OscConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002ce:	f000 f993 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	003b      	movs	r3, r7
 80002d4:	2207      	movs	r2, #7
 80002d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	003b      	movs	r3, r7
 80002da:	2202      	movs	r2, #2
 80002dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002de:	003b      	movs	r3, r7
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e4:	003b      	movs	r3, r7
 80002e6:	2200      	movs	r2, #0
 80002e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	003b      	movs	r3, r7
 80002ec:	2102      	movs	r1, #2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 f8a8 	bl	8001444 <HAL_RCC_ClockConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002f8:	f000 f97e 	bl	80005f8 <Error_Handler>
  }
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b013      	add	sp, #76	; 0x4c
 8000302:	bd90      	pop	{r4, r7, pc}

08000304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b098      	sub	sp, #96	; 0x60
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030a:	2354      	movs	r3, #84	; 0x54
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	0018      	movs	r0, r3
 8000310:	230c      	movs	r3, #12
 8000312:	001a      	movs	r2, r3
 8000314:	2100      	movs	r1, #0
 8000316:	f002 f915 	bl	8002544 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031a:	2338      	movs	r3, #56	; 0x38
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	0018      	movs	r0, r3
 8000320:	231c      	movs	r3, #28
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f002 f90d 	bl	8002544 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	0018      	movs	r0, r3
 800032e:	2334      	movs	r3, #52	; 0x34
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f002 f906 	bl	8002544 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000338:	4b42      	ldr	r3, [pc, #264]	; (8000444 <MX_TIM1_Init+0x140>)
 800033a:	4a43      	ldr	r2, [pc, #268]	; (8000448 <MX_TIM1_Init+0x144>)
 800033c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800033e:	4b41      	ldr	r3, [pc, #260]	; (8000444 <MX_TIM1_Init+0x140>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b3f      	ldr	r3, [pc, #252]	; (8000444 <MX_TIM1_Init+0x140>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800034a:	4b3e      	ldr	r3, [pc, #248]	; (8000444 <MX_TIM1_Init+0x140>)
 800034c:	4a3f      	ldr	r2, [pc, #252]	; (800044c <MX_TIM1_Init+0x148>)
 800034e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b3c      	ldr	r3, [pc, #240]	; (8000444 <MX_TIM1_Init+0x140>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000356:	4b3b      	ldr	r3, [pc, #236]	; (8000444 <MX_TIM1_Init+0x140>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800035c:	4b39      	ldr	r3, [pc, #228]	; (8000444 <MX_TIM1_Init+0x140>)
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000362:	4b38      	ldr	r3, [pc, #224]	; (8000444 <MX_TIM1_Init+0x140>)
 8000364:	0018      	movs	r0, r3
 8000366:	f001 fb71 	bl	8001a4c <HAL_TIM_PWM_Init>
 800036a:	1e03      	subs	r3, r0, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800036e:	f000 f943 	bl	80005f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000372:	2154      	movs	r1, #84	; 0x54
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000386:	187a      	adds	r2, r7, r1
 8000388:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <MX_TIM1_Init+0x140>)
 800038a:	0011      	movs	r1, r2
 800038c:	0018      	movs	r0, r3
 800038e:	f001 ffd5 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000396:	f000 f92f 	bl	80005f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800039a:	2138      	movs	r1, #56	; 0x38
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2260      	movs	r2, #96	; 0x60
 80003a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ae:	187b      	adds	r3, r7, r1
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_TIM1_Init+0x140>)
 80003c4:	220c      	movs	r2, #12
 80003c6:	0018      	movs	r0, r3
 80003c8:	f001 fb98 	bl	8001afc <HAL_TIM_PWM_ConfigChannel>
 80003cc:	1e03      	subs	r3, r0, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80003d0:	f000 f912 	bl	80005f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0192      	lsls	r2, r2, #6
 80003f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	0492      	lsls	r2, r2, #18
 8000412:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2200      	movs	r2, #0
 8000424:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000426:	1d3a      	adds	r2, r7, #4
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_TIM1_Init+0x140>)
 800042a:	0011      	movs	r1, r2
 800042c:	0018      	movs	r0, r3
 800042e:	f001 ffed 	bl	800240c <HAL_TIMEx_ConfigBreakDeadTime>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000436:	f000 f8df 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b018      	add	sp, #96	; 0x60
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000028 	.word	0x20000028
 8000448:	40012c00 	.word	0x40012c00
 800044c:	0000ffff 	.word	0x0000ffff

08000450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b089      	sub	sp, #36	; 0x24
 8000454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	240c      	movs	r4, #12
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2314      	movs	r3, #20
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f002 f86f 	bl	8002544 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000466:	4b62      	ldr	r3, [pc, #392]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 8000468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800046a:	4b61      	ldr	r3, [pc, #388]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 800046c:	2104      	movs	r1, #4
 800046e:	430a      	orrs	r2, r1
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
 8000472:	4b5f      	ldr	r3, [pc, #380]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 8000474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000476:	2204      	movs	r2, #4
 8000478:	4013      	ands	r3, r2
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b5c      	ldr	r3, [pc, #368]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 8000480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000482:	4b5b      	ldr	r3, [pc, #364]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
 800048a:	4b59      	ldr	r3, [pc, #356]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b56      	ldr	r3, [pc, #344]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 8000498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049a:	4b55      	ldr	r3, [pc, #340]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 800049c:	2102      	movs	r1, #2
 800049e:	430a      	orrs	r2, r1
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
 80004a2:	4b53      	ldr	r3, [pc, #332]	; (80005f0 <MX_GPIO_Init+0x1a0>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	2202      	movs	r2, #2
 80004a8:	4013      	ands	r3, r2
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80004ae:	23a0      	movs	r3, #160	; 0xa0
 80004b0:	05db      	lsls	r3, r3, #23
 80004b2:	2200      	movs	r2, #0
 80004b4:	213e      	movs	r1, #62	; 0x3e
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fc32 	bl	8000d20 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 80004bc:	4b4d      	ldr	r3, [pc, #308]	; (80005f4 <MX_GPIO_Init+0x1a4>)
 80004be:	2200      	movs	r2, #0
 80004c0:	2102      	movs	r1, #2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fc2c 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	223e      	movs	r2, #62	; 0x3e
 80004cc:	601a      	str	r2, [r3, #0]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2201      	movs	r2, #1
 80004d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	193a      	adds	r2, r7, r4
 80004e2:	23a0      	movs	r3, #160	; 0xa0
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f000 fab5 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	22c0      	movs	r2, #192	; 0xc0
 80004f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2202      	movs	r2, #2
 80004f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	193a      	adds	r2, r7, r4
 800050e:	23a0      	movs	r3, #160	; 0xa0
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fa9f 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2209      	movs	r2, #9
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2202      	movs	r2, #2
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000538:	193b      	adds	r3, r7, r4
 800053a:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <MX_GPIO_Init+0x1a4>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f000 fa8a 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2202      	movs	r2, #2
 8000548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2201      	movs	r2, #1
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 800055c:	193b      	adds	r3, r7, r4
 800055e:	4a25      	ldr	r2, [pc, #148]	; (80005f4 <MX_GPIO_Init+0x1a4>)
 8000560:	0019      	movs	r1, r3
 8000562:	0010      	movs	r0, r2
 8000564:	f000 fa78 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000568:	0021      	movs	r1, r4
 800056a:	187b      	adds	r3, r7, r1
 800056c:	22c0      	movs	r2, #192	; 0xc0
 800056e:	0152      	lsls	r2, r2, #5
 8000570:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000572:	000c      	movs	r4, r1
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2212      	movs	r2, #18
 8000578:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	193b      	adds	r3, r7, r4
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000586:	193b      	adds	r3, r7, r4
 8000588:	2206      	movs	r2, #6
 800058a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	193a      	adds	r2, r7, r4
 800058e:	23a0      	movs	r3, #160	; 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fa5f 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800059a:	193b      	adds	r3, r7, r4
 800059c:	2280      	movs	r2, #128	; 0x80
 800059e:	0212      	lsls	r2, r2, #8
 80005a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	2203      	movs	r2, #3
 80005a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	193a      	adds	r2, r7, r4
 80005b0:	23a0      	movs	r3, #160	; 0xa0
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fa4e 	bl	8000a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005bc:	0021      	movs	r1, r4
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	22c0      	movs	r2, #192	; 0xc0
 80005c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <MX_GPIO_Init+0x1a4>)
 80005e0:	0019      	movs	r1, r3
 80005e2:	0010      	movs	r0, r2
 80005e4:	f000 fa38 	bl	8000a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b009      	add	sp, #36	; 0x24
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	50000400 	.word	0x50000400

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	e7fe      	b.n	8000600 <Error_Handler+0x8>
	...

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x44>)
 800060c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <HAL_MspInit+0x44>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	641a      	str	r2, [r3, #64]	; 0x40
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x44>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_MspInit+0x44>)
 8000624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <HAL_MspInit+0x44>)
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	0549      	lsls	r1, r1, #21
 800062c:	430a      	orrs	r2, r1
 800062e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_MspInit+0x44>)
 8000632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	055b      	lsls	r3, r3, #21
 8000638:	4013      	ands	r3, r2
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b095      	sub	sp, #84	; 0x54
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	233c      	movs	r3, #60	; 0x3c
 8000656:	18fb      	adds	r3, r7, r3
 8000658:	0018      	movs	r0, r3
 800065a:	2314      	movs	r3, #20
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f001 ff70 	bl	8002544 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	2414      	movs	r4, #20
 8000666:	193b      	adds	r3, r7, r4
 8000668:	0018      	movs	r0, r3
 800066a:	2328      	movs	r3, #40	; 0x28
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f001 ff68 	bl	8002544 <memset>
  if(htim_pwm->Instance==TIM1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a23      	ldr	r2, [pc, #140]	; (8000708 <HAL_TIM_PWM_MspInit+0xbc>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d140      	bne.n	8000700 <HAL_TIM_PWM_MspInit+0xb4>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	0392      	lsls	r2, r2, #14
 8000684:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	f001 f862 	bl	8001758 <HAL_RCCEx_PeriphCLKConfig>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <HAL_TIM_PWM_MspInit+0x50>
    {
      Error_Handler();
 8000698:	f7ff ffae 	bl	80005f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <HAL_TIM_PWM_MspInit+0xc0>)
 800069e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <HAL_TIM_PWM_MspInit+0xc0>)
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	0109      	lsls	r1, r1, #4
 80006a6:	430a      	orrs	r2, r1
 80006a8:	641a      	str	r2, [r3, #64]	; 0x40
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <HAL_TIM_PWM_MspInit+0xc0>)
 80006ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ae:	2380      	movs	r3, #128	; 0x80
 80006b0:	011b      	lsls	r3, r3, #4
 80006b2:	4013      	ands	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <HAL_TIM_PWM_MspInit+0xc0>)
 80006ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <HAL_TIM_PWM_MspInit+0xc0>)
 80006be:	2101      	movs	r1, #1
 80006c0:	430a      	orrs	r2, r1
 80006c2:	635a      	str	r2, [r3, #52]	; 0x34
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <HAL_TIM_PWM_MspInit+0xc0>)
 80006c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c8:	2201      	movs	r2, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006d0:	213c      	movs	r1, #60	; 0x3c
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2202      	movs	r2, #2
 80006f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	187a      	adds	r2, r7, r1
 80006f4:	23a0      	movs	r3, #160	; 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	0011      	movs	r1, r2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 f9ac 	bl	8000a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b015      	add	sp, #84	; 0x54
 8000706:	bd90      	pop	{r4, r7, pc}
 8000708:	40012c00 	.word	0x40012c00
 800070c:	40021000 	.word	0x40021000

08000710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <NMI_Handler+0x4>

08000716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <HardFault_Handler+0x4>

0800071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000734:	f000 f89c 	bl	8000870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800074c:	f7ff fff7 	bl	800073e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 8000752:	490d      	ldr	r1, [pc, #52]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000768:	4c0a      	ldr	r4, [pc, #40]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000776:	f001 feed 	bl	8002554 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800077a:	f7ff fd4f 	bl	800021c <main>

0800077e <LoopForever>:

LoopForever:
  b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800078c:	08002650 	.word	0x08002650
  ldr r2, =_sbss
 8000790:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000794:	20000078 	.word	0x20000078

08000798 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_IRQHandler>
	...

0800079c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_Init+0x3c>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_Init+0x3c>)
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	0049      	lsls	r1, r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007b6:	2003      	movs	r0, #3
 80007b8:	f000 f810 	bl	80007dc <HAL_InitTick>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d003      	beq.n	80007c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	e001      	b.n	80007cc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff ff1c 	bl	8000604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
}
 80007d0:	0018      	movs	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007e4:	230f      	movs	r3, #15
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_InitTick+0x88>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d02b      	beq.n	800084c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_InitTick+0x8c>)
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_InitTick+0x88>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	0019      	movs	r1, r3
 80007fe:	23fa      	movs	r3, #250	; 0xfa
 8000800:	0098      	lsls	r0, r3, #2
 8000802:	f7ff fc7f 	bl	8000104 <__udivsi3>
 8000806:	0003      	movs	r3, r0
 8000808:	0019      	movs	r1, r3
 800080a:	0020      	movs	r0, r4
 800080c:	f7ff fc7a 	bl	8000104 <__udivsi3>
 8000810:	0003      	movs	r3, r0
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f913 	bl	8000a3e <HAL_SYSTICK_Config>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d112      	bne.n	8000842 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d80a      	bhi.n	8000838 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	2301      	movs	r3, #1
 8000826:	425b      	negs	r3, r3
 8000828:	2200      	movs	r2, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f000 f8f2 	bl	8000a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_InitTick+0x90>)
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e00d      	b.n	8000854 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000838:	230f      	movs	r3, #15
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
 8000840:	e008      	b.n	8000854 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000842:	230f      	movs	r3, #15
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e003      	b.n	8000854 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800084c:	230f      	movs	r3, #15
 800084e:	18fb      	adds	r3, r7, r3
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000854:	230f      	movs	r3, #15
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	781b      	ldrb	r3, [r3, #0]
}
 800085a:	0018      	movs	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	b005      	add	sp, #20
 8000860:	bd90      	pop	{r4, r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000008 	.word	0x20000008
 8000868:	20000000 	.word	0x20000000
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <HAL_IncTick+0x1c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x20>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	18d2      	adds	r2, r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <HAL_IncTick+0x20>)
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000008 	.word	0x20000008
 8000890:	20000074 	.word	0x20000074

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <HAL_GetTick+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	20000074 	.word	0x20000074

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fff0 	bl	8000894 <HAL_GetTick>
 80008b4:	0003      	movs	r3, r0
 80008b6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_Delay+0x44>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	001a      	movs	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	189b      	adds	r3, r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	f7ff ffe0 	bl	8000894 <HAL_GetTick>
 80008d4:	0002      	movs	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	20000008 	.word	0x20000008

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	0002      	movs	r2, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b7f      	cmp	r3, #127	; 0x7f
 8000904:	d828      	bhi.n	8000958 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <__NVIC_SetPriority+0xd4>)
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b25b      	sxtb	r3, r3
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	33c0      	adds	r3, #192	; 0xc0
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	589b      	ldr	r3, [r3, r2]
 8000916:	1dfa      	adds	r2, r7, #7
 8000918:	7812      	ldrb	r2, [r2, #0]
 800091a:	0011      	movs	r1, r2
 800091c:	2203      	movs	r2, #3
 800091e:	400a      	ands	r2, r1
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	21ff      	movs	r1, #255	; 0xff
 8000924:	4091      	lsls	r1, r2
 8000926:	000a      	movs	r2, r1
 8000928:	43d2      	mvns	r2, r2
 800092a:	401a      	ands	r2, r3
 800092c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	019b      	lsls	r3, r3, #6
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	401a      	ands	r2, r3
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	0018      	movs	r0, r3
 800093c:	2303      	movs	r3, #3
 800093e:	4003      	ands	r3, r0
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <__NVIC_SetPriority+0xd4>)
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b25b      	sxtb	r3, r3
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	430a      	orrs	r2, r1
 8000950:	33c0      	adds	r3, #192	; 0xc0
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000956:	e031      	b.n	80009bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <__NVIC_SetPriority+0xd8>)
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	0019      	movs	r1, r3
 8000960:	230f      	movs	r3, #15
 8000962:	400b      	ands	r3, r1
 8000964:	3b08      	subs	r3, #8
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3306      	adds	r3, #6
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	3304      	adds	r3, #4
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	1dfa      	adds	r2, r7, #7
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	0011      	movs	r1, r2
 8000978:	2203      	movs	r2, #3
 800097a:	400a      	ands	r2, r1
 800097c:	00d2      	lsls	r2, r2, #3
 800097e:	21ff      	movs	r1, #255	; 0xff
 8000980:	4091      	lsls	r1, r2
 8000982:	000a      	movs	r2, r1
 8000984:	43d2      	mvns	r2, r2
 8000986:	401a      	ands	r2, r3
 8000988:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	019b      	lsls	r3, r3, #6
 800098e:	22ff      	movs	r2, #255	; 0xff
 8000990:	401a      	ands	r2, r3
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0018      	movs	r0, r3
 8000998:	2303      	movs	r3, #3
 800099a:	4003      	ands	r3, r0
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <__NVIC_SetPriority+0xd8>)
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	001c      	movs	r4, r3
 80009a8:	230f      	movs	r3, #15
 80009aa:	4023      	ands	r3, r4
 80009ac:	3b08      	subs	r3, #8
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	430a      	orrs	r2, r1
 80009b2:	3306      	adds	r3, #6
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	18c3      	adds	r3, r0, r3
 80009b8:	3304      	adds	r3, #4
 80009ba:	601a      	str	r2, [r3, #0]
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	045b      	lsls	r3, r3, #17
 80009dc:	429a      	cmp	r2, r3
 80009de:	d301      	bcc.n	80009e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e0:	2301      	movs	r3, #1
 80009e2:	e010      	b.n	8000a06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <SysTick_Config+0x44>)
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	3a01      	subs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ec:	2301      	movs	r3, #1
 80009ee:	425b      	negs	r3, r3
 80009f0:	2103      	movs	r1, #3
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff ff7c 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SysTick_Config+0x44>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SysTick_Config+0x44>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	210f      	movs	r1, #15
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	1c02      	adds	r2, r0, #0
 8000a24:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	0011      	movs	r1, r2
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff ff5d 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ffbf 	bl	80009cc <SysTick_Config>
 8000a4e:	0003      	movs	r3, r0
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b002      	add	sp, #8
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	e147      	b.n	8000cf8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	4091      	lsls	r1, r2
 8000a72:	000a      	movs	r2, r1
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d100      	bne.n	8000a80 <HAL_GPIO_Init+0x28>
 8000a7e:	e138      	b.n	8000cf2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2203      	movs	r2, #3
 8000a86:	4013      	ands	r3, r2
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d005      	beq.n	8000a98 <HAL_GPIO_Init+0x40>
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	2203      	movs	r2, #3
 8000a92:	4013      	ands	r3, r2
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d130      	bne.n	8000afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	409a      	lsls	r2, r3
 8000aba:	0013      	movs	r3, r2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2203      	movs	r2, #3
 8000b00:	4013      	ands	r3, r2
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d017      	beq.n	8000b36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	2203      	movs	r2, #3
 8000b12:	409a      	lsls	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d123      	bne.n	8000b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3208      	adds	r2, #8
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	58d3      	ldr	r3, [r2, r3]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	2207      	movs	r2, #7
 8000b54:	4013      	ands	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	220f      	movs	r2, #15
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	691a      	ldr	r2, [r3, #16]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2107      	movs	r1, #7
 8000b6e:	400b      	ands	r3, r1
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	08da      	lsrs	r2, r3, #3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3208      	adds	r2, #8
 8000b84:	0092      	lsls	r2, r2, #2
 8000b86:	6939      	ldr	r1, [r7, #16]
 8000b88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	409a      	lsls	r2, r3
 8000b98:	0013      	movs	r3, r2
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	401a      	ands	r2, r3
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	23c0      	movs	r3, #192	; 0xc0
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <HAL_GPIO_Init+0x174>
 8000bca:	e092      	b.n	8000cf2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000bcc:	4a50      	ldr	r2, [pc, #320]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	3318      	adds	r3, #24
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	589b      	ldr	r3, [r3, r2]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2203      	movs	r2, #3
 8000bde:	4013      	ands	r3, r2
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	220f      	movs	r2, #15
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	43da      	mvns	r2, r3
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d013      	beq.n	8000c22 <HAL_GPIO_Init+0x1ca>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <HAL_GPIO_Init+0x2bc>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d00d      	beq.n	8000c1e <HAL_GPIO_Init+0x1c6>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <HAL_GPIO_Init+0x2c0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d007      	beq.n	8000c1a <HAL_GPIO_Init+0x1c2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <HAL_GPIO_Init+0x2c4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_GPIO_Init+0x1be>
 8000c12:	2303      	movs	r3, #3
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x1cc>
 8000c16:	2305      	movs	r3, #5
 8000c18:	e004      	b.n	8000c24 <HAL_GPIO_Init+0x1cc>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_Init+0x1cc>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x1cc>
 8000c22:	2300      	movs	r3, #0
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	2103      	movs	r1, #3
 8000c28:	400a      	ands	r2, r1
 8000c2a:	00d2      	lsls	r2, r2, #3
 8000c2c:	4093      	lsls	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c34:	4936      	ldr	r1, [pc, #216]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3318      	adds	r3, #24
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	035b      	lsls	r3, r3, #13
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	039b      	lsls	r3, r3, #14
 8000c84:	4013      	ands	r3, r2
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c96:	4a1e      	ldr	r2, [pc, #120]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000c98:	2384      	movs	r3, #132	; 0x84
 8000c9a:	58d3      	ldr	r3, [r2, r3]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43da      	mvns	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cbc:	4914      	ldr	r1, [pc, #80]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	2284      	movs	r2, #132	; 0x84
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	58d3      	ldr	r3, [r2, r3]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	025b      	lsls	r3, r3, #9
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <HAL_GPIO_Init+0x2b8>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	40da      	lsrs	r2, r3
 8000d00:	1e13      	subs	r3, r2, #0
 8000d02:	d000      	beq.n	8000d06 <HAL_GPIO_Init+0x2ae>
 8000d04:	e6b0      	b.n	8000a68 <HAL_GPIO_Init+0x10>
  }
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021800 	.word	0x40021800
 8000d14:	50000400 	.word	0x50000400
 8000d18:	50000800 	.word	0x50000800
 8000d1c:	50000c00 	.word	0x50000c00

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	0008      	movs	r0, r1
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	1c7b      	adds	r3, r7, #1
 8000d34:	1c0a      	adds	r2, r1, #0
 8000d36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	1c7b      	adds	r3, r7, #1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d48:	e003      	b.n	8000d52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4a:	1cbb      	adds	r3, r7, #2
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b084      	sub	sp, #16
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	000a      	movs	r2, r1
 8000d64:	1cbb      	adds	r3, r7, #2
 8000d66:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d6e:	1cbb      	adds	r3, r7, #2
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	041a      	lsls	r2, r3, #16
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	1cb9      	adds	r1, r7, #2
 8000d7e:	8809      	ldrh	r1, [r1, #0]
 8000d80:	400b      	ands	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b004      	add	sp, #16
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d98:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	0019      	movs	r1, r3
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d11f      	bne.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	0013      	movs	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	189b      	adds	r3, r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4912      	ldr	r1, [pc, #72]	; (8000e0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff f99e 	bl	8000104 <__udivsi3>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dce:	e008      	b.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e001      	b.n	8000de2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e009      	b.n	8000df6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000de4:	695a      	ldr	r2, [r3, #20]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	401a      	ands	r2, r3
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d0ed      	beq.n	8000dd0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b004      	add	sp, #16
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	40007000 	.word	0x40007000
 8000e04:	fffff9ff 	.word	0xfffff9ff
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	000f4240 	.word	0x000f4240

08000e10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e2fe      	b.n	8001420 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2201      	movs	r2, #1
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d100      	bne.n	8000e2e <HAL_RCC_OscConfig+0x1e>
 8000e2c:	e07c      	b.n	8000f28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e2e:	4bc3      	ldr	r3, [pc, #780]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2238      	movs	r2, #56	; 0x38
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e38:	4bc0      	ldr	r3, [pc, #768]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2b10      	cmp	r3, #16
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_OscConfig+0x3e>
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d002      	beq.n	8000e54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2b08      	cmp	r3, #8
 8000e52:	d10b      	bne.n	8000e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e54:	4bb9      	ldr	r3, [pc, #740]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	029b      	lsls	r3, r3, #10
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d062      	beq.n	8000f26 <HAL_RCC_OscConfig+0x116>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d15e      	bne.n	8000f26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e2d9      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	025b      	lsls	r3, r3, #9
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d107      	bne.n	8000e88 <HAL_RCC_OscConfig+0x78>
 8000e78:	4bb0      	ldr	r3, [pc, #704]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4baf      	ldr	r3, [pc, #700]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	430a      	orrs	r2, r1
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e020      	b.n	8000eca <HAL_RCC_OscConfig+0xba>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	23a0      	movs	r3, #160	; 0xa0
 8000e8e:	02db      	lsls	r3, r3, #11
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d10e      	bne.n	8000eb2 <HAL_RCC_OscConfig+0xa2>
 8000e94:	4ba9      	ldr	r3, [pc, #676]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4ba8      	ldr	r3, [pc, #672]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	02c9      	lsls	r1, r1, #11
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	4ba6      	ldr	r3, [pc, #664]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4ba5      	ldr	r3, [pc, #660]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0249      	lsls	r1, r1, #9
 8000eac:	430a      	orrs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e00b      	b.n	8000eca <HAL_RCC_OscConfig+0xba>
 8000eb2:	4ba2      	ldr	r3, [pc, #648]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4ba1      	ldr	r3, [pc, #644]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000eb8:	49a1      	ldr	r1, [pc, #644]	; (8001140 <HAL_RCC_OscConfig+0x330>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	4b9f      	ldr	r3, [pc, #636]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b9e      	ldr	r3, [pc, #632]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000ec4:	499f      	ldr	r1, [pc, #636]	; (8001144 <HAL_RCC_OscConfig+0x334>)
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d014      	beq.n	8000efc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed2:	f7ff fcdf 	bl	8000894 <HAL_GetTick>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000edc:	f7ff fcda 	bl	8000894 <HAL_GetTick>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b64      	cmp	r3, #100	; 0x64
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e298      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eee:	4b93      	ldr	r3, [pc, #588]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	029b      	lsls	r3, r3, #10
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0xcc>
 8000efa:	e015      	b.n	8000f28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efc:	f7ff fcca 	bl	8000894 <HAL_GetTick>
 8000f00:	0003      	movs	r3, r0
 8000f02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f06:	f7ff fcc5 	bl	8000894 <HAL_GetTick>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b64      	cmp	r3, #100	; 0x64
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e283      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f18:	4b88      	ldr	r3, [pc, #544]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	029b      	lsls	r3, r3, #10
 8000f20:	4013      	ands	r3, r2
 8000f22:	d1f0      	bne.n	8000f06 <HAL_RCC_OscConfig+0xf6>
 8000f24:	e000      	b.n	8000f28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d100      	bne.n	8000f34 <HAL_RCC_OscConfig+0x124>
 8000f32:	e099      	b.n	8001068 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f34:	4b81      	ldr	r3, [pc, #516]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2238      	movs	r2, #56	; 0x38
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f3e:	4b7f      	ldr	r3, [pc, #508]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2203      	movs	r2, #3
 8000f44:	4013      	ands	r3, r2
 8000f46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d102      	bne.n	8000f54 <HAL_RCC_OscConfig+0x144>
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d002      	beq.n	8000f5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d135      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5a:	4b78      	ldr	r3, [pc, #480]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	d005      	beq.n	8000f72 <HAL_RCC_OscConfig+0x162>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e256      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f72:	4b72      	ldr	r3, [pc, #456]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4a74      	ldr	r2, [pc, #464]	; (8001148 <HAL_RCC_OscConfig+0x338>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	021a      	lsls	r2, r3, #8
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d112      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a6e      	ldr	r2, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x33c>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	0019      	movs	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	4b67      	ldr	r3, [pc, #412]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fa2:	4b66      	ldr	r3, [pc, #408]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0adb      	lsrs	r3, r3, #11
 8000fa8:	2207      	movs	r2, #7
 8000faa:	4013      	ands	r3, r2
 8000fac:	4a68      	ldr	r2, [pc, #416]	; (8001150 <HAL_RCC_OscConfig+0x340>)
 8000fae:	40da      	lsrs	r2, r3
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x344>)
 8000fb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fb4:	4b68      	ldr	r3, [pc, #416]	; (8001158 <HAL_RCC_OscConfig+0x348>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff fc0f 	bl	80007dc <HAL_InitTick>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d051      	beq.n	8001066 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e22c      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d030      	beq.n	8001030 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fce:	4b5b      	ldr	r3, [pc, #364]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <HAL_RCC_OscConfig+0x33c>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	4b57      	ldr	r3, [pc, #348]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b55      	ldr	r3, [pc, #340]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0049      	lsls	r1, r1, #1
 8000fec:	430a      	orrs	r2, r1
 8000fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc50 	bl	8000894 <HAL_GetTick>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fc4b 	bl	8000894 <HAL_GetTick>
 8000ffe:	0002      	movs	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e209      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800100c:	4b4b      	ldr	r3, [pc, #300]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4013      	ands	r3, r2
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001018:	4b48      	ldr	r3, [pc, #288]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <HAL_RCC_OscConfig+0x338>)
 800101e:	4013      	ands	r3, r2
 8001020:	0019      	movs	r1, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	021a      	lsls	r2, r3, #8
 8001028:	4b44      	ldr	r3, [pc, #272]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 800102a:	430a      	orrs	r2, r1
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	e01b      	b.n	8001068 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001030:	4b42      	ldr	r3, [pc, #264]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b41      	ldr	r3, [pc, #260]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8001036:	4949      	ldr	r1, [pc, #292]	; (800115c <HAL_RCC_OscConfig+0x34c>)
 8001038:	400a      	ands	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800103c:	f7ff fc2a 	bl	8000894 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff fc25 	bl	8000894 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e1e3      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4013      	ands	r3, r2
 8001062:	d1f0      	bne.n	8001046 <HAL_RCC_OscConfig+0x236>
 8001064:	e000      	b.n	8001068 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001066:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2208      	movs	r2, #8
 800106e:	4013      	ands	r3, r2
 8001070:	d047      	beq.n	8001102 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001072:	4b32      	ldr	r3, [pc, #200]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2238      	movs	r2, #56	; 0x38
 8001078:	4013      	ands	r3, r2
 800107a:	2b18      	cmp	r3, #24
 800107c:	d10a      	bne.n	8001094 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	2202      	movs	r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	d03c      	beq.n	8001102 <HAL_RCC_OscConfig+0x2f2>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d138      	bne.n	8001102 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e1c5      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d019      	beq.n	80010d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 800109e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff fbf4 	bl	8000894 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fbef 	bl	8000894 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1ad      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d0f1      	beq.n	80010b2 <HAL_RCC_OscConfig+0x2a2>
 80010ce:	e018      	b.n	8001102 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 80010d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	438a      	bics	r2, r1
 80010da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010dc:	f7ff fbda 	bl	8000894 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fbd5 	bl	8000894 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e193      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d1f1      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2204      	movs	r2, #4
 8001108:	4013      	ands	r3, r2
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x2fe>
 800110c:	e0c6      	b.n	800129c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110e:	231f      	movs	r3, #31
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	2238      	movs	r2, #56	; 0x38
 800111c:	4013      	ands	r3, r2
 800111e:	2b20      	cmp	r3, #32
 8001120:	d11e      	bne.n	8001160 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_RCC_OscConfig+0x32c>)
 8001124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001126:	2202      	movs	r2, #2
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x31e>
 800112c:	e0b6      	b.n	800129c <HAL_RCC_OscConfig+0x48c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <HAL_RCC_OscConfig+0x328>
 8001136:	e0b1      	b.n	800129c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e171      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
 800113c:	40021000 	.word	0x40021000
 8001140:	fffeffff 	.word	0xfffeffff
 8001144:	fffbffff 	.word	0xfffbffff
 8001148:	ffff80ff 	.word	0xffff80ff
 800114c:	ffffc7ff 	.word	0xffffc7ff
 8001150:	00f42400 	.word	0x00f42400
 8001154:	20000000 	.word	0x20000000
 8001158:	20000004 	.word	0x20000004
 800115c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001160:	4bb1      	ldr	r3, [pc, #708]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	055b      	lsls	r3, r3, #21
 8001168:	4013      	ands	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_RCC_OscConfig+0x360>
 800116c:	2301      	movs	r3, #1
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x362>
 8001170:	2300      	movs	r3, #0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d011      	beq.n	800119a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	4bac      	ldr	r3, [pc, #688]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800117a:	4bab      	ldr	r3, [pc, #684]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0549      	lsls	r1, r1, #21
 8001180:	430a      	orrs	r2, r1
 8001182:	63da      	str	r2, [r3, #60]	; 0x3c
 8001184:	4ba8      	ldr	r3, [pc, #672]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001192:	231f      	movs	r3, #31
 8001194:	18fb      	adds	r3, r7, r3
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800119a:	4ba4      	ldr	r3, [pc, #656]	; (800142c <HAL_RCC_OscConfig+0x61c>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	d11a      	bne.n	80011dc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a6:	4ba1      	ldr	r3, [pc, #644]	; (800142c <HAL_RCC_OscConfig+0x61c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4ba0      	ldr	r3, [pc, #640]	; (800142c <HAL_RCC_OscConfig+0x61c>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	0049      	lsls	r1, r1, #1
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80011b4:	f7ff fb6e 	bl	8000894 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011be:	f7ff fb69 	bl	8000894 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e127      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d0:	4b96      	ldr	r3, [pc, #600]	; (800142c <HAL_RCC_OscConfig+0x61c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x3e2>
 80011e4:	4b90      	ldr	r3, [pc, #576]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80011e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80011f0:	e01c      	b.n	800122c <HAL_RCC_OscConfig+0x41c>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x404>
 80011fa:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80011fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011fe:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001200:	2104      	movs	r1, #4
 8001202:	430a      	orrs	r2, r1
 8001204:	65da      	str	r2, [r3, #92]	; 0x5c
 8001206:	4b88      	ldr	r3, [pc, #544]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800120a:	4b87      	ldr	r3, [pc, #540]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800120c:	2101      	movs	r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	65da      	str	r2, [r3, #92]	; 0x5c
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0x41c>
 8001214:	4b84      	ldr	r3, [pc, #528]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001218:	4b83      	ldr	r3, [pc, #524]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800121a:	2101      	movs	r1, #1
 800121c:	438a      	bics	r2, r1
 800121e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001220:	4b81      	ldr	r3, [pc, #516]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001224:	4b80      	ldr	r3, [pc, #512]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001226:	2104      	movs	r1, #4
 8001228:	438a      	bics	r2, r1
 800122a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d014      	beq.n	800125e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fb2e 	bl	8000894 <HAL_GetTick>
 8001238:	0003      	movs	r3, r0
 800123a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800123c:	e009      	b.n	8001252 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7ff fb29 	bl	8000894 <HAL_GetTick>
 8001242:	0002      	movs	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	4a79      	ldr	r2, [pc, #484]	; (8001430 <HAL_RCC_OscConfig+0x620>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e0e6      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	4b75      	ldr	r3, [pc, #468]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x42e>
 800125c:	e013      	b.n	8001286 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125e:	f7ff fb19 	bl	8000894 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001266:	e009      	b.n	800127c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001268:	f7ff fb14 	bl	8000894 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x620>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e0d1      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2202      	movs	r2, #2
 8001282:	4013      	ands	r3, r2
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001286:	231f      	movs	r3, #31
 8001288:	18fb      	adds	r3, r7, r3
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001290:	4b65      	ldr	r3, [pc, #404]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001294:	4b64      	ldr	r3, [pc, #400]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001296:	4967      	ldr	r1, [pc, #412]	; (8001434 <HAL_RCC_OscConfig+0x624>)
 8001298:	400a      	ands	r2, r1
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d100      	bne.n	80012a6 <HAL_RCC_OscConfig+0x496>
 80012a4:	e0bb      	b.n	800141e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a6:	4b60      	ldr	r3, [pc, #384]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2238      	movs	r2, #56	; 0x38
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	d100      	bne.n	80012b4 <HAL_RCC_OscConfig+0x4a4>
 80012b2:	e07b      	b.n	80013ac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d156      	bne.n	800136a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012bc:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80012c2:	495d      	ldr	r1, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x628>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fae4 	bl	8000894 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fadf 	bl	8000894 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e09d      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012e4:	4b50      	ldr	r3, [pc, #320]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	049b      	lsls	r3, r3, #18
 80012ec:	4013      	ands	r3, r2
 80012ee:	d1f0      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f0:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_RCC_OscConfig+0x62c>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1a      	ldr	r2, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131c:	431a      	orrs	r2, r3
 800131e:	4b42      	ldr	r3, [pc, #264]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001320:	430a      	orrs	r2, r1
 8001322:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b40      	ldr	r3, [pc, #256]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0449      	lsls	r1, r1, #17
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001332:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0549      	lsls	r1, r1, #21
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff faa8 	bl	8000894 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134a:	f7ff faa3 	bl	8000894 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e061      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135c:	4b32      	ldr	r3, [pc, #200]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	049b      	lsls	r3, r3, #18
 8001364:	4013      	ands	r3, r2
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x53a>
 8001368:	e059      	b.n	800141e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001370:	4931      	ldr	r1, [pc, #196]	; (8001438 <HAL_RCC_OscConfig+0x628>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fa8d 	bl	8000894 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff fa88 	bl	8000894 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e046      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001392:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	049b      	lsls	r3, r3, #18
 800139a:	4013      	ands	r3, r2
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800139e:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80013a4:	4926      	ldr	r1, [pc, #152]	; (8001440 <HAL_RCC_OscConfig+0x630>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	e038      	b.n	800141e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e033      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_RCC_OscConfig+0x618>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	2203      	movs	r2, #3
 80013c2:	401a      	ands	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d126      	bne.n	800141a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	2270      	movs	r2, #112	; 0x70
 80013d0:	401a      	ands	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d11f      	bne.n	800141a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	23fe      	movs	r3, #254	; 0xfe
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d116      	bne.n	800141a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	23f8      	movs	r3, #248	; 0xf8
 80013f0:	039b      	lsls	r3, r3, #14
 80013f2:	401a      	ands	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d10e      	bne.n	800141a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	23e0      	movs	r3, #224	; 0xe0
 8001400:	051b      	lsls	r3, r3, #20
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001408:	429a      	cmp	r2, r3
 800140a:	d106      	bne.n	800141a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	0f5b      	lsrs	r3, r3, #29
 8001410:	075a      	lsls	r2, r3, #29
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	0018      	movs	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	b008      	add	sp, #32
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	40007000 	.word	0x40007000
 8001430:	00001388 	.word	0x00001388
 8001434:	efffffff 	.word	0xefffffff
 8001438:	feffffff 	.word	0xfeffffff
 800143c:	11c1808c 	.word	0x11c1808c
 8001440:	eefefffc 	.word	0xeefefffc

08001444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0e9      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2207      	movs	r2, #7
 800145e:	4013      	ands	r3, r2
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d91e      	bls.n	80014a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b73      	ldr	r3, [pc, #460]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2207      	movs	r2, #7
 800146c:	4393      	bics	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001478:	f7ff fa0c 	bl	8000894 <HAL_GetTick>
 800147c:	0003      	movs	r3, r0
 800147e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001480:	e009      	b.n	8001496 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001482:	f7ff fa07 	bl	8000894 <HAL_GetTick>
 8001486:	0002      	movs	r2, r0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4a6a      	ldr	r2, [pc, #424]	; (8001638 <HAL_RCC_ClockConfig+0x1f4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e0ca      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001496:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2207      	movs	r2, #7
 800149c:	4013      	ands	r3, r2
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1ee      	bne.n	8001482 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2202      	movs	r2, #2
 80014aa:	4013      	ands	r3, r2
 80014ac:	d015      	beq.n	80014da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2204      	movs	r2, #4
 80014b4:	4013      	ands	r3, r2
 80014b6:	d006      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014b8:	4b60      	ldr	r3, [pc, #384]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	4b5f      	ldr	r3, [pc, #380]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80014be:	21e0      	movs	r1, #224	; 0xe0
 80014c0:	01c9      	lsls	r1, r1, #7
 80014c2:	430a      	orrs	r2, r1
 80014c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c6:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	4a5d      	ldr	r2, [pc, #372]	; (8001640 <HAL_RCC_ClockConfig+0x1fc>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	d057      	beq.n	8001594 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d107      	bne.n	80014fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	029b      	lsls	r3, r3, #10
 80014f4:	4013      	ands	r3, r2
 80014f6:	d12b      	bne.n	8001550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e097      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d107      	bne.n	8001514 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001504:	4b4d      	ldr	r3, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	049b      	lsls	r3, r3, #18
 800150c:	4013      	ands	r3, r2
 800150e:	d11f      	bne.n	8001550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e08b      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d107      	bne.n	800152c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151c:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4013      	ands	r3, r2
 8001526:	d113      	bne.n	8001550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e07f      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d106      	bne.n	8001542 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	2202      	movs	r2, #2
 800153a:	4013      	ands	r3, r2
 800153c:	d108      	bne.n	8001550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e074      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001542:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e06d      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001550:	4b3a      	ldr	r3, [pc, #232]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2207      	movs	r2, #7
 8001556:	4393      	bics	r3, r2
 8001558:	0019      	movs	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001564:	f7ff f996 	bl	8000894 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156c:	e009      	b.n	8001582 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156e:	f7ff f991 	bl	8000894 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <HAL_RCC_ClockConfig+0x1f4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e054      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2238      	movs	r2, #56	; 0x38
 8001588:	401a      	ands	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	429a      	cmp	r2, r3
 8001592:	d1ec      	bne.n	800156e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2207      	movs	r2, #7
 800159a:	4013      	ands	r3, r2
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d21e      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2207      	movs	r2, #7
 80015a8:	4393      	bics	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015b4:	f7ff f96e 	bl	8000894 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015bc:	e009      	b.n	80015d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015be:	f7ff f969 	bl	8000894 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4a1b      	ldr	r2, [pc, #108]	; (8001638 <HAL_RCC_ClockConfig+0x1f4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e02c      	b.n	800162c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2207      	movs	r2, #7
 80015d8:	4013      	ands	r3, r2
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2204      	movs	r2, #4
 80015e6:	4013      	ands	r3, r2
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_RCC_ClockConfig+0x200>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015fe:	f000 f829 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001602:	0001      	movs	r1, r0
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_RCC_ClockConfig+0x1f8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	220f      	movs	r2, #15
 800160c:	401a      	ands	r2, r3
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_RCC_ClockConfig+0x204>)
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	58d3      	ldr	r3, [r2, r3]
 8001614:	221f      	movs	r2, #31
 8001616:	4013      	ands	r3, r2
 8001618:	000a      	movs	r2, r1
 800161a:	40da      	lsrs	r2, r3
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_ClockConfig+0x208>)
 800161e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_ClockConfig+0x20c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff f8d9 	bl	80007dc <HAL_InitTick>
 800162a:	0003      	movs	r3, r0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022000 	.word	0x40022000
 8001638:	00001388 	.word	0x00001388
 800163c:	40021000 	.word	0x40021000
 8001640:	fffff0ff 	.word	0xfffff0ff
 8001644:	ffff8fff 	.word	0xffff8fff
 8001648:	080025b4 	.word	0x080025b4
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2238      	movs	r2, #56	; 0x38
 8001660:	4013      	ands	r3, r2
 8001662:	d10f      	bne.n	8001684 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	0adb      	lsrs	r3, r3, #11
 800166a:	2207      	movs	r2, #7
 800166c:	4013      	ands	r3, r2
 800166e:	2201      	movs	r2, #1
 8001670:	409a      	lsls	r2, r3
 8001672:	0013      	movs	r3, r2
 8001674:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001676:	6839      	ldr	r1, [r7, #0]
 8001678:	4835      	ldr	r0, [pc, #212]	; (8001750 <HAL_RCC_GetSysClockFreq+0xfc>)
 800167a:	f7fe fd43 	bl	8000104 <__udivsi3>
 800167e:	0003      	movs	r3, r0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	e05d      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001684:	4b31      	ldr	r3, [pc, #196]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2238      	movs	r2, #56	; 0x38
 800168a:	4013      	ands	r3, r2
 800168c:	2b08      	cmp	r3, #8
 800168e:	d102      	bne.n	8001696 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001690:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_RCC_GetSysClockFreq+0x100>)
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	e054      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2238      	movs	r2, #56	; 0x38
 800169c:	4013      	ands	r3, r2
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d138      	bne.n	8001714 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	2207      	movs	r2, #7
 80016b4:	4013      	ands	r3, r2
 80016b6:	3301      	adds	r3, #1
 80016b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	4824      	ldr	r0, [pc, #144]	; (8001754 <HAL_RCC_GetSysClockFreq+0x100>)
 80016c4:	f7fe fd1e 	bl	8000104 <__udivsi3>
 80016c8:	0003      	movs	r3, r0
 80016ca:	0019      	movs	r1, r3
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	227f      	movs	r2, #127	; 0x7f
 80016d4:	4013      	ands	r3, r2
 80016d6:	434b      	muls	r3, r1
 80016d8:	617b      	str	r3, [r7, #20]
        break;
 80016da:	e00d      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	481c      	ldr	r0, [pc, #112]	; (8001750 <HAL_RCC_GetSysClockFreq+0xfc>)
 80016e0:	f7fe fd10 	bl	8000104 <__udivsi3>
 80016e4:	0003      	movs	r3, r0
 80016e6:	0019      	movs	r1, r3
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	227f      	movs	r2, #127	; 0x7f
 80016f0:	4013      	ands	r3, r2
 80016f2:	434b      	muls	r3, r1
 80016f4:	617b      	str	r3, [r7, #20]
        break;
 80016f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0f5b      	lsrs	r3, r3, #29
 80016fe:	2207      	movs	r2, #7
 8001700:	4013      	ands	r3, r2
 8001702:	3301      	adds	r3, #1
 8001704:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	6978      	ldr	r0, [r7, #20]
 800170a:	f7fe fcfb 	bl	8000104 <__udivsi3>
 800170e:	0003      	movs	r3, r0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	e015      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2238      	movs	r2, #56	; 0x38
 800171a:	4013      	ands	r3, r2
 800171c:	2b20      	cmp	r3, #32
 800171e:	d103      	bne.n	8001728 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_RCC_GetSysClockFreq+0xf8>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2238      	movs	r2, #56	; 0x38
 800172e:	4013      	ands	r3, r2
 8001730:	2b18      	cmp	r3, #24
 8001732:	d103      	bne.n	800173c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001734:	23fa      	movs	r3, #250	; 0xfa
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	e001      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001740:	693b      	ldr	r3, [r7, #16]
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b006      	add	sp, #24
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	40021000 	.word	0x40021000
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001760:	2313      	movs	r3, #19
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001768:	2312      	movs	r3, #18
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	029b      	lsls	r3, r3, #10
 8001778:	4013      	ands	r3, r2
 800177a:	d100      	bne.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800177c:	e0a3      	b.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2011      	movs	r0, #17
 8001780:	183b      	adds	r3, r7, r0
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4ba5      	ldr	r3, [pc, #660]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	055b      	lsls	r3, r3, #21
 800178e:	4013      	ands	r3, r2
 8001790:	d110      	bne.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4ba2      	ldr	r3, [pc, #648]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001796:	4ba1      	ldr	r3, [pc, #644]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	0549      	lsls	r1, r1, #21
 800179c:	430a      	orrs	r2, r1
 800179e:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a0:	4b9e      	ldr	r3, [pc, #632]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80017a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	055b      	lsls	r3, r3, #21
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b4:	4b9a      	ldr	r3, [pc, #616]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b99      	ldr	r3, [pc, #612]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0049      	lsls	r1, r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017c2:	f7ff f867 	bl	8000894 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017ca:	e00b      	b.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017cc:	f7ff f862 	bl	8000894 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d904      	bls.n	80017e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80017da:	2313      	movs	r3, #19
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2203      	movs	r2, #3
 80017e0:	701a      	strb	r2, [r3, #0]
        break;
 80017e2:	e005      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017e4:	4b8e      	ldr	r3, [pc, #568]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0ed      	beq.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80017f0:	2313      	movs	r3, #19
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d154      	bne.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80017fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017fe:	23c0      	movs	r3, #192	; 0xc0
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4013      	ands	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d019      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	429a      	cmp	r2, r3
 8001814:	d014      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001816:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181a:	4a82      	ldr	r2, [pc, #520]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800181c:	4013      	ands	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001820:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001824:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	0249      	lsls	r1, r1, #9
 800182a:	430a      	orrs	r2, r1
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800182e:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001834:	497c      	ldr	r1, [pc, #496]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001836:	400a      	ands	r2, r1
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2201      	movs	r2, #1
 8001844:	4013      	ands	r3, r2
 8001846:	d016      	beq.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff f824 	bl	8000894 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001850:	e00c      	b.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff f81f 	bl	8000894 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a73      	ldr	r2, [pc, #460]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d904      	bls.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001862:	2313      	movs	r3, #19
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2203      	movs	r2, #3
 8001868:	701a      	strb	r2, [r3, #0]
            break;
 800186a:	e004      	b.n	8001876 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d0ed      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001876:	2313      	movs	r3, #19
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001880:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	4a67      	ldr	r2, [pc, #412]	; (8001a24 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001886:	4013      	ands	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001890:	430a      	orrs	r2, r1
 8001892:	65da      	str	r2, [r3, #92]	; 0x5c
 8001894:	e00c      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001896:	2312      	movs	r3, #18
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2213      	movs	r2, #19
 800189c:	18ba      	adds	r2, r7, r2
 800189e:	7812      	ldrb	r2, [r2, #0]
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e005      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018a4:	2312      	movs	r3, #18
 80018a6:	18fb      	adds	r3, r7, r3
 80018a8:	2213      	movs	r2, #19
 80018aa:	18ba      	adds	r2, r7, r2
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b0:	2311      	movs	r3, #17
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d105      	bne.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018c0:	495b      	ldr	r1, [pc, #364]	; (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80018c2:	400a      	ands	r2, r1
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d009      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018d0:	4b52      	ldr	r3, [pc, #328]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	2203      	movs	r2, #3
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4b4f      	ldr	r3, [pc, #316]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018e0:	430a      	orrs	r2, r1
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2210      	movs	r2, #16
 80018ea:	4013      	ands	r3, r2
 80018ec:	d009      	beq.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80018ee:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	4a50      	ldr	r2, [pc, #320]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	0019      	movs	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80018fe:	430a      	orrs	r2, r1
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d009      	beq.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001912:	4a49      	ldr	r2, [pc, #292]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800191e:	430a      	orrs	r2, r1
 8001920:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4013      	ands	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	4a42      	ldr	r2, [pc, #264]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800193e:	430a      	orrs	r2, r1
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2220      	movs	r2, #32
 8001948:	4013      	ands	r3, r2
 800194a:	d009      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800194c:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800194e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001950:	4a3b      	ldr	r2, [pc, #236]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001952:	4013      	ands	r3, r2
 8001954:	0019      	movs	r1, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800195c:	430a      	orrs	r2, r1
 800195e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	01db      	lsls	r3, r3, #7
 8001968:	4013      	ands	r3, r2
 800196a:	d015      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800196e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	0899      	lsrs	r1, r3, #2
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69da      	ldr	r2, [r3, #28]
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800197a:	430a      	orrs	r2, r1
 800197c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	05db      	lsls	r3, r3, #23
 8001986:	429a      	cmp	r2, r3
 8001988:	d106      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	0249      	lsls	r1, r1, #9
 8001994:	430a      	orrs	r2, r1
 8001996:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	039b      	lsls	r3, r3, #14
 80019a0:	4013      	ands	r3, r2
 80019a2:	d016      	beq.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1a      	ldr	r2, [r3, #32]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	03db      	lsls	r3, r3, #15
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d106      	bne.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019ca:	2180      	movs	r1, #128	; 0x80
 80019cc:	0449      	lsls	r1, r1, #17
 80019ce:	430a      	orrs	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4013      	ands	r3, r2
 80019dc:	d016      	beq.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	01db      	lsls	r3, r3, #7
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d106      	bne.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0249      	lsls	r1, r1, #9
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	781b      	ldrb	r3, [r3, #0]
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b006      	add	sp, #24
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40007000 	.word	0x40007000
 8001a24:	fffffcff 	.word	0xfffffcff
 8001a28:	fffeffff 	.word	0xfffeffff
 8001a2c:	00001388 	.word	0x00001388
 8001a30:	efffffff 	.word	0xefffffff
 8001a34:	fffff3ff 	.word	0xfffff3ff
 8001a38:	fff3ffff 	.word	0xfff3ffff
 8001a3c:	ffcfffff 	.word	0xffcfffff
 8001a40:	ffffcfff 	.word	0xffffcfff
 8001a44:	ffbfffff 	.word	0xffbfffff
 8001a48:	ffff3fff 	.word	0xffff3fff

08001a4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e04a      	b.n	8001af4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	223d      	movs	r2, #61	; 0x3d
 8001a62:	5c9b      	ldrb	r3, [r3, r2]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d107      	bne.n	8001a7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	223c      	movs	r2, #60	; 0x3c
 8001a6e:	2100      	movs	r1, #0
 8001a70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7fe fde9 	bl	800064c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	223d      	movs	r2, #61	; 0x3d
 8001a7e:	2102      	movs	r1, #2
 8001a80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	f000 f935 	bl	8001cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2248      	movs	r2, #72	; 0x48
 8001a96:	2101      	movs	r1, #1
 8001a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	223e      	movs	r2, #62	; 0x3e
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	5499      	strb	r1, [r3, r2]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	5499      	strb	r1, [r3, r2]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2240      	movs	r2, #64	; 0x40
 8001aae:	2101      	movs	r1, #1
 8001ab0:	5499      	strb	r1, [r3, r2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2241      	movs	r2, #65	; 0x41
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	5499      	strb	r1, [r3, r2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2242      	movs	r2, #66	; 0x42
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2243      	movs	r2, #67	; 0x43
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2244      	movs	r2, #68	; 0x44
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2245      	movs	r2, #69	; 0x45
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2246      	movs	r2, #70	; 0x46
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2247      	movs	r2, #71	; 0x47
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	223d      	movs	r2, #61	; 0x3d
 8001aee:	2101      	movs	r1, #1
 8001af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2317      	movs	r3, #23
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	223c      	movs	r2, #60	; 0x3c
 8001b14:	5c9b      	ldrb	r3, [r3, r2]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_TIM_PWM_ConfigChannel+0x22>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e0e5      	b.n	8001cea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	223c      	movs	r2, #60	; 0x3c
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b14      	cmp	r3, #20
 8001b2a:	d900      	bls.n	8001b2e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001b2c:	e0d1      	b.n	8001cd2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	009a      	lsls	r2, r3, #2
 8001b32:	4b70      	ldr	r3, [pc, #448]	; (8001cf4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	0011      	movs	r1, r2
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 f95e 	bl	8001e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2108      	movs	r1, #8
 8001b54:	430a      	orrs	r2, r1
 8001b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2104      	movs	r1, #4
 8001b64:	438a      	bics	r2, r1
 8001b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6999      	ldr	r1, [r3, #24]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	619a      	str	r2, [r3, #24]
      break;
 8001b7a:	e0af      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	0011      	movs	r1, r2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 f9bd 	bl	8001f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699a      	ldr	r2, [r3, #24]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	0109      	lsls	r1, r1, #4
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4954      	ldr	r1, [pc, #336]	; (8001cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001ba8:	400a      	ands	r2, r1
 8001baa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6999      	ldr	r1, [r3, #24]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	021a      	lsls	r2, r3, #8
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	619a      	str	r2, [r3, #24]
      break;
 8001bc0:	e08c      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	0011      	movs	r1, r2
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f000 fa18 	bl	8002000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2108      	movs	r1, #8
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2104      	movs	r1, #4
 8001bec:	438a      	bics	r2, r1
 8001bee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69d9      	ldr	r1, [r3, #28]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	61da      	str	r2, [r3, #28]
      break;
 8001c02:	e06b      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	0011      	movs	r1, r2
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fa79 	bl	8002104 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2180      	movs	r1, #128	; 0x80
 8001c1e:	0109      	lsls	r1, r1, #4
 8001c20:	430a      	orrs	r2, r1
 8001c22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4932      	ldr	r1, [pc, #200]	; (8001cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69d9      	ldr	r1, [r3, #28]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	021a      	lsls	r2, r3, #8
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	61da      	str	r2, [r3, #28]
      break;
 8001c48:	e048      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	0011      	movs	r1, r2
 8001c52:	0018      	movs	r0, r3
 8001c54:	f000 faba 	bl	80021cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2108      	movs	r1, #8
 8001c64:	430a      	orrs	r2, r1
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2104      	movs	r1, #4
 8001c74:	438a      	bics	r2, r1
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001c8a:	e027      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	0011      	movs	r1, r2
 8001c94:	0018      	movs	r0, r3
 8001c96:	f000 faf3 	bl	8002280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0109      	lsls	r1, r1, #4
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4910      	ldr	r1, [pc, #64]	; (8001cf8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	021a      	lsls	r2, r3, #8
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001cd0:	e004      	b.n	8001cdc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001cd2:	2317      	movs	r3, #23
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	223c      	movs	r2, #60	; 0x3c
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	5499      	strb	r1, [r3, r2]

  return status;
 8001ce4:	2317      	movs	r3, #23
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	781b      	ldrb	r3, [r3, #0]
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b006      	add	sp, #24
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	080025f4 	.word	0x080025f4
 8001cf8:	fffffbff 	.word	0xfffffbff

08001cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a37      	ldr	r2, [pc, #220]	; (8001dec <TIM_Base_SetConfig+0xf0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d008      	beq.n	8001d26 <TIM_Base_SetConfig+0x2a>
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d003      	beq.n	8001d26 <TIM_Base_SetConfig+0x2a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a33      	ldr	r2, [pc, #204]	; (8001df0 <TIM_Base_SetConfig+0xf4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d108      	bne.n	8001d38 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2270      	movs	r2, #112	; 0x70
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <TIM_Base_SetConfig+0xf0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d014      	beq.n	8001d6a <TIM_Base_SetConfig+0x6e>
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d00f      	beq.n	8001d6a <TIM_Base_SetConfig+0x6e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <TIM_Base_SetConfig+0xf4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00b      	beq.n	8001d6a <TIM_Base_SetConfig+0x6e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <TIM_Base_SetConfig+0xf8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <TIM_Base_SetConfig+0x6e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a26      	ldr	r2, [pc, #152]	; (8001df8 <TIM_Base_SetConfig+0xfc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d003      	beq.n	8001d6a <TIM_Base_SetConfig+0x6e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a25      	ldr	r2, [pc, #148]	; (8001dfc <TIM_Base_SetConfig+0x100>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d108      	bne.n	8001d7c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <TIM_Base_SetConfig+0x104>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	4393      	bics	r3, r2
 8001d82:	001a      	movs	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <TIM_Base_SetConfig+0xf0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <TIM_Base_SetConfig+0xbe>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <TIM_Base_SetConfig+0xfc>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d003      	beq.n	8001dba <TIM_Base_SetConfig+0xbe>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <TIM_Base_SetConfig+0x100>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d103      	bne.n	8001dc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4393      	bics	r3, r2
 8001ddc:	001a      	movs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]
  }
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b004      	add	sp, #16
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40012c00 	.word	0x40012c00
 8001df0:	40000400 	.word	0x40000400
 8001df4:	40002000 	.word	0x40002000
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	40014800 	.word	0x40014800
 8001e00:	fffffcff 	.word	0xfffffcff

08001e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <TIM_OC1_SetConfig+0xe8>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <TIM_OC1_SetConfig+0xec>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <TIM_OC1_SetConfig+0x6e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a23      	ldr	r2, [pc, #140]	; (8001ef4 <TIM_OC1_SetConfig+0xf0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <TIM_OC1_SetConfig+0x6e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <TIM_OC1_SetConfig+0xf4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10c      	bne.n	8001e8c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2208      	movs	r2, #8
 8001e76:	4393      	bics	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2204      	movs	r2, #4
 8001e88:	4393      	bics	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <TIM_OC1_SetConfig+0xec>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <TIM_OC1_SetConfig+0xa0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <TIM_OC1_SetConfig+0xf0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d003      	beq.n	8001ea4 <TIM_OC1_SetConfig+0xa0>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <TIM_OC1_SetConfig+0xf4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d111      	bne.n	8001ec8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4a15      	ldr	r2, [pc, #84]	; (8001efc <TIM_OC1_SetConfig+0xf8>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <TIM_OC1_SetConfig+0xfc>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	621a      	str	r2, [r3, #32]
}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	fffeff8f 	.word	0xfffeff8f
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40014400 	.word	0x40014400
 8001ef8:	40014800 	.word	0x40014800
 8001efc:	fffffeff 	.word	0xfffffeff
 8001f00:	fffffdff 	.word	0xfffffdff

08001f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	2210      	movs	r2, #16
 8001f1a:	4393      	bics	r3, r2
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <TIM_OC2_SetConfig+0xe0>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <TIM_OC2_SetConfig+0xe4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	4393      	bics	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <TIM_OC2_SetConfig+0xe8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d10d      	bne.n	8001f82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2280      	movs	r2, #128	; 0x80
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	4393      	bics	r3, r2
 8001f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <TIM_OC2_SetConfig+0xe8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_OC2_SetConfig+0x96>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <TIM_OC2_SetConfig+0xec>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_OC2_SetConfig+0x96>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <TIM_OC2_SetConfig+0xf0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d113      	bne.n	8001fc2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4a16      	ldr	r2, [pc, #88]	; (8001ff8 <TIM_OC2_SetConfig+0xf4>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <TIM_OC2_SetConfig+0xf8>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	621a      	str	r2, [r3, #32]
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	feff8fff 	.word	0xfeff8fff
 8001fe8:	fffffcff 	.word	0xfffffcff
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40014400 	.word	0x40014400
 8001ff4:	40014800 	.word	0x40014800
 8001ff8:	fffffbff 	.word	0xfffffbff
 8001ffc:	fffff7ff 	.word	0xfffff7ff

08002000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4a31      	ldr	r2, [pc, #196]	; (80020dc <TIM_OC3_SetConfig+0xdc>)
 8002016:	401a      	ands	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a2d      	ldr	r2, [pc, #180]	; (80020e0 <TIM_OC3_SetConfig+0xe0>)
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2203      	movs	r2, #3
 8002034:	4393      	bics	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <TIM_OC3_SetConfig+0xe4>)
 8002046:	4013      	ands	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <TIM_OC3_SetConfig+0xe8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10d      	bne.n	800207a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4a22      	ldr	r2, [pc, #136]	; (80020ec <TIM_OC3_SetConfig+0xec>)
 8002062:	4013      	ands	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <TIM_OC3_SetConfig+0xf0>)
 8002076:	4013      	ands	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a1a      	ldr	r2, [pc, #104]	; (80020e8 <TIM_OC3_SetConfig+0xe8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <TIM_OC3_SetConfig+0x92>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <TIM_OC3_SetConfig+0xf4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d003      	beq.n	8002092 <TIM_OC3_SetConfig+0x92>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <TIM_OC3_SetConfig+0xf8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d113      	bne.n	80020ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <TIM_OC3_SetConfig+0xfc>)
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4a18      	ldr	r2, [pc, #96]	; (8002100 <TIM_OC3_SetConfig+0x100>)
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	011b      	lsls	r3, r3, #4
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	621a      	str	r2, [r3, #32]
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b006      	add	sp, #24
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	fffffeff 	.word	0xfffffeff
 80020e0:	fffeff8f 	.word	0xfffeff8f
 80020e4:	fffffdff 	.word	0xfffffdff
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	fffff7ff 	.word	0xfffff7ff
 80020f0:	fffffbff 	.word	0xfffffbff
 80020f4:	40014400 	.word	0x40014400
 80020f8:	40014800 	.word	0x40014800
 80020fc:	ffffefff 	.word	0xffffefff
 8002100:	ffffdfff 	.word	0xffffdfff

08002104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a24      	ldr	r2, [pc, #144]	; (80021ac <TIM_OC4_SetConfig+0xa8>)
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <TIM_OC4_SetConfig+0xac>)
 8002130:	4013      	ands	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <TIM_OC4_SetConfig+0xb0>)
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <TIM_OC4_SetConfig+0xb4>)
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	031b      	lsls	r3, r3, #12
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <TIM_OC4_SetConfig+0xb8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_OC4_SetConfig+0x70>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <TIM_OC4_SetConfig+0xbc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_OC4_SetConfig+0x70>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <TIM_OC4_SetConfig+0xc0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d109      	bne.n	8002188 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4a14      	ldr	r2, [pc, #80]	; (80021c8 <TIM_OC4_SetConfig+0xc4>)
 8002178:	4013      	ands	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b006      	add	sp, #24
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	ffffefff 	.word	0xffffefff
 80021b0:	feff8fff 	.word	0xfeff8fff
 80021b4:	fffffcff 	.word	0xfffffcff
 80021b8:	ffffdfff 	.word	0xffffdfff
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800
 80021c8:	ffffbfff 	.word	0xffffbfff

080021cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a21      	ldr	r2, [pc, #132]	; (8002268 <TIM_OC5_SetConfig+0x9c>)
 80021e2:	401a      	ands	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a1d      	ldr	r2, [pc, #116]	; (800226c <TIM_OC5_SetConfig+0xa0>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <TIM_OC5_SetConfig+0xa4>)
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <TIM_OC5_SetConfig+0xa8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <TIM_OC5_SetConfig+0x66>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <TIM_OC5_SetConfig+0xac>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d003      	beq.n	8002232 <TIM_OC5_SetConfig+0x66>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a13      	ldr	r2, [pc, #76]	; (800227c <TIM_OC5_SetConfig+0xb0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d109      	bne.n	8002246 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <TIM_OC5_SetConfig+0x9c>)
 8002236:	4013      	ands	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	4313      	orrs	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	621a      	str	r2, [r3, #32]
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b006      	add	sp, #24
 8002266:	bd80      	pop	{r7, pc}
 8002268:	fffeffff 	.word	0xfffeffff
 800226c:	fffeff8f 	.word	0xfffeff8f
 8002270:	fffdffff 	.word	0xfffdffff
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40014400 	.word	0x40014400
 800227c:	40014800 	.word	0x40014800

08002280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <TIM_OC6_SetConfig+0xa0>)
 8002296:	401a      	ands	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <TIM_OC6_SetConfig+0xa4>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <TIM_OC6_SetConfig+0xa8>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	051b      	lsls	r3, r3, #20
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <TIM_OC6_SetConfig+0xac>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <TIM_OC6_SetConfig+0x68>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <TIM_OC6_SetConfig+0xb0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_OC6_SetConfig+0x68>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <TIM_OC6_SetConfig+0xb4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d109      	bne.n	80022fc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <TIM_OC6_SetConfig+0xb8>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b006      	add	sp, #24
 800231c:	bd80      	pop	{r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	ffefffff 	.word	0xffefffff
 8002324:	feff8fff 	.word	0xfeff8fff
 8002328:	ffdfffff 	.word	0xffdfffff
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800
 8002338:	fffbffff 	.word	0xfffbffff

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	223c      	movs	r2, #60	; 0x3c
 800234a:	5c9b      	ldrb	r3, [r3, r2]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e050      	b.n	80023f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	223c      	movs	r2, #60	; 0x3c
 8002358:	2101      	movs	r1, #1
 800235a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	223d      	movs	r2, #61	; 0x3d
 8002360:	2102      	movs	r1, #2
 8002362:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d108      	bne.n	8002390 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4a20      	ldr	r2, [pc, #128]	; (8002404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2270      	movs	r2, #112	; 0x70
 8002394:	4393      	bics	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a14      	ldr	r2, [pc, #80]	; (8002400 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00a      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	05db      	lsls	r3, r3, #23
 80023bc:	429a      	cmp	r2, r3
 80023be:	d004      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10c      	bne.n	80023e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	4393      	bics	r3, r2
 80023d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	223d      	movs	r2, #61	; 0x3d
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	223c      	movs	r2, #60	; 0x3c
 80023f0:	2100      	movs	r1, #0
 80023f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			; (mov r8, r8)
 8002400:	40012c00 	.word	0x40012c00
 8002404:	ff0fffff 	.word	0xff0fffff
 8002408:	40000400 	.word	0x40000400

0800240c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223c      	movs	r2, #60	; 0x3c
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e06f      	b.n	8002508 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	223c      	movs	r2, #60	; 0x3c
 800242c:	2101      	movs	r1, #1
 800242e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	4393      	bics	r3, r2
 8002436:	001a      	movs	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a33      	ldr	r2, [pc, #204]	; (8002510 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8002444:	401a      	ands	r2, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4a30      	ldr	r2, [pc, #192]	; (8002514 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8002452:	401a      	ands	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a2e      	ldr	r2, [pc, #184]	; (8002518 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8002460:	401a      	ands	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a2b      	ldr	r2, [pc, #172]	; (800251c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800246e:	401a      	ands	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a29      	ldr	r2, [pc, #164]	; (8002520 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800247c:	401a      	ands	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800248a:	401a      	ands	r2, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8002498:	401a      	ands	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	041b      	lsls	r3, r3, #16
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a21      	ldr	r2, [pc, #132]	; (800252c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80024a8:	401a      	ands	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d11c      	bne.n	80024f6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80024c0:	401a      	ands	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	051b      	lsls	r3, r3, #20
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a1a      	ldr	r2, [pc, #104]	; (8002538 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80024d0:	401a      	ands	r2, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80024de:	401a      	ands	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a15      	ldr	r2, [pc, #84]	; (8002540 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80024ec:	401a      	ands	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	223c      	movs	r2, #60	; 0x3c
 8002502:	2100      	movs	r1, #0
 8002504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	0018      	movs	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	b004      	add	sp, #16
 800250e:	bd80      	pop	{r7, pc}
 8002510:	fffffcff 	.word	0xfffffcff
 8002514:	fffffbff 	.word	0xfffffbff
 8002518:	fffff7ff 	.word	0xfffff7ff
 800251c:	ffffefff 	.word	0xffffefff
 8002520:	ffffdfff 	.word	0xffffdfff
 8002524:	ffffbfff 	.word	0xffffbfff
 8002528:	fff0ffff 	.word	0xfff0ffff
 800252c:	efffffff 	.word	0xefffffff
 8002530:	40012c00 	.word	0x40012c00
 8002534:	ff0fffff 	.word	0xff0fffff
 8002538:	feffffff 	.word	0xfeffffff
 800253c:	fdffffff 	.word	0xfdffffff
 8002540:	dfffffff 	.word	0xdfffffff

08002544 <memset>:
 8002544:	0003      	movs	r3, r0
 8002546:	1882      	adds	r2, r0, r2
 8002548:	4293      	cmp	r3, r2
 800254a:	d100      	bne.n	800254e <memset+0xa>
 800254c:	4770      	bx	lr
 800254e:	7019      	strb	r1, [r3, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	e7f9      	b.n	8002548 <memset+0x4>

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4c0c      	ldr	r4, [pc, #48]	; (800258c <__libc_init_array+0x38>)
 800255a:	4d0d      	ldr	r5, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	2600      	movs	r6, #0
 8002566:	f000 f819 	bl	800259c <_init>
 800256a:	4c0a      	ldr	r4, [pc, #40]	; (8002594 <__libc_init_array+0x40>)
 800256c:	4d0a      	ldr	r5, [pc, #40]	; (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	00b3      	lsls	r3, r6, #2
 800257a:	58eb      	ldr	r3, [r5, r3]
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	00b3      	lsls	r3, r6, #2
 8002584:	58eb      	ldr	r3, [r5, r3]
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	08002648 	.word	0x08002648
 8002590:	08002648 	.word	0x08002648
 8002594:	0800264c 	.word	0x0800264c
 8002598:	08002648 	.word	0x08002648

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
