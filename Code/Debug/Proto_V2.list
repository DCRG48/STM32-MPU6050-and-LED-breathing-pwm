
Proto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006888  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08006a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08006a7c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001420a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d1  00000000  00000000  00034281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00036c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000deb  00000000  00000000  00037de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003019  00000000  00000000  00038bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166d5  00000000  00000000  0003bbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096214  00000000  00000000  000522c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004210  00000000  00000000  000e84d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ec6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800692c 	.word	0x0800692c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800692c 	.word	0x0800692c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f001 fb4d 	bl	8001ad8 <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f001 faad 	bl	80019a4 <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 ff24 	bl	80012a0 <__aeabi_dsub>
 8000458:	f001 faa4 	bl	80019a4 <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f001 fb4c 	bl	8001b28 <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f001 fb47 	bl	8001b28 <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	d434      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a2:	469b      	mov	fp, r3
 80004a4:	4653      	mov	r3, sl
 80004a6:	465a      	mov	r2, fp
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83b      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e079      	b.n	80005b2 <__udivmoddi4+0x146>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e076      	b.n	80005b8 <__udivmoddi4+0x14c>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e029      	b.n	8000538 <__udivmoddi4+0xcc>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	469b      	mov	fp, r3
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	4652      	mov	r2, sl
 8000516:	40da      	lsrs	r2, r3
 8000518:	4641      	mov	r1, r8
 800051a:	0013      	movs	r3, r2
 800051c:	464a      	mov	r2, r9
 800051e:	408a      	lsls	r2, r1
 8000520:	0017      	movs	r7, r2
 8000522:	4642      	mov	r2, r8
 8000524:	431f      	orrs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d9c3      	bls.n	80004b8 <__udivmoddi4+0x4c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4643      	mov	r3, r8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0d8      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053e:	07fb      	lsls	r3, r7, #31
 8000540:	0872      	lsrs	r2, r6, #1
 8000542:	431a      	orrs	r2, r3
 8000544:	4646      	mov	r6, r8
 8000546:	087b      	lsrs	r3, r7, #1
 8000548:	e00e      	b.n	8000568 <__udivmoddi4+0xfc>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d101      	bne.n	8000552 <__udivmoddi4+0xe6>
 800054e:	42a2      	cmp	r2, r4
 8000550:	d80c      	bhi.n	800056c <__udivmoddi4+0x100>
 8000552:	1aa4      	subs	r4, r4, r2
 8000554:	419d      	sbcs	r5, r3
 8000556:	2001      	movs	r0, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2100      	movs	r1, #0
 800055e:	3e01      	subs	r6, #1
 8000560:	1824      	adds	r4, r4, r0
 8000562:	414d      	adcs	r5, r1
 8000564:	2e00      	cmp	r6, #0
 8000566:	d006      	beq.n	8000576 <__udivmoddi4+0x10a>
 8000568:	42ab      	cmp	r3, r5
 800056a:	d9ee      	bls.n	800054a <__udivmoddi4+0xde>
 800056c:	3e01      	subs	r6, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1f8      	bne.n	8000568 <__udivmoddi4+0xfc>
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	465b      	mov	r3, fp
 800057c:	1900      	adds	r0, r0, r4
 800057e:	4169      	adcs	r1, r5
 8000580:	2b00      	cmp	r3, #0
 8000582:	db24      	blt.n	80005ce <__udivmoddi4+0x162>
 8000584:	002b      	movs	r3, r5
 8000586:	465a      	mov	r2, fp
 8000588:	4644      	mov	r4, r8
 800058a:	40d3      	lsrs	r3, r2
 800058c:	002a      	movs	r2, r5
 800058e:	40e2      	lsrs	r2, r4
 8000590:	001c      	movs	r4, r3
 8000592:	465b      	mov	r3, fp
 8000594:	0015      	movs	r5, r2
 8000596:	2b00      	cmp	r3, #0
 8000598:	db2a      	blt.n	80005f0 <__udivmoddi4+0x184>
 800059a:	0026      	movs	r6, r4
 800059c:	409e      	lsls	r6, r3
 800059e:	0033      	movs	r3, r6
 80005a0:	0026      	movs	r6, r4
 80005a2:	4647      	mov	r7, r8
 80005a4:	40be      	lsls	r6, r7
 80005a6:	0032      	movs	r2, r6
 80005a8:	1a80      	subs	r0, r0, r2
 80005aa:	4199      	sbcs	r1, r3
 80005ac:	9000      	str	r0, [sp, #0]
 80005ae:	9101      	str	r1, [sp, #4]
 80005b0:	e79e      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	d8bc      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80005b6:	e782      	b.n	80004be <__udivmoddi4+0x52>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	9100      	str	r1, [sp, #0]
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	e785      	b.n	80004da <__udivmoddi4+0x6e>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	4646      	mov	r6, r8
 80005d8:	409a      	lsls	r2, r3
 80005da:	0023      	movs	r3, r4
 80005dc:	40f3      	lsrs	r3, r6
 80005de:	4644      	mov	r4, r8
 80005e0:	4313      	orrs	r3, r2
 80005e2:	002a      	movs	r2, r5
 80005e4:	40e2      	lsrs	r2, r4
 80005e6:	001c      	movs	r4, r3
 80005e8:	465b      	mov	r3, fp
 80005ea:	0015      	movs	r5, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dad4      	bge.n	800059a <__udivmoddi4+0x12e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	002f      	movs	r7, r5
 80005f4:	2320      	movs	r3, #32
 80005f6:	0026      	movs	r6, r4
 80005f8:	4097      	lsls	r7, r2
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	40de      	lsrs	r6, r3
 80005fe:	003b      	movs	r3, r7
 8000600:	4333      	orrs	r3, r6
 8000602:	e7cd      	b.n	80005a0 <__udivmoddi4+0x134>

08000604 <__aeabi_dadd>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	464f      	mov	r7, r9
 8000608:	4646      	mov	r6, r8
 800060a:	46d6      	mov	lr, sl
 800060c:	0004      	movs	r4, r0
 800060e:	b5c0      	push	{r6, r7, lr}
 8000610:	001f      	movs	r7, r3
 8000612:	030b      	lsls	r3, r1, #12
 8000614:	0010      	movs	r0, r2
 8000616:	004e      	lsls	r6, r1, #1
 8000618:	0a5b      	lsrs	r3, r3, #9
 800061a:	0fcd      	lsrs	r5, r1, #31
 800061c:	0f61      	lsrs	r1, r4, #29
 800061e:	007a      	lsls	r2, r7, #1
 8000620:	4319      	orrs	r1, r3
 8000622:	00e3      	lsls	r3, r4, #3
 8000624:	033c      	lsls	r4, r7, #12
 8000626:	0fff      	lsrs	r7, r7, #31
 8000628:	46bc      	mov	ip, r7
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	0f47      	lsrs	r7, r0, #29
 800062e:	4327      	orrs	r7, r4
 8000630:	0d76      	lsrs	r6, r6, #21
 8000632:	0d52      	lsrs	r2, r2, #21
 8000634:	00c0      	lsls	r0, r0, #3
 8000636:	46b9      	mov	r9, r7
 8000638:	4680      	mov	r8, r0
 800063a:	1ab7      	subs	r7, r6, r2
 800063c:	4565      	cmp	r5, ip
 800063e:	d100      	bne.n	8000642 <__aeabi_dadd+0x3e>
 8000640:	e09b      	b.n	800077a <__aeabi_dadd+0x176>
 8000642:	2f00      	cmp	r7, #0
 8000644:	dc00      	bgt.n	8000648 <__aeabi_dadd+0x44>
 8000646:	e084      	b.n	8000752 <__aeabi_dadd+0x14e>
 8000648:	2a00      	cmp	r2, #0
 800064a:	d100      	bne.n	800064e <__aeabi_dadd+0x4a>
 800064c:	e0be      	b.n	80007cc <__aeabi_dadd+0x1c8>
 800064e:	4ac8      	ldr	r2, [pc, #800]	; (8000970 <__aeabi_dadd+0x36c>)
 8000650:	4296      	cmp	r6, r2
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x52>
 8000654:	e124      	b.n	80008a0 <__aeabi_dadd+0x29c>
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	464c      	mov	r4, r9
 800065a:	0412      	lsls	r2, r2, #16
 800065c:	4314      	orrs	r4, r2
 800065e:	46a1      	mov	r9, r4
 8000660:	2f38      	cmp	r7, #56	; 0x38
 8000662:	dd00      	ble.n	8000666 <__aeabi_dadd+0x62>
 8000664:	e167      	b.n	8000936 <__aeabi_dadd+0x332>
 8000666:	2f1f      	cmp	r7, #31
 8000668:	dd00      	ble.n	800066c <__aeabi_dadd+0x68>
 800066a:	e1d6      	b.n	8000a1a <__aeabi_dadd+0x416>
 800066c:	2220      	movs	r2, #32
 800066e:	464c      	mov	r4, r9
 8000670:	1bd2      	subs	r2, r2, r7
 8000672:	4094      	lsls	r4, r2
 8000674:	46a2      	mov	sl, r4
 8000676:	4644      	mov	r4, r8
 8000678:	40fc      	lsrs	r4, r7
 800067a:	0020      	movs	r0, r4
 800067c:	4654      	mov	r4, sl
 800067e:	4304      	orrs	r4, r0
 8000680:	4640      	mov	r0, r8
 8000682:	4090      	lsls	r0, r2
 8000684:	1e42      	subs	r2, r0, #1
 8000686:	4190      	sbcs	r0, r2
 8000688:	464a      	mov	r2, r9
 800068a:	40fa      	lsrs	r2, r7
 800068c:	4304      	orrs	r4, r0
 800068e:	1a89      	subs	r1, r1, r2
 8000690:	1b1c      	subs	r4, r3, r4
 8000692:	42a3      	cmp	r3, r4
 8000694:	4192      	sbcs	r2, r2
 8000696:	4252      	negs	r2, r2
 8000698:	1a8b      	subs	r3, r1, r2
 800069a:	469a      	mov	sl, r3
 800069c:	4653      	mov	r3, sl
 800069e:	021b      	lsls	r3, r3, #8
 80006a0:	d400      	bmi.n	80006a4 <__aeabi_dadd+0xa0>
 80006a2:	e0d4      	b.n	800084e <__aeabi_dadd+0x24a>
 80006a4:	4653      	mov	r3, sl
 80006a6:	025a      	lsls	r2, r3, #9
 80006a8:	0a53      	lsrs	r3, r2, #9
 80006aa:	469a      	mov	sl, r3
 80006ac:	4653      	mov	r3, sl
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d100      	bne.n	80006b4 <__aeabi_dadd+0xb0>
 80006b2:	e104      	b.n	80008be <__aeabi_dadd+0x2ba>
 80006b4:	4650      	mov	r0, sl
 80006b6:	f001 fa19 	bl	8001aec <__clzsi2>
 80006ba:	0003      	movs	r3, r0
 80006bc:	3b08      	subs	r3, #8
 80006be:	2220      	movs	r2, #32
 80006c0:	0020      	movs	r0, r4
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	4651      	mov	r1, sl
 80006c6:	40d0      	lsrs	r0, r2
 80006c8:	4099      	lsls	r1, r3
 80006ca:	0002      	movs	r2, r0
 80006cc:	409c      	lsls	r4, r3
 80006ce:	430a      	orrs	r2, r1
 80006d0:	42b3      	cmp	r3, r6
 80006d2:	da00      	bge.n	80006d6 <__aeabi_dadd+0xd2>
 80006d4:	e102      	b.n	80008dc <__aeabi_dadd+0x2d8>
 80006d6:	1b9b      	subs	r3, r3, r6
 80006d8:	1c59      	adds	r1, r3, #1
 80006da:	291f      	cmp	r1, #31
 80006dc:	dd00      	ble.n	80006e0 <__aeabi_dadd+0xdc>
 80006de:	e0a7      	b.n	8000830 <__aeabi_dadd+0x22c>
 80006e0:	2320      	movs	r3, #32
 80006e2:	0010      	movs	r0, r2
 80006e4:	0026      	movs	r6, r4
 80006e6:	1a5b      	subs	r3, r3, r1
 80006e8:	409c      	lsls	r4, r3
 80006ea:	4098      	lsls	r0, r3
 80006ec:	40ce      	lsrs	r6, r1
 80006ee:	40ca      	lsrs	r2, r1
 80006f0:	1e63      	subs	r3, r4, #1
 80006f2:	419c      	sbcs	r4, r3
 80006f4:	4330      	orrs	r0, r6
 80006f6:	4692      	mov	sl, r2
 80006f8:	2600      	movs	r6, #0
 80006fa:	4304      	orrs	r4, r0
 80006fc:	0763      	lsls	r3, r4, #29
 80006fe:	d009      	beq.n	8000714 <__aeabi_dadd+0x110>
 8000700:	230f      	movs	r3, #15
 8000702:	4023      	ands	r3, r4
 8000704:	2b04      	cmp	r3, #4
 8000706:	d005      	beq.n	8000714 <__aeabi_dadd+0x110>
 8000708:	1d23      	adds	r3, r4, #4
 800070a:	42a3      	cmp	r3, r4
 800070c:	41a4      	sbcs	r4, r4
 800070e:	4264      	negs	r4, r4
 8000710:	44a2      	add	sl, r4
 8000712:	001c      	movs	r4, r3
 8000714:	4653      	mov	r3, sl
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	d400      	bmi.n	800071c <__aeabi_dadd+0x118>
 800071a:	e09b      	b.n	8000854 <__aeabi_dadd+0x250>
 800071c:	4b94      	ldr	r3, [pc, #592]	; (8000970 <__aeabi_dadd+0x36c>)
 800071e:	3601      	adds	r6, #1
 8000720:	429e      	cmp	r6, r3
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x122>
 8000724:	e0b8      	b.n	8000898 <__aeabi_dadd+0x294>
 8000726:	4653      	mov	r3, sl
 8000728:	4992      	ldr	r1, [pc, #584]	; (8000974 <__aeabi_dadd+0x370>)
 800072a:	08e4      	lsrs	r4, r4, #3
 800072c:	400b      	ands	r3, r1
 800072e:	0019      	movs	r1, r3
 8000730:	075b      	lsls	r3, r3, #29
 8000732:	4323      	orrs	r3, r4
 8000734:	0572      	lsls	r2, r6, #21
 8000736:	024c      	lsls	r4, r1, #9
 8000738:	0b24      	lsrs	r4, r4, #12
 800073a:	0d52      	lsrs	r2, r2, #21
 800073c:	0512      	lsls	r2, r2, #20
 800073e:	07ed      	lsls	r5, r5, #31
 8000740:	4322      	orrs	r2, r4
 8000742:	432a      	orrs	r2, r5
 8000744:	0018      	movs	r0, r3
 8000746:	0011      	movs	r1, r2
 8000748:	bce0      	pop	{r5, r6, r7}
 800074a:	46ba      	mov	sl, r7
 800074c:	46b1      	mov	r9, r6
 800074e:	46a8      	mov	r8, r5
 8000750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000752:	2f00      	cmp	r7, #0
 8000754:	d048      	beq.n	80007e8 <__aeabi_dadd+0x1e4>
 8000756:	1b97      	subs	r7, r2, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d000      	beq.n	800075e <__aeabi_dadd+0x15a>
 800075c:	e10e      	b.n	800097c <__aeabi_dadd+0x378>
 800075e:	000c      	movs	r4, r1
 8000760:	431c      	orrs	r4, r3
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x162>
 8000764:	e1b7      	b.n	8000ad6 <__aeabi_dadd+0x4d2>
 8000766:	1e7c      	subs	r4, r7, #1
 8000768:	2f01      	cmp	r7, #1
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x16a>
 800076c:	e226      	b.n	8000bbc <__aeabi_dadd+0x5b8>
 800076e:	4d80      	ldr	r5, [pc, #512]	; (8000970 <__aeabi_dadd+0x36c>)
 8000770:	42af      	cmp	r7, r5
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x172>
 8000774:	e1d5      	b.n	8000b22 <__aeabi_dadd+0x51e>
 8000776:	0027      	movs	r7, r4
 8000778:	e107      	b.n	800098a <__aeabi_dadd+0x386>
 800077a:	2f00      	cmp	r7, #0
 800077c:	dc00      	bgt.n	8000780 <__aeabi_dadd+0x17c>
 800077e:	e0b2      	b.n	80008e6 <__aeabi_dadd+0x2e2>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d047      	beq.n	8000814 <__aeabi_dadd+0x210>
 8000784:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <__aeabi_dadd+0x36c>)
 8000786:	4296      	cmp	r6, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x188>
 800078a:	e089      	b.n	80008a0 <__aeabi_dadd+0x29c>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	464c      	mov	r4, r9
 8000790:	0412      	lsls	r2, r2, #16
 8000792:	4314      	orrs	r4, r2
 8000794:	46a1      	mov	r9, r4
 8000796:	2f38      	cmp	r7, #56	; 0x38
 8000798:	dc6b      	bgt.n	8000872 <__aeabi_dadd+0x26e>
 800079a:	2f1f      	cmp	r7, #31
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x19c>
 800079e:	e16e      	b.n	8000a7e <__aeabi_dadd+0x47a>
 80007a0:	003a      	movs	r2, r7
 80007a2:	4648      	mov	r0, r9
 80007a4:	3a20      	subs	r2, #32
 80007a6:	40d0      	lsrs	r0, r2
 80007a8:	4684      	mov	ip, r0
 80007aa:	2f20      	cmp	r7, #32
 80007ac:	d007      	beq.n	80007be <__aeabi_dadd+0x1ba>
 80007ae:	2240      	movs	r2, #64	; 0x40
 80007b0:	4648      	mov	r0, r9
 80007b2:	1bd2      	subs	r2, r2, r7
 80007b4:	4090      	lsls	r0, r2
 80007b6:	0002      	movs	r2, r0
 80007b8:	4640      	mov	r0, r8
 80007ba:	4310      	orrs	r0, r2
 80007bc:	4680      	mov	r8, r0
 80007be:	4640      	mov	r0, r8
 80007c0:	1e42      	subs	r2, r0, #1
 80007c2:	4190      	sbcs	r0, r2
 80007c4:	4662      	mov	r2, ip
 80007c6:	0004      	movs	r4, r0
 80007c8:	4314      	orrs	r4, r2
 80007ca:	e057      	b.n	800087c <__aeabi_dadd+0x278>
 80007cc:	464a      	mov	r2, r9
 80007ce:	4302      	orrs	r2, r0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x1d0>
 80007d2:	e103      	b.n	80009dc <__aeabi_dadd+0x3d8>
 80007d4:	1e7a      	subs	r2, r7, #1
 80007d6:	2f01      	cmp	r7, #1
 80007d8:	d100      	bne.n	80007dc <__aeabi_dadd+0x1d8>
 80007da:	e193      	b.n	8000b04 <__aeabi_dadd+0x500>
 80007dc:	4c64      	ldr	r4, [pc, #400]	; (8000970 <__aeabi_dadd+0x36c>)
 80007de:	42a7      	cmp	r7, r4
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0x1e0>
 80007e2:	e18a      	b.n	8000afa <__aeabi_dadd+0x4f6>
 80007e4:	0017      	movs	r7, r2
 80007e6:	e73b      	b.n	8000660 <__aeabi_dadd+0x5c>
 80007e8:	4c63      	ldr	r4, [pc, #396]	; (8000978 <__aeabi_dadd+0x374>)
 80007ea:	1c72      	adds	r2, r6, #1
 80007ec:	4222      	tst	r2, r4
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x1ee>
 80007f0:	e0e0      	b.n	80009b4 <__aeabi_dadd+0x3b0>
 80007f2:	000a      	movs	r2, r1
 80007f4:	431a      	orrs	r2, r3
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_dadd+0x1f8>
 80007fa:	e174      	b.n	8000ae6 <__aeabi_dadd+0x4e2>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x1fe>
 8000800:	e1d0      	b.n	8000ba4 <__aeabi_dadd+0x5a0>
 8000802:	464a      	mov	r2, r9
 8000804:	4302      	orrs	r2, r0
 8000806:	d000      	beq.n	800080a <__aeabi_dadd+0x206>
 8000808:	e1e3      	b.n	8000bd2 <__aeabi_dadd+0x5ce>
 800080a:	074a      	lsls	r2, r1, #29
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	4313      	orrs	r3, r2
 8000810:	08c9      	lsrs	r1, r1, #3
 8000812:	e029      	b.n	8000868 <__aeabi_dadd+0x264>
 8000814:	464a      	mov	r2, r9
 8000816:	4302      	orrs	r2, r0
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x218>
 800081a:	e17d      	b.n	8000b18 <__aeabi_dadd+0x514>
 800081c:	1e7a      	subs	r2, r7, #1
 800081e:	2f01      	cmp	r7, #1
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x220>
 8000822:	e0e0      	b.n	80009e6 <__aeabi_dadd+0x3e2>
 8000824:	4c52      	ldr	r4, [pc, #328]	; (8000970 <__aeabi_dadd+0x36c>)
 8000826:	42a7      	cmp	r7, r4
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x228>
 800082a:	e166      	b.n	8000afa <__aeabi_dadd+0x4f6>
 800082c:	0017      	movs	r7, r2
 800082e:	e7b2      	b.n	8000796 <__aeabi_dadd+0x192>
 8000830:	0010      	movs	r0, r2
 8000832:	3b1f      	subs	r3, #31
 8000834:	40d8      	lsrs	r0, r3
 8000836:	2920      	cmp	r1, #32
 8000838:	d003      	beq.n	8000842 <__aeabi_dadd+0x23e>
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	409a      	lsls	r2, r3
 8000840:	4314      	orrs	r4, r2
 8000842:	1e63      	subs	r3, r4, #1
 8000844:	419c      	sbcs	r4, r3
 8000846:	2300      	movs	r3, #0
 8000848:	2600      	movs	r6, #0
 800084a:	469a      	mov	sl, r3
 800084c:	4304      	orrs	r4, r0
 800084e:	0763      	lsls	r3, r4, #29
 8000850:	d000      	beq.n	8000854 <__aeabi_dadd+0x250>
 8000852:	e755      	b.n	8000700 <__aeabi_dadd+0xfc>
 8000854:	4652      	mov	r2, sl
 8000856:	08e3      	lsrs	r3, r4, #3
 8000858:	0752      	lsls	r2, r2, #29
 800085a:	4313      	orrs	r3, r2
 800085c:	4652      	mov	r2, sl
 800085e:	0037      	movs	r7, r6
 8000860:	08d1      	lsrs	r1, r2, #3
 8000862:	4a43      	ldr	r2, [pc, #268]	; (8000970 <__aeabi_dadd+0x36c>)
 8000864:	4297      	cmp	r7, r2
 8000866:	d01f      	beq.n	80008a8 <__aeabi_dadd+0x2a4>
 8000868:	0309      	lsls	r1, r1, #12
 800086a:	057a      	lsls	r2, r7, #21
 800086c:	0b0c      	lsrs	r4, r1, #12
 800086e:	0d52      	lsrs	r2, r2, #21
 8000870:	e764      	b.n	800073c <__aeabi_dadd+0x138>
 8000872:	4642      	mov	r2, r8
 8000874:	464c      	mov	r4, r9
 8000876:	4314      	orrs	r4, r2
 8000878:	1e62      	subs	r2, r4, #1
 800087a:	4194      	sbcs	r4, r2
 800087c:	18e4      	adds	r4, r4, r3
 800087e:	429c      	cmp	r4, r3
 8000880:	4192      	sbcs	r2, r2
 8000882:	4252      	negs	r2, r2
 8000884:	4692      	mov	sl, r2
 8000886:	448a      	add	sl, r1
 8000888:	4653      	mov	r3, sl
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	d5df      	bpl.n	800084e <__aeabi_dadd+0x24a>
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <__aeabi_dadd+0x36c>)
 8000890:	3601      	adds	r6, #1
 8000892:	429e      	cmp	r6, r3
 8000894:	d000      	beq.n	8000898 <__aeabi_dadd+0x294>
 8000896:	e0b3      	b.n	8000a00 <__aeabi_dadd+0x3fc>
 8000898:	0032      	movs	r2, r6
 800089a:	2400      	movs	r4, #0
 800089c:	2300      	movs	r3, #0
 800089e:	e74d      	b.n	800073c <__aeabi_dadd+0x138>
 80008a0:	074a      	lsls	r2, r1, #29
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	08c9      	lsrs	r1, r1, #3
 80008a8:	001a      	movs	r2, r3
 80008aa:	430a      	orrs	r2, r1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x2ac>
 80008ae:	e200      	b.n	8000cb2 <__aeabi_dadd+0x6ae>
 80008b0:	2480      	movs	r4, #128	; 0x80
 80008b2:	0324      	lsls	r4, r4, #12
 80008b4:	430c      	orrs	r4, r1
 80008b6:	0324      	lsls	r4, r4, #12
 80008b8:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <__aeabi_dadd+0x36c>)
 80008ba:	0b24      	lsrs	r4, r4, #12
 80008bc:	e73e      	b.n	800073c <__aeabi_dadd+0x138>
 80008be:	0020      	movs	r0, r4
 80008c0:	f001 f914 	bl	8001aec <__clzsi2>
 80008c4:	0003      	movs	r3, r0
 80008c6:	3318      	adds	r3, #24
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	dc00      	bgt.n	80008ce <__aeabi_dadd+0x2ca>
 80008cc:	e6f7      	b.n	80006be <__aeabi_dadd+0xba>
 80008ce:	0022      	movs	r2, r4
 80008d0:	3808      	subs	r0, #8
 80008d2:	4082      	lsls	r2, r0
 80008d4:	2400      	movs	r4, #0
 80008d6:	42b3      	cmp	r3, r6
 80008d8:	db00      	blt.n	80008dc <__aeabi_dadd+0x2d8>
 80008da:	e6fc      	b.n	80006d6 <__aeabi_dadd+0xd2>
 80008dc:	1af6      	subs	r6, r6, r3
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <__aeabi_dadd+0x370>)
 80008e0:	401a      	ands	r2, r3
 80008e2:	4692      	mov	sl, r2
 80008e4:	e70a      	b.n	80006fc <__aeabi_dadd+0xf8>
 80008e6:	2f00      	cmp	r7, #0
 80008e8:	d02b      	beq.n	8000942 <__aeabi_dadd+0x33e>
 80008ea:	1b97      	subs	r7, r2, r6
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x2ee>
 80008f0:	e0b8      	b.n	8000a64 <__aeabi_dadd+0x460>
 80008f2:	4c1f      	ldr	r4, [pc, #124]	; (8000970 <__aeabi_dadd+0x36c>)
 80008f4:	42a2      	cmp	r2, r4
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x2f6>
 80008f8:	e11c      	b.n	8000b34 <__aeabi_dadd+0x530>
 80008fa:	2480      	movs	r4, #128	; 0x80
 80008fc:	0424      	lsls	r4, r4, #16
 80008fe:	4321      	orrs	r1, r4
 8000900:	2f38      	cmp	r7, #56	; 0x38
 8000902:	dd00      	ble.n	8000906 <__aeabi_dadd+0x302>
 8000904:	e11e      	b.n	8000b44 <__aeabi_dadd+0x540>
 8000906:	2f1f      	cmp	r7, #31
 8000908:	dd00      	ble.n	800090c <__aeabi_dadd+0x308>
 800090a:	e19e      	b.n	8000c4a <__aeabi_dadd+0x646>
 800090c:	2620      	movs	r6, #32
 800090e:	000c      	movs	r4, r1
 8000910:	1bf6      	subs	r6, r6, r7
 8000912:	0018      	movs	r0, r3
 8000914:	40b3      	lsls	r3, r6
 8000916:	40b4      	lsls	r4, r6
 8000918:	40f8      	lsrs	r0, r7
 800091a:	1e5e      	subs	r6, r3, #1
 800091c:	41b3      	sbcs	r3, r6
 800091e:	40f9      	lsrs	r1, r7
 8000920:	4304      	orrs	r4, r0
 8000922:	431c      	orrs	r4, r3
 8000924:	4489      	add	r9, r1
 8000926:	4444      	add	r4, r8
 8000928:	4544      	cmp	r4, r8
 800092a:	419b      	sbcs	r3, r3
 800092c:	425b      	negs	r3, r3
 800092e:	444b      	add	r3, r9
 8000930:	469a      	mov	sl, r3
 8000932:	0016      	movs	r6, r2
 8000934:	e7a8      	b.n	8000888 <__aeabi_dadd+0x284>
 8000936:	4642      	mov	r2, r8
 8000938:	464c      	mov	r4, r9
 800093a:	4314      	orrs	r4, r2
 800093c:	1e62      	subs	r2, r4, #1
 800093e:	4194      	sbcs	r4, r2
 8000940:	e6a6      	b.n	8000690 <__aeabi_dadd+0x8c>
 8000942:	4c0d      	ldr	r4, [pc, #52]	; (8000978 <__aeabi_dadd+0x374>)
 8000944:	1c72      	adds	r2, r6, #1
 8000946:	4222      	tst	r2, r4
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x348>
 800094a:	e0a8      	b.n	8000a9e <__aeabi_dadd+0x49a>
 800094c:	000a      	movs	r2, r1
 800094e:	431a      	orrs	r2, r3
 8000950:	2e00      	cmp	r6, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_dadd+0x352>
 8000954:	e10a      	b.n	8000b6c <__aeabi_dadd+0x568>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x358>
 800095a:	e15e      	b.n	8000c1a <__aeabi_dadd+0x616>
 800095c:	464a      	mov	r2, r9
 800095e:	4302      	orrs	r2, r0
 8000960:	d000      	beq.n	8000964 <__aeabi_dadd+0x360>
 8000962:	e161      	b.n	8000c28 <__aeabi_dadd+0x624>
 8000964:	074a      	lsls	r2, r1, #29
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	4313      	orrs	r3, r2
 800096a:	08c9      	lsrs	r1, r1, #3
 800096c:	e77c      	b.n	8000868 <__aeabi_dadd+0x264>
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	000007ff 	.word	0x000007ff
 8000974:	ff7fffff 	.word	0xff7fffff
 8000978:	000007fe 	.word	0x000007fe
 800097c:	4ccf      	ldr	r4, [pc, #828]	; (8000cbc <__aeabi_dadd+0x6b8>)
 800097e:	42a2      	cmp	r2, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x380>
 8000982:	e0ce      	b.n	8000b22 <__aeabi_dadd+0x51e>
 8000984:	2480      	movs	r4, #128	; 0x80
 8000986:	0424      	lsls	r4, r4, #16
 8000988:	4321      	orrs	r1, r4
 800098a:	2f38      	cmp	r7, #56	; 0x38
 800098c:	dc5b      	bgt.n	8000a46 <__aeabi_dadd+0x442>
 800098e:	2f1f      	cmp	r7, #31
 8000990:	dd00      	ble.n	8000994 <__aeabi_dadd+0x390>
 8000992:	e0dc      	b.n	8000b4e <__aeabi_dadd+0x54a>
 8000994:	2520      	movs	r5, #32
 8000996:	000c      	movs	r4, r1
 8000998:	1bed      	subs	r5, r5, r7
 800099a:	001e      	movs	r6, r3
 800099c:	40ab      	lsls	r3, r5
 800099e:	40ac      	lsls	r4, r5
 80009a0:	40fe      	lsrs	r6, r7
 80009a2:	1e5d      	subs	r5, r3, #1
 80009a4:	41ab      	sbcs	r3, r5
 80009a6:	4334      	orrs	r4, r6
 80009a8:	40f9      	lsrs	r1, r7
 80009aa:	431c      	orrs	r4, r3
 80009ac:	464b      	mov	r3, r9
 80009ae:	1a5b      	subs	r3, r3, r1
 80009b0:	4699      	mov	r9, r3
 80009b2:	e04c      	b.n	8000a4e <__aeabi_dadd+0x44a>
 80009b4:	464a      	mov	r2, r9
 80009b6:	1a1c      	subs	r4, r3, r0
 80009b8:	1a88      	subs	r0, r1, r2
 80009ba:	42a3      	cmp	r3, r4
 80009bc:	4192      	sbcs	r2, r2
 80009be:	4252      	negs	r2, r2
 80009c0:	4692      	mov	sl, r2
 80009c2:	0002      	movs	r2, r0
 80009c4:	4650      	mov	r0, sl
 80009c6:	1a12      	subs	r2, r2, r0
 80009c8:	4692      	mov	sl, r2
 80009ca:	0212      	lsls	r2, r2, #8
 80009cc:	d478      	bmi.n	8000ac0 <__aeabi_dadd+0x4bc>
 80009ce:	4653      	mov	r3, sl
 80009d0:	4323      	orrs	r3, r4
 80009d2:	d000      	beq.n	80009d6 <__aeabi_dadd+0x3d2>
 80009d4:	e66a      	b.n	80006ac <__aeabi_dadd+0xa8>
 80009d6:	2100      	movs	r1, #0
 80009d8:	2500      	movs	r5, #0
 80009da:	e745      	b.n	8000868 <__aeabi_dadd+0x264>
 80009dc:	074a      	lsls	r2, r1, #29
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4313      	orrs	r3, r2
 80009e2:	08c9      	lsrs	r1, r1, #3
 80009e4:	e73d      	b.n	8000862 <__aeabi_dadd+0x25e>
 80009e6:	181c      	adds	r4, r3, r0
 80009e8:	429c      	cmp	r4, r3
 80009ea:	419b      	sbcs	r3, r3
 80009ec:	4449      	add	r1, r9
 80009ee:	468a      	mov	sl, r1
 80009f0:	425b      	negs	r3, r3
 80009f2:	449a      	add	sl, r3
 80009f4:	4653      	mov	r3, sl
 80009f6:	2601      	movs	r6, #1
 80009f8:	021b      	lsls	r3, r3, #8
 80009fa:	d400      	bmi.n	80009fe <__aeabi_dadd+0x3fa>
 80009fc:	e727      	b.n	800084e <__aeabi_dadd+0x24a>
 80009fe:	2602      	movs	r6, #2
 8000a00:	4652      	mov	r2, sl
 8000a02:	4baf      	ldr	r3, [pc, #700]	; (8000cc0 <__aeabi_dadd+0x6bc>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	401a      	ands	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	4021      	ands	r1, r4
 8000a0c:	0862      	lsrs	r2, r4, #1
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	07dc      	lsls	r4, r3, #31
 8000a12:	085b      	lsrs	r3, r3, #1
 8000a14:	469a      	mov	sl, r3
 8000a16:	4314      	orrs	r4, r2
 8000a18:	e670      	b.n	80006fc <__aeabi_dadd+0xf8>
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	464c      	mov	r4, r9
 8000a1e:	3a20      	subs	r2, #32
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	46a4      	mov	ip, r4
 8000a24:	2f20      	cmp	r7, #32
 8000a26:	d007      	beq.n	8000a38 <__aeabi_dadd+0x434>
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	1bd2      	subs	r2, r2, r7
 8000a2e:	4090      	lsls	r0, r2
 8000a30:	0002      	movs	r2, r0
 8000a32:	4640      	mov	r0, r8
 8000a34:	4310      	orrs	r0, r2
 8000a36:	4680      	mov	r8, r0
 8000a38:	4640      	mov	r0, r8
 8000a3a:	1e42      	subs	r2, r0, #1
 8000a3c:	4190      	sbcs	r0, r2
 8000a3e:	4662      	mov	r2, ip
 8000a40:	0004      	movs	r4, r0
 8000a42:	4314      	orrs	r4, r2
 8000a44:	e624      	b.n	8000690 <__aeabi_dadd+0x8c>
 8000a46:	4319      	orrs	r1, r3
 8000a48:	000c      	movs	r4, r1
 8000a4a:	1e63      	subs	r3, r4, #1
 8000a4c:	419c      	sbcs	r4, r3
 8000a4e:	4643      	mov	r3, r8
 8000a50:	1b1c      	subs	r4, r3, r4
 8000a52:	45a0      	cmp	r8, r4
 8000a54:	419b      	sbcs	r3, r3
 8000a56:	4649      	mov	r1, r9
 8000a58:	425b      	negs	r3, r3
 8000a5a:	1acb      	subs	r3, r1, r3
 8000a5c:	469a      	mov	sl, r3
 8000a5e:	4665      	mov	r5, ip
 8000a60:	0016      	movs	r6, r2
 8000a62:	e61b      	b.n	800069c <__aeabi_dadd+0x98>
 8000a64:	000c      	movs	r4, r1
 8000a66:	431c      	orrs	r4, r3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x468>
 8000a6a:	e0c7      	b.n	8000bfc <__aeabi_dadd+0x5f8>
 8000a6c:	1e7c      	subs	r4, r7, #1
 8000a6e:	2f01      	cmp	r7, #1
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dadd+0x470>
 8000a72:	e0f9      	b.n	8000c68 <__aeabi_dadd+0x664>
 8000a74:	4e91      	ldr	r6, [pc, #580]	; (8000cbc <__aeabi_dadd+0x6b8>)
 8000a76:	42b7      	cmp	r7, r6
 8000a78:	d05c      	beq.n	8000b34 <__aeabi_dadd+0x530>
 8000a7a:	0027      	movs	r7, r4
 8000a7c:	e740      	b.n	8000900 <__aeabi_dadd+0x2fc>
 8000a7e:	2220      	movs	r2, #32
 8000a80:	464c      	mov	r4, r9
 8000a82:	4640      	mov	r0, r8
 8000a84:	1bd2      	subs	r2, r2, r7
 8000a86:	4094      	lsls	r4, r2
 8000a88:	40f8      	lsrs	r0, r7
 8000a8a:	4304      	orrs	r4, r0
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	4090      	lsls	r0, r2
 8000a90:	1e42      	subs	r2, r0, #1
 8000a92:	4190      	sbcs	r0, r2
 8000a94:	464a      	mov	r2, r9
 8000a96:	40fa      	lsrs	r2, r7
 8000a98:	4304      	orrs	r4, r0
 8000a9a:	1889      	adds	r1, r1, r2
 8000a9c:	e6ee      	b.n	800087c <__aeabi_dadd+0x278>
 8000a9e:	4c87      	ldr	r4, [pc, #540]	; (8000cbc <__aeabi_dadd+0x6b8>)
 8000aa0:	42a2      	cmp	r2, r4
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x4a2>
 8000aa4:	e6f9      	b.n	800089a <__aeabi_dadd+0x296>
 8000aa6:	1818      	adds	r0, r3, r0
 8000aa8:	4298      	cmp	r0, r3
 8000aaa:	419b      	sbcs	r3, r3
 8000aac:	4449      	add	r1, r9
 8000aae:	425b      	negs	r3, r3
 8000ab0:	18cb      	adds	r3, r1, r3
 8000ab2:	07dc      	lsls	r4, r3, #31
 8000ab4:	0840      	lsrs	r0, r0, #1
 8000ab6:	085b      	lsrs	r3, r3, #1
 8000ab8:	469a      	mov	sl, r3
 8000aba:	0016      	movs	r6, r2
 8000abc:	4304      	orrs	r4, r0
 8000abe:	e6c6      	b.n	800084e <__aeabi_dadd+0x24a>
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	1ad4      	subs	r4, r2, r3
 8000ac4:	45a0      	cmp	r8, r4
 8000ac6:	4180      	sbcs	r0, r0
 8000ac8:	464b      	mov	r3, r9
 8000aca:	4240      	negs	r0, r0
 8000acc:	1a59      	subs	r1, r3, r1
 8000ace:	1a0b      	subs	r3, r1, r0
 8000ad0:	469a      	mov	sl, r3
 8000ad2:	4665      	mov	r5, ip
 8000ad4:	e5ea      	b.n	80006ac <__aeabi_dadd+0xa8>
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	464a      	mov	r2, r9
 8000ada:	08c0      	lsrs	r0, r0, #3
 8000adc:	075b      	lsls	r3, r3, #29
 8000ade:	4665      	mov	r5, ip
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	08d1      	lsrs	r1, r2, #3
 8000ae4:	e6bd      	b.n	8000862 <__aeabi_dadd+0x25e>
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_dadd+0x4e8>
 8000aea:	e08e      	b.n	8000c0a <__aeabi_dadd+0x606>
 8000aec:	464b      	mov	r3, r9
 8000aee:	4303      	orrs	r3, r0
 8000af0:	d117      	bne.n	8000b22 <__aeabi_dadd+0x51e>
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	2500      	movs	r5, #0
 8000af6:	0309      	lsls	r1, r1, #12
 8000af8:	e6da      	b.n	80008b0 <__aeabi_dadd+0x2ac>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	08c9      	lsrs	r1, r1, #3
 8000b02:	e6d1      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000b04:	1a1c      	subs	r4, r3, r0
 8000b06:	464a      	mov	r2, r9
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	419b      	sbcs	r3, r3
 8000b0c:	1a89      	subs	r1, r1, r2
 8000b0e:	425b      	negs	r3, r3
 8000b10:	1acb      	subs	r3, r1, r3
 8000b12:	469a      	mov	sl, r3
 8000b14:	2601      	movs	r6, #1
 8000b16:	e5c1      	b.n	800069c <__aeabi_dadd+0x98>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e69f      	b.n	8000862 <__aeabi_dadd+0x25e>
 8000b22:	4643      	mov	r3, r8
 8000b24:	08d8      	lsrs	r0, r3, #3
 8000b26:	464b      	mov	r3, r9
 8000b28:	464a      	mov	r2, r9
 8000b2a:	075b      	lsls	r3, r3, #29
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	4303      	orrs	r3, r0
 8000b30:	08d1      	lsrs	r1, r2, #3
 8000b32:	e6b9      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000b34:	4643      	mov	r3, r8
 8000b36:	08d8      	lsrs	r0, r3, #3
 8000b38:	464b      	mov	r3, r9
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	075b      	lsls	r3, r3, #29
 8000b3e:	4303      	orrs	r3, r0
 8000b40:	08d1      	lsrs	r1, r2, #3
 8000b42:	e6b1      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000b44:	4319      	orrs	r1, r3
 8000b46:	000c      	movs	r4, r1
 8000b48:	1e63      	subs	r3, r4, #1
 8000b4a:	419c      	sbcs	r4, r3
 8000b4c:	e6eb      	b.n	8000926 <__aeabi_dadd+0x322>
 8000b4e:	003c      	movs	r4, r7
 8000b50:	000d      	movs	r5, r1
 8000b52:	3c20      	subs	r4, #32
 8000b54:	40e5      	lsrs	r5, r4
 8000b56:	2f20      	cmp	r7, #32
 8000b58:	d003      	beq.n	8000b62 <__aeabi_dadd+0x55e>
 8000b5a:	2440      	movs	r4, #64	; 0x40
 8000b5c:	1be4      	subs	r4, r4, r7
 8000b5e:	40a1      	lsls	r1, r4
 8000b60:	430b      	orrs	r3, r1
 8000b62:	001c      	movs	r4, r3
 8000b64:	1e63      	subs	r3, r4, #1
 8000b66:	419c      	sbcs	r4, r3
 8000b68:	432c      	orrs	r4, r5
 8000b6a:	e770      	b.n	8000a4e <__aeabi_dadd+0x44a>
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d0e1      	beq.n	8000b34 <__aeabi_dadd+0x530>
 8000b70:	464a      	mov	r2, r9
 8000b72:	4302      	orrs	r2, r0
 8000b74:	d0c1      	beq.n	8000afa <__aeabi_dadd+0x4f6>
 8000b76:	074a      	lsls	r2, r1, #29
 8000b78:	08db      	lsrs	r3, r3, #3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	2280      	movs	r2, #128	; 0x80
 8000b7e:	08c9      	lsrs	r1, r1, #3
 8000b80:	0312      	lsls	r2, r2, #12
 8000b82:	4211      	tst	r1, r2
 8000b84:	d008      	beq.n	8000b98 <__aeabi_dadd+0x594>
 8000b86:	4648      	mov	r0, r9
 8000b88:	08c4      	lsrs	r4, r0, #3
 8000b8a:	4214      	tst	r4, r2
 8000b8c:	d104      	bne.n	8000b98 <__aeabi_dadd+0x594>
 8000b8e:	4643      	mov	r3, r8
 8000b90:	0021      	movs	r1, r4
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	0742      	lsls	r2, r0, #29
 8000b96:	4313      	orrs	r3, r2
 8000b98:	0f5a      	lsrs	r2, r3, #29
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	0752      	lsls	r2, r2, #29
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	e681      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x5a8>
 8000baa:	e714      	b.n	80009d6 <__aeabi_dadd+0x3d2>
 8000bac:	464b      	mov	r3, r9
 8000bae:	464a      	mov	r2, r9
 8000bb0:	08c0      	lsrs	r0, r0, #3
 8000bb2:	075b      	lsls	r3, r3, #29
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	e655      	b.n	8000868 <__aeabi_dadd+0x264>
 8000bbc:	1ac4      	subs	r4, r0, r3
 8000bbe:	45a0      	cmp	r8, r4
 8000bc0:	4180      	sbcs	r0, r0
 8000bc2:	464b      	mov	r3, r9
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	1a59      	subs	r1, r3, r1
 8000bc8:	1a0b      	subs	r3, r1, r0
 8000bca:	469a      	mov	sl, r3
 8000bcc:	4665      	mov	r5, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	e564      	b.n	800069c <__aeabi_dadd+0x98>
 8000bd2:	1a1c      	subs	r4, r3, r0
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	42a3      	cmp	r3, r4
 8000bd8:	4180      	sbcs	r0, r0
 8000bda:	1a8a      	subs	r2, r1, r2
 8000bdc:	4240      	negs	r0, r0
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	4692      	mov	sl, r2
 8000be2:	0212      	lsls	r2, r2, #8
 8000be4:	d549      	bpl.n	8000c7a <__aeabi_dadd+0x676>
 8000be6:	4642      	mov	r2, r8
 8000be8:	1ad4      	subs	r4, r2, r3
 8000bea:	45a0      	cmp	r8, r4
 8000bec:	4180      	sbcs	r0, r0
 8000bee:	464b      	mov	r3, r9
 8000bf0:	4240      	negs	r0, r0
 8000bf2:	1a59      	subs	r1, r3, r1
 8000bf4:	1a0b      	subs	r3, r1, r0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4665      	mov	r5, ip
 8000bfa:	e57f      	b.n	80006fc <__aeabi_dadd+0xf8>
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	464a      	mov	r2, r9
 8000c00:	08c0      	lsrs	r0, r0, #3
 8000c02:	075b      	lsls	r3, r3, #29
 8000c04:	4303      	orrs	r3, r0
 8000c06:	08d1      	lsrs	r1, r2, #3
 8000c08:	e62b      	b.n	8000862 <__aeabi_dadd+0x25e>
 8000c0a:	464a      	mov	r2, r9
 8000c0c:	08db      	lsrs	r3, r3, #3
 8000c0e:	4302      	orrs	r2, r0
 8000c10:	d138      	bne.n	8000c84 <__aeabi_dadd+0x680>
 8000c12:	074a      	lsls	r2, r1, #29
 8000c14:	4313      	orrs	r3, r2
 8000c16:	08c9      	lsrs	r1, r1, #3
 8000c18:	e646      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000c1a:	464b      	mov	r3, r9
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	08c0      	lsrs	r0, r0, #3
 8000c20:	075b      	lsls	r3, r3, #29
 8000c22:	4303      	orrs	r3, r0
 8000c24:	08d1      	lsrs	r1, r2, #3
 8000c26:	e61f      	b.n	8000868 <__aeabi_dadd+0x264>
 8000c28:	181c      	adds	r4, r3, r0
 8000c2a:	429c      	cmp	r4, r3
 8000c2c:	419b      	sbcs	r3, r3
 8000c2e:	4449      	add	r1, r9
 8000c30:	468a      	mov	sl, r1
 8000c32:	425b      	negs	r3, r3
 8000c34:	449a      	add	sl, r3
 8000c36:	4653      	mov	r3, sl
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	d400      	bmi.n	8000c3e <__aeabi_dadd+0x63a>
 8000c3c:	e607      	b.n	800084e <__aeabi_dadd+0x24a>
 8000c3e:	4652      	mov	r2, sl
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <__aeabi_dadd+0x6bc>)
 8000c42:	2601      	movs	r6, #1
 8000c44:	401a      	ands	r2, r3
 8000c46:	4692      	mov	sl, r2
 8000c48:	e601      	b.n	800084e <__aeabi_dadd+0x24a>
 8000c4a:	003c      	movs	r4, r7
 8000c4c:	000e      	movs	r6, r1
 8000c4e:	3c20      	subs	r4, #32
 8000c50:	40e6      	lsrs	r6, r4
 8000c52:	2f20      	cmp	r7, #32
 8000c54:	d003      	beq.n	8000c5e <__aeabi_dadd+0x65a>
 8000c56:	2440      	movs	r4, #64	; 0x40
 8000c58:	1be4      	subs	r4, r4, r7
 8000c5a:	40a1      	lsls	r1, r4
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	001c      	movs	r4, r3
 8000c60:	1e63      	subs	r3, r4, #1
 8000c62:	419c      	sbcs	r4, r3
 8000c64:	4334      	orrs	r4, r6
 8000c66:	e65e      	b.n	8000926 <__aeabi_dadd+0x322>
 8000c68:	4443      	add	r3, r8
 8000c6a:	4283      	cmp	r3, r0
 8000c6c:	4180      	sbcs	r0, r0
 8000c6e:	4449      	add	r1, r9
 8000c70:	468a      	mov	sl, r1
 8000c72:	4240      	negs	r0, r0
 8000c74:	001c      	movs	r4, r3
 8000c76:	4482      	add	sl, r0
 8000c78:	e6bc      	b.n	80009f4 <__aeabi_dadd+0x3f0>
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x67e>
 8000c80:	e6a9      	b.n	80009d6 <__aeabi_dadd+0x3d2>
 8000c82:	e5e4      	b.n	800084e <__aeabi_dadd+0x24a>
 8000c84:	074a      	lsls	r2, r1, #29
 8000c86:	4313      	orrs	r3, r2
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	08c9      	lsrs	r1, r1, #3
 8000c8c:	0312      	lsls	r2, r2, #12
 8000c8e:	4211      	tst	r1, r2
 8000c90:	d009      	beq.n	8000ca6 <__aeabi_dadd+0x6a2>
 8000c92:	4648      	mov	r0, r9
 8000c94:	08c4      	lsrs	r4, r0, #3
 8000c96:	4214      	tst	r4, r2
 8000c98:	d105      	bne.n	8000ca6 <__aeabi_dadd+0x6a2>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	0021      	movs	r1, r4
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	0742      	lsls	r2, r0, #29
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	0f5a      	lsrs	r2, r3, #29
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	0752      	lsls	r2, r2, #29
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	e5fa      	b.n	80008a8 <__aeabi_dadd+0x2a4>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	4a01      	ldr	r2, [pc, #4]	; (8000cbc <__aeabi_dadd+0x6b8>)
 8000cb6:	001c      	movs	r4, r3
 8000cb8:	e540      	b.n	800073c <__aeabi_dadd+0x138>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	ff7fffff 	.word	0xff7fffff

08000cc4 <__aeabi_ddiv>:
 8000cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc6:	4657      	mov	r7, sl
 8000cc8:	464e      	mov	r6, r9
 8000cca:	4645      	mov	r5, r8
 8000ccc:	46de      	mov	lr, fp
 8000cce:	b5e0      	push	{r5, r6, r7, lr}
 8000cd0:	030c      	lsls	r4, r1, #12
 8000cd2:	001f      	movs	r7, r3
 8000cd4:	004b      	lsls	r3, r1, #1
 8000cd6:	4681      	mov	r9, r0
 8000cd8:	4692      	mov	sl, r2
 8000cda:	0005      	movs	r5, r0
 8000cdc:	b085      	sub	sp, #20
 8000cde:	0b24      	lsrs	r4, r4, #12
 8000ce0:	0d5b      	lsrs	r3, r3, #21
 8000ce2:	0fce      	lsrs	r6, r1, #31
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0x26>
 8000ce8:	e152      	b.n	8000f90 <__aeabi_ddiv+0x2cc>
 8000cea:	4ad2      	ldr	r2, [pc, #840]	; (8001034 <__aeabi_ddiv+0x370>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_ddiv+0x2e>
 8000cf0:	e16e      	b.n	8000fd0 <__aeabi_ddiv+0x30c>
 8000cf2:	0f42      	lsrs	r2, r0, #29
 8000cf4:	00e4      	lsls	r4, r4, #3
 8000cf6:	4314      	orrs	r4, r2
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	0412      	lsls	r2, r2, #16
 8000cfc:	4322      	orrs	r2, r4
 8000cfe:	4690      	mov	r8, r2
 8000d00:	4acd      	ldr	r2, [pc, #820]	; (8001038 <__aeabi_ddiv+0x374>)
 8000d02:	00c5      	lsls	r5, r0, #3
 8000d04:	4693      	mov	fp, r2
 8000d06:	449b      	add	fp, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4699      	mov	r9, r3
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	033c      	lsls	r4, r7, #12
 8000d10:	007b      	lsls	r3, r7, #1
 8000d12:	4650      	mov	r0, sl
 8000d14:	0b24      	lsrs	r4, r4, #12
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	0fff      	lsrs	r7, r7, #31
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_ddiv+0x5c>
 8000d1e:	e11a      	b.n	8000f56 <__aeabi_ddiv+0x292>
 8000d20:	4ac4      	ldr	r2, [pc, #784]	; (8001034 <__aeabi_ddiv+0x370>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x64>
 8000d26:	e15e      	b.n	8000fe6 <__aeabi_ddiv+0x322>
 8000d28:	0f42      	lsrs	r2, r0, #29
 8000d2a:	00e4      	lsls	r4, r4, #3
 8000d2c:	4322      	orrs	r2, r4
 8000d2e:	2480      	movs	r4, #128	; 0x80
 8000d30:	0424      	lsls	r4, r4, #16
 8000d32:	4314      	orrs	r4, r2
 8000d34:	4ac0      	ldr	r2, [pc, #768]	; (8001038 <__aeabi_ddiv+0x374>)
 8000d36:	00c1      	lsls	r1, r0, #3
 8000d38:	4694      	mov	ip, r2
 8000d3a:	465a      	mov	r2, fp
 8000d3c:	4463      	add	r3, ip
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	469b      	mov	fp, r3
 8000d42:	2000      	movs	r0, #0
 8000d44:	0033      	movs	r3, r6
 8000d46:	407b      	eors	r3, r7
 8000d48:	469a      	mov	sl, r3
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d827      	bhi.n	8000da0 <__aeabi_ddiv+0xdc>
 8000d50:	4aba      	ldr	r2, [pc, #744]	; (800103c <__aeabi_ddiv+0x378>)
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	58d3      	ldr	r3, [r2, r3]
 8000d56:	469f      	mov	pc, r3
 8000d58:	46b2      	mov	sl, r6
 8000d5a:	9b00      	ldr	r3, [sp, #0]
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d016      	beq.n	8000d8e <__aeabi_ddiv+0xca>
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d100      	bne.n	8000d66 <__aeabi_ddiv+0xa2>
 8000d64:	e287      	b.n	8001276 <__aeabi_ddiv+0x5b2>
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d000      	beq.n	8000d6c <__aeabi_ddiv+0xa8>
 8000d6a:	e0d5      	b.n	8000f18 <__aeabi_ddiv+0x254>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2500      	movs	r5, #0
 8000d72:	051b      	lsls	r3, r3, #20
 8000d74:	4313      	orrs	r3, r2
 8000d76:	4652      	mov	r2, sl
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	0028      	movs	r0, r5
 8000d7e:	0019      	movs	r1, r3
 8000d80:	b005      	add	sp, #20
 8000d82:	bcf0      	pop	{r4, r5, r6, r7}
 8000d84:	46bb      	mov	fp, r7
 8000d86:	46b2      	mov	sl, r6
 8000d88:	46a9      	mov	r9, r5
 8000d8a:	46a0      	mov	r8, r4
 8000d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2500      	movs	r5, #0
 8000d92:	4ba8      	ldr	r3, [pc, #672]	; (8001034 <__aeabi_ddiv+0x370>)
 8000d94:	e7ed      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8000d96:	46ba      	mov	sl, r7
 8000d98:	46a0      	mov	r8, r4
 8000d9a:	000d      	movs	r5, r1
 8000d9c:	9000      	str	r0, [sp, #0]
 8000d9e:	e7dc      	b.n	8000d5a <__aeabi_ddiv+0x96>
 8000da0:	4544      	cmp	r4, r8
 8000da2:	d200      	bcs.n	8000da6 <__aeabi_ddiv+0xe2>
 8000da4:	e1c4      	b.n	8001130 <__aeabi_ddiv+0x46c>
 8000da6:	d100      	bne.n	8000daa <__aeabi_ddiv+0xe6>
 8000da8:	e1bf      	b.n	800112a <__aeabi_ddiv+0x466>
 8000daa:	2301      	movs	r3, #1
 8000dac:	425b      	negs	r3, r3
 8000dae:	469c      	mov	ip, r3
 8000db0:	002e      	movs	r6, r5
 8000db2:	4640      	mov	r0, r8
 8000db4:	2500      	movs	r5, #0
 8000db6:	44e3      	add	fp, ip
 8000db8:	0223      	lsls	r3, r4, #8
 8000dba:	0e0c      	lsrs	r4, r1, #24
 8000dbc:	431c      	orrs	r4, r3
 8000dbe:	0c1b      	lsrs	r3, r3, #16
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	0423      	lsls	r3, r4, #16
 8000dc4:	020a      	lsls	r2, r1, #8
 8000dc6:	0c1f      	lsrs	r7, r3, #16
 8000dc8:	4649      	mov	r1, r9
 8000dca:	9200      	str	r2, [sp, #0]
 8000dcc:	9701      	str	r7, [sp, #4]
 8000dce:	f7ff fa1f 	bl	8000210 <__aeabi_uidivmod>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	437a      	muls	r2, r7
 8000dd6:	040b      	lsls	r3, r1, #16
 8000dd8:	0c31      	lsrs	r1, r6, #16
 8000dda:	4680      	mov	r8, r0
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	428a      	cmp	r2, r1
 8000de0:	d907      	bls.n	8000df2 <__aeabi_ddiv+0x12e>
 8000de2:	2301      	movs	r3, #1
 8000de4:	425b      	negs	r3, r3
 8000de6:	469c      	mov	ip, r3
 8000de8:	1909      	adds	r1, r1, r4
 8000dea:	44e0      	add	r8, ip
 8000dec:	428c      	cmp	r4, r1
 8000dee:	d800      	bhi.n	8000df2 <__aeabi_ddiv+0x12e>
 8000df0:	e201      	b.n	80011f6 <__aeabi_ddiv+0x532>
 8000df2:	1a88      	subs	r0, r1, r2
 8000df4:	4649      	mov	r1, r9
 8000df6:	f7ff fa0b 	bl	8000210 <__aeabi_uidivmod>
 8000dfa:	9a01      	ldr	r2, [sp, #4]
 8000dfc:	0436      	lsls	r6, r6, #16
 8000dfe:	4342      	muls	r2, r0
 8000e00:	0409      	lsls	r1, r1, #16
 8000e02:	0c36      	lsrs	r6, r6, #16
 8000e04:	0003      	movs	r3, r0
 8000e06:	430e      	orrs	r6, r1
 8000e08:	42b2      	cmp	r2, r6
 8000e0a:	d904      	bls.n	8000e16 <__aeabi_ddiv+0x152>
 8000e0c:	1936      	adds	r6, r6, r4
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	42b4      	cmp	r4, r6
 8000e12:	d800      	bhi.n	8000e16 <__aeabi_ddiv+0x152>
 8000e14:	e1e9      	b.n	80011ea <__aeabi_ddiv+0x526>
 8000e16:	1ab0      	subs	r0, r6, r2
 8000e18:	4642      	mov	r2, r8
 8000e1a:	9e00      	ldr	r6, [sp, #0]
 8000e1c:	0412      	lsls	r2, r2, #16
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	0c33      	lsrs	r3, r6, #16
 8000e22:	001f      	movs	r7, r3
 8000e24:	0c11      	lsrs	r1, r2, #16
 8000e26:	4690      	mov	r8, r2
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	0413      	lsls	r3, r2, #16
 8000e2c:	0432      	lsls	r2, r6, #16
 8000e2e:	0c16      	lsrs	r6, r2, #16
 8000e30:	0032      	movs	r2, r6
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	435a      	muls	r2, r3
 8000e36:	9603      	str	r6, [sp, #12]
 8000e38:	437b      	muls	r3, r7
 8000e3a:	434e      	muls	r6, r1
 8000e3c:	4379      	muls	r1, r7
 8000e3e:	0c17      	lsrs	r7, r2, #16
 8000e40:	46bc      	mov	ip, r7
 8000e42:	199b      	adds	r3, r3, r6
 8000e44:	4463      	add	r3, ip
 8000e46:	429e      	cmp	r6, r3
 8000e48:	d903      	bls.n	8000e52 <__aeabi_ddiv+0x18e>
 8000e4a:	2680      	movs	r6, #128	; 0x80
 8000e4c:	0276      	lsls	r6, r6, #9
 8000e4e:	46b4      	mov	ip, r6
 8000e50:	4461      	add	r1, ip
 8000e52:	0c1e      	lsrs	r6, r3, #16
 8000e54:	1871      	adds	r1, r6, r1
 8000e56:	0416      	lsls	r6, r2, #16
 8000e58:	041b      	lsls	r3, r3, #16
 8000e5a:	0c36      	lsrs	r6, r6, #16
 8000e5c:	199e      	adds	r6, r3, r6
 8000e5e:	4288      	cmp	r0, r1
 8000e60:	d302      	bcc.n	8000e68 <__aeabi_ddiv+0x1a4>
 8000e62:	d112      	bne.n	8000e8a <__aeabi_ddiv+0x1c6>
 8000e64:	42b5      	cmp	r5, r6
 8000e66:	d210      	bcs.n	8000e8a <__aeabi_ddiv+0x1c6>
 8000e68:	4643      	mov	r3, r8
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	9b00      	ldr	r3, [sp, #0]
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4465      	add	r5, ip
 8000e72:	001f      	movs	r7, r3
 8000e74:	429d      	cmp	r5, r3
 8000e76:	419b      	sbcs	r3, r3
 8000e78:	425b      	negs	r3, r3
 8000e7a:	191b      	adds	r3, r3, r4
 8000e7c:	18c0      	adds	r0, r0, r3
 8000e7e:	4284      	cmp	r4, r0
 8000e80:	d200      	bcs.n	8000e84 <__aeabi_ddiv+0x1c0>
 8000e82:	e19e      	b.n	80011c2 <__aeabi_ddiv+0x4fe>
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0x1c4>
 8000e86:	e199      	b.n	80011bc <__aeabi_ddiv+0x4f8>
 8000e88:	4690      	mov	r8, r2
 8000e8a:	1bae      	subs	r6, r5, r6
 8000e8c:	42b5      	cmp	r5, r6
 8000e8e:	41ad      	sbcs	r5, r5
 8000e90:	1a40      	subs	r0, r0, r1
 8000e92:	426d      	negs	r5, r5
 8000e94:	1b40      	subs	r0, r0, r5
 8000e96:	4284      	cmp	r4, r0
 8000e98:	d100      	bne.n	8000e9c <__aeabi_ddiv+0x1d8>
 8000e9a:	e1d2      	b.n	8001242 <__aeabi_ddiv+0x57e>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	f7ff f9b7 	bl	8000210 <__aeabi_uidivmod>
 8000ea2:	9a01      	ldr	r2, [sp, #4]
 8000ea4:	040b      	lsls	r3, r1, #16
 8000ea6:	4342      	muls	r2, r0
 8000ea8:	0c31      	lsrs	r1, r6, #16
 8000eaa:	0005      	movs	r5, r0
 8000eac:	4319      	orrs	r1, r3
 8000eae:	428a      	cmp	r2, r1
 8000eb0:	d900      	bls.n	8000eb4 <__aeabi_ddiv+0x1f0>
 8000eb2:	e16c      	b.n	800118e <__aeabi_ddiv+0x4ca>
 8000eb4:	1a88      	subs	r0, r1, r2
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	f7ff f9aa 	bl	8000210 <__aeabi_uidivmod>
 8000ebc:	9a01      	ldr	r2, [sp, #4]
 8000ebe:	0436      	lsls	r6, r6, #16
 8000ec0:	4342      	muls	r2, r0
 8000ec2:	0409      	lsls	r1, r1, #16
 8000ec4:	0c36      	lsrs	r6, r6, #16
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	430e      	orrs	r6, r1
 8000eca:	42b2      	cmp	r2, r6
 8000ecc:	d900      	bls.n	8000ed0 <__aeabi_ddiv+0x20c>
 8000ece:	e153      	b.n	8001178 <__aeabi_ddiv+0x4b4>
 8000ed0:	9803      	ldr	r0, [sp, #12]
 8000ed2:	1ab6      	subs	r6, r6, r2
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	042d      	lsls	r5, r5, #16
 8000ed8:	431d      	orrs	r5, r3
 8000eda:	9f02      	ldr	r7, [sp, #8]
 8000edc:	042b      	lsls	r3, r5, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	435a      	muls	r2, r3
 8000ee2:	437b      	muls	r3, r7
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	0c29      	lsrs	r1, r5, #16
 8000ee8:	4348      	muls	r0, r1
 8000eea:	0c13      	lsrs	r3, r2, #16
 8000eec:	4484      	add	ip, r0
 8000eee:	4463      	add	r3, ip
 8000ef0:	4379      	muls	r1, r7
 8000ef2:	4298      	cmp	r0, r3
 8000ef4:	d903      	bls.n	8000efe <__aeabi_ddiv+0x23a>
 8000ef6:	2080      	movs	r0, #128	; 0x80
 8000ef8:	0240      	lsls	r0, r0, #9
 8000efa:	4684      	mov	ip, r0
 8000efc:	4461      	add	r1, ip
 8000efe:	0c18      	lsrs	r0, r3, #16
 8000f00:	0412      	lsls	r2, r2, #16
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	0c12      	lsrs	r2, r2, #16
 8000f06:	1840      	adds	r0, r0, r1
 8000f08:	189b      	adds	r3, r3, r2
 8000f0a:	4286      	cmp	r6, r0
 8000f0c:	d200      	bcs.n	8000f10 <__aeabi_ddiv+0x24c>
 8000f0e:	e100      	b.n	8001112 <__aeabi_ddiv+0x44e>
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x250>
 8000f12:	e0fb      	b.n	800110c <__aeabi_ddiv+0x448>
 8000f14:	2301      	movs	r3, #1
 8000f16:	431d      	orrs	r5, r3
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <__aeabi_ddiv+0x37c>)
 8000f1a:	445b      	add	r3, fp
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_ddiv+0x25e>
 8000f20:	e0aa      	b.n	8001078 <__aeabi_ddiv+0x3b4>
 8000f22:	076a      	lsls	r2, r5, #29
 8000f24:	d000      	beq.n	8000f28 <__aeabi_ddiv+0x264>
 8000f26:	e13d      	b.n	80011a4 <__aeabi_ddiv+0x4e0>
 8000f28:	08e9      	lsrs	r1, r5, #3
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	01d2      	lsls	r2, r2, #7
 8000f2e:	d506      	bpl.n	8000f3e <__aeabi_ddiv+0x27a>
 8000f30:	4642      	mov	r2, r8
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <__aeabi_ddiv+0x380>)
 8000f34:	401a      	ands	r2, r3
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4690      	mov	r8, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	445b      	add	r3, fp
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <__aeabi_ddiv+0x384>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_ddiv+0x282>
 8000f44:	e723      	b.n	8000d8e <__aeabi_ddiv+0xca>
 8000f46:	4642      	mov	r2, r8
 8000f48:	055b      	lsls	r3, r3, #21
 8000f4a:	0755      	lsls	r5, r2, #29
 8000f4c:	0252      	lsls	r2, r2, #9
 8000f4e:	430d      	orrs	r5, r1
 8000f50:	0b12      	lsrs	r2, r2, #12
 8000f52:	0d5b      	lsrs	r3, r3, #21
 8000f54:	e70d      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8000f56:	4651      	mov	r1, sl
 8000f58:	4321      	orrs	r1, r4
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0x29a>
 8000f5c:	e07c      	b.n	8001058 <__aeabi_ddiv+0x394>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x2a0>
 8000f62:	e0fb      	b.n	800115c <__aeabi_ddiv+0x498>
 8000f64:	0020      	movs	r0, r4
 8000f66:	f000 fdc1 	bl	8001aec <__clzsi2>
 8000f6a:	0002      	movs	r2, r0
 8000f6c:	3a0b      	subs	r2, #11
 8000f6e:	231d      	movs	r3, #29
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	4652      	mov	r2, sl
 8000f74:	0001      	movs	r1, r0
 8000f76:	40da      	lsrs	r2, r3
 8000f78:	4653      	mov	r3, sl
 8000f7a:	3908      	subs	r1, #8
 8000f7c:	408b      	lsls	r3, r1
 8000f7e:	408c      	lsls	r4, r1
 8000f80:	0019      	movs	r1, r3
 8000f82:	4314      	orrs	r4, r2
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <__aeabi_ddiv+0x388>)
 8000f86:	4458      	add	r0, fp
 8000f88:	469b      	mov	fp, r3
 8000f8a:	4483      	add	fp, r0
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e6d9      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8000f90:	0003      	movs	r3, r0
 8000f92:	4323      	orrs	r3, r4
 8000f94:	4698      	mov	r8, r3
 8000f96:	d044      	beq.n	8001022 <__aeabi_ddiv+0x35e>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2da>
 8000f9c:	e0cf      	b.n	800113e <__aeabi_ddiv+0x47a>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f000 fda4 	bl	8001aec <__clzsi2>
 8000fa4:	0001      	movs	r1, r0
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	390b      	subs	r1, #11
 8000faa:	231d      	movs	r3, #29
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	4649      	mov	r1, r9
 8000fb0:	0010      	movs	r0, r2
 8000fb2:	40d9      	lsrs	r1, r3
 8000fb4:	3808      	subs	r0, #8
 8000fb6:	4084      	lsls	r4, r0
 8000fb8:	000b      	movs	r3, r1
 8000fba:	464d      	mov	r5, r9
 8000fbc:	4323      	orrs	r3, r4
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	4085      	lsls	r5, r0
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <__aeabi_ddiv+0x38c>)
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	469b      	mov	fp, r3
 8000fc8:	2300      	movs	r3, #0
 8000fca:	4699      	mov	r9, r3
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	e69e      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8000fd0:	0002      	movs	r2, r0
 8000fd2:	4322      	orrs	r2, r4
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	d11d      	bne.n	8001014 <__aeabi_ddiv+0x350>
 8000fd8:	2208      	movs	r2, #8
 8000fda:	469b      	mov	fp, r3
 8000fdc:	2302      	movs	r3, #2
 8000fde:	2500      	movs	r5, #0
 8000fe0:	4691      	mov	r9, r2
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	e693      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8000fe6:	4651      	mov	r1, sl
 8000fe8:	4321      	orrs	r1, r4
 8000fea:	d109      	bne.n	8001000 <__aeabi_ddiv+0x33c>
 8000fec:	2302      	movs	r3, #2
 8000fee:	464a      	mov	r2, r9
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	4b18      	ldr	r3, [pc, #96]	; (8001054 <__aeabi_ddiv+0x390>)
 8000ff4:	4691      	mov	r9, r2
 8000ff6:	469c      	mov	ip, r3
 8000ff8:	2400      	movs	r4, #0
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	44e3      	add	fp, ip
 8000ffe:	e6a1      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001000:	2303      	movs	r3, #3
 8001002:	464a      	mov	r2, r9
 8001004:	431a      	orrs	r2, r3
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <__aeabi_ddiv+0x390>)
 8001008:	4691      	mov	r9, r2
 800100a:	469c      	mov	ip, r3
 800100c:	4651      	mov	r1, sl
 800100e:	2003      	movs	r0, #3
 8001010:	44e3      	add	fp, ip
 8001012:	e697      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001014:	220c      	movs	r2, #12
 8001016:	469b      	mov	fp, r3
 8001018:	2303      	movs	r3, #3
 800101a:	46a0      	mov	r8, r4
 800101c:	4691      	mov	r9, r2
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	e675      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8001022:	2304      	movs	r3, #4
 8001024:	4699      	mov	r9, r3
 8001026:	2300      	movs	r3, #0
 8001028:	469b      	mov	fp, r3
 800102a:	3301      	adds	r3, #1
 800102c:	2500      	movs	r5, #0
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	e66d      	b.n	8000d0e <__aeabi_ddiv+0x4a>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	000007ff 	.word	0x000007ff
 8001038:	fffffc01 	.word	0xfffffc01
 800103c:	08006944 	.word	0x08006944
 8001040:	000003ff 	.word	0x000003ff
 8001044:	feffffff 	.word	0xfeffffff
 8001048:	000007fe 	.word	0x000007fe
 800104c:	000003f3 	.word	0x000003f3
 8001050:	fffffc0d 	.word	0xfffffc0d
 8001054:	fffff801 	.word	0xfffff801
 8001058:	464a      	mov	r2, r9
 800105a:	2301      	movs	r3, #1
 800105c:	431a      	orrs	r2, r3
 800105e:	4691      	mov	r9, r2
 8001060:	2400      	movs	r4, #0
 8001062:	2001      	movs	r0, #1
 8001064:	e66e      	b.n	8000d44 <__aeabi_ddiv+0x80>
 8001066:	2300      	movs	r3, #0
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	469a      	mov	sl, r3
 800106c:	2500      	movs	r5, #0
 800106e:	4b88      	ldr	r3, [pc, #544]	; (8001290 <__aeabi_ddiv+0x5cc>)
 8001070:	0312      	lsls	r2, r2, #12
 8001072:	e67e      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001074:	2501      	movs	r5, #1
 8001076:	426d      	negs	r5, r5
 8001078:	2201      	movs	r2, #1
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	2a38      	cmp	r2, #56	; 0x38
 800107e:	dd00      	ble.n	8001082 <__aeabi_ddiv+0x3be>
 8001080:	e674      	b.n	8000d6c <__aeabi_ddiv+0xa8>
 8001082:	2a1f      	cmp	r2, #31
 8001084:	dc00      	bgt.n	8001088 <__aeabi_ddiv+0x3c4>
 8001086:	e0bd      	b.n	8001204 <__aeabi_ddiv+0x540>
 8001088:	211f      	movs	r1, #31
 800108a:	4249      	negs	r1, r1
 800108c:	1acb      	subs	r3, r1, r3
 800108e:	4641      	mov	r1, r8
 8001090:	40d9      	lsrs	r1, r3
 8001092:	000b      	movs	r3, r1
 8001094:	2a20      	cmp	r2, #32
 8001096:	d004      	beq.n	80010a2 <__aeabi_ddiv+0x3de>
 8001098:	4641      	mov	r1, r8
 800109a:	4a7e      	ldr	r2, [pc, #504]	; (8001294 <__aeabi_ddiv+0x5d0>)
 800109c:	445a      	add	r2, fp
 800109e:	4091      	lsls	r1, r2
 80010a0:	430d      	orrs	r5, r1
 80010a2:	0029      	movs	r1, r5
 80010a4:	1e4a      	subs	r2, r1, #1
 80010a6:	4191      	sbcs	r1, r2
 80010a8:	4319      	orrs	r1, r3
 80010aa:	2307      	movs	r3, #7
 80010ac:	001d      	movs	r5, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	400d      	ands	r5, r1
 80010b2:	420b      	tst	r3, r1
 80010b4:	d100      	bne.n	80010b8 <__aeabi_ddiv+0x3f4>
 80010b6:	e0d0      	b.n	800125a <__aeabi_ddiv+0x596>
 80010b8:	220f      	movs	r2, #15
 80010ba:	2300      	movs	r3, #0
 80010bc:	400a      	ands	r2, r1
 80010be:	2a04      	cmp	r2, #4
 80010c0:	d100      	bne.n	80010c4 <__aeabi_ddiv+0x400>
 80010c2:	e0c7      	b.n	8001254 <__aeabi_ddiv+0x590>
 80010c4:	1d0a      	adds	r2, r1, #4
 80010c6:	428a      	cmp	r2, r1
 80010c8:	4189      	sbcs	r1, r1
 80010ca:	4249      	negs	r1, r1
 80010cc:	185b      	adds	r3, r3, r1
 80010ce:	0011      	movs	r1, r2
 80010d0:	021a      	lsls	r2, r3, #8
 80010d2:	d400      	bmi.n	80010d6 <__aeabi_ddiv+0x412>
 80010d4:	e0be      	b.n	8001254 <__aeabi_ddiv+0x590>
 80010d6:	2301      	movs	r3, #1
 80010d8:	2200      	movs	r2, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	e649      	b.n	8000d72 <__aeabi_ddiv+0xae>
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	4643      	mov	r3, r8
 80010e2:	0312      	lsls	r2, r2, #12
 80010e4:	4213      	tst	r3, r2
 80010e6:	d008      	beq.n	80010fa <__aeabi_ddiv+0x436>
 80010e8:	4214      	tst	r4, r2
 80010ea:	d106      	bne.n	80010fa <__aeabi_ddiv+0x436>
 80010ec:	4322      	orrs	r2, r4
 80010ee:	0312      	lsls	r2, r2, #12
 80010f0:	46ba      	mov	sl, r7
 80010f2:	000d      	movs	r5, r1
 80010f4:	4b66      	ldr	r3, [pc, #408]	; (8001290 <__aeabi_ddiv+0x5cc>)
 80010f6:	0b12      	lsrs	r2, r2, #12
 80010f8:	e63b      	b.n	8000d72 <__aeabi_ddiv+0xae>
 80010fa:	2280      	movs	r2, #128	; 0x80
 80010fc:	4643      	mov	r3, r8
 80010fe:	0312      	lsls	r2, r2, #12
 8001100:	431a      	orrs	r2, r3
 8001102:	0312      	lsls	r2, r2, #12
 8001104:	46b2      	mov	sl, r6
 8001106:	4b62      	ldr	r3, [pc, #392]	; (8001290 <__aeabi_ddiv+0x5cc>)
 8001108:	0b12      	lsrs	r2, r2, #12
 800110a:	e632      	b.n	8000d72 <__aeabi_ddiv+0xae>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x44e>
 8001110:	e702      	b.n	8000f18 <__aeabi_ddiv+0x254>
 8001112:	19a6      	adds	r6, r4, r6
 8001114:	1e6a      	subs	r2, r5, #1
 8001116:	42a6      	cmp	r6, r4
 8001118:	d200      	bcs.n	800111c <__aeabi_ddiv+0x458>
 800111a:	e089      	b.n	8001230 <__aeabi_ddiv+0x56c>
 800111c:	4286      	cmp	r6, r0
 800111e:	d200      	bcs.n	8001122 <__aeabi_ddiv+0x45e>
 8001120:	e09f      	b.n	8001262 <__aeabi_ddiv+0x59e>
 8001122:	d100      	bne.n	8001126 <__aeabi_ddiv+0x462>
 8001124:	e0af      	b.n	8001286 <__aeabi_ddiv+0x5c2>
 8001126:	0015      	movs	r5, r2
 8001128:	e6f4      	b.n	8000f14 <__aeabi_ddiv+0x250>
 800112a:	42a9      	cmp	r1, r5
 800112c:	d900      	bls.n	8001130 <__aeabi_ddiv+0x46c>
 800112e:	e63c      	b.n	8000daa <__aeabi_ddiv+0xe6>
 8001130:	4643      	mov	r3, r8
 8001132:	07de      	lsls	r6, r3, #31
 8001134:	0858      	lsrs	r0, r3, #1
 8001136:	086b      	lsrs	r3, r5, #1
 8001138:	431e      	orrs	r6, r3
 800113a:	07ed      	lsls	r5, r5, #31
 800113c:	e63c      	b.n	8000db8 <__aeabi_ddiv+0xf4>
 800113e:	f000 fcd5 	bl	8001aec <__clzsi2>
 8001142:	0001      	movs	r1, r0
 8001144:	0002      	movs	r2, r0
 8001146:	3115      	adds	r1, #21
 8001148:	3220      	adds	r2, #32
 800114a:	291c      	cmp	r1, #28
 800114c:	dc00      	bgt.n	8001150 <__aeabi_ddiv+0x48c>
 800114e:	e72c      	b.n	8000faa <__aeabi_ddiv+0x2e6>
 8001150:	464b      	mov	r3, r9
 8001152:	3808      	subs	r0, #8
 8001154:	4083      	lsls	r3, r0
 8001156:	2500      	movs	r5, #0
 8001158:	4698      	mov	r8, r3
 800115a:	e732      	b.n	8000fc2 <__aeabi_ddiv+0x2fe>
 800115c:	f000 fcc6 	bl	8001aec <__clzsi2>
 8001160:	0003      	movs	r3, r0
 8001162:	001a      	movs	r2, r3
 8001164:	3215      	adds	r2, #21
 8001166:	3020      	adds	r0, #32
 8001168:	2a1c      	cmp	r2, #28
 800116a:	dc00      	bgt.n	800116e <__aeabi_ddiv+0x4aa>
 800116c:	e6ff      	b.n	8000f6e <__aeabi_ddiv+0x2aa>
 800116e:	4654      	mov	r4, sl
 8001170:	3b08      	subs	r3, #8
 8001172:	2100      	movs	r1, #0
 8001174:	409c      	lsls	r4, r3
 8001176:	e705      	b.n	8000f84 <__aeabi_ddiv+0x2c0>
 8001178:	1936      	adds	r6, r6, r4
 800117a:	3b01      	subs	r3, #1
 800117c:	42b4      	cmp	r4, r6
 800117e:	d900      	bls.n	8001182 <__aeabi_ddiv+0x4be>
 8001180:	e6a6      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 8001182:	42b2      	cmp	r2, r6
 8001184:	d800      	bhi.n	8001188 <__aeabi_ddiv+0x4c4>
 8001186:	e6a3      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 8001188:	1e83      	subs	r3, r0, #2
 800118a:	1936      	adds	r6, r6, r4
 800118c:	e6a0      	b.n	8000ed0 <__aeabi_ddiv+0x20c>
 800118e:	1909      	adds	r1, r1, r4
 8001190:	3d01      	subs	r5, #1
 8001192:	428c      	cmp	r4, r1
 8001194:	d900      	bls.n	8001198 <__aeabi_ddiv+0x4d4>
 8001196:	e68d      	b.n	8000eb4 <__aeabi_ddiv+0x1f0>
 8001198:	428a      	cmp	r2, r1
 800119a:	d800      	bhi.n	800119e <__aeabi_ddiv+0x4da>
 800119c:	e68a      	b.n	8000eb4 <__aeabi_ddiv+0x1f0>
 800119e:	1e85      	subs	r5, r0, #2
 80011a0:	1909      	adds	r1, r1, r4
 80011a2:	e687      	b.n	8000eb4 <__aeabi_ddiv+0x1f0>
 80011a4:	220f      	movs	r2, #15
 80011a6:	402a      	ands	r2, r5
 80011a8:	2a04      	cmp	r2, #4
 80011aa:	d100      	bne.n	80011ae <__aeabi_ddiv+0x4ea>
 80011ac:	e6bc      	b.n	8000f28 <__aeabi_ddiv+0x264>
 80011ae:	1d29      	adds	r1, r5, #4
 80011b0:	42a9      	cmp	r1, r5
 80011b2:	41ad      	sbcs	r5, r5
 80011b4:	426d      	negs	r5, r5
 80011b6:	08c9      	lsrs	r1, r1, #3
 80011b8:	44a8      	add	r8, r5
 80011ba:	e6b6      	b.n	8000f2a <__aeabi_ddiv+0x266>
 80011bc:	42af      	cmp	r7, r5
 80011be:	d900      	bls.n	80011c2 <__aeabi_ddiv+0x4fe>
 80011c0:	e662      	b.n	8000e88 <__aeabi_ddiv+0x1c4>
 80011c2:	4281      	cmp	r1, r0
 80011c4:	d804      	bhi.n	80011d0 <__aeabi_ddiv+0x50c>
 80011c6:	d000      	beq.n	80011ca <__aeabi_ddiv+0x506>
 80011c8:	e65e      	b.n	8000e88 <__aeabi_ddiv+0x1c4>
 80011ca:	42ae      	cmp	r6, r5
 80011cc:	d800      	bhi.n	80011d0 <__aeabi_ddiv+0x50c>
 80011ce:	e65b      	b.n	8000e88 <__aeabi_ddiv+0x1c4>
 80011d0:	2302      	movs	r3, #2
 80011d2:	425b      	negs	r3, r3
 80011d4:	469c      	mov	ip, r3
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	44e0      	add	r8, ip
 80011da:	469c      	mov	ip, r3
 80011dc:	4465      	add	r5, ip
 80011de:	429d      	cmp	r5, r3
 80011e0:	419b      	sbcs	r3, r3
 80011e2:	425b      	negs	r3, r3
 80011e4:	191b      	adds	r3, r3, r4
 80011e6:	18c0      	adds	r0, r0, r3
 80011e8:	e64f      	b.n	8000e8a <__aeabi_ddiv+0x1c6>
 80011ea:	42b2      	cmp	r2, r6
 80011ec:	d800      	bhi.n	80011f0 <__aeabi_ddiv+0x52c>
 80011ee:	e612      	b.n	8000e16 <__aeabi_ddiv+0x152>
 80011f0:	1e83      	subs	r3, r0, #2
 80011f2:	1936      	adds	r6, r6, r4
 80011f4:	e60f      	b.n	8000e16 <__aeabi_ddiv+0x152>
 80011f6:	428a      	cmp	r2, r1
 80011f8:	d800      	bhi.n	80011fc <__aeabi_ddiv+0x538>
 80011fa:	e5fa      	b.n	8000df2 <__aeabi_ddiv+0x12e>
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	4698      	mov	r8, r3
 8001200:	1909      	adds	r1, r1, r4
 8001202:	e5f6      	b.n	8000df2 <__aeabi_ddiv+0x12e>
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <__aeabi_ddiv+0x5d4>)
 8001206:	0028      	movs	r0, r5
 8001208:	445b      	add	r3, fp
 800120a:	4641      	mov	r1, r8
 800120c:	409d      	lsls	r5, r3
 800120e:	4099      	lsls	r1, r3
 8001210:	40d0      	lsrs	r0, r2
 8001212:	1e6b      	subs	r3, r5, #1
 8001214:	419d      	sbcs	r5, r3
 8001216:	4643      	mov	r3, r8
 8001218:	4301      	orrs	r1, r0
 800121a:	4329      	orrs	r1, r5
 800121c:	40d3      	lsrs	r3, r2
 800121e:	074a      	lsls	r2, r1, #29
 8001220:	d100      	bne.n	8001224 <__aeabi_ddiv+0x560>
 8001222:	e755      	b.n	80010d0 <__aeabi_ddiv+0x40c>
 8001224:	220f      	movs	r2, #15
 8001226:	400a      	ands	r2, r1
 8001228:	2a04      	cmp	r2, #4
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0x56a>
 800122c:	e74a      	b.n	80010c4 <__aeabi_ddiv+0x400>
 800122e:	e74f      	b.n	80010d0 <__aeabi_ddiv+0x40c>
 8001230:	0015      	movs	r5, r2
 8001232:	4286      	cmp	r6, r0
 8001234:	d000      	beq.n	8001238 <__aeabi_ddiv+0x574>
 8001236:	e66d      	b.n	8000f14 <__aeabi_ddiv+0x250>
 8001238:	9a00      	ldr	r2, [sp, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d000      	beq.n	8001240 <__aeabi_ddiv+0x57c>
 800123e:	e669      	b.n	8000f14 <__aeabi_ddiv+0x250>
 8001240:	e66a      	b.n	8000f18 <__aeabi_ddiv+0x254>
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <__aeabi_ddiv+0x5d8>)
 8001244:	445b      	add	r3, fp
 8001246:	2b00      	cmp	r3, #0
 8001248:	dc00      	bgt.n	800124c <__aeabi_ddiv+0x588>
 800124a:	e713      	b.n	8001074 <__aeabi_ddiv+0x3b0>
 800124c:	2501      	movs	r5, #1
 800124e:	2100      	movs	r1, #0
 8001250:	44a8      	add	r8, r5
 8001252:	e66a      	b.n	8000f2a <__aeabi_ddiv+0x266>
 8001254:	075d      	lsls	r5, r3, #29
 8001256:	025b      	lsls	r3, r3, #9
 8001258:	0b1a      	lsrs	r2, r3, #12
 800125a:	08c9      	lsrs	r1, r1, #3
 800125c:	2300      	movs	r3, #0
 800125e:	430d      	orrs	r5, r1
 8001260:	e587      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001262:	9900      	ldr	r1, [sp, #0]
 8001264:	3d02      	subs	r5, #2
 8001266:	004a      	lsls	r2, r1, #1
 8001268:	428a      	cmp	r2, r1
 800126a:	41bf      	sbcs	r7, r7
 800126c:	427f      	negs	r7, r7
 800126e:	193f      	adds	r7, r7, r4
 8001270:	19f6      	adds	r6, r6, r7
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	e7dd      	b.n	8001232 <__aeabi_ddiv+0x56e>
 8001276:	2280      	movs	r2, #128	; 0x80
 8001278:	4643      	mov	r3, r8
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	431a      	orrs	r2, r3
 800127e:	0312      	lsls	r2, r2, #12
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <__aeabi_ddiv+0x5cc>)
 8001282:	0b12      	lsrs	r2, r2, #12
 8001284:	e575      	b.n	8000d72 <__aeabi_ddiv+0xae>
 8001286:	9900      	ldr	r1, [sp, #0]
 8001288:	4299      	cmp	r1, r3
 800128a:	d3ea      	bcc.n	8001262 <__aeabi_ddiv+0x59e>
 800128c:	0015      	movs	r5, r2
 800128e:	e7d3      	b.n	8001238 <__aeabi_ddiv+0x574>
 8001290:	000007ff 	.word	0x000007ff
 8001294:	0000043e 	.word	0x0000043e
 8001298:	0000041e 	.word	0x0000041e
 800129c:	000003ff 	.word	0x000003ff

080012a0 <__aeabi_dsub>:
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a2:	4657      	mov	r7, sl
 80012a4:	464e      	mov	r6, r9
 80012a6:	4645      	mov	r5, r8
 80012a8:	46de      	mov	lr, fp
 80012aa:	b5e0      	push	{r5, r6, r7, lr}
 80012ac:	000d      	movs	r5, r1
 80012ae:	0004      	movs	r4, r0
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	032b      	lsls	r3, r5, #12
 80012b6:	0a5b      	lsrs	r3, r3, #9
 80012b8:	0f62      	lsrs	r2, r4, #29
 80012ba:	431a      	orrs	r2, r3
 80012bc:	00e3      	lsls	r3, r4, #3
 80012be:	030c      	lsls	r4, r1, #12
 80012c0:	0a64      	lsrs	r4, r4, #9
 80012c2:	0f47      	lsrs	r7, r0, #29
 80012c4:	4327      	orrs	r7, r4
 80012c6:	4cd0      	ldr	r4, [pc, #832]	; (8001608 <__aeabi_dsub+0x368>)
 80012c8:	006e      	lsls	r6, r5, #1
 80012ca:	4691      	mov	r9, r2
 80012cc:	b083      	sub	sp, #12
 80012ce:	004a      	lsls	r2, r1, #1
 80012d0:	00c0      	lsls	r0, r0, #3
 80012d2:	4698      	mov	r8, r3
 80012d4:	46a2      	mov	sl, r4
 80012d6:	0d76      	lsrs	r6, r6, #21
 80012d8:	0fed      	lsrs	r5, r5, #31
 80012da:	0d52      	lsrs	r2, r2, #21
 80012dc:	0fc9      	lsrs	r1, r1, #31
 80012de:	9001      	str	r0, [sp, #4]
 80012e0:	42a2      	cmp	r2, r4
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dsub+0x46>
 80012e4:	e0b9      	b.n	800145a <__aeabi_dsub+0x1ba>
 80012e6:	2401      	movs	r4, #1
 80012e8:	4061      	eors	r1, r4
 80012ea:	468b      	mov	fp, r1
 80012ec:	428d      	cmp	r5, r1
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dsub+0x52>
 80012f0:	e08d      	b.n	800140e <__aeabi_dsub+0x16e>
 80012f2:	1ab4      	subs	r4, r6, r2
 80012f4:	46a4      	mov	ip, r4
 80012f6:	2c00      	cmp	r4, #0
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dsub+0x5c>
 80012fa:	e0b7      	b.n	800146c <__aeabi_dsub+0x1cc>
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dsub+0x62>
 8001300:	e0cb      	b.n	800149a <__aeabi_dsub+0x1fa>
 8001302:	4ac1      	ldr	r2, [pc, #772]	; (8001608 <__aeabi_dsub+0x368>)
 8001304:	4296      	cmp	r6, r2
 8001306:	d100      	bne.n	800130a <__aeabi_dsub+0x6a>
 8001308:	e186      	b.n	8001618 <__aeabi_dsub+0x378>
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	0412      	lsls	r2, r2, #16
 800130e:	4317      	orrs	r7, r2
 8001310:	4662      	mov	r2, ip
 8001312:	2a38      	cmp	r2, #56	; 0x38
 8001314:	dd00      	ble.n	8001318 <__aeabi_dsub+0x78>
 8001316:	e1a4      	b.n	8001662 <__aeabi_dsub+0x3c2>
 8001318:	2a1f      	cmp	r2, #31
 800131a:	dd00      	ble.n	800131e <__aeabi_dsub+0x7e>
 800131c:	e21d      	b.n	800175a <__aeabi_dsub+0x4ba>
 800131e:	4661      	mov	r1, ip
 8001320:	2220      	movs	r2, #32
 8001322:	003c      	movs	r4, r7
 8001324:	1a52      	subs	r2, r2, r1
 8001326:	0001      	movs	r1, r0
 8001328:	4090      	lsls	r0, r2
 800132a:	4094      	lsls	r4, r2
 800132c:	1e42      	subs	r2, r0, #1
 800132e:	4190      	sbcs	r0, r2
 8001330:	4662      	mov	r2, ip
 8001332:	46a0      	mov	r8, r4
 8001334:	4664      	mov	r4, ip
 8001336:	40d7      	lsrs	r7, r2
 8001338:	464a      	mov	r2, r9
 800133a:	40e1      	lsrs	r1, r4
 800133c:	4644      	mov	r4, r8
 800133e:	1bd2      	subs	r2, r2, r7
 8001340:	4691      	mov	r9, r2
 8001342:	430c      	orrs	r4, r1
 8001344:	4304      	orrs	r4, r0
 8001346:	1b1c      	subs	r4, r3, r4
 8001348:	42a3      	cmp	r3, r4
 800134a:	4192      	sbcs	r2, r2
 800134c:	464b      	mov	r3, r9
 800134e:	4252      	negs	r2, r2
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	469a      	mov	sl, r3
 8001354:	4653      	mov	r3, sl
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	d400      	bmi.n	800135c <__aeabi_dsub+0xbc>
 800135a:	e12b      	b.n	80015b4 <__aeabi_dsub+0x314>
 800135c:	4653      	mov	r3, sl
 800135e:	025a      	lsls	r2, r3, #9
 8001360:	0a53      	lsrs	r3, r2, #9
 8001362:	469a      	mov	sl, r3
 8001364:	4653      	mov	r3, sl
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dsub+0xcc>
 800136a:	e166      	b.n	800163a <__aeabi_dsub+0x39a>
 800136c:	4650      	mov	r0, sl
 800136e:	f000 fbbd 	bl	8001aec <__clzsi2>
 8001372:	0003      	movs	r3, r0
 8001374:	3b08      	subs	r3, #8
 8001376:	2220      	movs	r2, #32
 8001378:	0020      	movs	r0, r4
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	4651      	mov	r1, sl
 800137e:	40d0      	lsrs	r0, r2
 8001380:	4099      	lsls	r1, r3
 8001382:	0002      	movs	r2, r0
 8001384:	409c      	lsls	r4, r3
 8001386:	430a      	orrs	r2, r1
 8001388:	429e      	cmp	r6, r3
 800138a:	dd00      	ble.n	800138e <__aeabi_dsub+0xee>
 800138c:	e164      	b.n	8001658 <__aeabi_dsub+0x3b8>
 800138e:	1b9b      	subs	r3, r3, r6
 8001390:	1c59      	adds	r1, r3, #1
 8001392:	291f      	cmp	r1, #31
 8001394:	dd00      	ble.n	8001398 <__aeabi_dsub+0xf8>
 8001396:	e0fe      	b.n	8001596 <__aeabi_dsub+0x2f6>
 8001398:	2320      	movs	r3, #32
 800139a:	0010      	movs	r0, r2
 800139c:	0026      	movs	r6, r4
 800139e:	1a5b      	subs	r3, r3, r1
 80013a0:	409c      	lsls	r4, r3
 80013a2:	4098      	lsls	r0, r3
 80013a4:	40ce      	lsrs	r6, r1
 80013a6:	40ca      	lsrs	r2, r1
 80013a8:	1e63      	subs	r3, r4, #1
 80013aa:	419c      	sbcs	r4, r3
 80013ac:	4330      	orrs	r0, r6
 80013ae:	4692      	mov	sl, r2
 80013b0:	2600      	movs	r6, #0
 80013b2:	4304      	orrs	r4, r0
 80013b4:	0763      	lsls	r3, r4, #29
 80013b6:	d009      	beq.n	80013cc <__aeabi_dsub+0x12c>
 80013b8:	230f      	movs	r3, #15
 80013ba:	4023      	ands	r3, r4
 80013bc:	2b04      	cmp	r3, #4
 80013be:	d005      	beq.n	80013cc <__aeabi_dsub+0x12c>
 80013c0:	1d23      	adds	r3, r4, #4
 80013c2:	42a3      	cmp	r3, r4
 80013c4:	41a4      	sbcs	r4, r4
 80013c6:	4264      	negs	r4, r4
 80013c8:	44a2      	add	sl, r4
 80013ca:	001c      	movs	r4, r3
 80013cc:	4653      	mov	r3, sl
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	d400      	bmi.n	80013d4 <__aeabi_dsub+0x134>
 80013d2:	e0f2      	b.n	80015ba <__aeabi_dsub+0x31a>
 80013d4:	4b8c      	ldr	r3, [pc, #560]	; (8001608 <__aeabi_dsub+0x368>)
 80013d6:	3601      	adds	r6, #1
 80013d8:	429e      	cmp	r6, r3
 80013da:	d100      	bne.n	80013de <__aeabi_dsub+0x13e>
 80013dc:	e10f      	b.n	80015fe <__aeabi_dsub+0x35e>
 80013de:	4653      	mov	r3, sl
 80013e0:	498a      	ldr	r1, [pc, #552]	; (800160c <__aeabi_dsub+0x36c>)
 80013e2:	08e4      	lsrs	r4, r4, #3
 80013e4:	400b      	ands	r3, r1
 80013e6:	0019      	movs	r1, r3
 80013e8:	075b      	lsls	r3, r3, #29
 80013ea:	4323      	orrs	r3, r4
 80013ec:	0572      	lsls	r2, r6, #21
 80013ee:	024c      	lsls	r4, r1, #9
 80013f0:	0b24      	lsrs	r4, r4, #12
 80013f2:	0d52      	lsrs	r2, r2, #21
 80013f4:	0512      	lsls	r2, r2, #20
 80013f6:	4322      	orrs	r2, r4
 80013f8:	07ed      	lsls	r5, r5, #31
 80013fa:	432a      	orrs	r2, r5
 80013fc:	0018      	movs	r0, r3
 80013fe:	0011      	movs	r1, r2
 8001400:	b003      	add	sp, #12
 8001402:	bcf0      	pop	{r4, r5, r6, r7}
 8001404:	46bb      	mov	fp, r7
 8001406:	46b2      	mov	sl, r6
 8001408:	46a9      	mov	r9, r5
 800140a:	46a0      	mov	r8, r4
 800140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140e:	1ab4      	subs	r4, r6, r2
 8001410:	46a4      	mov	ip, r4
 8001412:	2c00      	cmp	r4, #0
 8001414:	dd59      	ble.n	80014ca <__aeabi_dsub+0x22a>
 8001416:	2a00      	cmp	r2, #0
 8001418:	d100      	bne.n	800141c <__aeabi_dsub+0x17c>
 800141a:	e0b0      	b.n	800157e <__aeabi_dsub+0x2de>
 800141c:	4556      	cmp	r6, sl
 800141e:	d100      	bne.n	8001422 <__aeabi_dsub+0x182>
 8001420:	e0fa      	b.n	8001618 <__aeabi_dsub+0x378>
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	0412      	lsls	r2, r2, #16
 8001426:	4317      	orrs	r7, r2
 8001428:	4662      	mov	r2, ip
 800142a:	2a38      	cmp	r2, #56	; 0x38
 800142c:	dd00      	ble.n	8001430 <__aeabi_dsub+0x190>
 800142e:	e0d4      	b.n	80015da <__aeabi_dsub+0x33a>
 8001430:	2a1f      	cmp	r2, #31
 8001432:	dc00      	bgt.n	8001436 <__aeabi_dsub+0x196>
 8001434:	e1c0      	b.n	80017b8 <__aeabi_dsub+0x518>
 8001436:	0039      	movs	r1, r7
 8001438:	3a20      	subs	r2, #32
 800143a:	40d1      	lsrs	r1, r2
 800143c:	4662      	mov	r2, ip
 800143e:	2a20      	cmp	r2, #32
 8001440:	d006      	beq.n	8001450 <__aeabi_dsub+0x1b0>
 8001442:	4664      	mov	r4, ip
 8001444:	2240      	movs	r2, #64	; 0x40
 8001446:	1b12      	subs	r2, r2, r4
 8001448:	003c      	movs	r4, r7
 800144a:	4094      	lsls	r4, r2
 800144c:	4304      	orrs	r4, r0
 800144e:	9401      	str	r4, [sp, #4]
 8001450:	9c01      	ldr	r4, [sp, #4]
 8001452:	1e62      	subs	r2, r4, #1
 8001454:	4194      	sbcs	r4, r2
 8001456:	430c      	orrs	r4, r1
 8001458:	e0c3      	b.n	80015e2 <__aeabi_dsub+0x342>
 800145a:	003c      	movs	r4, r7
 800145c:	4304      	orrs	r4, r0
 800145e:	d02b      	beq.n	80014b8 <__aeabi_dsub+0x218>
 8001460:	468b      	mov	fp, r1
 8001462:	428d      	cmp	r5, r1
 8001464:	d02e      	beq.n	80014c4 <__aeabi_dsub+0x224>
 8001466:	4c6a      	ldr	r4, [pc, #424]	; (8001610 <__aeabi_dsub+0x370>)
 8001468:	46a4      	mov	ip, r4
 800146a:	44b4      	add	ip, r6
 800146c:	4664      	mov	r4, ip
 800146e:	2c00      	cmp	r4, #0
 8001470:	d05f      	beq.n	8001532 <__aeabi_dsub+0x292>
 8001472:	1b94      	subs	r4, r2, r6
 8001474:	46a4      	mov	ip, r4
 8001476:	2e00      	cmp	r6, #0
 8001478:	d000      	beq.n	800147c <__aeabi_dsub+0x1dc>
 800147a:	e120      	b.n	80016be <__aeabi_dsub+0x41e>
 800147c:	464c      	mov	r4, r9
 800147e:	431c      	orrs	r4, r3
 8001480:	d100      	bne.n	8001484 <__aeabi_dsub+0x1e4>
 8001482:	e1c7      	b.n	8001814 <__aeabi_dsub+0x574>
 8001484:	4661      	mov	r1, ip
 8001486:	1e4c      	subs	r4, r1, #1
 8001488:	2901      	cmp	r1, #1
 800148a:	d100      	bne.n	800148e <__aeabi_dsub+0x1ee>
 800148c:	e223      	b.n	80018d6 <__aeabi_dsub+0x636>
 800148e:	4d5e      	ldr	r5, [pc, #376]	; (8001608 <__aeabi_dsub+0x368>)
 8001490:	45ac      	cmp	ip, r5
 8001492:	d100      	bne.n	8001496 <__aeabi_dsub+0x1f6>
 8001494:	e1d8      	b.n	8001848 <__aeabi_dsub+0x5a8>
 8001496:	46a4      	mov	ip, r4
 8001498:	e11a      	b.n	80016d0 <__aeabi_dsub+0x430>
 800149a:	003a      	movs	r2, r7
 800149c:	4302      	orrs	r2, r0
 800149e:	d100      	bne.n	80014a2 <__aeabi_dsub+0x202>
 80014a0:	e0e4      	b.n	800166c <__aeabi_dsub+0x3cc>
 80014a2:	0022      	movs	r2, r4
 80014a4:	3a01      	subs	r2, #1
 80014a6:	2c01      	cmp	r4, #1
 80014a8:	d100      	bne.n	80014ac <__aeabi_dsub+0x20c>
 80014aa:	e1c3      	b.n	8001834 <__aeabi_dsub+0x594>
 80014ac:	4956      	ldr	r1, [pc, #344]	; (8001608 <__aeabi_dsub+0x368>)
 80014ae:	428c      	cmp	r4, r1
 80014b0:	d100      	bne.n	80014b4 <__aeabi_dsub+0x214>
 80014b2:	e0b1      	b.n	8001618 <__aeabi_dsub+0x378>
 80014b4:	4694      	mov	ip, r2
 80014b6:	e72b      	b.n	8001310 <__aeabi_dsub+0x70>
 80014b8:	2401      	movs	r4, #1
 80014ba:	4061      	eors	r1, r4
 80014bc:	468b      	mov	fp, r1
 80014be:	428d      	cmp	r5, r1
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dsub+0x224>
 80014c2:	e716      	b.n	80012f2 <__aeabi_dsub+0x52>
 80014c4:	4952      	ldr	r1, [pc, #328]	; (8001610 <__aeabi_dsub+0x370>)
 80014c6:	468c      	mov	ip, r1
 80014c8:	44b4      	add	ip, r6
 80014ca:	4664      	mov	r4, ip
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d100      	bne.n	80014d2 <__aeabi_dsub+0x232>
 80014d0:	e0d3      	b.n	800167a <__aeabi_dsub+0x3da>
 80014d2:	1b91      	subs	r1, r2, r6
 80014d4:	468c      	mov	ip, r1
 80014d6:	2e00      	cmp	r6, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_dsub+0x23c>
 80014da:	e15e      	b.n	800179a <__aeabi_dsub+0x4fa>
 80014dc:	494a      	ldr	r1, [pc, #296]	; (8001608 <__aeabi_dsub+0x368>)
 80014de:	428a      	cmp	r2, r1
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dsub+0x244>
 80014e2:	e1be      	b.n	8001862 <__aeabi_dsub+0x5c2>
 80014e4:	2180      	movs	r1, #128	; 0x80
 80014e6:	464c      	mov	r4, r9
 80014e8:	0409      	lsls	r1, r1, #16
 80014ea:	430c      	orrs	r4, r1
 80014ec:	46a1      	mov	r9, r4
 80014ee:	4661      	mov	r1, ip
 80014f0:	2938      	cmp	r1, #56	; 0x38
 80014f2:	dd00      	ble.n	80014f6 <__aeabi_dsub+0x256>
 80014f4:	e1ba      	b.n	800186c <__aeabi_dsub+0x5cc>
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dsub+0x25c>
 80014fa:	e227      	b.n	800194c <__aeabi_dsub+0x6ac>
 80014fc:	2420      	movs	r4, #32
 80014fe:	1a64      	subs	r4, r4, r1
 8001500:	4649      	mov	r1, r9
 8001502:	40a1      	lsls	r1, r4
 8001504:	001e      	movs	r6, r3
 8001506:	4688      	mov	r8, r1
 8001508:	4661      	mov	r1, ip
 800150a:	40a3      	lsls	r3, r4
 800150c:	40ce      	lsrs	r6, r1
 800150e:	4641      	mov	r1, r8
 8001510:	1e5c      	subs	r4, r3, #1
 8001512:	41a3      	sbcs	r3, r4
 8001514:	4331      	orrs	r1, r6
 8001516:	4319      	orrs	r1, r3
 8001518:	000c      	movs	r4, r1
 800151a:	4663      	mov	r3, ip
 800151c:	4649      	mov	r1, r9
 800151e:	40d9      	lsrs	r1, r3
 8001520:	187f      	adds	r7, r7, r1
 8001522:	1824      	adds	r4, r4, r0
 8001524:	4284      	cmp	r4, r0
 8001526:	419b      	sbcs	r3, r3
 8001528:	425b      	negs	r3, r3
 800152a:	469a      	mov	sl, r3
 800152c:	0016      	movs	r6, r2
 800152e:	44ba      	add	sl, r7
 8001530:	e05d      	b.n	80015ee <__aeabi_dsub+0x34e>
 8001532:	4c38      	ldr	r4, [pc, #224]	; (8001614 <__aeabi_dsub+0x374>)
 8001534:	1c72      	adds	r2, r6, #1
 8001536:	4222      	tst	r2, r4
 8001538:	d000      	beq.n	800153c <__aeabi_dsub+0x29c>
 800153a:	e0df      	b.n	80016fc <__aeabi_dsub+0x45c>
 800153c:	464a      	mov	r2, r9
 800153e:	431a      	orrs	r2, r3
 8001540:	2e00      	cmp	r6, #0
 8001542:	d000      	beq.n	8001546 <__aeabi_dsub+0x2a6>
 8001544:	e15c      	b.n	8001800 <__aeabi_dsub+0x560>
 8001546:	2a00      	cmp	r2, #0
 8001548:	d100      	bne.n	800154c <__aeabi_dsub+0x2ac>
 800154a:	e1cf      	b.n	80018ec <__aeabi_dsub+0x64c>
 800154c:	003a      	movs	r2, r7
 800154e:	4302      	orrs	r2, r0
 8001550:	d100      	bne.n	8001554 <__aeabi_dsub+0x2b4>
 8001552:	e17f      	b.n	8001854 <__aeabi_dsub+0x5b4>
 8001554:	1a1c      	subs	r4, r3, r0
 8001556:	464a      	mov	r2, r9
 8001558:	42a3      	cmp	r3, r4
 800155a:	4189      	sbcs	r1, r1
 800155c:	1bd2      	subs	r2, r2, r7
 800155e:	4249      	negs	r1, r1
 8001560:	1a52      	subs	r2, r2, r1
 8001562:	4692      	mov	sl, r2
 8001564:	0212      	lsls	r2, r2, #8
 8001566:	d400      	bmi.n	800156a <__aeabi_dsub+0x2ca>
 8001568:	e20a      	b.n	8001980 <__aeabi_dsub+0x6e0>
 800156a:	1ac4      	subs	r4, r0, r3
 800156c:	42a0      	cmp	r0, r4
 800156e:	4180      	sbcs	r0, r0
 8001570:	464b      	mov	r3, r9
 8001572:	4240      	negs	r0, r0
 8001574:	1aff      	subs	r7, r7, r3
 8001576:	1a3b      	subs	r3, r7, r0
 8001578:	469a      	mov	sl, r3
 800157a:	465d      	mov	r5, fp
 800157c:	e71a      	b.n	80013b4 <__aeabi_dsub+0x114>
 800157e:	003a      	movs	r2, r7
 8001580:	4302      	orrs	r2, r0
 8001582:	d073      	beq.n	800166c <__aeabi_dsub+0x3cc>
 8001584:	0022      	movs	r2, r4
 8001586:	3a01      	subs	r2, #1
 8001588:	2c01      	cmp	r4, #1
 800158a:	d100      	bne.n	800158e <__aeabi_dsub+0x2ee>
 800158c:	e0cb      	b.n	8001726 <__aeabi_dsub+0x486>
 800158e:	4554      	cmp	r4, sl
 8001590:	d042      	beq.n	8001618 <__aeabi_dsub+0x378>
 8001592:	4694      	mov	ip, r2
 8001594:	e748      	b.n	8001428 <__aeabi_dsub+0x188>
 8001596:	0010      	movs	r0, r2
 8001598:	3b1f      	subs	r3, #31
 800159a:	40d8      	lsrs	r0, r3
 800159c:	2920      	cmp	r1, #32
 800159e:	d003      	beq.n	80015a8 <__aeabi_dsub+0x308>
 80015a0:	2340      	movs	r3, #64	; 0x40
 80015a2:	1a5b      	subs	r3, r3, r1
 80015a4:	409a      	lsls	r2, r3
 80015a6:	4314      	orrs	r4, r2
 80015a8:	1e63      	subs	r3, r4, #1
 80015aa:	419c      	sbcs	r4, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	2600      	movs	r6, #0
 80015b0:	469a      	mov	sl, r3
 80015b2:	4304      	orrs	r4, r0
 80015b4:	0763      	lsls	r3, r4, #29
 80015b6:	d000      	beq.n	80015ba <__aeabi_dsub+0x31a>
 80015b8:	e6fe      	b.n	80013b8 <__aeabi_dsub+0x118>
 80015ba:	4652      	mov	r2, sl
 80015bc:	08e3      	lsrs	r3, r4, #3
 80015be:	0752      	lsls	r2, r2, #29
 80015c0:	4313      	orrs	r3, r2
 80015c2:	4652      	mov	r2, sl
 80015c4:	46b4      	mov	ip, r6
 80015c6:	08d2      	lsrs	r2, r2, #3
 80015c8:	490f      	ldr	r1, [pc, #60]	; (8001608 <__aeabi_dsub+0x368>)
 80015ca:	458c      	cmp	ip, r1
 80015cc:	d02a      	beq.n	8001624 <__aeabi_dsub+0x384>
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	0b14      	lsrs	r4, r2, #12
 80015d2:	4662      	mov	r2, ip
 80015d4:	0552      	lsls	r2, r2, #21
 80015d6:	0d52      	lsrs	r2, r2, #21
 80015d8:	e70c      	b.n	80013f4 <__aeabi_dsub+0x154>
 80015da:	003c      	movs	r4, r7
 80015dc:	4304      	orrs	r4, r0
 80015de:	1e62      	subs	r2, r4, #1
 80015e0:	4194      	sbcs	r4, r2
 80015e2:	18e4      	adds	r4, r4, r3
 80015e4:	429c      	cmp	r4, r3
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	4252      	negs	r2, r2
 80015ea:	444a      	add	r2, r9
 80015ec:	4692      	mov	sl, r2
 80015ee:	4653      	mov	r3, sl
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	d5df      	bpl.n	80015b4 <__aeabi_dsub+0x314>
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__aeabi_dsub+0x368>)
 80015f6:	3601      	adds	r6, #1
 80015f8:	429e      	cmp	r6, r3
 80015fa:	d000      	beq.n	80015fe <__aeabi_dsub+0x35e>
 80015fc:	e0a0      	b.n	8001740 <__aeabi_dsub+0x4a0>
 80015fe:	0032      	movs	r2, r6
 8001600:	2400      	movs	r4, #0
 8001602:	2300      	movs	r3, #0
 8001604:	e6f6      	b.n	80013f4 <__aeabi_dsub+0x154>
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	000007ff 	.word	0x000007ff
 800160c:	ff7fffff 	.word	0xff7fffff
 8001610:	fffff801 	.word	0xfffff801
 8001614:	000007fe 	.word	0x000007fe
 8001618:	08db      	lsrs	r3, r3, #3
 800161a:	464a      	mov	r2, r9
 800161c:	0752      	lsls	r2, r2, #29
 800161e:	4313      	orrs	r3, r2
 8001620:	464a      	mov	r2, r9
 8001622:	08d2      	lsrs	r2, r2, #3
 8001624:	0019      	movs	r1, r3
 8001626:	4311      	orrs	r1, r2
 8001628:	d100      	bne.n	800162c <__aeabi_dsub+0x38c>
 800162a:	e1b5      	b.n	8001998 <__aeabi_dsub+0x6f8>
 800162c:	2480      	movs	r4, #128	; 0x80
 800162e:	0324      	lsls	r4, r4, #12
 8001630:	4314      	orrs	r4, r2
 8001632:	0324      	lsls	r4, r4, #12
 8001634:	4ad5      	ldr	r2, [pc, #852]	; (800198c <__aeabi_dsub+0x6ec>)
 8001636:	0b24      	lsrs	r4, r4, #12
 8001638:	e6dc      	b.n	80013f4 <__aeabi_dsub+0x154>
 800163a:	0020      	movs	r0, r4
 800163c:	f000 fa56 	bl	8001aec <__clzsi2>
 8001640:	0003      	movs	r3, r0
 8001642:	3318      	adds	r3, #24
 8001644:	2b1f      	cmp	r3, #31
 8001646:	dc00      	bgt.n	800164a <__aeabi_dsub+0x3aa>
 8001648:	e695      	b.n	8001376 <__aeabi_dsub+0xd6>
 800164a:	0022      	movs	r2, r4
 800164c:	3808      	subs	r0, #8
 800164e:	4082      	lsls	r2, r0
 8001650:	2400      	movs	r4, #0
 8001652:	429e      	cmp	r6, r3
 8001654:	dc00      	bgt.n	8001658 <__aeabi_dsub+0x3b8>
 8001656:	e69a      	b.n	800138e <__aeabi_dsub+0xee>
 8001658:	1af6      	subs	r6, r6, r3
 800165a:	4bcd      	ldr	r3, [pc, #820]	; (8001990 <__aeabi_dsub+0x6f0>)
 800165c:	401a      	ands	r2, r3
 800165e:	4692      	mov	sl, r2
 8001660:	e6a8      	b.n	80013b4 <__aeabi_dsub+0x114>
 8001662:	003c      	movs	r4, r7
 8001664:	4304      	orrs	r4, r0
 8001666:	1e62      	subs	r2, r4, #1
 8001668:	4194      	sbcs	r4, r2
 800166a:	e66c      	b.n	8001346 <__aeabi_dsub+0xa6>
 800166c:	464a      	mov	r2, r9
 800166e:	08db      	lsrs	r3, r3, #3
 8001670:	0752      	lsls	r2, r2, #29
 8001672:	4313      	orrs	r3, r2
 8001674:	464a      	mov	r2, r9
 8001676:	08d2      	lsrs	r2, r2, #3
 8001678:	e7a6      	b.n	80015c8 <__aeabi_dsub+0x328>
 800167a:	4cc6      	ldr	r4, [pc, #792]	; (8001994 <__aeabi_dsub+0x6f4>)
 800167c:	1c72      	adds	r2, r6, #1
 800167e:	4222      	tst	r2, r4
 8001680:	d000      	beq.n	8001684 <__aeabi_dsub+0x3e4>
 8001682:	e0ac      	b.n	80017de <__aeabi_dsub+0x53e>
 8001684:	464a      	mov	r2, r9
 8001686:	431a      	orrs	r2, r3
 8001688:	2e00      	cmp	r6, #0
 800168a:	d000      	beq.n	800168e <__aeabi_dsub+0x3ee>
 800168c:	e105      	b.n	800189a <__aeabi_dsub+0x5fa>
 800168e:	2a00      	cmp	r2, #0
 8001690:	d100      	bne.n	8001694 <__aeabi_dsub+0x3f4>
 8001692:	e156      	b.n	8001942 <__aeabi_dsub+0x6a2>
 8001694:	003a      	movs	r2, r7
 8001696:	4302      	orrs	r2, r0
 8001698:	d100      	bne.n	800169c <__aeabi_dsub+0x3fc>
 800169a:	e0db      	b.n	8001854 <__aeabi_dsub+0x5b4>
 800169c:	181c      	adds	r4, r3, r0
 800169e:	429c      	cmp	r4, r3
 80016a0:	419b      	sbcs	r3, r3
 80016a2:	444f      	add	r7, r9
 80016a4:	46ba      	mov	sl, r7
 80016a6:	425b      	negs	r3, r3
 80016a8:	449a      	add	sl, r3
 80016aa:	4653      	mov	r3, sl
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	d400      	bmi.n	80016b2 <__aeabi_dsub+0x412>
 80016b0:	e780      	b.n	80015b4 <__aeabi_dsub+0x314>
 80016b2:	4652      	mov	r2, sl
 80016b4:	4bb6      	ldr	r3, [pc, #728]	; (8001990 <__aeabi_dsub+0x6f0>)
 80016b6:	2601      	movs	r6, #1
 80016b8:	401a      	ands	r2, r3
 80016ba:	4692      	mov	sl, r2
 80016bc:	e77a      	b.n	80015b4 <__aeabi_dsub+0x314>
 80016be:	4cb3      	ldr	r4, [pc, #716]	; (800198c <__aeabi_dsub+0x6ec>)
 80016c0:	42a2      	cmp	r2, r4
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dsub+0x426>
 80016c4:	e0c0      	b.n	8001848 <__aeabi_dsub+0x5a8>
 80016c6:	2480      	movs	r4, #128	; 0x80
 80016c8:	464d      	mov	r5, r9
 80016ca:	0424      	lsls	r4, r4, #16
 80016cc:	4325      	orrs	r5, r4
 80016ce:	46a9      	mov	r9, r5
 80016d0:	4664      	mov	r4, ip
 80016d2:	2c38      	cmp	r4, #56	; 0x38
 80016d4:	dc53      	bgt.n	800177e <__aeabi_dsub+0x4de>
 80016d6:	4661      	mov	r1, ip
 80016d8:	2c1f      	cmp	r4, #31
 80016da:	dd00      	ble.n	80016de <__aeabi_dsub+0x43e>
 80016dc:	e0cd      	b.n	800187a <__aeabi_dsub+0x5da>
 80016de:	2520      	movs	r5, #32
 80016e0:	001e      	movs	r6, r3
 80016e2:	1b2d      	subs	r5, r5, r4
 80016e4:	464c      	mov	r4, r9
 80016e6:	40ab      	lsls	r3, r5
 80016e8:	40ac      	lsls	r4, r5
 80016ea:	40ce      	lsrs	r6, r1
 80016ec:	1e5d      	subs	r5, r3, #1
 80016ee:	41ab      	sbcs	r3, r5
 80016f0:	4334      	orrs	r4, r6
 80016f2:	4323      	orrs	r3, r4
 80016f4:	464c      	mov	r4, r9
 80016f6:	40cc      	lsrs	r4, r1
 80016f8:	1b3f      	subs	r7, r7, r4
 80016fa:	e045      	b.n	8001788 <__aeabi_dsub+0x4e8>
 80016fc:	464a      	mov	r2, r9
 80016fe:	1a1c      	subs	r4, r3, r0
 8001700:	1bd1      	subs	r1, r2, r7
 8001702:	42a3      	cmp	r3, r4
 8001704:	4192      	sbcs	r2, r2
 8001706:	4252      	negs	r2, r2
 8001708:	4692      	mov	sl, r2
 800170a:	000a      	movs	r2, r1
 800170c:	4651      	mov	r1, sl
 800170e:	1a52      	subs	r2, r2, r1
 8001710:	4692      	mov	sl, r2
 8001712:	0212      	lsls	r2, r2, #8
 8001714:	d500      	bpl.n	8001718 <__aeabi_dsub+0x478>
 8001716:	e083      	b.n	8001820 <__aeabi_dsub+0x580>
 8001718:	4653      	mov	r3, sl
 800171a:	4323      	orrs	r3, r4
 800171c:	d000      	beq.n	8001720 <__aeabi_dsub+0x480>
 800171e:	e621      	b.n	8001364 <__aeabi_dsub+0xc4>
 8001720:	2200      	movs	r2, #0
 8001722:	2500      	movs	r5, #0
 8001724:	e753      	b.n	80015ce <__aeabi_dsub+0x32e>
 8001726:	181c      	adds	r4, r3, r0
 8001728:	429c      	cmp	r4, r3
 800172a:	419b      	sbcs	r3, r3
 800172c:	444f      	add	r7, r9
 800172e:	46ba      	mov	sl, r7
 8001730:	425b      	negs	r3, r3
 8001732:	449a      	add	sl, r3
 8001734:	4653      	mov	r3, sl
 8001736:	2601      	movs	r6, #1
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	d400      	bmi.n	800173e <__aeabi_dsub+0x49e>
 800173c:	e73a      	b.n	80015b4 <__aeabi_dsub+0x314>
 800173e:	2602      	movs	r6, #2
 8001740:	4652      	mov	r2, sl
 8001742:	4b93      	ldr	r3, [pc, #588]	; (8001990 <__aeabi_dsub+0x6f0>)
 8001744:	2101      	movs	r1, #1
 8001746:	401a      	ands	r2, r3
 8001748:	0013      	movs	r3, r2
 800174a:	4021      	ands	r1, r4
 800174c:	0862      	lsrs	r2, r4, #1
 800174e:	430a      	orrs	r2, r1
 8001750:	07dc      	lsls	r4, r3, #31
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	469a      	mov	sl, r3
 8001756:	4314      	orrs	r4, r2
 8001758:	e62c      	b.n	80013b4 <__aeabi_dsub+0x114>
 800175a:	0039      	movs	r1, r7
 800175c:	3a20      	subs	r2, #32
 800175e:	40d1      	lsrs	r1, r2
 8001760:	4662      	mov	r2, ip
 8001762:	2a20      	cmp	r2, #32
 8001764:	d006      	beq.n	8001774 <__aeabi_dsub+0x4d4>
 8001766:	4664      	mov	r4, ip
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	1b12      	subs	r2, r2, r4
 800176c:	003c      	movs	r4, r7
 800176e:	4094      	lsls	r4, r2
 8001770:	4304      	orrs	r4, r0
 8001772:	9401      	str	r4, [sp, #4]
 8001774:	9c01      	ldr	r4, [sp, #4]
 8001776:	1e62      	subs	r2, r4, #1
 8001778:	4194      	sbcs	r4, r2
 800177a:	430c      	orrs	r4, r1
 800177c:	e5e3      	b.n	8001346 <__aeabi_dsub+0xa6>
 800177e:	4649      	mov	r1, r9
 8001780:	4319      	orrs	r1, r3
 8001782:	000b      	movs	r3, r1
 8001784:	1e5c      	subs	r4, r3, #1
 8001786:	41a3      	sbcs	r3, r4
 8001788:	1ac4      	subs	r4, r0, r3
 800178a:	42a0      	cmp	r0, r4
 800178c:	419b      	sbcs	r3, r3
 800178e:	425b      	negs	r3, r3
 8001790:	1afb      	subs	r3, r7, r3
 8001792:	469a      	mov	sl, r3
 8001794:	465d      	mov	r5, fp
 8001796:	0016      	movs	r6, r2
 8001798:	e5dc      	b.n	8001354 <__aeabi_dsub+0xb4>
 800179a:	4649      	mov	r1, r9
 800179c:	4319      	orrs	r1, r3
 800179e:	d100      	bne.n	80017a2 <__aeabi_dsub+0x502>
 80017a0:	e0ae      	b.n	8001900 <__aeabi_dsub+0x660>
 80017a2:	4661      	mov	r1, ip
 80017a4:	4664      	mov	r4, ip
 80017a6:	3901      	subs	r1, #1
 80017a8:	2c01      	cmp	r4, #1
 80017aa:	d100      	bne.n	80017ae <__aeabi_dsub+0x50e>
 80017ac:	e0e0      	b.n	8001970 <__aeabi_dsub+0x6d0>
 80017ae:	4c77      	ldr	r4, [pc, #476]	; (800198c <__aeabi_dsub+0x6ec>)
 80017b0:	45a4      	cmp	ip, r4
 80017b2:	d056      	beq.n	8001862 <__aeabi_dsub+0x5c2>
 80017b4:	468c      	mov	ip, r1
 80017b6:	e69a      	b.n	80014ee <__aeabi_dsub+0x24e>
 80017b8:	4661      	mov	r1, ip
 80017ba:	2220      	movs	r2, #32
 80017bc:	003c      	movs	r4, r7
 80017be:	1a52      	subs	r2, r2, r1
 80017c0:	4094      	lsls	r4, r2
 80017c2:	0001      	movs	r1, r0
 80017c4:	4090      	lsls	r0, r2
 80017c6:	46a0      	mov	r8, r4
 80017c8:	4664      	mov	r4, ip
 80017ca:	1e42      	subs	r2, r0, #1
 80017cc:	4190      	sbcs	r0, r2
 80017ce:	4662      	mov	r2, ip
 80017d0:	40e1      	lsrs	r1, r4
 80017d2:	4644      	mov	r4, r8
 80017d4:	40d7      	lsrs	r7, r2
 80017d6:	430c      	orrs	r4, r1
 80017d8:	4304      	orrs	r4, r0
 80017da:	44b9      	add	r9, r7
 80017dc:	e701      	b.n	80015e2 <__aeabi_dsub+0x342>
 80017de:	496b      	ldr	r1, [pc, #428]	; (800198c <__aeabi_dsub+0x6ec>)
 80017e0:	428a      	cmp	r2, r1
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dsub+0x546>
 80017e4:	e70c      	b.n	8001600 <__aeabi_dsub+0x360>
 80017e6:	1818      	adds	r0, r3, r0
 80017e8:	4298      	cmp	r0, r3
 80017ea:	419b      	sbcs	r3, r3
 80017ec:	444f      	add	r7, r9
 80017ee:	425b      	negs	r3, r3
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	07dc      	lsls	r4, r3, #31
 80017f4:	0840      	lsrs	r0, r0, #1
 80017f6:	085b      	lsrs	r3, r3, #1
 80017f8:	469a      	mov	sl, r3
 80017fa:	0016      	movs	r6, r2
 80017fc:	4304      	orrs	r4, r0
 80017fe:	e6d9      	b.n	80015b4 <__aeabi_dsub+0x314>
 8001800:	2a00      	cmp	r2, #0
 8001802:	d000      	beq.n	8001806 <__aeabi_dsub+0x566>
 8001804:	e081      	b.n	800190a <__aeabi_dsub+0x66a>
 8001806:	003b      	movs	r3, r7
 8001808:	4303      	orrs	r3, r0
 800180a:	d11d      	bne.n	8001848 <__aeabi_dsub+0x5a8>
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	2500      	movs	r5, #0
 8001810:	0312      	lsls	r2, r2, #12
 8001812:	e70b      	b.n	800162c <__aeabi_dsub+0x38c>
 8001814:	08c0      	lsrs	r0, r0, #3
 8001816:	077b      	lsls	r3, r7, #29
 8001818:	465d      	mov	r5, fp
 800181a:	4303      	orrs	r3, r0
 800181c:	08fa      	lsrs	r2, r7, #3
 800181e:	e6d3      	b.n	80015c8 <__aeabi_dsub+0x328>
 8001820:	1ac4      	subs	r4, r0, r3
 8001822:	42a0      	cmp	r0, r4
 8001824:	4180      	sbcs	r0, r0
 8001826:	464b      	mov	r3, r9
 8001828:	4240      	negs	r0, r0
 800182a:	1aff      	subs	r7, r7, r3
 800182c:	1a3b      	subs	r3, r7, r0
 800182e:	469a      	mov	sl, r3
 8001830:	465d      	mov	r5, fp
 8001832:	e597      	b.n	8001364 <__aeabi_dsub+0xc4>
 8001834:	1a1c      	subs	r4, r3, r0
 8001836:	464a      	mov	r2, r9
 8001838:	42a3      	cmp	r3, r4
 800183a:	419b      	sbcs	r3, r3
 800183c:	1bd7      	subs	r7, r2, r7
 800183e:	425b      	negs	r3, r3
 8001840:	1afb      	subs	r3, r7, r3
 8001842:	469a      	mov	sl, r3
 8001844:	2601      	movs	r6, #1
 8001846:	e585      	b.n	8001354 <__aeabi_dsub+0xb4>
 8001848:	08c0      	lsrs	r0, r0, #3
 800184a:	077b      	lsls	r3, r7, #29
 800184c:	465d      	mov	r5, fp
 800184e:	4303      	orrs	r3, r0
 8001850:	08fa      	lsrs	r2, r7, #3
 8001852:	e6e7      	b.n	8001624 <__aeabi_dsub+0x384>
 8001854:	464a      	mov	r2, r9
 8001856:	08db      	lsrs	r3, r3, #3
 8001858:	0752      	lsls	r2, r2, #29
 800185a:	4313      	orrs	r3, r2
 800185c:	464a      	mov	r2, r9
 800185e:	08d2      	lsrs	r2, r2, #3
 8001860:	e6b5      	b.n	80015ce <__aeabi_dsub+0x32e>
 8001862:	08c0      	lsrs	r0, r0, #3
 8001864:	077b      	lsls	r3, r7, #29
 8001866:	4303      	orrs	r3, r0
 8001868:	08fa      	lsrs	r2, r7, #3
 800186a:	e6db      	b.n	8001624 <__aeabi_dsub+0x384>
 800186c:	4649      	mov	r1, r9
 800186e:	4319      	orrs	r1, r3
 8001870:	000b      	movs	r3, r1
 8001872:	1e59      	subs	r1, r3, #1
 8001874:	418b      	sbcs	r3, r1
 8001876:	001c      	movs	r4, r3
 8001878:	e653      	b.n	8001522 <__aeabi_dsub+0x282>
 800187a:	464d      	mov	r5, r9
 800187c:	3c20      	subs	r4, #32
 800187e:	40e5      	lsrs	r5, r4
 8001880:	2920      	cmp	r1, #32
 8001882:	d005      	beq.n	8001890 <__aeabi_dsub+0x5f0>
 8001884:	2440      	movs	r4, #64	; 0x40
 8001886:	1a64      	subs	r4, r4, r1
 8001888:	4649      	mov	r1, r9
 800188a:	40a1      	lsls	r1, r4
 800188c:	430b      	orrs	r3, r1
 800188e:	4698      	mov	r8, r3
 8001890:	4643      	mov	r3, r8
 8001892:	1e5c      	subs	r4, r3, #1
 8001894:	41a3      	sbcs	r3, r4
 8001896:	432b      	orrs	r3, r5
 8001898:	e776      	b.n	8001788 <__aeabi_dsub+0x4e8>
 800189a:	2a00      	cmp	r2, #0
 800189c:	d0e1      	beq.n	8001862 <__aeabi_dsub+0x5c2>
 800189e:	003a      	movs	r2, r7
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	4302      	orrs	r2, r0
 80018a4:	d100      	bne.n	80018a8 <__aeabi_dsub+0x608>
 80018a6:	e6b8      	b.n	800161a <__aeabi_dsub+0x37a>
 80018a8:	464a      	mov	r2, r9
 80018aa:	0752      	lsls	r2, r2, #29
 80018ac:	2480      	movs	r4, #128	; 0x80
 80018ae:	4313      	orrs	r3, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	0324      	lsls	r4, r4, #12
 80018b4:	08d2      	lsrs	r2, r2, #3
 80018b6:	4222      	tst	r2, r4
 80018b8:	d007      	beq.n	80018ca <__aeabi_dsub+0x62a>
 80018ba:	08fe      	lsrs	r6, r7, #3
 80018bc:	4226      	tst	r6, r4
 80018be:	d104      	bne.n	80018ca <__aeabi_dsub+0x62a>
 80018c0:	465d      	mov	r5, fp
 80018c2:	0032      	movs	r2, r6
 80018c4:	08c3      	lsrs	r3, r0, #3
 80018c6:	077f      	lsls	r7, r7, #29
 80018c8:	433b      	orrs	r3, r7
 80018ca:	0f59      	lsrs	r1, r3, #29
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	0749      	lsls	r1, r1, #29
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	430b      	orrs	r3, r1
 80018d4:	e6a6      	b.n	8001624 <__aeabi_dsub+0x384>
 80018d6:	1ac4      	subs	r4, r0, r3
 80018d8:	42a0      	cmp	r0, r4
 80018da:	4180      	sbcs	r0, r0
 80018dc:	464b      	mov	r3, r9
 80018de:	4240      	negs	r0, r0
 80018e0:	1aff      	subs	r7, r7, r3
 80018e2:	1a3b      	subs	r3, r7, r0
 80018e4:	469a      	mov	sl, r3
 80018e6:	465d      	mov	r5, fp
 80018e8:	2601      	movs	r6, #1
 80018ea:	e533      	b.n	8001354 <__aeabi_dsub+0xb4>
 80018ec:	003b      	movs	r3, r7
 80018ee:	4303      	orrs	r3, r0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dsub+0x654>
 80018f2:	e715      	b.n	8001720 <__aeabi_dsub+0x480>
 80018f4:	08c0      	lsrs	r0, r0, #3
 80018f6:	077b      	lsls	r3, r7, #29
 80018f8:	465d      	mov	r5, fp
 80018fa:	4303      	orrs	r3, r0
 80018fc:	08fa      	lsrs	r2, r7, #3
 80018fe:	e666      	b.n	80015ce <__aeabi_dsub+0x32e>
 8001900:	08c0      	lsrs	r0, r0, #3
 8001902:	077b      	lsls	r3, r7, #29
 8001904:	4303      	orrs	r3, r0
 8001906:	08fa      	lsrs	r2, r7, #3
 8001908:	e65e      	b.n	80015c8 <__aeabi_dsub+0x328>
 800190a:	003a      	movs	r2, r7
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	4302      	orrs	r2, r0
 8001910:	d100      	bne.n	8001914 <__aeabi_dsub+0x674>
 8001912:	e682      	b.n	800161a <__aeabi_dsub+0x37a>
 8001914:	464a      	mov	r2, r9
 8001916:	0752      	lsls	r2, r2, #29
 8001918:	2480      	movs	r4, #128	; 0x80
 800191a:	4313      	orrs	r3, r2
 800191c:	464a      	mov	r2, r9
 800191e:	0324      	lsls	r4, r4, #12
 8001920:	08d2      	lsrs	r2, r2, #3
 8001922:	4222      	tst	r2, r4
 8001924:	d007      	beq.n	8001936 <__aeabi_dsub+0x696>
 8001926:	08fe      	lsrs	r6, r7, #3
 8001928:	4226      	tst	r6, r4
 800192a:	d104      	bne.n	8001936 <__aeabi_dsub+0x696>
 800192c:	465d      	mov	r5, fp
 800192e:	0032      	movs	r2, r6
 8001930:	08c3      	lsrs	r3, r0, #3
 8001932:	077f      	lsls	r7, r7, #29
 8001934:	433b      	orrs	r3, r7
 8001936:	0f59      	lsrs	r1, r3, #29
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	0749      	lsls	r1, r1, #29
 800193e:	430b      	orrs	r3, r1
 8001940:	e670      	b.n	8001624 <__aeabi_dsub+0x384>
 8001942:	08c0      	lsrs	r0, r0, #3
 8001944:	077b      	lsls	r3, r7, #29
 8001946:	4303      	orrs	r3, r0
 8001948:	08fa      	lsrs	r2, r7, #3
 800194a:	e640      	b.n	80015ce <__aeabi_dsub+0x32e>
 800194c:	464c      	mov	r4, r9
 800194e:	3920      	subs	r1, #32
 8001950:	40cc      	lsrs	r4, r1
 8001952:	4661      	mov	r1, ip
 8001954:	2920      	cmp	r1, #32
 8001956:	d006      	beq.n	8001966 <__aeabi_dsub+0x6c6>
 8001958:	4666      	mov	r6, ip
 800195a:	2140      	movs	r1, #64	; 0x40
 800195c:	1b89      	subs	r1, r1, r6
 800195e:	464e      	mov	r6, r9
 8001960:	408e      	lsls	r6, r1
 8001962:	4333      	orrs	r3, r6
 8001964:	4698      	mov	r8, r3
 8001966:	4643      	mov	r3, r8
 8001968:	1e59      	subs	r1, r3, #1
 800196a:	418b      	sbcs	r3, r1
 800196c:	431c      	orrs	r4, r3
 800196e:	e5d8      	b.n	8001522 <__aeabi_dsub+0x282>
 8001970:	181c      	adds	r4, r3, r0
 8001972:	4284      	cmp	r4, r0
 8001974:	4180      	sbcs	r0, r0
 8001976:	444f      	add	r7, r9
 8001978:	46ba      	mov	sl, r7
 800197a:	4240      	negs	r0, r0
 800197c:	4482      	add	sl, r0
 800197e:	e6d9      	b.n	8001734 <__aeabi_dsub+0x494>
 8001980:	4653      	mov	r3, sl
 8001982:	4323      	orrs	r3, r4
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x6e8>
 8001986:	e6cb      	b.n	8001720 <__aeabi_dsub+0x480>
 8001988:	e614      	b.n	80015b4 <__aeabi_dsub+0x314>
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	000007ff 	.word	0x000007ff
 8001990:	ff7fffff 	.word	0xff7fffff
 8001994:	000007fe 	.word	0x000007fe
 8001998:	2300      	movs	r3, #0
 800199a:	4a01      	ldr	r2, [pc, #4]	; (80019a0 <__aeabi_dsub+0x700>)
 800199c:	001c      	movs	r4, r3
 800199e:	e529      	b.n	80013f4 <__aeabi_dsub+0x154>
 80019a0:	000007ff 	.word	0x000007ff

080019a4 <__aeabi_d2iz>:
 80019a4:	000a      	movs	r2, r1
 80019a6:	b530      	push	{r4, r5, lr}
 80019a8:	4c13      	ldr	r4, [pc, #76]	; (80019f8 <__aeabi_d2iz+0x54>)
 80019aa:	0053      	lsls	r3, r2, #1
 80019ac:	0309      	lsls	r1, r1, #12
 80019ae:	0005      	movs	r5, r0
 80019b0:	0b09      	lsrs	r1, r1, #12
 80019b2:	2000      	movs	r0, #0
 80019b4:	0d5b      	lsrs	r3, r3, #21
 80019b6:	0fd2      	lsrs	r2, r2, #31
 80019b8:	42a3      	cmp	r3, r4
 80019ba:	dd04      	ble.n	80019c6 <__aeabi_d2iz+0x22>
 80019bc:	480f      	ldr	r0, [pc, #60]	; (80019fc <__aeabi_d2iz+0x58>)
 80019be:	4283      	cmp	r3, r0
 80019c0:	dd02      	ble.n	80019c8 <__aeabi_d2iz+0x24>
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <__aeabi_d2iz+0x5c>)
 80019c4:	18d0      	adds	r0, r2, r3
 80019c6:	bd30      	pop	{r4, r5, pc}
 80019c8:	2080      	movs	r0, #128	; 0x80
 80019ca:	0340      	lsls	r0, r0, #13
 80019cc:	4301      	orrs	r1, r0
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <__aeabi_d2iz+0x60>)
 80019d0:	1ac0      	subs	r0, r0, r3
 80019d2:	281f      	cmp	r0, #31
 80019d4:	dd08      	ble.n	80019e8 <__aeabi_d2iz+0x44>
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <__aeabi_d2iz+0x64>)
 80019d8:	1ac3      	subs	r3, r0, r3
 80019da:	40d9      	lsrs	r1, r3
 80019dc:	000b      	movs	r3, r1
 80019de:	4258      	negs	r0, r3
 80019e0:	2a00      	cmp	r2, #0
 80019e2:	d1f0      	bne.n	80019c6 <__aeabi_d2iz+0x22>
 80019e4:	0018      	movs	r0, r3
 80019e6:	e7ee      	b.n	80019c6 <__aeabi_d2iz+0x22>
 80019e8:	4c08      	ldr	r4, [pc, #32]	; (8001a0c <__aeabi_d2iz+0x68>)
 80019ea:	40c5      	lsrs	r5, r0
 80019ec:	46a4      	mov	ip, r4
 80019ee:	4463      	add	r3, ip
 80019f0:	4099      	lsls	r1, r3
 80019f2:	000b      	movs	r3, r1
 80019f4:	432b      	orrs	r3, r5
 80019f6:	e7f2      	b.n	80019de <__aeabi_d2iz+0x3a>
 80019f8:	000003fe 	.word	0x000003fe
 80019fc:	0000041d 	.word	0x0000041d
 8001a00:	7fffffff 	.word	0x7fffffff
 8001a04:	00000433 	.word	0x00000433
 8001a08:	00000413 	.word	0x00000413
 8001a0c:	fffffbed 	.word	0xfffffbed

08001a10 <__aeabi_i2d>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d016      	beq.n	8001a44 <__aeabi_i2d+0x34>
 8001a16:	17c3      	asrs	r3, r0, #31
 8001a18:	18c5      	adds	r5, r0, r3
 8001a1a:	405d      	eors	r5, r3
 8001a1c:	0fc4      	lsrs	r4, r0, #31
 8001a1e:	0028      	movs	r0, r5
 8001a20:	f000 f864 	bl	8001aec <__clzsi2>
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <__aeabi_i2d+0x5c>)
 8001a26:	1a1b      	subs	r3, r3, r0
 8001a28:	280a      	cmp	r0, #10
 8001a2a:	dc16      	bgt.n	8001a5a <__aeabi_i2d+0x4a>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	002e      	movs	r6, r5
 8001a30:	3215      	adds	r2, #21
 8001a32:	4096      	lsls	r6, r2
 8001a34:	220b      	movs	r2, #11
 8001a36:	1a12      	subs	r2, r2, r0
 8001a38:	40d5      	lsrs	r5, r2
 8001a3a:	055b      	lsls	r3, r3, #21
 8001a3c:	032d      	lsls	r5, r5, #12
 8001a3e:	0b2d      	lsrs	r5, r5, #12
 8001a40:	0d5b      	lsrs	r3, r3, #21
 8001a42:	e003      	b.n	8001a4c <__aeabi_i2d+0x3c>
 8001a44:	2400      	movs	r4, #0
 8001a46:	2300      	movs	r3, #0
 8001a48:	2500      	movs	r5, #0
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	051b      	lsls	r3, r3, #20
 8001a4e:	432b      	orrs	r3, r5
 8001a50:	07e4      	lsls	r4, r4, #31
 8001a52:	4323      	orrs	r3, r4
 8001a54:	0030      	movs	r0, r6
 8001a56:	0019      	movs	r1, r3
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
 8001a5a:	380b      	subs	r0, #11
 8001a5c:	4085      	lsls	r5, r0
 8001a5e:	055b      	lsls	r3, r3, #21
 8001a60:	032d      	lsls	r5, r5, #12
 8001a62:	2600      	movs	r6, #0
 8001a64:	0b2d      	lsrs	r5, r5, #12
 8001a66:	0d5b      	lsrs	r3, r3, #21
 8001a68:	e7f0      	b.n	8001a4c <__aeabi_i2d+0x3c>
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	0000041e 	.word	0x0000041e

08001a70 <__aeabi_cdrcmple>:
 8001a70:	4684      	mov	ip, r0
 8001a72:	0010      	movs	r0, r2
 8001a74:	4662      	mov	r2, ip
 8001a76:	468c      	mov	ip, r1
 8001a78:	0019      	movs	r1, r3
 8001a7a:	4663      	mov	r3, ip
 8001a7c:	e000      	b.n	8001a80 <__aeabi_cdcmpeq>
 8001a7e:	46c0      	nop			; (mov r8, r8)

08001a80 <__aeabi_cdcmpeq>:
 8001a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001a82:	f000 f905 	bl	8001c90 <__ledf2>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d401      	bmi.n	8001a8e <__aeabi_cdcmpeq+0xe>
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	42c8      	cmn	r0, r1
 8001a8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001a90 <__aeabi_dcmpeq>:
 8001a90:	b510      	push	{r4, lr}
 8001a92:	f000 f855 	bl	8001b40 <__eqdf2>
 8001a96:	4240      	negs	r0, r0
 8001a98:	3001      	adds	r0, #1
 8001a9a:	bd10      	pop	{r4, pc}

08001a9c <__aeabi_dcmplt>:
 8001a9c:	b510      	push	{r4, lr}
 8001a9e:	f000 f8f7 	bl	8001c90 <__ledf2>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	db01      	blt.n	8001aaa <__aeabi_dcmplt+0xe>
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	bd10      	pop	{r4, pc}
 8001aaa:	2001      	movs	r0, #1
 8001aac:	bd10      	pop	{r4, pc}
 8001aae:	46c0      	nop			; (mov r8, r8)

08001ab0 <__aeabi_dcmple>:
 8001ab0:	b510      	push	{r4, lr}
 8001ab2:	f000 f8ed 	bl	8001c90 <__ledf2>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	dd01      	ble.n	8001abe <__aeabi_dcmple+0xe>
 8001aba:	2000      	movs	r0, #0
 8001abc:	bd10      	pop	{r4, pc}
 8001abe:	2001      	movs	r0, #1
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)

08001ac4 <__aeabi_dcmpgt>:
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	f000 f87d 	bl	8001bc4 <__gedf2>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	dc01      	bgt.n	8001ad2 <__aeabi_dcmpgt+0xe>
 8001ace:	2000      	movs	r0, #0
 8001ad0:	bd10      	pop	{r4, pc}
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	bd10      	pop	{r4, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)

08001ad8 <__aeabi_dcmpge>:
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	f000 f873 	bl	8001bc4 <__gedf2>
 8001ade:	2800      	cmp	r0, #0
 8001ae0:	da01      	bge.n	8001ae6 <__aeabi_dcmpge+0xe>
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	bd10      	pop	{r4, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)

08001aec <__clzsi2>:
 8001aec:	211c      	movs	r1, #28
 8001aee:	2301      	movs	r3, #1
 8001af0:	041b      	lsls	r3, r3, #16
 8001af2:	4298      	cmp	r0, r3
 8001af4:	d301      	bcc.n	8001afa <__clzsi2+0xe>
 8001af6:	0c00      	lsrs	r0, r0, #16
 8001af8:	3910      	subs	r1, #16
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	4298      	cmp	r0, r3
 8001afe:	d301      	bcc.n	8001b04 <__clzsi2+0x18>
 8001b00:	0a00      	lsrs	r0, r0, #8
 8001b02:	3908      	subs	r1, #8
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	4298      	cmp	r0, r3
 8001b08:	d301      	bcc.n	8001b0e <__clzsi2+0x22>
 8001b0a:	0900      	lsrs	r0, r0, #4
 8001b0c:	3904      	subs	r1, #4
 8001b0e:	a202      	add	r2, pc, #8	; (adr r2, 8001b18 <__clzsi2+0x2c>)
 8001b10:	5c10      	ldrb	r0, [r2, r0]
 8001b12:	1840      	adds	r0, r0, r1
 8001b14:	4770      	bx	lr
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	02020304 	.word	0x02020304
 8001b1c:	01010101 	.word	0x01010101
	...

08001b28 <__clzdi2>:
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	d103      	bne.n	8001b36 <__clzdi2+0xe>
 8001b2e:	f7ff ffdd 	bl	8001aec <__clzsi2>
 8001b32:	3020      	adds	r0, #32
 8001b34:	e002      	b.n	8001b3c <__clzdi2+0x14>
 8001b36:	0008      	movs	r0, r1
 8001b38:	f7ff ffd8 	bl	8001aec <__clzsi2>
 8001b3c:	bd10      	pop	{r4, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)

08001b40 <__eqdf2>:
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	464e      	mov	r6, r9
 8001b44:	4645      	mov	r5, r8
 8001b46:	46de      	mov	lr, fp
 8001b48:	4657      	mov	r7, sl
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	b5e0      	push	{r5, r6, r7, lr}
 8001b4e:	0017      	movs	r7, r2
 8001b50:	031a      	lsls	r2, r3, #12
 8001b52:	0b12      	lsrs	r2, r2, #12
 8001b54:	0005      	movs	r5, r0
 8001b56:	4684      	mov	ip, r0
 8001b58:	4819      	ldr	r0, [pc, #100]	; (8001bc0 <__eqdf2+0x80>)
 8001b5a:	030e      	lsls	r6, r1, #12
 8001b5c:	004c      	lsls	r4, r1, #1
 8001b5e:	4691      	mov	r9, r2
 8001b60:	005a      	lsls	r2, r3, #1
 8001b62:	0fdb      	lsrs	r3, r3, #31
 8001b64:	469b      	mov	fp, r3
 8001b66:	0b36      	lsrs	r6, r6, #12
 8001b68:	0d64      	lsrs	r4, r4, #21
 8001b6a:	0fc9      	lsrs	r1, r1, #31
 8001b6c:	0d52      	lsrs	r2, r2, #21
 8001b6e:	4284      	cmp	r4, r0
 8001b70:	d019      	beq.n	8001ba6 <__eqdf2+0x66>
 8001b72:	4282      	cmp	r2, r0
 8001b74:	d010      	beq.n	8001b98 <__eqdf2+0x58>
 8001b76:	2001      	movs	r0, #1
 8001b78:	4294      	cmp	r4, r2
 8001b7a:	d10e      	bne.n	8001b9a <__eqdf2+0x5a>
 8001b7c:	454e      	cmp	r6, r9
 8001b7e:	d10c      	bne.n	8001b9a <__eqdf2+0x5a>
 8001b80:	2001      	movs	r0, #1
 8001b82:	45c4      	cmp	ip, r8
 8001b84:	d109      	bne.n	8001b9a <__eqdf2+0x5a>
 8001b86:	4559      	cmp	r1, fp
 8001b88:	d017      	beq.n	8001bba <__eqdf2+0x7a>
 8001b8a:	2c00      	cmp	r4, #0
 8001b8c:	d105      	bne.n	8001b9a <__eqdf2+0x5a>
 8001b8e:	0030      	movs	r0, r6
 8001b90:	4328      	orrs	r0, r5
 8001b92:	1e43      	subs	r3, r0, #1
 8001b94:	4198      	sbcs	r0, r3
 8001b96:	e000      	b.n	8001b9a <__eqdf2+0x5a>
 8001b98:	2001      	movs	r0, #1
 8001b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9c:	46bb      	mov	fp, r7
 8001b9e:	46b2      	mov	sl, r6
 8001ba0:	46a9      	mov	r9, r5
 8001ba2:	46a0      	mov	r8, r4
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba6:	0033      	movs	r3, r6
 8001ba8:	2001      	movs	r0, #1
 8001baa:	432b      	orrs	r3, r5
 8001bac:	d1f5      	bne.n	8001b9a <__eqdf2+0x5a>
 8001bae:	42a2      	cmp	r2, r4
 8001bb0:	d1f3      	bne.n	8001b9a <__eqdf2+0x5a>
 8001bb2:	464b      	mov	r3, r9
 8001bb4:	433b      	orrs	r3, r7
 8001bb6:	d1f0      	bne.n	8001b9a <__eqdf2+0x5a>
 8001bb8:	e7e2      	b.n	8001b80 <__eqdf2+0x40>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e7ed      	b.n	8001b9a <__eqdf2+0x5a>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	000007ff 	.word	0x000007ff

08001bc4 <__gedf2>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	4647      	mov	r7, r8
 8001bc8:	46ce      	mov	lr, r9
 8001bca:	0004      	movs	r4, r0
 8001bcc:	0018      	movs	r0, r3
 8001bce:	0016      	movs	r6, r2
 8001bd0:	031b      	lsls	r3, r3, #12
 8001bd2:	0b1b      	lsrs	r3, r3, #12
 8001bd4:	4d2d      	ldr	r5, [pc, #180]	; (8001c8c <__gedf2+0xc8>)
 8001bd6:	004a      	lsls	r2, r1, #1
 8001bd8:	4699      	mov	r9, r3
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	0043      	lsls	r3, r0, #1
 8001bde:	030f      	lsls	r7, r1, #12
 8001be0:	46a4      	mov	ip, r4
 8001be2:	46b0      	mov	r8, r6
 8001be4:	0b3f      	lsrs	r7, r7, #12
 8001be6:	0d52      	lsrs	r2, r2, #21
 8001be8:	0fc9      	lsrs	r1, r1, #31
 8001bea:	0d5b      	lsrs	r3, r3, #21
 8001bec:	0fc0      	lsrs	r0, r0, #31
 8001bee:	42aa      	cmp	r2, r5
 8001bf0:	d021      	beq.n	8001c36 <__gedf2+0x72>
 8001bf2:	42ab      	cmp	r3, r5
 8001bf4:	d013      	beq.n	8001c1e <__gedf2+0x5a>
 8001bf6:	2a00      	cmp	r2, #0
 8001bf8:	d122      	bne.n	8001c40 <__gedf2+0x7c>
 8001bfa:	433c      	orrs	r4, r7
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <__gedf2+0x42>
 8001c00:	464d      	mov	r5, r9
 8001c02:	432e      	orrs	r6, r5
 8001c04:	d022      	beq.n	8001c4c <__gedf2+0x88>
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	d010      	beq.n	8001c2c <__gedf2+0x68>
 8001c0a:	4281      	cmp	r1, r0
 8001c0c:	d022      	beq.n	8001c54 <__gedf2+0x90>
 8001c0e:	2002      	movs	r0, #2
 8001c10:	3901      	subs	r1, #1
 8001c12:	4008      	ands	r0, r1
 8001c14:	3801      	subs	r0, #1
 8001c16:	bcc0      	pop	{r6, r7}
 8001c18:	46b9      	mov	r9, r7
 8001c1a:	46b0      	mov	r8, r6
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	464d      	mov	r5, r9
 8001c20:	432e      	orrs	r6, r5
 8001c22:	d129      	bne.n	8001c78 <__gedf2+0xb4>
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d1f0      	bne.n	8001c0a <__gedf2+0x46>
 8001c28:	433c      	orrs	r4, r7
 8001c2a:	d1ee      	bne.n	8001c0a <__gedf2+0x46>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d1f2      	bne.n	8001c16 <__gedf2+0x52>
 8001c30:	2001      	movs	r0, #1
 8001c32:	4240      	negs	r0, r0
 8001c34:	e7ef      	b.n	8001c16 <__gedf2+0x52>
 8001c36:	003d      	movs	r5, r7
 8001c38:	4325      	orrs	r5, r4
 8001c3a:	d11d      	bne.n	8001c78 <__gedf2+0xb4>
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d0ee      	beq.n	8001c1e <__gedf2+0x5a>
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1e2      	bne.n	8001c0a <__gedf2+0x46>
 8001c44:	464c      	mov	r4, r9
 8001c46:	4326      	orrs	r6, r4
 8001c48:	d1df      	bne.n	8001c0a <__gedf2+0x46>
 8001c4a:	e7e0      	b.n	8001c0e <__gedf2+0x4a>
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d0e1      	beq.n	8001c16 <__gedf2+0x52>
 8001c52:	e7dc      	b.n	8001c0e <__gedf2+0x4a>
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dc0a      	bgt.n	8001c6e <__gedf2+0xaa>
 8001c58:	dbe8      	blt.n	8001c2c <__gedf2+0x68>
 8001c5a:	454f      	cmp	r7, r9
 8001c5c:	d8d7      	bhi.n	8001c0e <__gedf2+0x4a>
 8001c5e:	d00e      	beq.n	8001c7e <__gedf2+0xba>
 8001c60:	2000      	movs	r0, #0
 8001c62:	454f      	cmp	r7, r9
 8001c64:	d2d7      	bcs.n	8001c16 <__gedf2+0x52>
 8001c66:	2900      	cmp	r1, #0
 8001c68:	d0e2      	beq.n	8001c30 <__gedf2+0x6c>
 8001c6a:	0008      	movs	r0, r1
 8001c6c:	e7d3      	b.n	8001c16 <__gedf2+0x52>
 8001c6e:	4243      	negs	r3, r0
 8001c70:	4158      	adcs	r0, r3
 8001c72:	0040      	lsls	r0, r0, #1
 8001c74:	3801      	subs	r0, #1
 8001c76:	e7ce      	b.n	8001c16 <__gedf2+0x52>
 8001c78:	2002      	movs	r0, #2
 8001c7a:	4240      	negs	r0, r0
 8001c7c:	e7cb      	b.n	8001c16 <__gedf2+0x52>
 8001c7e:	45c4      	cmp	ip, r8
 8001c80:	d8c5      	bhi.n	8001c0e <__gedf2+0x4a>
 8001c82:	2000      	movs	r0, #0
 8001c84:	45c4      	cmp	ip, r8
 8001c86:	d2c6      	bcs.n	8001c16 <__gedf2+0x52>
 8001c88:	e7ed      	b.n	8001c66 <__gedf2+0xa2>
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	000007ff 	.word	0x000007ff

08001c90 <__ledf2>:
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	4647      	mov	r7, r8
 8001c94:	46ce      	mov	lr, r9
 8001c96:	0004      	movs	r4, r0
 8001c98:	0018      	movs	r0, r3
 8001c9a:	0016      	movs	r6, r2
 8001c9c:	031b      	lsls	r3, r3, #12
 8001c9e:	0b1b      	lsrs	r3, r3, #12
 8001ca0:	4d2c      	ldr	r5, [pc, #176]	; (8001d54 <__ledf2+0xc4>)
 8001ca2:	004a      	lsls	r2, r1, #1
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	0043      	lsls	r3, r0, #1
 8001caa:	030f      	lsls	r7, r1, #12
 8001cac:	46a4      	mov	ip, r4
 8001cae:	46b0      	mov	r8, r6
 8001cb0:	0b3f      	lsrs	r7, r7, #12
 8001cb2:	0d52      	lsrs	r2, r2, #21
 8001cb4:	0fc9      	lsrs	r1, r1, #31
 8001cb6:	0d5b      	lsrs	r3, r3, #21
 8001cb8:	0fc0      	lsrs	r0, r0, #31
 8001cba:	42aa      	cmp	r2, r5
 8001cbc:	d00d      	beq.n	8001cda <__ledf2+0x4a>
 8001cbe:	42ab      	cmp	r3, r5
 8001cc0:	d010      	beq.n	8001ce4 <__ledf2+0x54>
 8001cc2:	2a00      	cmp	r2, #0
 8001cc4:	d127      	bne.n	8001d16 <__ledf2+0x86>
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <__ledf2+0x60>
 8001ccc:	464d      	mov	r5, r9
 8001cce:	432e      	orrs	r6, r5
 8001cd0:	d10e      	bne.n	8001cf0 <__ledf2+0x60>
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	2c00      	cmp	r4, #0
 8001cd6:	d015      	beq.n	8001d04 <__ledf2+0x74>
 8001cd8:	e00e      	b.n	8001cf8 <__ledf2+0x68>
 8001cda:	003d      	movs	r5, r7
 8001cdc:	4325      	orrs	r5, r4
 8001cde:	d110      	bne.n	8001d02 <__ledf2+0x72>
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d118      	bne.n	8001d16 <__ledf2+0x86>
 8001ce4:	464d      	mov	r5, r9
 8001ce6:	432e      	orrs	r6, r5
 8001ce8:	d10b      	bne.n	8001d02 <__ledf2+0x72>
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d102      	bne.n	8001cf4 <__ledf2+0x64>
 8001cee:	433c      	orrs	r4, r7
 8001cf0:	2c00      	cmp	r4, #0
 8001cf2:	d00b      	beq.n	8001d0c <__ledf2+0x7c>
 8001cf4:	4281      	cmp	r1, r0
 8001cf6:	d014      	beq.n	8001d22 <__ledf2+0x92>
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	3901      	subs	r1, #1
 8001cfc:	4008      	ands	r0, r1
 8001cfe:	3801      	subs	r0, #1
 8001d00:	e000      	b.n	8001d04 <__ledf2+0x74>
 8001d02:	2002      	movs	r0, #2
 8001d04:	bcc0      	pop	{r6, r7}
 8001d06:	46b9      	mov	r9, r7
 8001d08:	46b0      	mov	r8, r6
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d1f9      	bne.n	8001d04 <__ledf2+0x74>
 8001d10:	2001      	movs	r0, #1
 8001d12:	4240      	negs	r0, r0
 8001d14:	e7f6      	b.n	8001d04 <__ledf2+0x74>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ec      	bne.n	8001cf4 <__ledf2+0x64>
 8001d1a:	464c      	mov	r4, r9
 8001d1c:	4326      	orrs	r6, r4
 8001d1e:	d1e9      	bne.n	8001cf4 <__ledf2+0x64>
 8001d20:	e7ea      	b.n	8001cf8 <__ledf2+0x68>
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dd04      	ble.n	8001d30 <__ledf2+0xa0>
 8001d26:	4243      	negs	r3, r0
 8001d28:	4158      	adcs	r0, r3
 8001d2a:	0040      	lsls	r0, r0, #1
 8001d2c:	3801      	subs	r0, #1
 8001d2e:	e7e9      	b.n	8001d04 <__ledf2+0x74>
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbeb      	blt.n	8001d0c <__ledf2+0x7c>
 8001d34:	454f      	cmp	r7, r9
 8001d36:	d8df      	bhi.n	8001cf8 <__ledf2+0x68>
 8001d38:	d006      	beq.n	8001d48 <__ledf2+0xb8>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	454f      	cmp	r7, r9
 8001d3e:	d2e1      	bcs.n	8001d04 <__ledf2+0x74>
 8001d40:	2900      	cmp	r1, #0
 8001d42:	d0e5      	beq.n	8001d10 <__ledf2+0x80>
 8001d44:	0008      	movs	r0, r1
 8001d46:	e7dd      	b.n	8001d04 <__ledf2+0x74>
 8001d48:	45c4      	cmp	ip, r8
 8001d4a:	d8d5      	bhi.n	8001cf8 <__ledf2+0x68>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	45c4      	cmp	ip, r8
 8001d50:	d2d8      	bcs.n	8001d04 <__ledf2+0x74>
 8001d52:	e7f5      	b.n	8001d40 <__ledf2+0xb0>
 8001d54:	000007ff 	.word	0x000007ff

08001d58 <read_IMU_temp>:
int8_t Gx = 0;
int8_t Gy = 0;
int8_t Gz = 0;

void read_IMU_temp()
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_TEMP_H, 1, &temp_H, 1, 1000);
 8001d5e:	4822      	ldr	r0, [pc, #136]	; (8001de8 <read_IMU_temp+0x90>)
 8001d60:	23fa      	movs	r3, #250	; 0xfa
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2301      	movs	r3, #1
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <read_IMU_temp+0x94>)
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	2241      	movs	r2, #65	; 0x41
 8001d72:	21d0      	movs	r1, #208	; 0xd0
 8001d74:	f001 fa6c 	bl	8003250 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_TEMP_H, 1, &temp_L, 1, 1000);
 8001d78:	481b      	ldr	r0, [pc, #108]	; (8001de8 <read_IMU_temp+0x90>)
 8001d7a:	23fa      	movs	r3, #250	; 0xfa
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <read_IMU_temp+0x98>)
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	2241      	movs	r2, #65	; 0x41
 8001d8c:	21d0      	movs	r1, #208	; 0xd0
 8001d8e:	f001 fa5f 	bl	8003250 <HAL_I2C_Mem_Read>

	temperature = ((temp_H << 8) + temp_L);
 8001d92:	4b16      	ldr	r3, [pc, #88]	; (8001dec <read_IMU_temp+0x94>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <read_IMU_temp+0x98>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	18d3      	adds	r3, r2, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <read_IMU_temp+0x9c>)
 8001daa:	801a      	strh	r2, [r3, #0]
	temp_degree = ((temperature/340) + 36.53);
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <read_IMU_temp+0x9c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	5e9b      	ldrsh	r3, [r3, r2]
 8001db2:	22aa      	movs	r2, #170	; 0xaa
 8001db4:	0051      	lsls	r1, r2, #1
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7fe fa2e 	bl	8000218 <__divsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fe25 	bl	8001a10 <__aeabi_i2d>
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <read_IMU_temp+0xa0>)
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <read_IMU_temp+0xa4>)
 8001dca:	f7fe fc1b 	bl	8000604 <__aeabi_dadd>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	000b      	movs	r3, r1
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	f7fe fb2b 	bl	8000430 <__aeabi_d2uiz>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <read_IMU_temp+0xa8>)
 8001de0:	801a      	strh	r2, [r3, #0]
}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000040 	.word	0x20000040
 8001dec:	20000029 	.word	0x20000029
 8001df0:	2000002a 	.word	0x2000002a
 8001df4:	2000002c 	.word	0x2000002c
 8001df8:	0a3d70a4 	.word	0x0a3d70a4
 8001dfc:	404243d7 	.word	0x404243d7
 8001e00:	2000002e 	.word	0x2000002e

08001e04 <Read_IMU_Gyro>:


void Read_IMU_Gyro()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_GYRO_X_H ,1, Rx_gyro_values, 6, 1000);
 8001e0a:	483c      	ldr	r0, [pc, #240]	; (8001efc <Read_IMU_Gyro+0xf8>)
 8001e0c:	23fa      	movs	r3, #250	; 0xfa
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2306      	movs	r3, #6
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	2243      	movs	r2, #67	; 0x43
 8001e1e:	21d0      	movs	r1, #208	; 0xd0
 8001e20:	f001 fa16 	bl	8003250 <HAL_I2C_Mem_Read>
    Gyro_X_data = (int16_t)(Rx_gyro_values[0] << 8 | Rx_gyro_values [1]);
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <Read_IMU_Gyro+0x100>)
 8001e38:	801a      	strh	r2, [r3, #0]
    Gyro_Y_data = (int16_t)(Rx_gyro_values[2] << 8 | Rx_gyro_values [3]);
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e3c:	789b      	ldrb	r3, [r3, #2]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e44:	78db      	ldrb	r3, [r3, #3]
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <Read_IMU_Gyro+0x104>)
 8001e4e:	801a      	strh	r2, [r3, #0]
    Gyro_Z_data = (int16_t)(Rx_gyro_values[4] << 8 | Rx_gyro_values [5]);
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <Read_IMU_Gyro+0xfc>)
 8001e5a:	795b      	ldrb	r3, [r3, #5]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <Read_IMU_Gyro+0x108>)
 8001e64:	801a      	strh	r2, [r3, #0]

    Gx = Gyro_X_data / 131.0;
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <Read_IMU_Gyro+0x100>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	5e9b      	ldrsh	r3, [r3, r2]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f7ff fdcf 	bl	8001a10 <__aeabi_i2d>
 8001e72:	2200      	movs	r2, #0
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <Read_IMU_Gyro+0x10c>)
 8001e76:	f7fe ff25 	bl	8000cc4 <__aeabi_ddiv>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	000b      	movs	r3, r1
 8001e7e:	0010      	movs	r0, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	f7ff fd8f 	bl	80019a4 <__aeabi_d2iz>
 8001e86:	0003      	movs	r3, r0
 8001e88:	b25a      	sxtb	r2, r3
 8001e8a:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <Read_IMU_Gyro+0x110>)
 8001e8c:	701a      	strb	r2, [r3, #0]
    Gy = Gyro_Y_data / 131.0;
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <Read_IMU_Gyro+0x104>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	5e9b      	ldrsh	r3, [r3, r2]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fdbb 	bl	8001a10 <__aeabi_i2d>
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <Read_IMU_Gyro+0x10c>)
 8001e9e:	f7fe ff11 	bl	8000cc4 <__aeabi_ddiv>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	000b      	movs	r3, r1
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	f7ff fd7b 	bl	80019a4 <__aeabi_d2iz>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	b25a      	sxtb	r2, r3
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <Read_IMU_Gyro+0x114>)
 8001eb4:	701a      	strb	r2, [r3, #0]
    Gz = Gyro_Z_data / 131.0;
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <Read_IMU_Gyro+0x108>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	5e9b      	ldrsh	r3, [r3, r2]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fda7 	bl	8001a10 <__aeabi_i2d>
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <Read_IMU_Gyro+0x10c>)
 8001ec6:	f7fe fefd 	bl	8000cc4 <__aeabi_ddiv>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	000b      	movs	r3, r1
 8001ece:	0010      	movs	r0, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	f7ff fd67 	bl	80019a4 <__aeabi_d2iz>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	b25a      	sxtb	r2, r3
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <Read_IMU_Gyro+0x118>)
 8001edc:	701a      	strb	r2, [r3, #0]

    if (Gx >= 5)
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <Read_IMU_Gyro+0x110>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	dd05      	ble.n	8001ef4 <Read_IMU_Gyro+0xf0>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8001ee8:	23a0      	movs	r3, #160	; 0xa0
 8001eea:	05db      	lsls	r3, r3, #23
 8001eec:	2102      	movs	r1, #2
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 ffbf 	bl	8002e72 <HAL_GPIO_TogglePin>
	}
}
 8001ef4:	46c0      	nop			; (mov r8, r8)
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	20000040 	.word	0x20000040
 8001f00:	20000030 	.word	0x20000030
 8001f04:	20000036 	.word	0x20000036
 8001f08:	20000038 	.word	0x20000038
 8001f0c:	2000003a 	.word	0x2000003a
 8001f10:	40606000 	.word	0x40606000
 8001f14:	2000003c 	.word	0x2000003c
 8001f18:	2000003d 	.word	0x2000003d
 8001f1c:	2000003e 	.word	0x2000003e

08001f20 <init_IMU_MPU6050>:


void init_IMU_MPU6050()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af04      	add	r7, sp, #16
uint8_t check;

	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, 0x75, 1, &check, 1, 1000);
 8001f26:	482a      	ldr	r0, [pc, #168]	; (8001fd0 <init_IMU_MPU6050+0xb0>)
 8001f28:	23fa      	movs	r3, #250	; 0xfa
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	2275      	movs	r2, #117	; 0x75
 8001f3a:	21d0      	movs	r1, #208	; 0xd0
 8001f3c:	f001 f988 	bl	8003250 <HAL_I2C_Mem_Read>

	if	(check == 0x68)
 8001f40:	1dfb      	adds	r3, r7, #7
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b68      	cmp	r3, #104	; 0x68
 8001f46:	d13f      	bne.n	8001fc8 <init_IMU_MPU6050+0xa8>

		{
//			HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, 0x75, 1, &rx_buffer, 1, 1000);
			tx_buffer = 0x07;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_SMPLRT_DIV, 1, &tx_buffer, 1, 1000);
 8001f4e:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <init_IMU_MPU6050+0xb0>)
 8001f50:	23fa      	movs	r3, #250	; 0xfa
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	9302      	str	r3, [sp, #8]
 8001f56:	2301      	movs	r3, #1
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	2219      	movs	r2, #25
 8001f62:	21d1      	movs	r1, #209	; 0xd1
 8001f64:	f001 f846 	bl	8002ff4 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_GYRO_CONFIG, 1, &tx_buffer, 1, 1000);
 8001f6e:	4818      	ldr	r0, [pc, #96]	; (8001fd0 <init_IMU_MPU6050+0xb0>)
 8001f70:	23fa      	movs	r3, #250	; 0xfa
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	2301      	movs	r3, #1
 8001f78:	9301      	str	r3, [sp, #4]
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	221b      	movs	r2, #27
 8001f82:	21d1      	movs	r1, #209	; 0xd1
 8001f84:	f001 f836 	bl	8002ff4 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_PWR_MNGMT, 1, &tx_buffer, 1, 1000);
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <init_IMU_MPU6050+0xb0>)
 8001f90:	23fa      	movs	r3, #250	; 0xfa
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	2301      	movs	r3, #1
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	226b      	movs	r2, #107	; 0x6b
 8001fa2:	21d1      	movs	r1, #209	; 0xd1
 8001fa4:	f001 f826 	bl	8002ff4 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_ACCEL_CONFIG, 1, &tx_buffer, 1, 1000);
 8001fae:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <init_IMU_MPU6050+0xb0>)
 8001fb0:	23fa      	movs	r3, #250	; 0xfa
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	9302      	str	r3, [sp, #8]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <init_IMU_MPU6050+0xb4>)
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	221c      	movs	r2, #28
 8001fc2:	21d1      	movs	r1, #209	; 0xd1
 8001fc4:	f001 f816 	bl	8002ff4 <HAL_I2C_Mem_Write>
		}


}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000040 	.word	0x20000040
 8001fd4:	20000028 	.word	0x20000028

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fdc:	f000 fb98 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe0:	f000 f80f 	bl	8002002 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe4:	f000 f962 	bl	80022ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001fe8:	f000 f8aa 	bl	8002140 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001fec:	f000 f868 	bl	80020c0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001ff0:	f000 f90e 	bl	8002210 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_IMU_MPU6050();
 8001ff4:	f7ff ff94 	bl	8001f20 <init_IMU_MPU6050>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  read_IMU_temp();
 8001ff8:	f7ff feae 	bl	8001d58 <read_IMU_temp>
	  Read_IMU_Gyro();
 8001ffc:	f7ff ff02 	bl	8001e04 <Read_IMU_Gyro>
	  read_IMU_temp();
 8002000:	e7fa      	b.n	8001ff8 <main+0x20>

08002002 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002002:	b590      	push	{r4, r7, lr}
 8002004:	b093      	sub	sp, #76	; 0x4c
 8002006:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002008:	2410      	movs	r4, #16
 800200a:	193b      	adds	r3, r7, r4
 800200c:	0018      	movs	r0, r3
 800200e:	2338      	movs	r3, #56	; 0x38
 8002010:	001a      	movs	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f004 fc5e 	bl	80068d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002018:	003b      	movs	r3, r7
 800201a:	0018      	movs	r0, r3
 800201c:	2310      	movs	r3, #16
 800201e:	001a      	movs	r2, r3
 8002020:	2100      	movs	r1, #0
 8002022:	f004 fc57 	bl	80068d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	0018      	movs	r0, r3
 800202c:	f001 fde0 	bl	8003bf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002030:	193b      	adds	r3, r7, r4
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002036:	193b      	adds	r3, r7, r4
 8002038:	2280      	movs	r2, #128	; 0x80
 800203a:	0052      	lsls	r2, r2, #1
 800203c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800203e:	0021      	movs	r1, r4
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002046:	187b      	adds	r3, r7, r1
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204c:	187b      	adds	r3, r7, r1
 800204e:	2202      	movs	r2, #2
 8002050:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2202      	movs	r2, #2
 8002056:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002058:	187b      	adds	r3, r7, r1
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800205e:	187b      	adds	r3, r7, r1
 8002060:	2208      	movs	r2, #8
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002064:	187b      	adds	r3, r7, r1
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	0292      	lsls	r2, r2, #10
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800206c:	187b      	adds	r3, r7, r1
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	0492      	lsls	r2, r2, #18
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002074:	187b      	adds	r3, r7, r1
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	0592      	lsls	r2, r2, #22
 800207a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207c:	187b      	adds	r3, r7, r1
 800207e:	0018      	movs	r0, r3
 8002080:	f001 fe02 	bl	8003c88 <HAL_RCC_OscConfig>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002088:	f000 f9b6 	bl	80023f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208c:	003b      	movs	r3, r7
 800208e:	2207      	movs	r2, #7
 8002090:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002092:	003b      	movs	r3, r7
 8002094:	2202      	movs	r2, #2
 8002096:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002098:	003b      	movs	r3, r7
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800209e:	003b      	movs	r3, r7
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020a4:	003b      	movs	r3, r7
 80020a6:	2102      	movs	r1, #2
 80020a8:	0018      	movs	r0, r3
 80020aa:	f002 f907 	bl	80042bc <HAL_RCC_ClockConfig>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020b2:	f000 f9a1 	bl	80023f8 <Error_Handler>
  }
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b013      	add	sp, #76	; 0x4c
 80020bc:	bd90      	pop	{r4, r7, pc}
	...

080020c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
//	RCC->APBENR1 |= (1<<22);  // enable I2C CLOCK
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_I2C2_Init+0x74>)
 80020c6:	4a1c      	ldr	r2, [pc, #112]	; (8002138 <MX_I2C2_Init+0x78>)
 80020c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x304048F3;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_I2C2_Init+0x74>)
 80020cc:	4a1b      	ldr	r2, [pc, #108]	; (800213c <MX_I2C2_Init+0x7c>)
 80020ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_I2C2_Init+0x74>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_I2C2_Init+0x74>)
 80020d8:	2201      	movs	r2, #1
 80020da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_I2C2_Init+0x74>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_I2C2_Init+0x74>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_I2C2_Init+0x74>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_I2C2_Init+0x74>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_I2C2_Init+0x74>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_I2C2_Init+0x74>)
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 fed3 	bl	8002ea8 <HAL_I2C_Init>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002106:	f000 f977 	bl	80023f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_I2C2_Init+0x74>)
 800210c:	2100      	movs	r1, #0
 800210e:	0018      	movs	r0, r3
 8002110:	f001 fcd6 	bl	8003ac0 <HAL_I2CEx_ConfigAnalogFilter>
 8002114:	1e03      	subs	r3, r0, #0
 8002116:	d001      	beq.n	800211c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002118:	f000 f96e 	bl	80023f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <MX_I2C2_Init+0x74>)
 800211e:	2100      	movs	r1, #0
 8002120:	0018      	movs	r0, r3
 8002122:	f001 fd19 	bl	8003b58 <HAL_I2CEx_ConfigDigitalFilter>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d001      	beq.n	800212e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800212a:	f000 f965 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000040 	.word	0x20000040
 8002138:	40005800 	.word	0x40005800
 800213c:	304048f3 	.word	0x304048f3

08002140 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002146:	231c      	movs	r3, #28
 8002148:	18fb      	adds	r3, r7, r3
 800214a:	0018      	movs	r0, r3
 800214c:	230c      	movs	r3, #12
 800214e:	001a      	movs	r2, r3
 8002150:	2100      	movs	r1, #0
 8002152:	f004 fbbf 	bl	80068d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002156:	003b      	movs	r3, r7
 8002158:	0018      	movs	r0, r3
 800215a:	231c      	movs	r3, #28
 800215c:	001a      	movs	r2, r3
 800215e:	2100      	movs	r1, #0
 8002160:	f004 fbb8 	bl	80068d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002164:	4b29      	ldr	r3, [pc, #164]	; (800220c <MX_TIM2_Init+0xcc>)
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	05d2      	lsls	r2, r2, #23
 800216a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <MX_TIM2_Init+0xcc>)
 800216e:	2200      	movs	r2, #0
 8002170:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <MX_TIM2_Init+0xcc>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002178:	4b24      	ldr	r3, [pc, #144]	; (800220c <MX_TIM2_Init+0xcc>)
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <MX_TIM2_Init+0xcc>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_TIM2_Init+0xcc>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <MX_TIM2_Init+0xcc>)
 800218c:	0018      	movs	r0, r3
 800218e:	f002 fc05 	bl	800499c <HAL_TIM_PWM_Init>
 8002192:	1e03      	subs	r3, r0, #0
 8002194:	d001      	beq.n	800219a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002196:	f000 f92f 	bl	80023f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219a:	211c      	movs	r1, #28
 800219c:	187b      	adds	r3, r7, r1
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a8:	187a      	adds	r2, r7, r1
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_TIM2_Init+0xcc>)
 80021ac:	0011      	movs	r1, r2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f003 f96e 	bl	8005490 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80021b8:	f000 f91e 	bl	80023f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021bc:	003b      	movs	r3, r7
 80021be:	2260      	movs	r2, #96	; 0x60
 80021c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 80021c2:	003b      	movs	r3, r7
 80021c4:	220f      	movs	r2, #15
 80021c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c8:	003b      	movs	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	003b      	movs	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021d4:	0039      	movs	r1, r7
 80021d6:	4b0d      	ldr	r3, [pc, #52]	; (800220c <MX_TIM2_Init+0xcc>)
 80021d8:	2208      	movs	r2, #8
 80021da:	0018      	movs	r0, r3
 80021dc:	f002 fd14 	bl	8004c08 <HAL_TIM_PWM_ConfigChannel>
 80021e0:	1e03      	subs	r3, r0, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80021e4:	f000 f908 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start(&htim2);
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_TIM2_Init+0xcc>)
 80021ea:	0018      	movs	r0, r3
 80021ec:	f002 fb8a 	bl	8004904 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_TIM2_Init+0xcc>)
 80021f2:	2108      	movs	r1, #8
 80021f4:	0018      	movs	r0, r3
 80021f6:	f002 fc29 	bl	8004a4c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <MX_TIM2_Init+0xcc>)
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f98d 	bl	800251c <HAL_TIM_MspPostInit>

}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b00a      	add	sp, #40	; 0x28
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	20000094 	.word	0x20000094

08002210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002214:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002216:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <MX_USART1_UART_Init+0x98>)
 8002218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800221c:	2296      	movs	r2, #150	; 0x96
 800221e:	0192      	lsls	r2, r2, #6
 8002220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002228:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002236:	220c      	movs	r2, #12
 8002238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800224e:	2200      	movs	r2, #0
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 8002254:	2200      	movs	r2, #0
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800225a:	0018      	movs	r0, r3
 800225c:	f003 f980 	bl	8005560 <HAL_UART_Init>
 8002260:	1e03      	subs	r3, r0, #0
 8002262:	d001      	beq.n	8002268 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002264:	f000 f8c8 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800226a:	2100      	movs	r1, #0
 800226c:	0018      	movs	r0, r3
 800226e:	f004 fa51 	bl	8006714 <HAL_UARTEx_SetTxFifoThreshold>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002276:	f000 f8bf 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800227c:	2100      	movs	r1, #0
 800227e:	0018      	movs	r0, r3
 8002280:	f004 fa88 	bl	8006794 <HAL_UARTEx_SetRxFifoThreshold>
 8002284:	1e03      	subs	r3, r0, #0
 8002286:	d001      	beq.n	800228c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002288:	f000 f8b6 	bl	80023f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <MX_USART1_UART_Init+0x94>)
 800228e:	0018      	movs	r0, r3
 8002290:	f004 fa06 	bl	80066a0 <HAL_UARTEx_DisableFifoMode>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002298:	f000 f8ae 	bl	80023f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	200000e0 	.word	0x200000e0
 80022a8:	40013800 	.word	0x40013800

080022ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	240c      	movs	r4, #12
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	0018      	movs	r0, r3
 80022b8:	2314      	movs	r3, #20
 80022ba:	001a      	movs	r2, r3
 80022bc:	2100      	movs	r1, #0
 80022be:	f004 fb09 	bl	80068d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022c8:	2104      	movs	r1, #4
 80022ca:	430a      	orrs	r2, r1
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
 80022ce:	4b48      	ldr	r3, [pc, #288]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	2204      	movs	r2, #4
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022de:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	430a      	orrs	r2, r1
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	2201      	movs	r2, #1
 80022ec:	4013      	ands	r3, r2
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	4b3f      	ldr	r3, [pc, #252]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022f6:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <MX_GPIO_Init+0x144>)
 80022f8:	2102      	movs	r1, #2
 80022fa:	430a      	orrs	r2, r1
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34
 80022fe:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <MX_GPIO_Init+0x144>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2202      	movs	r2, #2
 8002304:	4013      	ands	r3, r2
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 800230a:	23a0      	movs	r3, #160	; 0xa0
 800230c:	05db      	lsls	r3, r3, #23
 800230e:	2200      	movs	r2, #0
 8002310:	213a      	movs	r1, #58	; 0x3a
 8002312:	0018      	movs	r0, r3
 8002314:	f000 fd90 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <MX_GPIO_Init+0x148>)
 800231a:	2200      	movs	r2, #0
 800231c:	2102      	movs	r1, #2
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fd8a 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
 8002324:	193b      	adds	r3, r7, r4
 8002326:	223a      	movs	r2, #58	; 0x3a
 8002328:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	193b      	adds	r3, r7, r4
 800232c:	2201      	movs	r2, #1
 800232e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	193b      	adds	r3, r7, r4
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	193b      	adds	r3, r7, r4
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233c:	193a      	adds	r2, r7, r4
 800233e:	23a0      	movs	r3, #160	; 0xa0
 8002340:	05db      	lsls	r3, r3, #23
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f000 fc13 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800234a:	193b      	adds	r3, r7, r4
 800234c:	22c0      	movs	r2, #192	; 0xc0
 800234e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	193b      	adds	r3, r7, r4
 8002352:	2202      	movs	r2, #2
 8002354:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	193b      	adds	r3, r7, r4
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	193a      	adds	r2, r7, r4
 800236a:	23a0      	movs	r3, #160	; 0xa0
 800236c:	05db      	lsls	r3, r3, #23
 800236e:	0011      	movs	r1, r2
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fbfd 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002376:	193b      	adds	r3, r7, r4
 8002378:	2209      	movs	r2, #9
 800237a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	193b      	adds	r3, r7, r4
 800237e:	2202      	movs	r2, #2
 8002380:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	193b      	adds	r3, r7, r4
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002388:	193b      	adds	r3, r7, r4
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800238e:	193b      	adds	r3, r7, r4
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	193b      	adds	r3, r7, r4
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <MX_GPIO_Init+0x148>)
 8002398:	0019      	movs	r1, r3
 800239a:	0010      	movs	r0, r2
 800239c:	f000 fbe8 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2202      	movs	r2, #2
 80023a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	2201      	movs	r2, #1
 80023aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	193b      	adds	r3, r7, r4
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 80023b8:	193b      	adds	r3, r7, r4
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <MX_GPIO_Init+0x148>)
 80023bc:	0019      	movs	r1, r3
 80023be:	0010      	movs	r0, r2
 80023c0:	f000 fbd6 	bl	8002b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023c4:	0021      	movs	r1, r4
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	0212      	lsls	r2, r2, #8
 80023cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2203      	movs	r2, #3
 80023d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	187a      	adds	r2, r7, r1
 80023dc:	23a0      	movs	r3, #160	; 0xa0
 80023de:	05db      	lsls	r3, r3, #23
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f000 fbc4 	bl	8002b70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b009      	add	sp, #36	; 0x24
 80023ee:	bd90      	pop	{r4, r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	50000400 	.word	0x50000400

080023f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023fc:	b672      	cpsid	i
}
 80023fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002400:	e7fe      	b.n	8002400 <Error_Handler+0x8>
	...

08002404 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_MspInit+0x44>)
 800240c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_MspInit+0x44>)
 8002410:	2101      	movs	r1, #1
 8002412:	430a      	orrs	r2, r1
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_MspInit+0x44>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_MspInit+0x44>)
 8002424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_MspInit+0x44>)
 8002428:	2180      	movs	r1, #128	; 0x80
 800242a:	0549      	lsls	r1, r1, #21
 800242c:	430a      	orrs	r2, r1
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_MspInit+0x44>)
 8002432:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	4013      	ands	r3, r2
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	b002      	add	sp, #8
 8002444:	bd80      	pop	{r7, pc}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b08b      	sub	sp, #44	; 0x2c
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	2414      	movs	r4, #20
 8002456:	193b      	adds	r3, r7, r4
 8002458:	0018      	movs	r0, r3
 800245a:	2314      	movs	r3, #20
 800245c:	001a      	movs	r2, r3
 800245e:	2100      	movs	r1, #0
 8002460:	f004 fa38 	bl	80068d4 <memset>
  if(hi2c->Instance==I2C2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	; (80024dc <HAL_I2C_MspInit+0x90>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d131      	bne.n	80024d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <HAL_I2C_MspInit+0x94>)
 8002470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_I2C_MspInit+0x94>)
 8002474:	2101      	movs	r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_I2C_MspInit+0x94>)
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	2201      	movs	r2, #1
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002486:	193b      	adds	r3, r7, r4
 8002488:	22c0      	movs	r2, #192	; 0xc0
 800248a:	0152      	lsls	r2, r2, #5
 800248c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248e:	0021      	movs	r1, r4
 8002490:	187b      	adds	r3, r7, r1
 8002492:	2212      	movs	r2, #18
 8002494:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	187b      	adds	r3, r7, r1
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800249c:	187b      	adds	r3, r7, r1
 800249e:	2201      	movs	r2, #1
 80024a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80024a2:	187b      	adds	r3, r7, r1
 80024a4:	2206      	movs	r2, #6
 80024a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	187a      	adds	r2, r7, r1
 80024aa:	23a0      	movs	r3, #160	; 0xa0
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f000 fb5d 	bl	8002b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_I2C_MspInit+0x94>)
 80024b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_I2C_MspInit+0x94>)
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	03c9      	lsls	r1, r1, #15
 80024c0:	430a      	orrs	r2, r1
 80024c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_I2C_MspInit+0x94>)
 80024c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	03db      	lsls	r3, r3, #15
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b00b      	add	sp, #44	; 0x2c
 80024d8:	bd90      	pop	{r4, r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	40005800 	.word	0x40005800
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	05db      	lsls	r3, r3, #23
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10b      	bne.n	8002510 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <HAL_TIM_PWM_MspInit+0x34>)
 80024fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_TIM_PWM_MspInit+0x34>)
 80024fe:	2101      	movs	r1, #1
 8002500:	430a      	orrs	r2, r1
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_TIM_PWM_MspInit+0x34>)
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002510:	46c0      	nop			; (mov r8, r8)
 8002512:	46bd      	mov	sp, r7
 8002514:	b004      	add	sp, #16
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	240c      	movs	r4, #12
 8002526:	193b      	adds	r3, r7, r4
 8002528:	0018      	movs	r0, r3
 800252a:	2314      	movs	r3, #20
 800252c:	001a      	movs	r2, r3
 800252e:	2100      	movs	r1, #0
 8002530:	f004 f9d0 	bl	80068d4 <memset>
  if(htim->Instance==TIM2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	05db      	lsls	r3, r3, #23
 800253c:	429a      	cmp	r2, r3
 800253e:	d122      	bne.n	8002586 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_TIM_MspPostInit+0x74>)
 8002542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_TIM_MspPostInit+0x74>)
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_TIM_MspPostInit+0x74>)
 800254e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002558:	0021      	movs	r1, r4
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2204      	movs	r2, #4
 800255e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2202      	movs	r2, #2
 8002564:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	187b      	adds	r3, r7, r1
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002572:	187b      	adds	r3, r7, r1
 8002574:	2202      	movs	r2, #2
 8002576:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002578:	187a      	adds	r2, r7, r1
 800257a:	23a0      	movs	r3, #160	; 0xa0
 800257c:	05db      	lsls	r3, r3, #23
 800257e:	0011      	movs	r1, r2
 8002580:	0018      	movs	r0, r3
 8002582:	f000 faf5 	bl	8002b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b009      	add	sp, #36	; 0x24
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b095      	sub	sp, #84	; 0x54
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	233c      	movs	r3, #60	; 0x3c
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	0018      	movs	r0, r3
 80025a2:	2314      	movs	r3, #20
 80025a4:	001a      	movs	r2, r3
 80025a6:	2100      	movs	r1, #0
 80025a8:	f004 f994 	bl	80068d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ac:	2414      	movs	r4, #20
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	0018      	movs	r0, r3
 80025b2:	2328      	movs	r3, #40	; 0x28
 80025b4:	001a      	movs	r2, r3
 80025b6:	2100      	movs	r1, #0
 80025b8:	f004 f98c 	bl	80068d4 <memset>
  if(huart->Instance==USART1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a26      	ldr	r2, [pc, #152]	; (800265c <HAL_UART_MspInit+0xc8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d145      	bne.n	8002652 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	0018      	movs	r0, r3
 80025d6:	f002 f81b 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025de:	f7ff ff0b 	bl	80023f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e2:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_UART_MspInit+0xcc>)
 80025e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_UART_MspInit+0xcc>)
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	01c9      	lsls	r1, r1, #7
 80025ec:	430a      	orrs	r2, r1
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_UART_MspInit+0xcc>)
 80025f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	01db      	lsls	r3, r3, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_UART_MspInit+0xcc>)
 8002600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_UART_MspInit+0xcc>)
 8002604:	2102      	movs	r1, #2
 8002606:	430a      	orrs	r2, r1
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_UART_MspInit+0xcc>)
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002616:	213c      	movs	r1, #60	; 0x3c
 8002618:	187b      	adds	r3, r7, r1
 800261a:	22c0      	movs	r2, #192	; 0xc0
 800261c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2202      	movs	r2, #2
 8002622:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002636:	187b      	adds	r3, r7, r1
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_UART_MspInit+0xd0>)
 800263a:	0019      	movs	r1, r3
 800263c:	0010      	movs	r0, r2
 800263e:	f000 fa97 	bl	8002b70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	201b      	movs	r0, #27
 8002648:	f000 f994 	bl	8002974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800264c:	201b      	movs	r0, #27
 800264e:	f000 f9a6 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b015      	add	sp, #84	; 0x54
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	40013800 	.word	0x40013800
 8002660:	40021000 	.word	0x40021000
 8002664:	50000400 	.word	0x50000400

08002668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800266c:	e7fe      	b.n	800266c <NMI_Handler+0x4>

0800266e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <HardFault_Handler+0x4>

08002674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268c:	f000 f8aa 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <USART1_IRQHandler+0x14>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f002 ffb4 	bl	800560c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	200000e0 	.word	0x200000e0

080026b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b4:	46c0      	nop			; (mov r8, r8)
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c0:	f7ff fff6 	bl	80026b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ea:	f004 f8fb 	bl	80068e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80026ee:	f7ff fc73 	bl	8001fd8 <main>

080026f2 <LoopForever>:

LoopForever:
  b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
  ldr   r0, =_estack
 80026f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002700:	08006a70 	.word	0x08006a70
  ldr r2, =_sbss
 8002704:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002708:	20000178 	.word	0x20000178

0800270c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC1_IRQHandler>
	...

08002710 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002716:	1dfb      	adds	r3, r7, #7
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_Init+0x3c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_Init+0x3c>)
 8002722:	2180      	movs	r1, #128	; 0x80
 8002724:	0049      	lsls	r1, r1, #1
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800272a:	2003      	movs	r0, #3
 800272c:	f000 f810 	bl	8002750 <HAL_InitTick>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d003      	beq.n	800273c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e001      	b.n	8002740 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fe62 	bl	8002404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	781b      	ldrb	r3, [r3, #0]
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40022000 	.word	0x40022000

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002758:	230f      	movs	r3, #15
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_InitTick+0x88>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d02b      	beq.n	80027c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <HAL_InitTick+0x8c>)
 800276a:	681c      	ldr	r4, [r3, #0]
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_InitTick+0x88>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	0019      	movs	r1, r3
 8002772:	23fa      	movs	r3, #250	; 0xfa
 8002774:	0098      	lsls	r0, r3, #2
 8002776:	f7fd fcc5 	bl	8000104 <__udivsi3>
 800277a:	0003      	movs	r3, r0
 800277c:	0019      	movs	r1, r3
 800277e:	0020      	movs	r0, r4
 8002780:	f7fd fcc0 	bl	8000104 <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f919 	bl	80029be <HAL_SYSTICK_Config>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d112      	bne.n	80027b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d80a      	bhi.n	80027ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	2301      	movs	r3, #1
 800279a:	425b      	negs	r3, r3
 800279c:	2200      	movs	r2, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 f8e8 	bl	8002974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_InitTick+0x90>)
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e00d      	b.n	80027c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e008      	b.n	80027c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027b6:	230f      	movs	r3, #15
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	e003      	b.n	80027c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027c0:	230f      	movs	r3, #15
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027c8:	230f      	movs	r3, #15
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	781b      	ldrb	r3, [r3, #0]
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b005      	add	sp, #20
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	20000008 	.word	0x20000008
 80027dc:	20000000 	.word	0x20000000
 80027e0:	20000004 	.word	0x20000004

080027e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_IncTick+0x1c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	001a      	movs	r2, r3
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_IncTick+0x20>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	18d2      	adds	r2, r2, r3
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_IncTick+0x20>)
 80027f6:	601a      	str	r2, [r3, #0]
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	20000008 	.word	0x20000008
 8002804:	20000174 	.word	0x20000174

08002808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  return uwTick;
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <HAL_GetTick+0x10>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	20000174 	.word	0x20000174

0800281c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	0002      	movs	r2, r0
 8002824:	1dfb      	adds	r3, r7, #7
 8002826:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002828:	1dfb      	adds	r3, r7, #7
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b7f      	cmp	r3, #127	; 0x7f
 800282e:	d809      	bhi.n	8002844 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	001a      	movs	r2, r3
 8002836:	231f      	movs	r3, #31
 8002838:	401a      	ands	r2, r3
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <__NVIC_EnableIRQ+0x30>)
 800283c:	2101      	movs	r1, #1
 800283e:	4091      	lsls	r1, r2
 8002840:	000a      	movs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	0002      	movs	r2, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b7f      	cmp	r3, #127	; 0x7f
 8002864:	d828      	bhi.n	80028b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002866:	4a2f      	ldr	r2, [pc, #188]	; (8002924 <__NVIC_SetPriority+0xd4>)
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b25b      	sxtb	r3, r3
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	33c0      	adds	r3, #192	; 0xc0
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	589b      	ldr	r3, [r3, r2]
 8002876:	1dfa      	adds	r2, r7, #7
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	0011      	movs	r1, r2
 800287c:	2203      	movs	r2, #3
 800287e:	400a      	ands	r2, r1
 8002880:	00d2      	lsls	r2, r2, #3
 8002882:	21ff      	movs	r1, #255	; 0xff
 8002884:	4091      	lsls	r1, r2
 8002886:	000a      	movs	r2, r1
 8002888:	43d2      	mvns	r2, r2
 800288a:	401a      	ands	r2, r3
 800288c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	019b      	lsls	r3, r3, #6
 8002892:	22ff      	movs	r2, #255	; 0xff
 8002894:	401a      	ands	r2, r3
 8002896:	1dfb      	adds	r3, r7, #7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	0018      	movs	r0, r3
 800289c:	2303      	movs	r3, #3
 800289e:	4003      	ands	r3, r0
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a4:	481f      	ldr	r0, [pc, #124]	; (8002924 <__NVIC_SetPriority+0xd4>)
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b25b      	sxtb	r3, r3
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	430a      	orrs	r2, r1
 80028b0:	33c0      	adds	r3, #192	; 0xc0
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028b6:	e031      	b.n	800291c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b8:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <__NVIC_SetPriority+0xd8>)
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	0019      	movs	r1, r3
 80028c0:	230f      	movs	r3, #15
 80028c2:	400b      	ands	r3, r1
 80028c4:	3b08      	subs	r3, #8
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3306      	adds	r3, #6
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	18d3      	adds	r3, r2, r3
 80028ce:	3304      	adds	r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	1dfa      	adds	r2, r7, #7
 80028d4:	7812      	ldrb	r2, [r2, #0]
 80028d6:	0011      	movs	r1, r2
 80028d8:	2203      	movs	r2, #3
 80028da:	400a      	ands	r2, r1
 80028dc:	00d2      	lsls	r2, r2, #3
 80028de:	21ff      	movs	r1, #255	; 0xff
 80028e0:	4091      	lsls	r1, r2
 80028e2:	000a      	movs	r2, r1
 80028e4:	43d2      	mvns	r2, r2
 80028e6:	401a      	ands	r2, r3
 80028e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	22ff      	movs	r2, #255	; 0xff
 80028f0:	401a      	ands	r2, r3
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	0018      	movs	r0, r3
 80028f8:	2303      	movs	r3, #3
 80028fa:	4003      	ands	r3, r0
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002900:	4809      	ldr	r0, [pc, #36]	; (8002928 <__NVIC_SetPriority+0xd8>)
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	001c      	movs	r4, r3
 8002908:	230f      	movs	r3, #15
 800290a:	4023      	ands	r3, r4
 800290c:	3b08      	subs	r3, #8
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	430a      	orrs	r2, r1
 8002912:	3306      	adds	r3, #6
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	18c3      	adds	r3, r0, r3
 8002918:	3304      	adds	r3, #4
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	b003      	add	sp, #12
 8002922:	bd90      	pop	{r4, r7, pc}
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	045b      	lsls	r3, r3, #17
 800293c:	429a      	cmp	r2, r3
 800293e:	d301      	bcc.n	8002944 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002940:	2301      	movs	r3, #1
 8002942:	e010      	b.n	8002966 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <SysTick_Config+0x44>)
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	3a01      	subs	r2, #1
 800294a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294c:	2301      	movs	r3, #1
 800294e:	425b      	negs	r3, r3
 8002950:	2103      	movs	r1, #3
 8002952:	0018      	movs	r0, r3
 8002954:	f7ff ff7c 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SysTick_Config+0x44>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295e:	4b04      	ldr	r3, [pc, #16]	; (8002970 <SysTick_Config+0x44>)
 8002960:	2207      	movs	r2, #7
 8002962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002964:	2300      	movs	r3, #0
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	e000e010 	.word	0xe000e010

08002974 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	210f      	movs	r1, #15
 8002980:	187b      	adds	r3, r7, r1
 8002982:	1c02      	adds	r2, r0, #0
 8002984:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	187b      	adds	r3, r7, r1
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	b25b      	sxtb	r3, r3
 800298e:	0011      	movs	r1, r2
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff ff5d 	bl	8002850 <__NVIC_SetPriority>
}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	0002      	movs	r2, r0
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	0018      	movs	r0, r3
 80029b2:	f7ff ff33 	bl	800281c <__NVIC_EnableIRQ>
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b002      	add	sp, #8
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff ffaf 	bl	800292c <SysTick_Config>
 80029ce:	0003      	movs	r3, r0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e050      	b.n	8002a8c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2225      	movs	r2, #37	; 0x25
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d008      	beq.n	8002a08 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2204      	movs	r2, #4
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	2100      	movs	r1, #0
 8002a02:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e041      	b.n	8002a8c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	210e      	movs	r1, #14
 8002a14:	438a      	bics	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	491c      	ldr	r1, [pc, #112]	; (8002a94 <HAL_DMA_Abort+0xbc>)
 8002a24:	400a      	ands	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	438a      	bics	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_DMA_Abort+0xc0>)
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	221c      	movs	r2, #28
 8002a42:	4013      	ands	r3, r2
 8002a44:	2201      	movs	r2, #1
 8002a46:	409a      	lsls	r2, r3
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_DMA_Abort+0xc0>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00c      	beq.n	8002a7a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_DMA_Abort+0xbc>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2225      	movs	r2, #37	; 0x25
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2224      	movs	r2, #36	; 0x24
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	fffffeff 	.word	0xfffffeff
 8002a98:	40020000 	.word	0x40020000

08002a9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	210f      	movs	r1, #15
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2225      	movs	r2, #37	; 0x25
 8002ab0:	5c9b      	ldrb	r3, [r3, r2]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d006      	beq.n	8002ac6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2204      	movs	r2, #4
 8002abc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e049      	b.n	8002b5a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	210e      	movs	r1, #14
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	438a      	bics	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	491d      	ldr	r1, [pc, #116]	; (8002b68 <HAL_DMA_Abort_IT+0xcc>)
 8002af2:	400a      	ands	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_DMA_Abort_IT+0xd0>)
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	221c      	movs	r2, #28
 8002b00:	4013      	ands	r3, r2
 8002b02:	2201      	movs	r2, #1
 8002b04:	409a      	lsls	r2, r3
 8002b06:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_DMA_Abort_IT+0xd0>)
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	490f      	ldr	r1, [pc, #60]	; (8002b68 <HAL_DMA_Abort_IT+0xcc>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2225      	movs	r2, #37	; 0x25
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2224      	movs	r2, #36	; 0x24
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	0010      	movs	r0, r2
 8002b58:	4798      	blx	r3
    }
  }
  return status;
 8002b5a:	230f      	movs	r3, #15
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b004      	add	sp, #16
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	fffffeff 	.word	0xfffffeff
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7e:	e147      	b.n	8002e10 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2101      	movs	r1, #1
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4091      	lsls	r1, r2
 8002b8a:	000a      	movs	r2, r1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d100      	bne.n	8002b98 <HAL_GPIO_Init+0x28>
 8002b96:	e138      	b.n	8002e0a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d005      	beq.n	8002bb0 <HAL_GPIO_Init+0x40>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d130      	bne.n	8002c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be6:	2201      	movs	r2, #1
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	401a      	ands	r2, r3
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2203      	movs	r2, #3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d017      	beq.n	8002c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	0013      	movs	r3, r2
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2203      	movs	r2, #3
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d123      	bne.n	8002ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	0092      	lsls	r2, r2, #2
 8002c64:	58d3      	ldr	r3, [r2, r3]
 8002c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2107      	movs	r1, #7
 8002c86:	400b      	ands	r3, r1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	0092      	lsls	r2, r2, #2
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	2203      	movs	r2, #3
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	0013      	movs	r3, r2
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	23c0      	movs	r3, #192	; 0xc0
 8002cdc:	029b      	lsls	r3, r3, #10
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d100      	bne.n	8002ce4 <HAL_GPIO_Init+0x174>
 8002ce2:	e092      	b.n	8002e0a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ce4:	4a50      	ldr	r2, [pc, #320]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	3318      	adds	r3, #24
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	589b      	ldr	r3, [r3, r2]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2203      	movs	r2, #3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	0013      	movs	r3, r2
 8002d00:	43da      	mvns	r2, r3
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	05db      	lsls	r3, r3, #23
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0x1ca>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a45      	ldr	r2, [pc, #276]	; (8002e2c <HAL_GPIO_Init+0x2bc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00d      	beq.n	8002d36 <HAL_GPIO_Init+0x1c6>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a44      	ldr	r2, [pc, #272]	; (8002e30 <HAL_GPIO_Init+0x2c0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <HAL_GPIO_Init+0x1c2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a43      	ldr	r2, [pc, #268]	; (8002e34 <HAL_GPIO_Init+0x2c4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_GPIO_Init+0x1be>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x1cc>
 8002d2e:	2305      	movs	r3, #5
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x1cc>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x1cc>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x1cc>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	2103      	movs	r1, #3
 8002d40:	400a      	ands	r2, r1
 8002d42:	00d2      	lsls	r2, r2, #3
 8002d44:	4093      	lsls	r3, r2
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d4c:	4936      	ldr	r1, [pc, #216]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3318      	adds	r3, #24
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d5a:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	43da      	mvns	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	035b      	lsls	r3, r3, #13
 8002d72:	4013      	ands	r3, r2
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43da      	mvns	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	039b      	lsls	r3, r3, #14
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002da8:	4b1f      	ldr	r3, [pc, #124]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002db0:	2384      	movs	r3, #132	; 0x84
 8002db2:	58d3      	ldr	r3, [r2, r3]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	029b      	lsls	r3, r3, #10
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dd4:	4914      	ldr	r1, [pc, #80]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	2284      	movs	r2, #132	; 0x84
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ddc:	4a12      	ldr	r2, [pc, #72]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	58d3      	ldr	r3, [r2, r3]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	43da      	mvns	r2, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	025b      	lsls	r3, r3, #9
 8002df6:	4013      	ands	r3, r2
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e02:	4909      	ldr	r1, [pc, #36]	; (8002e28 <HAL_GPIO_Init+0x2b8>)
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	40da      	lsrs	r2, r3
 8002e18:	1e13      	subs	r3, r2, #0
 8002e1a:	d000      	beq.n	8002e1e <HAL_GPIO_Init+0x2ae>
 8002e1c:	e6b0      	b.n	8002b80 <HAL_GPIO_Init+0x10>
  }
}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b006      	add	sp, #24
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021800 	.word	0x40021800
 8002e2c:	50000400 	.word	0x50000400
 8002e30:	50000800 	.word	0x50000800
 8002e34:	50000c00 	.word	0x50000c00

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	0008      	movs	r0, r1
 8002e42:	0011      	movs	r1, r2
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	1c02      	adds	r2, r0, #0
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	1c7b      	adds	r3, r7, #1
 8002e4c:	1c0a      	adds	r2, r1, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e50:	1c7b      	adds	r3, r7, #1
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e58:	1cbb      	adds	r3, r7, #2
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e60:	e003      	b.n	8002e6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e62:	1cbb      	adds	r3, r7, #2
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	000a      	movs	r2, r1
 8002e7c:	1cbb      	adds	r3, r7, #2
 8002e7e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e86:	1cbb      	adds	r3, r7, #2
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	041a      	lsls	r2, r3, #16
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	1cb9      	adds	r1, r7, #2
 8002e96:	8809      	ldrh	r1, [r1, #0]
 8002e98:	400b      	ands	r3, r1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e08f      	b.n	8002fda <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2241      	movs	r2, #65	; 0x41
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d107      	bne.n	8002ed6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff fabb 	bl	800244c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2241      	movs	r2, #65	; 0x41
 8002eda:	2124      	movs	r1, #36	; 0x24
 8002edc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	438a      	bics	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	493b      	ldr	r1, [pc, #236]	; (8002fe4 <HAL_I2C_Init+0x13c>)
 8002ef8:	400a      	ands	r2, r1
 8002efa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4938      	ldr	r1, [pc, #224]	; (8002fe8 <HAL_I2C_Init+0x140>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	0209      	lsls	r1, r1, #8
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	e007      	b.n	8002f36 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2184      	movs	r1, #132	; 0x84
 8002f30:	0209      	lsls	r1, r1, #8
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d109      	bne.n	8002f52 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	0109      	lsls	r1, r1, #4
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	e007      	b.n	8002f62 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4923      	ldr	r1, [pc, #140]	; (8002fec <HAL_I2C_Init+0x144>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4920      	ldr	r1, [pc, #128]	; (8002ff0 <HAL_I2C_Init+0x148>)
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	491a      	ldr	r1, [pc, #104]	; (8002fe8 <HAL_I2C_Init+0x140>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691a      	ldr	r2, [r3, #16]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69d9      	ldr	r1, [r3, #28]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2241      	movs	r2, #65	; 0x41
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2242      	movs	r2, #66	; 0x42
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	f0ffffff 	.word	0xf0ffffff
 8002fe8:	ffff7fff 	.word	0xffff7fff
 8002fec:	fffff7ff 	.word	0xfffff7ff
 8002ff0:	02008000 	.word	0x02008000

08002ff4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	000c      	movs	r4, r1
 8002ffe:	0010      	movs	r0, r2
 8003000:	0019      	movs	r1, r3
 8003002:	230a      	movs	r3, #10
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	1c22      	adds	r2, r4, #0
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	2308      	movs	r3, #8
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	1c02      	adds	r2, r0, #0
 8003010:	801a      	strh	r2, [r3, #0]
 8003012:	1dbb      	adds	r3, r7, #6
 8003014:	1c0a      	adds	r2, r1, #0
 8003016:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2241      	movs	r2, #65	; 0x41
 800301c:	5c9b      	ldrb	r3, [r3, r2]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b20      	cmp	r3, #32
 8003022:	d000      	beq.n	8003026 <HAL_I2C_Mem_Write+0x32>
 8003024:	e10c      	b.n	8003240 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_I2C_Mem_Write+0x42>
 800302c:	232c      	movs	r3, #44	; 0x2c
 800302e:	18fb      	adds	r3, r7, r3
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e0ff      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2240      	movs	r2, #64	; 0x40
 8003046:	5c9b      	ldrb	r3, [r3, r2]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_I2C_Mem_Write+0x5c>
 800304c:	2302      	movs	r3, #2
 800304e:	e0f8      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2240      	movs	r2, #64	; 0x40
 8003054:	2101      	movs	r1, #1
 8003056:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003058:	f7ff fbd6 	bl	8002808 <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	0219      	lsls	r1, r3, #8
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2319      	movs	r3, #25
 800306c:	2201      	movs	r2, #1
 800306e:	f000 fb0b 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e0e3      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2241      	movs	r2, #65	; 0x41
 800307e:	2121      	movs	r1, #33	; 0x21
 8003080:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2242      	movs	r2, #66	; 0x42
 8003086:	2140      	movs	r1, #64	; 0x40
 8003088:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	222c      	movs	r2, #44	; 0x2c
 800309a:	18ba      	adds	r2, r7, r2
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030a6:	1dbb      	adds	r3, r7, #6
 80030a8:	881c      	ldrh	r4, [r3, #0]
 80030aa:	2308      	movs	r3, #8
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	230a      	movs	r3, #10
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	8819      	ldrh	r1, [r3, #0]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	0023      	movs	r3, r4
 80030c2:	f000 f9f9 	bl	80034b8 <I2C_RequestMemoryWrite>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2240      	movs	r2, #64	; 0x40
 80030ce:	2100      	movs	r1, #0
 80030d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0b5      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2bff      	cmp	r3, #255	; 0xff
 80030de:	d911      	bls.n	8003104 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	22ff      	movs	r2, #255	; 0xff
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	045c      	lsls	r4, r3, #17
 80030f0:	230a      	movs	r3, #10
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	8819      	ldrh	r1, [r3, #0]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	0023      	movs	r3, r4
 80030fe:	f000 fca5 	bl	8003a4c <I2C_TransferConfig>
 8003102:	e012      	b.n	800312a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003112:	b2da      	uxtb	r2, r3
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	049c      	lsls	r4, r3, #18
 8003118:	230a      	movs	r3, #10
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	8819      	ldrh	r1, [r3, #0]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	0023      	movs	r3, r4
 8003126:	f000 fc91 	bl	8003a4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fb01 	bl	8003738 <I2C_WaitOnTXISFlagUntilTimeout>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d001      	beq.n	800313e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e081      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03a      	beq.n	80031ee <HAL_I2C_Mem_Write+0x1fa>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	2b00      	cmp	r3, #0
 800317e:	d136      	bne.n	80031ee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0013      	movs	r3, r2
 800318a:	2200      	movs	r2, #0
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	f000 fa7b 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e053      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2bff      	cmp	r3, #255	; 0xff
 80031a2:	d911      	bls.n	80031c8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	22ff      	movs	r2, #255	; 0xff
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	045c      	lsls	r4, r3, #17
 80031b4:	230a      	movs	r3, #10
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	8819      	ldrh	r1, [r3, #0]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	2300      	movs	r3, #0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	0023      	movs	r3, r4
 80031c2:	f000 fc43 	bl	8003a4c <I2C_TransferConfig>
 80031c6:	e012      	b.n	80031ee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	2380      	movs	r3, #128	; 0x80
 80031da:	049c      	lsls	r4, r3, #18
 80031dc:	230a      	movs	r3, #10
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	8819      	ldrh	r1, [r3, #0]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	0023      	movs	r3, r4
 80031ea:	f000 fc2f 	bl	8003a4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d198      	bne.n	800312a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 fae0 	bl	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e01a      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2220      	movs	r2, #32
 8003212:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	490b      	ldr	r1, [pc, #44]	; (800324c <HAL_I2C_Mem_Write+0x258>)
 8003220:	400a      	ands	r2, r1
 8003222:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2241      	movs	r2, #65	; 0x41
 8003228:	2120      	movs	r1, #32
 800322a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2242      	movs	r2, #66	; 0x42
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2240      	movs	r2, #64	; 0x40
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	e000      	b.n	8003242 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b007      	add	sp, #28
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	fe00e800 	.word	0xfe00e800

08003250 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	000c      	movs	r4, r1
 800325a:	0010      	movs	r0, r2
 800325c:	0019      	movs	r1, r3
 800325e:	230a      	movs	r3, #10
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	1c22      	adds	r2, r4, #0
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	2308      	movs	r3, #8
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	1c02      	adds	r2, r0, #0
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	1dbb      	adds	r3, r7, #6
 8003270:	1c0a      	adds	r2, r1, #0
 8003272:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2241      	movs	r2, #65	; 0x41
 8003278:	5c9b      	ldrb	r3, [r3, r2]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b20      	cmp	r3, #32
 800327e:	d000      	beq.n	8003282 <HAL_I2C_Mem_Read+0x32>
 8003280:	e110      	b.n	80034a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_I2C_Mem_Read+0x42>
 8003288:	232c      	movs	r3, #44	; 0x2c
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	0092      	lsls	r2, r2, #2
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e103      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2240      	movs	r2, #64	; 0x40
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_I2C_Mem_Read+0x5c>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e0fc      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2240      	movs	r2, #64	; 0x40
 80032b0:	2101      	movs	r1, #1
 80032b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032b4:	f7ff faa8 	bl	8002808 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	0219      	lsls	r1, r3, #8
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	2319      	movs	r3, #25
 80032c8:	2201      	movs	r2, #1
 80032ca:	f000 f9dd 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0e7      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2241      	movs	r2, #65	; 0x41
 80032da:	2122      	movs	r1, #34	; 0x22
 80032dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2242      	movs	r2, #66	; 0x42
 80032e2:	2140      	movs	r1, #64	; 0x40
 80032e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	222c      	movs	r2, #44	; 0x2c
 80032f6:	18ba      	adds	r2, r7, r2
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003302:	1dbb      	adds	r3, r7, #6
 8003304:	881c      	ldrh	r4, [r3, #0]
 8003306:	2308      	movs	r3, #8
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	881a      	ldrh	r2, [r3, #0]
 800330c:	230a      	movs	r3, #10
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	8819      	ldrh	r1, [r3, #0]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f000 f92f 	bl	8003580 <I2C_RequestMemoryRead>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d005      	beq.n	8003332 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2240      	movs	r2, #64	; 0x40
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e0b9      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	2bff      	cmp	r3, #255	; 0xff
 800333a:	d911      	bls.n	8003360 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	b2da      	uxtb	r2, r3
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	045c      	lsls	r4, r3, #17
 800334c:	230a      	movs	r3, #10
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	8819      	ldrh	r1, [r3, #0]
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <HAL_I2C_Mem_Read+0x260>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	0023      	movs	r3, r4
 800335a:	f000 fb77 	bl	8003a4c <I2C_TransferConfig>
 800335e:	e012      	b.n	8003386 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	049c      	lsls	r4, r3, #18
 8003374:	230a      	movs	r3, #10
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	8819      	ldrh	r1, [r3, #0]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	4b4c      	ldr	r3, [pc, #304]	; (80034b0 <HAL_I2C_Mem_Read+0x260>)
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	0023      	movs	r3, r4
 8003382:	f000 fb63 	bl	8003a4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	0013      	movs	r3, r2
 8003390:	2200      	movs	r2, #0
 8003392:	2104      	movs	r1, #4
 8003394:	f000 f978 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e082      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d03a      	beq.n	8003452 <HAL_I2C_Mem_Read+0x202>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d136      	bne.n	8003452 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	0013      	movs	r3, r2
 80033ee:	2200      	movs	r2, #0
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	f000 f949 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e053      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	2bff      	cmp	r3, #255	; 0xff
 8003406:	d911      	bls.n	800342c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	22ff      	movs	r2, #255	; 0xff
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	b2da      	uxtb	r2, r3
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	045c      	lsls	r4, r3, #17
 8003418:	230a      	movs	r3, #10
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	8819      	ldrh	r1, [r3, #0]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	2300      	movs	r3, #0
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	0023      	movs	r3, r4
 8003426:	f000 fb11 	bl	8003a4c <I2C_TransferConfig>
 800342a:	e012      	b.n	8003452 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	b2da      	uxtb	r2, r3
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	049c      	lsls	r4, r3, #18
 8003440:	230a      	movs	r3, #10
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	8819      	ldrh	r1, [r3, #0]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	2300      	movs	r3, #0
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	0023      	movs	r3, r4
 800344e:	f000 fafd 	bl	8003a4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d194      	bne.n	8003386 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f9ae 	bl	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e01a      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2220      	movs	r2, #32
 8003476:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	490c      	ldr	r1, [pc, #48]	; (80034b4 <HAL_I2C_Mem_Read+0x264>)
 8003484:	400a      	ands	r2, r1
 8003486:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2241      	movs	r2, #65	; 0x41
 800348c:	2120      	movs	r1, #32
 800348e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2242      	movs	r2, #66	; 0x42
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2240      	movs	r2, #64	; 0x40
 800349c:	2100      	movs	r1, #0
 800349e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	e000      	b.n	80034a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
  }
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b007      	add	sp, #28
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	80002400 	.word	0x80002400
 80034b4:	fe00e800 	.word	0xfe00e800

080034b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	000c      	movs	r4, r1
 80034c2:	0010      	movs	r0, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	250a      	movs	r5, #10
 80034c8:	197b      	adds	r3, r7, r5
 80034ca:	1c22      	adds	r2, r4, #0
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	2308      	movs	r3, #8
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	1c02      	adds	r2, r0, #0
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	1dbb      	adds	r3, r7, #6
 80034d8:	1c0a      	adds	r2, r1, #0
 80034da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034dc:	1dbb      	adds	r3, r7, #6
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	2380      	movs	r3, #128	; 0x80
 80034e4:	045c      	lsls	r4, r3, #17
 80034e6:	197b      	adds	r3, r7, r5
 80034e8:	8819      	ldrh	r1, [r3, #0]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <I2C_RequestMemoryWrite+0xc4>)
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	0023      	movs	r3, r4
 80034f2:	f000 faab 	bl	8003a4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f8:	6a39      	ldr	r1, [r7, #32]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 f91b 	bl	8003738 <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d001      	beq.n	800350a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e033      	b.n	8003572 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800350a:	1dbb      	adds	r3, r7, #6
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003512:	2308      	movs	r3, #8
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
 8003520:	e019      	b.n	8003556 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003522:	2308      	movs	r3, #8
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	b29b      	uxth	r3, r3
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	6a39      	ldr	r1, [r7, #32]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	0018      	movs	r0, r3
 800353c:	f000 f8fc 	bl	8003738 <I2C_WaitOnTXISFlagUntilTimeout>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e014      	b.n	8003572 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003548:	2308      	movs	r3, #8
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003556:	6a3a      	ldr	r2, [r7, #32]
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	0013      	movs	r3, r2
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	f000 f890 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d001      	beq.n	8003570 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b004      	add	sp, #16
 8003578:	bdb0      	pop	{r4, r5, r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	80002000 	.word	0x80002000

08003580 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	000c      	movs	r4, r1
 800358a:	0010      	movs	r0, r2
 800358c:	0019      	movs	r1, r3
 800358e:	250a      	movs	r5, #10
 8003590:	197b      	adds	r3, r7, r5
 8003592:	1c22      	adds	r2, r4, #0
 8003594:	801a      	strh	r2, [r3, #0]
 8003596:	2308      	movs	r3, #8
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	1c02      	adds	r2, r0, #0
 800359c:	801a      	strh	r2, [r3, #0]
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	1c0a      	adds	r2, r1, #0
 80035a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035a4:	1dbb      	adds	r3, r7, #6
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	197b      	adds	r3, r7, r5
 80035ac:	8819      	ldrh	r1, [r3, #0]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	4b23      	ldr	r3, [pc, #140]	; (8003640 <I2C_RequestMemoryRead+0xc0>)
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2300      	movs	r3, #0
 80035b6:	f000 fa49 	bl	8003a4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f8b9 	bl	8003738 <I2C_WaitOnTXISFlagUntilTimeout>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d001      	beq.n	80035ce <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e033      	b.n	8003636 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ce:	1dbb      	adds	r3, r7, #6
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035d6:	2308      	movs	r3, #8
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
 80035e4:	e019      	b.n	800361a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035e6:	2308      	movs	r3, #8
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	0a1b      	lsrs	r3, r3, #8
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	6a39      	ldr	r1, [r7, #32]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 f89a 	bl	8003738 <I2C_WaitOnTXISFlagUntilTimeout>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e014      	b.n	8003636 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800360c:	2308      	movs	r3, #8
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b2da      	uxtb	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800361a:	6a3a      	ldr	r2, [r7, #32]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	0013      	movs	r3, r2
 8003624:	2200      	movs	r2, #0
 8003626:	2140      	movs	r1, #64	; 0x40
 8003628:	f000 f82e 	bl	8003688 <I2C_WaitOnFlagUntilTimeout>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	0018      	movs	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	80002000 	.word	0x80002000

08003644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2202      	movs	r2, #2
 8003654:	4013      	ands	r3, r2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d103      	bne.n	8003662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	2b01      	cmp	r3, #1
 800366e:	d007      	beq.n	8003680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699a      	ldr	r2, [r3, #24]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2101      	movs	r1, #1
 800367c:	430a      	orrs	r2, r1
 800367e:	619a      	str	r2, [r3, #24]
  }
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	1dfb      	adds	r3, r7, #7
 8003696:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	e03a      	b.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 f8d3 	bl	800384c <I2C_IsErrorOccurred>
 80036a6:	1e03      	subs	r3, r0, #0
 80036a8:	d001      	beq.n	80036ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e040      	b.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d02d      	beq.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7ff f8a8 	bl	8002808 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x42>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d122      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	425a      	negs	r2, r3
 80036da:	4153      	adcs	r3, r2
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	001a      	movs	r2, r3
 80036e0:	1dfb      	adds	r3, r7, #7
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d113      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	2220      	movs	r2, #32
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2241      	movs	r2, #65	; 0x41
 80036f8:	2120      	movs	r1, #32
 80036fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2242      	movs	r2, #66	; 0x42
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	; 0x40
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e00f      	b.n	8003730 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	425a      	negs	r2, r3
 8003720:	4153      	adcs	r3, r2
 8003722:	b2db      	uxtb	r3, r3
 8003724:	001a      	movs	r2, r3
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d0b5      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372e:	2300      	movs	r3, #0
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003744:	e032      	b.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 f87d 	bl	800384c <I2C_IsErrorOccurred>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d001      	beq.n	800375a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e030      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3301      	adds	r3, #1
 800375e:	d025      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7ff f852 	bl	8002808 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11a      	bne.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2202      	movs	r2, #2
 800377e:	4013      	ands	r3, r2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d013      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	2220      	movs	r2, #32
 800378a:	431a      	orrs	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2241      	movs	r2, #65	; 0x41
 8003794:	2120      	movs	r1, #32
 8003796:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2242      	movs	r2, #66	; 0x42
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e007      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2202      	movs	r2, #2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d1c5      	bne.n	8003746 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	e02f      	b.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f837 	bl	800384c <I2C_IsErrorOccurred>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e02d      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7ff f80f 	bl	8002808 <HAL_GetTick>
 80037ea:	0002      	movs	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11a      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2220      	movs	r2, #32
 8003804:	4013      	ands	r3, r2
 8003806:	2b20      	cmp	r3, #32
 8003808:	d013      	beq.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	2220      	movs	r2, #32
 8003810:	431a      	orrs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2241      	movs	r2, #65	; 0x41
 800381a:	2120      	movs	r1, #32
 800381c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2242      	movs	r2, #66	; 0x42
 8003822:	2100      	movs	r1, #0
 8003824:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e007      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2220      	movs	r2, #32
 800383a:	4013      	ands	r3, r2
 800383c:	2b20      	cmp	r3, #32
 800383e:	d1c8      	bne.n	80037d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b08b      	sub	sp, #44	; 0x2c
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2327      	movs	r3, #39	; 0x27
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2210      	movs	r2, #16
 8003874:	4013      	ands	r3, r2
 8003876:	d100      	bne.n	800387a <I2C_IsErrorOccurred+0x2e>
 8003878:	e082      	b.n	8003980 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2210      	movs	r2, #16
 8003880:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003882:	e060      	b.n	8003946 <I2C_IsErrorOccurred+0xfa>
 8003884:	2427      	movs	r4, #39	; 0x27
 8003886:	193b      	adds	r3, r7, r4
 8003888:	193a      	adds	r2, r7, r4
 800388a:	7812      	ldrb	r2, [r2, #0]
 800388c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	d058      	beq.n	8003946 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7fe ffb8 	bl	8002808 <HAL_GetTick>
 8003898:	0002      	movs	r2, r0
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d306      	bcc.n	80038b2 <I2C_IsErrorOccurred+0x66>
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	193a      	adds	r2, r7, r4
 80038a8:	7812      	ldrb	r2, [r2, #0]
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d149      	bne.n	8003946 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	01db      	lsls	r3, r3, #7
 80038bc:	4013      	ands	r3, r2
 80038be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038c0:	2013      	movs	r0, #19
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	2142      	movs	r1, #66	; 0x42
 80038c8:	5c52      	ldrb	r2, [r2, r1]
 80038ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	2380      	movs	r3, #128	; 0x80
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	401a      	ands	r2, r3
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	429a      	cmp	r2, r3
 80038de:	d126      	bne.n	800392e <I2C_IsErrorOccurred+0xe2>
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	01db      	lsls	r3, r3, #7
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d021      	beq.n	800392e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d01d      	beq.n	800392e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2180      	movs	r1, #128	; 0x80
 80038fe:	01c9      	lsls	r1, r1, #7
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003904:	f7fe ff80 	bl	8002808 <HAL_GetTick>
 8003908:	0003      	movs	r3, r0
 800390a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390c:	e00f      	b.n	800392e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800390e:	f7fe ff7b 	bl	8002808 <HAL_GetTick>
 8003912:	0002      	movs	r2, r0
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b19      	cmp	r3, #25
 800391a:	d908      	bls.n	800392e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	2220      	movs	r2, #32
 8003920:	4313      	orrs	r3, r2
 8003922:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003924:	2327      	movs	r3, #39	; 0x27
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]

              break;
 800392c:	e00b      	b.n	8003946 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2220      	movs	r2, #32
 8003936:	4013      	ands	r3, r2
 8003938:	2127      	movs	r1, #39	; 0x27
 800393a:	187a      	adds	r2, r7, r1
 800393c:	1879      	adds	r1, r7, r1
 800393e:	7809      	ldrb	r1, [r1, #0]
 8003940:	7011      	strb	r1, [r2, #0]
 8003942:	2b20      	cmp	r3, #32
 8003944:	d1e3      	bne.n	800390e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2220      	movs	r2, #32
 800394e:	4013      	ands	r3, r2
 8003950:	2b20      	cmp	r3, #32
 8003952:	d004      	beq.n	800395e <I2C_IsErrorOccurred+0x112>
 8003954:	2327      	movs	r3, #39	; 0x27
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d092      	beq.n	8003884 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800395e:	2327      	movs	r3, #39	; 0x27
 8003960:	18fb      	adds	r3, r7, r3
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d103      	bne.n	8003970 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2220      	movs	r2, #32
 800396e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	2204      	movs	r2, #4
 8003974:	4313      	orrs	r3, r2
 8003976:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003978:	2327      	movs	r3, #39	; 0x27
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	2201      	movs	r2, #1
 800397e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d00c      	beq.n	80039ac <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	2201      	movs	r2, #1
 8003996:	4313      	orrs	r3, r2
 8003998:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	0052      	lsls	r2, r2, #1
 80039a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039a4:	2327      	movs	r3, #39	; 0x27
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4013      	ands	r3, r2
 80039b4:	d00c      	beq.n	80039d0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2208      	movs	r2, #8
 80039ba:	4313      	orrs	r3, r2
 80039bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	00d2      	lsls	r2, r2, #3
 80039c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c8:	2327      	movs	r3, #39	; 0x27
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4013      	ands	r3, r2
 80039d8:	d00c      	beq.n	80039f4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2202      	movs	r2, #2
 80039de:	4313      	orrs	r3, r2
 80039e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2280      	movs	r2, #128	; 0x80
 80039e8:	0092      	lsls	r2, r2, #2
 80039ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ec:	2327      	movs	r3, #39	; 0x27
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80039f4:	2327      	movs	r3, #39	; 0x27
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01d      	beq.n	8003a3a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff fe1f 	bl	8003644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	490d      	ldr	r1, [pc, #52]	; (8003a48 <I2C_IsErrorOccurred+0x1fc>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2241      	movs	r2, #65	; 0x41
 8003a26:	2120      	movs	r1, #32
 8003a28:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2242      	movs	r2, #66	; 0x42
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2240      	movs	r2, #64	; 0x40
 8003a36:	2100      	movs	r1, #0
 8003a38:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003a3a:	2327      	movs	r3, #39	; 0x27
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	781b      	ldrb	r3, [r3, #0]
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b00b      	add	sp, #44	; 0x2c
 8003a46:	bd90      	pop	{r4, r7, pc}
 8003a48:	fe00e800 	.word	0xfe00e800

08003a4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	0008      	movs	r0, r1
 8003a56:	0011      	movs	r1, r2
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	240a      	movs	r4, #10
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	1c02      	adds	r2, r0, #0
 8003a60:	801a      	strh	r2, [r3, #0]
 8003a62:	2009      	movs	r0, #9
 8003a64:	183b      	adds	r3, r7, r0
 8003a66:	1c0a      	adds	r2, r1, #0
 8003a68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a6a:	193b      	adds	r3, r7, r4
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	059b      	lsls	r3, r3, #22
 8003a70:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a72:	183b      	adds	r3, r7, r0
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	0419      	lsls	r1, r3, #16
 8003a78:	23ff      	movs	r3, #255	; 0xff
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a7e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	4313      	orrs	r3, r2
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a96:	0d51      	lsrs	r1, r2, #21
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	00d2      	lsls	r2, r2, #3
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	4907      	ldr	r1, [pc, #28]	; (8003abc <I2C_TransferConfig+0x70>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	43d2      	mvns	r2, r2
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b007      	add	sp, #28
 8003ab8:	bd90      	pop	{r4, r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	03ff63ff 	.word	0x03ff63ff

08003ac0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2241      	movs	r2, #65	; 0x41
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d138      	bne.n	8003b48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2240      	movs	r2, #64	; 0x40
 8003ada:	5c9b      	ldrb	r3, [r3, r2]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e032      	b.n	8003b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	2101      	movs	r1, #1
 8003aea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2241      	movs	r2, #65	; 0x41
 8003af0:	2124      	movs	r1, #36	; 0x24
 8003af2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	438a      	bics	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4911      	ldr	r1, [pc, #68]	; (8003b54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2101      	movs	r1, #1
 8003b30:	430a      	orrs	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2241      	movs	r2, #65	; 0x41
 8003b38:	2120      	movs	r1, #32
 8003b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	2100      	movs	r1, #0
 8003b42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	e000      	b.n	8003b4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b48:	2302      	movs	r3, #2
  }
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	ffffefff 	.word	0xffffefff

08003b58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2241      	movs	r2, #65	; 0x41
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	d139      	bne.n	8003be2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2240      	movs	r2, #64	; 0x40
 8003b72:	5c9b      	ldrb	r3, [r3, r2]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e033      	b.n	8003be4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2240      	movs	r2, #64	; 0x40
 8003b80:	2101      	movs	r1, #1
 8003b82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2241      	movs	r2, #65	; 0x41
 8003b88:	2124      	movs	r1, #36	; 0x24
 8003b8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2241      	movs	r2, #65	; 0x41
 8003bd2:	2120      	movs	r1, #32
 8003bd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2240      	movs	r2, #64	; 0x40
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	fffff0ff 	.word	0xfffff0ff

08003bf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d11f      	bne.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	0013      	movs	r3, r2
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	189b      	adds	r3, r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4912      	ldr	r1, [pc, #72]	; (8003c6c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fc fa6e 	bl	8000104 <__udivsi3>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c2e:	e008      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	e001      	b.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e009      	b.n	8003c56 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c42:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0ed      	beq.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40007000 	.word	0x40007000
 8003c64:	fffff9ff 	.word	0xfffff9ff
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	000f4240 	.word	0x000f4240

08003c70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	23e0      	movs	r3, #224	; 0xe0
 8003c7a:	01db      	lsls	r3, r3, #7
 8003c7c:	4013      	ands	r3, r2
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000

08003c88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e2fe      	b.n	8004298 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d100      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x1e>
 8003ca4:	e07c      	b.n	8003da0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4bc3      	ldr	r3, [pc, #780]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2238      	movs	r2, #56	; 0x38
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb0:	4bc0      	ldr	r3, [pc, #768]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3e>
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d002      	beq.n	8003ccc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d10b      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	4bb9      	ldr	r3, [pc, #740]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d062      	beq.n	8003d9e <HAL_RCC_OscConfig+0x116>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d15e      	bne.n	8003d9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e2d9      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	025b      	lsls	r3, r3, #9
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x78>
 8003cf0:	4bb0      	ldr	r3, [pc, #704]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4baf      	ldr	r3, [pc, #700]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	0249      	lsls	r1, r1, #9
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e020      	b.n	8003d42 <HAL_RCC_OscConfig+0xba>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	23a0      	movs	r3, #160	; 0xa0
 8003d06:	02db      	lsls	r3, r3, #11
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d10e      	bne.n	8003d2a <HAL_RCC_OscConfig+0xa2>
 8003d0c:	4ba9      	ldr	r3, [pc, #676]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4ba8      	ldr	r3, [pc, #672]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	02c9      	lsls	r1, r1, #11
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	4ba6      	ldr	r3, [pc, #664]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4ba5      	ldr	r3, [pc, #660]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	0249      	lsls	r1, r1, #9
 8003d24:	430a      	orrs	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e00b      	b.n	8003d42 <HAL_RCC_OscConfig+0xba>
 8003d2a:	4ba2      	ldr	r3, [pc, #648]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4ba1      	ldr	r3, [pc, #644]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d30:	49a1      	ldr	r1, [pc, #644]	; (8003fb8 <HAL_RCC_OscConfig+0x330>)
 8003d32:	400a      	ands	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	4b9f      	ldr	r3, [pc, #636]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b9e      	ldr	r3, [pc, #632]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	499f      	ldr	r1, [pc, #636]	; (8003fbc <HAL_RCC_OscConfig+0x334>)
 8003d3e:	400a      	ands	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fd5d 	bl	8002808 <HAL_GetTick>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fe fd58 	bl	8002808 <HAL_GetTick>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	; 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e298      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d66:	4b93      	ldr	r3, [pc, #588]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	029b      	lsls	r3, r3, #10
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0xcc>
 8003d72:	e015      	b.n	8003da0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe fd48 	bl	8002808 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7e:	f7fe fd43 	bl	8002808 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b64      	cmp	r3, #100	; 0x64
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e283      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d90:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0xf6>
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2202      	movs	r2, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d100      	bne.n	8003dac <HAL_RCC_OscConfig+0x124>
 8003daa:	e099      	b.n	8003ee0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dac:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2238      	movs	r2, #56	; 0x38
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db6:	4b7f      	ldr	r3, [pc, #508]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d102      	bne.n	8003dcc <HAL_RCC_OscConfig+0x144>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d002      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d135      	bne.n	8003e3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd2:	4b78      	ldr	r3, [pc, #480]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4013      	ands	r3, r2
 8003ddc:	d005      	beq.n	8003dea <HAL_RCC_OscConfig+0x162>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e256      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dea:	4b72      	ldr	r3, [pc, #456]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a74      	ldr	r2, [pc, #464]	; (8003fc0 <HAL_RCC_OscConfig+0x338>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	0019      	movs	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	4b6e      	ldr	r3, [pc, #440]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e06:	4b6b      	ldr	r3, [pc, #428]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6e      	ldr	r2, [pc, #440]	; (8003fc4 <HAL_RCC_OscConfig+0x33c>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	0019      	movs	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e1a:	4b66      	ldr	r3, [pc, #408]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	2207      	movs	r2, #7
 8003e22:	4013      	ands	r3, r2
 8003e24:	4a68      	ldr	r2, [pc, #416]	; (8003fc8 <HAL_RCC_OscConfig+0x340>)
 8003e26:	40da      	lsrs	r2, r3
 8003e28:	4b68      	ldr	r3, [pc, #416]	; (8003fcc <HAL_RCC_OscConfig+0x344>)
 8003e2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_OscConfig+0x348>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7fe fc8d 	bl	8002750 <HAL_InitTick>
 8003e36:	1e03      	subs	r3, r0, #0
 8003e38:	d051      	beq.n	8003ede <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e22c      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d030      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e46:	4b5b      	ldr	r3, [pc, #364]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <HAL_RCC_OscConfig+0x33c>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	4b57      	ldr	r3, [pc, #348]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e5a:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e60:	2180      	movs	r1, #128	; 0x80
 8003e62:	0049      	lsls	r1, r1, #1
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e68:	f7fe fcce 	bl	8002808 <HAL_GetTick>
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fe fcc9 	bl	8002808 <HAL_GetTick>
 8003e76:	0002      	movs	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e209      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e84:	4b4b      	ldr	r3, [pc, #300]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <HAL_RCC_OscConfig+0x338>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e01b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ea8:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b41      	ldr	r3, [pc, #260]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003eae:	4949      	ldr	r1, [pc, #292]	; (8003fd4 <HAL_RCC_OscConfig+0x34c>)
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fca8 	bl	8002808 <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebe:	f7fe fca3 	bl	8002808 <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1e3      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ed0:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x236>
 8003edc:	e000      	b.n	8003ee0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ede:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d047      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003eea:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2238      	movs	r2, #56	; 0x38
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b18      	cmp	r3, #24
 8003ef4:	d10a      	bne.n	8003f0c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	2202      	movs	r2, #2
 8003efc:	4013      	ands	r3, r2
 8003efe:	d03c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d138      	bne.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e1c5      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d019      	beq.n	8003f48 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fc72 	bl	8002808 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f2a:	f7fe fc6d 	bl	8002808 <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e1ad      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f40:	2202      	movs	r2, #2
 8003f42:	4013      	ands	r3, r2
 8003f44:	d0f1      	beq.n	8003f2a <HAL_RCC_OscConfig+0x2a2>
 8003f46:	e018      	b.n	8003f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	2101      	movs	r1, #1
 8003f50:	438a      	bics	r2, r1
 8003f52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe fc58 	bl	8002808 <HAL_GetTick>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7fe fc53 	bl	8002808 <HAL_GetTick>
 8003f62:	0002      	movs	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e193      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f74:	2202      	movs	r2, #2
 8003f76:	4013      	ands	r3, r2
 8003f78:	d1f1      	bne.n	8003f5e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4013      	ands	r3, r2
 8003f82:	d100      	bne.n	8003f86 <HAL_RCC_OscConfig+0x2fe>
 8003f84:	e0c6      	b.n	8004114 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f86:	231f      	movs	r3, #31
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2238      	movs	r2, #56	; 0x38
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d11e      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <HAL_RCC_OscConfig+0x32c>)
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x31e>
 8003fa4:	e0b6      	b.n	8004114 <HAL_RCC_OscConfig+0x48c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d000      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x328>
 8003fae:	e0b1      	b.n	8004114 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e171      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	fffeffff 	.word	0xfffeffff
 8003fbc:	fffbffff 	.word	0xfffbffff
 8003fc0:	ffff80ff 	.word	0xffff80ff
 8003fc4:	ffffc7ff 	.word	0xffffc7ff
 8003fc8:	00f42400 	.word	0x00f42400
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	20000004 	.word	0x20000004
 8003fd4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fd8:	4bb1      	ldr	r3, [pc, #708]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8003fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	055b      	lsls	r3, r3, #21
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x360>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x362>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d011      	beq.n	8004012 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	4bac      	ldr	r3, [pc, #688]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8003ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff2:	4bab      	ldr	r3, [pc, #684]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8003ff4:	2180      	movs	r1, #128	; 0x80
 8003ff6:	0549      	lsls	r1, r1, #21
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ffc:	4ba8      	ldr	r3, [pc, #672]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8003ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	055b      	lsls	r3, r3, #21
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800400a:	231f      	movs	r3, #31
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004012:	4ba4      	ldr	r3, [pc, #656]	; (80042a4 <HAL_RCC_OscConfig+0x61c>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4013      	ands	r3, r2
 800401c:	d11a      	bne.n	8004054 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800401e:	4ba1      	ldr	r3, [pc, #644]	; (80042a4 <HAL_RCC_OscConfig+0x61c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCC_OscConfig+0x61c>)
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	0049      	lsls	r1, r1, #1
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800402c:	f7fe fbec 	bl	8002808 <HAL_GetTick>
 8004030:	0003      	movs	r3, r0
 8004032:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004036:	f7fe fbe7 	bl	8002808 <HAL_GetTick>
 800403a:	0002      	movs	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e127      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004048:	4b96      	ldr	r3, [pc, #600]	; (80042a4 <HAL_RCC_OscConfig+0x61c>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4013      	ands	r3, r2
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d106      	bne.n	800406a <HAL_RCC_OscConfig+0x3e2>
 800405c:	4b90      	ldr	r3, [pc, #576]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800405e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004060:	4b8f      	ldr	r3, [pc, #572]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004062:	2101      	movs	r1, #1
 8004064:	430a      	orrs	r2, r1
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c
 8004068:	e01c      	b.n	80040a4 <HAL_RCC_OscConfig+0x41c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b05      	cmp	r3, #5
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x404>
 8004072:	4b8b      	ldr	r3, [pc, #556]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004074:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004076:	4b8a      	ldr	r3, [pc, #552]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004078:	2104      	movs	r1, #4
 800407a:	430a      	orrs	r2, r1
 800407c:	65da      	str	r2, [r3, #92]	; 0x5c
 800407e:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004080:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004082:	4b87      	ldr	r3, [pc, #540]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004084:	2101      	movs	r1, #1
 8004086:	430a      	orrs	r2, r1
 8004088:	65da      	str	r2, [r3, #92]	; 0x5c
 800408a:	e00b      	b.n	80040a4 <HAL_RCC_OscConfig+0x41c>
 800408c:	4b84      	ldr	r3, [pc, #528]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800408e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004090:	4b83      	ldr	r3, [pc, #524]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	65da      	str	r2, [r3, #92]	; 0x5c
 8004098:	4b81      	ldr	r3, [pc, #516]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800409a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800409c:	4b80      	ldr	r3, [pc, #512]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800409e:	2104      	movs	r1, #4
 80040a0:	438a      	bics	r2, r1
 80040a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d014      	beq.n	80040d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe fbac 	bl	8002808 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b4:	e009      	b.n	80040ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7fe fba7 	bl	8002808 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	4a79      	ldr	r2, [pc, #484]	; (80042a8 <HAL_RCC_OscConfig+0x620>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e0e6      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ca:	4b75      	ldr	r3, [pc, #468]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x42e>
 80040d4:	e013      	b.n	80040fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d6:	f7fe fb97 	bl	8002808 <HAL_GetTick>
 80040da:	0003      	movs	r3, r0
 80040dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040de:	e009      	b.n	80040f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fe fb92 	bl	8002808 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	4a6f      	ldr	r2, [pc, #444]	; (80042a8 <HAL_RCC_OscConfig+0x620>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0d1      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f4:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2202      	movs	r2, #2
 80040fa:	4013      	ands	r3, r2
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040fe:	231f      	movs	r3, #31
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004108:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800410a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410c:	4b64      	ldr	r3, [pc, #400]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800410e:	4967      	ldr	r1, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x624>)
 8004110:	400a      	ands	r2, r1
 8004112:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d100      	bne.n	800411e <HAL_RCC_OscConfig+0x496>
 800411c:	e0bb      	b.n	8004296 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800411e:	4b60      	ldr	r3, [pc, #384]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2238      	movs	r2, #56	; 0x38
 8004124:	4013      	ands	r3, r2
 8004126:	2b10      	cmp	r3, #16
 8004128:	d100      	bne.n	800412c <HAL_RCC_OscConfig+0x4a4>
 800412a:	e07b      	b.n	8004224 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d156      	bne.n	80041e2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800413a:	495d      	ldr	r1, [pc, #372]	; (80042b0 <HAL_RCC_OscConfig+0x628>)
 800413c:	400a      	ands	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe fb62 	bl	8002808 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414a:	f7fe fb5d 	bl	8002808 <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e09d      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	049b      	lsls	r3, r3, #18
 8004164:	4013      	ands	r3, r2
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004168:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a51      	ldr	r2, [pc, #324]	; (80042b4 <HAL_RCC_OscConfig+0x62c>)
 800416e:	4013      	ands	r3, r2
 8004170:	0019      	movs	r1, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1a      	ldr	r2, [r3, #32]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	431a      	orrs	r2, r3
 8004196:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004198:	430a      	orrs	r2, r1
 800419a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800419c:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80041a2:	2180      	movs	r1, #128	; 0x80
 80041a4:	0449      	lsls	r1, r1, #17
 80041a6:	430a      	orrs	r2, r1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80041aa:	4b3d      	ldr	r3, [pc, #244]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	4b3c      	ldr	r3, [pc, #240]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	0549      	lsls	r1, r1, #21
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe fb26 	bl	8002808 <HAL_GetTick>
 80041bc:	0003      	movs	r3, r0
 80041be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fe fb21 	bl	8002808 <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e061      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d4:	4b32      	ldr	r3, [pc, #200]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	049b      	lsls	r3, r3, #18
 80041dc:	4013      	ands	r3, r2
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x53a>
 80041e0:	e059      	b.n	8004296 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 80041e8:	4931      	ldr	r1, [pc, #196]	; (80042b0 <HAL_RCC_OscConfig+0x628>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fe fb0b 	bl	8002808 <HAL_GetTick>
 80041f2:	0003      	movs	r3, r0
 80041f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fe fb06 	bl	8002808 <HAL_GetTick>
 80041fc:	0002      	movs	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e046      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420a:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	049b      	lsls	r3, r3, #18
 8004212:	4013      	ands	r3, r2
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 800421c:	4926      	ldr	r1, [pc, #152]	; (80042b8 <HAL_RCC_OscConfig+0x630>)
 800421e:	400a      	ands	r2, r1
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e038      	b.n	8004296 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e033      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_RCC_OscConfig+0x618>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2203      	movs	r2, #3
 800423a:	401a      	ands	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	429a      	cmp	r2, r3
 8004242:	d126      	bne.n	8004292 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2270      	movs	r2, #112	; 0x70
 8004248:	401a      	ands	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d11f      	bne.n	8004292 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	23fe      	movs	r3, #254	; 0xfe
 8004256:	01db      	lsls	r3, r3, #7
 8004258:	401a      	ands	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d116      	bne.n	8004292 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	23f8      	movs	r3, #248	; 0xf8
 8004268:	039b      	lsls	r3, r3, #14
 800426a:	401a      	ands	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d10e      	bne.n	8004292 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	23e0      	movs	r3, #224	; 0xe0
 8004278:	051b      	lsls	r3, r3, #20
 800427a:	401a      	ands	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	0f5b      	lsrs	r3, r3, #29
 8004288:	075a      	lsls	r2, r3, #29
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d001      	beq.n	8004296 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b008      	add	sp, #32
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	00001388 	.word	0x00001388
 80042ac:	efffffff 	.word	0xefffffff
 80042b0:	feffffff 	.word	0xfeffffff
 80042b4:	11c1808c 	.word	0x11c1808c
 80042b8:	eefefffc 	.word	0xeefefffc

080042bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0e9      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042d0:	4b76      	ldr	r3, [pc, #472]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2207      	movs	r2, #7
 80042d6:	4013      	ands	r3, r2
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d91e      	bls.n	800431c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2207      	movs	r2, #7
 80042e4:	4393      	bics	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	4b70      	ldr	r3, [pc, #448]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042f0:	f7fe fa8a 	bl	8002808 <HAL_GetTick>
 80042f4:	0003      	movs	r3, r0
 80042f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042f8:	e009      	b.n	800430e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fa:	f7fe fa85 	bl	8002808 <HAL_GetTick>
 80042fe:	0002      	movs	r2, r0
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	4a6a      	ldr	r2, [pc, #424]	; (80044b0 <HAL_RCC_ClockConfig+0x1f4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d901      	bls.n	800430e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e0ca      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2207      	movs	r2, #7
 8004314:	4013      	ands	r3, r2
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d1ee      	bne.n	80042fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2202      	movs	r2, #2
 8004322:	4013      	ands	r3, r2
 8004324:	d015      	beq.n	8004352 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2204      	movs	r2, #4
 800432c:	4013      	ands	r3, r2
 800432e:	d006      	beq.n	800433e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004330:	4b60      	ldr	r3, [pc, #384]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004336:	21e0      	movs	r1, #224	; 0xe0
 8004338:	01c9      	lsls	r1, r1, #7
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800433e:	4b5d      	ldr	r3, [pc, #372]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4a5d      	ldr	r2, [pc, #372]	; (80044b8 <HAL_RCC_ClockConfig+0x1fc>)
 8004344:	4013      	ands	r3, r2
 8004346:	0019      	movs	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	4b59      	ldr	r3, [pc, #356]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2201      	movs	r2, #1
 8004358:	4013      	ands	r3, r2
 800435a:	d057      	beq.n	800440c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d107      	bne.n	8004374 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004364:	4b53      	ldr	r3, [pc, #332]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	029b      	lsls	r3, r3, #10
 800436c:	4013      	ands	r3, r2
 800436e:	d12b      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e097      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d107      	bne.n	800438c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800437c:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	049b      	lsls	r3, r3, #18
 8004384:	4013      	ands	r3, r2
 8004386:	d11f      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e08b      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004394:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4013      	ands	r3, r2
 800439e:	d113      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e07f      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ac:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d108      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e074      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ba:	4b3e      	ldr	r3, [pc, #248]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	2202      	movs	r2, #2
 80043c0:	4013      	ands	r3, r2
 80043c2:	d101      	bne.n	80043c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e06d      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043c8:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2207      	movs	r2, #7
 80043ce:	4393      	bics	r3, r2
 80043d0:	0019      	movs	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043dc:	f7fe fa14 	bl	8002808 <HAL_GetTick>
 80043e0:	0003      	movs	r3, r0
 80043e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e4:	e009      	b.n	80043fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e6:	f7fe fa0f 	bl	8002808 <HAL_GetTick>
 80043ea:	0002      	movs	r2, r0
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	4a2f      	ldr	r2, [pc, #188]	; (80044b0 <HAL_RCC_ClockConfig+0x1f4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e054      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2e      	ldr	r3, [pc, #184]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2238      	movs	r2, #56	; 0x38
 8004400:	401a      	ands	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	429a      	cmp	r2, r3
 800440a:	d1ec      	bne.n	80043e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2207      	movs	r2, #7
 8004412:	4013      	ands	r3, r2
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d21e      	bcs.n	8004458 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2207      	movs	r2, #7
 8004420:	4393      	bics	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800442c:	f7fe f9ec 	bl	8002808 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004434:	e009      	b.n	800444a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004436:	f7fe f9e7 	bl	8002808 <HAL_GetTick>
 800443a:	0002      	movs	r2, r0
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <HAL_RCC_ClockConfig+0x1f4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e02c      	b.n	80044a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2207      	movs	r2, #7
 8004450:	4013      	ands	r3, r2
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d1ee      	bne.n	8004436 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2204      	movs	r2, #4
 800445e:	4013      	ands	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_RCC_ClockConfig+0x200>)
 8004468:	4013      	ands	r3, r2
 800446a:	0019      	movs	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004476:	f000 f829 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800447a:	0001      	movs	r1, r0
 800447c:	4b0d      	ldr	r3, [pc, #52]	; (80044b4 <HAL_RCC_ClockConfig+0x1f8>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	0a1b      	lsrs	r3, r3, #8
 8004482:	220f      	movs	r2, #15
 8004484:	401a      	ands	r2, r3
 8004486:	4b0e      	ldr	r3, [pc, #56]	; (80044c0 <HAL_RCC_ClockConfig+0x204>)
 8004488:	0092      	lsls	r2, r2, #2
 800448a:	58d3      	ldr	r3, [r2, r3]
 800448c:	221f      	movs	r2, #31
 800448e:	4013      	ands	r3, r2
 8004490:	000a      	movs	r2, r1
 8004492:	40da      	lsrs	r2, r3
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_ClockConfig+0x208>)
 8004496:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <HAL_RCC_ClockConfig+0x20c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	0018      	movs	r0, r3
 800449e:	f7fe f957 	bl	8002750 <HAL_InitTick>
 80044a2:	0003      	movs	r3, r0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b004      	add	sp, #16
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40022000 	.word	0x40022000
 80044b0:	00001388 	.word	0x00001388
 80044b4:	40021000 	.word	0x40021000
 80044b8:	fffff0ff 	.word	0xfffff0ff
 80044bc:	ffff8fff 	.word	0xffff8fff
 80044c0:	08006984 	.word	0x08006984
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044d2:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2238      	movs	r2, #56	; 0x38
 80044d8:	4013      	ands	r3, r2
 80044da:	d10f      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80044dc:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	0adb      	lsrs	r3, r3, #11
 80044e2:	2207      	movs	r2, #7
 80044e4:	4013      	ands	r3, r2
 80044e6:	2201      	movs	r2, #1
 80044e8:	409a      	lsls	r2, r3
 80044ea:	0013      	movs	r3, r2
 80044ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	4835      	ldr	r0, [pc, #212]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044f2:	f7fb fe07 	bl	8000104 <__udivsi3>
 80044f6:	0003      	movs	r3, r0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e05d      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044fc:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2238      	movs	r2, #56	; 0x38
 8004502:	4013      	ands	r3, r2
 8004504:	2b08      	cmp	r3, #8
 8004506:	d102      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004508:	4b30      	ldr	r3, [pc, #192]	; (80045cc <HAL_RCC_GetSysClockFreq+0x100>)
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	e054      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2238      	movs	r2, #56	; 0x38
 8004514:	4013      	ands	r3, r2
 8004516:	2b10      	cmp	r3, #16
 8004518:	d138      	bne.n	800458c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800451a:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2203      	movs	r2, #3
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004524:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	2207      	movs	r2, #7
 800452c:	4013      	ands	r3, r2
 800452e:	3301      	adds	r3, #1
 8004530:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d10d      	bne.n	8004554 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4824      	ldr	r0, [pc, #144]	; (80045cc <HAL_RCC_GetSysClockFreq+0x100>)
 800453c:	f7fb fde2 	bl	8000104 <__udivsi3>
 8004540:	0003      	movs	r3, r0
 8004542:	0019      	movs	r1, r3
 8004544:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	227f      	movs	r2, #127	; 0x7f
 800454c:	4013      	ands	r3, r2
 800454e:	434b      	muls	r3, r1
 8004550:	617b      	str	r3, [r7, #20]
        break;
 8004552:	e00d      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004554:	68b9      	ldr	r1, [r7, #8]
 8004556:	481c      	ldr	r0, [pc, #112]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004558:	f7fb fdd4 	bl	8000104 <__udivsi3>
 800455c:	0003      	movs	r3, r0
 800455e:	0019      	movs	r1, r3
 8004560:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	227f      	movs	r2, #127	; 0x7f
 8004568:	4013      	ands	r3, r2
 800456a:	434b      	muls	r3, r1
 800456c:	617b      	str	r3, [r7, #20]
        break;
 800456e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0f5b      	lsrs	r3, r3, #29
 8004576:	2207      	movs	r2, #7
 8004578:	4013      	ands	r3, r2
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	6978      	ldr	r0, [r7, #20]
 8004582:	f7fb fdbf 	bl	8000104 <__udivsi3>
 8004586:	0003      	movs	r3, r0
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e015      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2238      	movs	r2, #56	; 0x38
 8004592:	4013      	ands	r3, r2
 8004594:	2b20      	cmp	r3, #32
 8004596:	d103      	bne.n	80045a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004598:	2380      	movs	r3, #128	; 0x80
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	e00b      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2238      	movs	r2, #56	; 0x38
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b18      	cmp	r3, #24
 80045aa:	d103      	bne.n	80045b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80045ac:	23fa      	movs	r3, #250	; 0xfa
 80045ae:	01db      	lsls	r3, r3, #7
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e001      	b.n	80045b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045b8:	693b      	ldr	r3, [r7, #16]
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b006      	add	sp, #24
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	40021000 	.word	0x40021000
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b02      	ldr	r3, [pc, #8]	; (80045e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	20000000 	.word	0x20000000

080045e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045e8:	f7ff fff2 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045ec:	0004      	movs	r4, r0
 80045ee:	f7ff fb3f 	bl	8003c70 <LL_RCC_GetAPB1Prescaler>
 80045f2:	0003      	movs	r3, r0
 80045f4:	0b1a      	lsrs	r2, r3, #12
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK1Freq+0x28>)
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	58d3      	ldr	r3, [r2, r3]
 80045fc:	221f      	movs	r2, #31
 80045fe:	4013      	ands	r3, r2
 8004600:	40dc      	lsrs	r4, r3
 8004602:	0023      	movs	r3, r4
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	bdb0      	pop	{r4, r5, r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	080069c4 	.word	0x080069c4

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004618:	2313      	movs	r3, #19
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004620:	2312      	movs	r3, #18
 8004622:	18fb      	adds	r3, r7, r3
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	4013      	ands	r3, r2
 8004632:	d100      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004634:	e0a3      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004636:	2011      	movs	r0, #17
 8004638:	183b      	adds	r3, r7, r0
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	4ba5      	ldr	r3, [pc, #660]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	055b      	lsls	r3, r3, #21
 8004646:	4013      	ands	r3, r2
 8004648:	d110      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	4ba2      	ldr	r3, [pc, #648]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800464c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800464e:	4ba1      	ldr	r3, [pc, #644]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004650:	2180      	movs	r1, #128	; 0x80
 8004652:	0549      	lsls	r1, r1, #21
 8004654:	430a      	orrs	r2, r1
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c
 8004658:	4b9e      	ldr	r3, [pc, #632]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800465a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	055b      	lsls	r3, r3, #21
 8004660:	4013      	ands	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004666:	183b      	adds	r3, r7, r0
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800466c:	4b9a      	ldr	r3, [pc, #616]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4b99      	ldr	r3, [pc, #612]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004672:	2180      	movs	r1, #128	; 0x80
 8004674:	0049      	lsls	r1, r1, #1
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800467a:	f7fe f8c5 	bl	8002808 <HAL_GetTick>
 800467e:	0003      	movs	r3, r0
 8004680:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004682:	e00b      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004684:	f7fe f8c0 	bl	8002808 <HAL_GetTick>
 8004688:	0002      	movs	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d904      	bls.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004692:	2313      	movs	r3, #19
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2203      	movs	r2, #3
 8004698:	701a      	strb	r2, [r3, #0]
        break;
 800469a:	e005      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800469c:	4b8e      	ldr	r3, [pc, #568]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	2380      	movs	r3, #128	; 0x80
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d0ed      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80046a8:	2313      	movs	r3, #19
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d154      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d019      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d014      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046ce:	4b81      	ldr	r3, [pc, #516]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d2:	4a82      	ldr	r2, [pc, #520]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046d8:	4b7e      	ldr	r3, [pc, #504]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046dc:	4b7d      	ldr	r3, [pc, #500]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	0249      	lsls	r1, r1, #9
 80046e2:	430a      	orrs	r2, r1
 80046e4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046e6:	4b7b      	ldr	r3, [pc, #492]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046ea:	4b7a      	ldr	r3, [pc, #488]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046ec:	497c      	ldr	r1, [pc, #496]	; (80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80046ee:	400a      	ands	r2, r1
 80046f0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046f2:	4b78      	ldr	r3, [pc, #480]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	d016      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fe f882 	bl	8002808 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004708:	e00c      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fe f87d 	bl	8002808 <HAL_GetTick>
 800470e:	0002      	movs	r2, r0
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	4a73      	ldr	r2, [pc, #460]	; (80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d904      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800471a:	2313      	movs	r3, #19
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	2203      	movs	r2, #3
 8004720:	701a      	strb	r2, [r3, #0]
            break;
 8004722:	e004      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004724:	4b6b      	ldr	r3, [pc, #428]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	2202      	movs	r2, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d0ed      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800472e:	2313      	movs	r3, #19
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	4a67      	ldr	r2, [pc, #412]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004746:	4b63      	ldr	r3, [pc, #396]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004748:	430a      	orrs	r2, r1
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c
 800474c:	e00c      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800474e:	2312      	movs	r3, #18
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2213      	movs	r2, #19
 8004754:	18ba      	adds	r2, r7, r2
 8004756:	7812      	ldrb	r2, [r2, #0]
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e005      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	2312      	movs	r3, #18
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2213      	movs	r2, #19
 8004762:	18ba      	adds	r2, r7, r2
 8004764:	7812      	ldrb	r2, [r2, #0]
 8004766:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004768:	2311      	movs	r3, #17
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d105      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004776:	4b57      	ldr	r3, [pc, #348]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004778:	495b      	ldr	r1, [pc, #364]	; (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800477a:	400a      	ands	r2, r1
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2201      	movs	r2, #1
 8004784:	4013      	ands	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004788:	4b52      	ldr	r3, [pc, #328]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800478a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478c:	2203      	movs	r2, #3
 800478e:	4393      	bics	r3, r2
 8004790:	0019      	movs	r1, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004798:	430a      	orrs	r2, r1
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2210      	movs	r2, #16
 80047a2:	4013      	ands	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a6:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047aa:	4a50      	ldr	r2, [pc, #320]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047b6:	430a      	orrs	r2, r1
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4013      	ands	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c6:	4b43      	ldr	r3, [pc, #268]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	4a49      	ldr	r2, [pc, #292]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047d6:	430a      	orrs	r2, r1
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4013      	ands	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	4a42      	ldr	r2, [pc, #264]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2220      	movs	r2, #32
 8004800:	4013      	ands	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	4a3b      	ldr	r2, [pc, #236]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800480a:	4013      	ands	r3, r2
 800480c:	0019      	movs	r1, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004814:	430a      	orrs	r2, r1
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	4013      	ands	r3, r2
 8004822:	d015      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	0899      	lsrs	r1, r3, #2
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004832:	430a      	orrs	r2, r1
 8004834:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	05db      	lsls	r3, r3, #23
 800483e:	429a      	cmp	r2, r3
 8004840:	d106      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	0249      	lsls	r1, r1, #9
 800484c:	430a      	orrs	r2, r1
 800484e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	039b      	lsls	r3, r3, #14
 8004858:	4013      	ands	r3, r2
 800485a:	d016      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800485c:	4b1d      	ldr	r3, [pc, #116]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1a      	ldr	r2, [r3, #32]
 800486a:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800486c:	430a      	orrs	r2, r1
 800486e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	03db      	lsls	r3, r3, #15
 8004878:	429a      	cmp	r2, r3
 800487a:	d106      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004882:	2180      	movs	r1, #128	; 0x80
 8004884:	0449      	lsls	r1, r1, #17
 8004886:	430a      	orrs	r2, r1
 8004888:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	2380      	movs	r3, #128	; 0x80
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	4013      	ands	r3, r2
 8004894:	d016      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	4a19      	ldr	r2, [pc, #100]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800489c:	4013      	ands	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a6:	430a      	orrs	r2, r1
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	2380      	movs	r3, #128	; 0x80
 80048b0:	01db      	lsls	r3, r3, #7
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d106      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048b6:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	0249      	lsls	r1, r1, #9
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80048c4:	2312      	movs	r3, #18
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	781b      	ldrb	r3, [r3, #0]
}
 80048ca:	0018      	movs	r0, r3
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b006      	add	sp, #24
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
 80048dc:	fffffcff 	.word	0xfffffcff
 80048e0:	fffeffff 	.word	0xfffeffff
 80048e4:	00001388 	.word	0x00001388
 80048e8:	efffffff 	.word	0xefffffff
 80048ec:	fffff3ff 	.word	0xfffff3ff
 80048f0:	fff3ffff 	.word	0xfff3ffff
 80048f4:	ffcfffff 	.word	0xffcfffff
 80048f8:	ffffcfff 	.word	0xffffcfff
 80048fc:	ffbfffff 	.word	0xffbfffff
 8004900:	ffff3fff 	.word	0xffff3fff

08004904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	223d      	movs	r2, #61	; 0x3d
 8004910:	5c9b      	ldrb	r3, [r3, r2]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b01      	cmp	r3, #1
 8004916:	d001      	beq.n	800491c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e035      	b.n	8004988 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	223d      	movs	r2, #61	; 0x3d
 8004920:	2102      	movs	r1, #2
 8004922:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIM_Base_Start+0x8c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00a      	beq.n	8004944 <HAL_TIM_Base_Start+0x40>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	05db      	lsls	r3, r3, #23
 8004936:	429a      	cmp	r2, r3
 8004938:	d004      	beq.n	8004944 <HAL_TIM_Base_Start+0x40>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <HAL_TIM_Base_Start+0x90>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d116      	bne.n	8004972 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4a13      	ldr	r2, [pc, #76]	; (8004998 <HAL_TIM_Base_Start+0x94>)
 800494c:	4013      	ands	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d016      	beq.n	8004984 <HAL_TIM_Base_Start+0x80>
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	025b      	lsls	r3, r3, #9
 800495c:	429a      	cmp	r2, r3
 800495e:	d011      	beq.n	8004984 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	430a      	orrs	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	e008      	b.n	8004984 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2101      	movs	r1, #1
 800497e:	430a      	orrs	r2, r1
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	e000      	b.n	8004986 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004984:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	0018      	movs	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	b004      	add	sp, #16
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	00010007 	.word	0x00010007

0800499c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e04a      	b.n	8004a44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	223d      	movs	r2, #61	; 0x3d
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223c      	movs	r2, #60	; 0x3c
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fd fd8d 	bl	80024e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	223d      	movs	r2, #61	; 0x3d
 80049ce:	2102      	movs	r1, #2
 80049d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	0019      	movs	r1, r3
 80049dc:	0010      	movs	r0, r2
 80049de:	f000 fa13 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2248      	movs	r2, #72	; 0x48
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	223e      	movs	r2, #62	; 0x3e
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	223f      	movs	r2, #63	; 0x3f
 80049f6:	2101      	movs	r1, #1
 80049f8:	5499      	strb	r1, [r3, r2]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	2101      	movs	r1, #1
 8004a00:	5499      	strb	r1, [r3, r2]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2241      	movs	r2, #65	; 0x41
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2242      	movs	r2, #66	; 0x42
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2243      	movs	r2, #67	; 0x43
 8004a16:	2101      	movs	r1, #1
 8004a18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2244      	movs	r2, #68	; 0x44
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2245      	movs	r2, #69	; 0x45
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2246      	movs	r2, #70	; 0x46
 8004a2e:	2101      	movs	r1, #1
 8004a30:	5499      	strb	r1, [r3, r2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2247      	movs	r2, #71	; 0x47
 8004a36:	2101      	movs	r1, #1
 8004a38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	223d      	movs	r2, #61	; 0x3d
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	0018      	movs	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	b002      	add	sp, #8
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d108      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x22>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	223e      	movs	r2, #62	; 0x3e
 8004a60:	5c9b      	ldrb	r3, [r3, r2]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	1e5a      	subs	r2, r3, #1
 8004a68:	4193      	sbcs	r3, r2
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e037      	b.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d108      	bne.n	8004a86 <HAL_TIM_PWM_Start+0x3a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	5c9b      	ldrb	r3, [r3, r2]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	1e5a      	subs	r2, r3, #1
 8004a80:	4193      	sbcs	r3, r2
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	e02b      	b.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d108      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x52>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	5c9b      	ldrb	r3, [r3, r2]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	1e5a      	subs	r2, r3, #1
 8004a98:	4193      	sbcs	r3, r2
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	e01f      	b.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d108      	bne.n	8004ab6 <HAL_TIM_PWM_Start+0x6a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2241      	movs	r2, #65	; 0x41
 8004aa8:	5c9b      	ldrb	r3, [r3, r2]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	1e5a      	subs	r2, r3, #1
 8004ab0:	4193      	sbcs	r3, r2
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e013      	b.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d108      	bne.n	8004ace <HAL_TIM_PWM_Start+0x82>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2242      	movs	r2, #66	; 0x42
 8004ac0:	5c9b      	ldrb	r3, [r3, r2]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	4193      	sbcs	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e007      	b.n	8004ade <HAL_TIM_PWM_Start+0x92>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2243      	movs	r2, #67	; 0x43
 8004ad2:	5c9b      	ldrb	r3, [r3, r2]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	4193      	sbcs	r3, r2
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e081      	b.n	8004bea <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0xaa>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	223e      	movs	r2, #62	; 0x3e
 8004af0:	2102      	movs	r1, #2
 8004af2:	5499      	strb	r1, [r3, r2]
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_PWM_Start+0xf2>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0xba>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	223f      	movs	r2, #63	; 0x3f
 8004b00:	2102      	movs	r1, #2
 8004b02:	5499      	strb	r1, [r3, r2]
 8004b04:	e01b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xf2>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0xca>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_PWM_Start+0xf2>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Start+0xda>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2241      	movs	r2, #65	; 0x41
 8004b20:	2102      	movs	r1, #2
 8004b22:	5499      	strb	r1, [r3, r2]
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xf2>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Start+0xea>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2242      	movs	r2, #66	; 0x42
 8004b30:	2102      	movs	r1, #2
 8004b32:	5499      	strb	r1, [r3, r2]
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_PWM_Start+0xf2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2243      	movs	r2, #67	; 0x43
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	2201      	movs	r2, #1
 8004b46:	0018      	movs	r0, r3
 8004b48:	f000 fc7e 	bl	8005448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a28      	ldr	r2, [pc, #160]	; (8004bf4 <HAL_TIM_PWM_Start+0x1a8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x11e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a27      	ldr	r2, [pc, #156]	; (8004bf8 <HAL_TIM_PWM_Start+0x1ac>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_TIM_PWM_Start+0x11e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <HAL_TIM_PWM_Start+0x1b0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <HAL_TIM_PWM_Start+0x122>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <HAL_TIM_PWM_Start+0x124>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2180      	movs	r1, #128	; 0x80
 8004b80:	0209      	lsls	r1, r1, #8
 8004b82:	430a      	orrs	r2, r1
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_TIM_PWM_Start+0x1a8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x15a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	05db      	lsls	r3, r3, #23
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x15a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <HAL_TIM_PWM_Start+0x1b4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d116      	bne.n	8004bd4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <HAL_TIM_PWM_Start+0x1b8>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d016      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x19a>
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	2380      	movs	r3, #128	; 0x80
 8004bbc:	025b      	lsls	r3, r3, #9
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d011      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd2:	e008      	b.n	8004be6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2101      	movs	r1, #1
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e000      	b.n	8004be8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40014400 	.word	0x40014400
 8004bfc:	40014800 	.word	0x40014800
 8004c00:	40000400 	.word	0x40000400
 8004c04:	00010007 	.word	0x00010007

08004c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2317      	movs	r3, #23
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	223c      	movs	r2, #60	; 0x3c
 8004c20:	5c9b      	ldrb	r3, [r3, r2]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d101      	bne.n	8004c2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c26:	2302      	movs	r3, #2
 8004c28:	e0e5      	b.n	8004df6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	223c      	movs	r2, #60	; 0x3c
 8004c2e:	2101      	movs	r1, #1
 8004c30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b14      	cmp	r3, #20
 8004c36:	d900      	bls.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004c38:	e0d1      	b.n	8004dde <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	009a      	lsls	r2, r3, #2
 8004c3e:	4b70      	ldr	r3, [pc, #448]	; (8004e00 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004c40:	18d3      	adds	r3, r2, r3
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0011      	movs	r1, r2
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 f95e 	bl	8004f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2108      	movs	r1, #8
 8004c60:	430a      	orrs	r2, r1
 8004c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2104      	movs	r1, #4
 8004c70:	438a      	bics	r2, r1
 8004c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6999      	ldr	r1, [r3, #24]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	619a      	str	r2, [r3, #24]
      break;
 8004c86:	e0af      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	0011      	movs	r1, r2
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 f9bd 	bl	8005010 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699a      	ldr	r2, [r3, #24]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2180      	movs	r1, #128	; 0x80
 8004ca2:	0109      	lsls	r1, r1, #4
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4954      	ldr	r1, [pc, #336]	; (8004e04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
      break;
 8004ccc:	e08c      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	0011      	movs	r1, r2
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 fa18 	bl	800510c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2104      	movs	r1, #4
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69d9      	ldr	r1, [r3, #28]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	61da      	str	r2, [r3, #28]
      break;
 8004d0e:	e06b      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	0011      	movs	r1, r2
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 fa79 	bl	8005210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2180      	movs	r1, #128	; 0x80
 8004d2a:	0109      	lsls	r1, r1, #4
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4932      	ldr	r1, [pc, #200]	; (8004e04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69d9      	ldr	r1, [r3, #28]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	021a      	lsls	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	61da      	str	r2, [r3, #28]
      break;
 8004d54:	e048      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	0011      	movs	r1, r2
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f000 faba 	bl	80052d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2108      	movs	r1, #8
 8004d70:	430a      	orrs	r2, r1
 8004d72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2104      	movs	r1, #4
 8004d80:	438a      	bics	r2, r1
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d96:	e027      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	0011      	movs	r1, r2
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 faf3 	bl	800538c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2180      	movs	r1, #128	; 0x80
 8004db2:	0109      	lsls	r1, r1, #4
 8004db4:	430a      	orrs	r2, r1
 8004db6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4910      	ldr	r1, [pc, #64]	; (8004e04 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004dc4:	400a      	ands	r2, r1
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ddc:	e004      	b.n	8004de8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004dde:	2317      	movs	r3, #23
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	223c      	movs	r2, #60	; 0x3c
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

  return status;
 8004df0:	2317      	movs	r3, #23
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	781b      	ldrb	r3, [r3, #0]
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b006      	add	sp, #24
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	080069e4 	.word	0x080069e4
 8004e04:	fffffbff 	.word	0xfffffbff

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a37      	ldr	r2, [pc, #220]	; (8004ef8 <TIM_Base_SetConfig+0xf0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d008      	beq.n	8004e32 <TIM_Base_SetConfig+0x2a>
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	2380      	movs	r3, #128	; 0x80
 8004e24:	05db      	lsls	r3, r3, #23
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0x2a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a33      	ldr	r2, [pc, #204]	; (8004efc <TIM_Base_SetConfig+0xf4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2270      	movs	r2, #112	; 0x70
 8004e36:	4393      	bics	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a2c      	ldr	r2, [pc, #176]	; (8004ef8 <TIM_Base_SetConfig+0xf0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d014      	beq.n	8004e76 <TIM_Base_SetConfig+0x6e>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	05db      	lsls	r3, r3, #23
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d00f      	beq.n	8004e76 <TIM_Base_SetConfig+0x6e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a28      	ldr	r2, [pc, #160]	; (8004efc <TIM_Base_SetConfig+0xf4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_Base_SetConfig+0x6e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <TIM_Base_SetConfig+0xf8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0x6e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <TIM_Base_SetConfig+0xfc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0x6e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a25      	ldr	r2, [pc, #148]	; (8004f08 <TIM_Base_SetConfig+0x100>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d108      	bne.n	8004e88 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a24      	ldr	r2, [pc, #144]	; (8004f0c <TIM_Base_SetConfig+0x104>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	001a      	movs	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <TIM_Base_SetConfig+0xf0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_Base_SetConfig+0xbe>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <TIM_Base_SetConfig+0xfc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_Base_SetConfig+0xbe>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a11      	ldr	r2, [pc, #68]	; (8004f08 <TIM_Base_SetConfig+0x100>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d103      	bne.n	8004ece <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4393      	bics	r3, r2
 8004ee8:	001a      	movs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	611a      	str	r2, [r3, #16]
  }
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b004      	add	sp, #16
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40000400 	.word	0x40000400
 8004f00:	40002000 	.word	0x40002000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	fffffcff 	.word	0xfffffcff

08004f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	2201      	movs	r2, #1
 8004f26:	4393      	bics	r3, r2
 8004f28:	001a      	movs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a2e      	ldr	r2, [pc, #184]	; (8004ff8 <TIM_OC1_SetConfig+0xe8>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2203      	movs	r2, #3
 8004f46:	4393      	bics	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2202      	movs	r2, #2
 8004f58:	4393      	bics	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <TIM_OC1_SetConfig+0xec>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_OC1_SetConfig+0x6e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a23      	ldr	r2, [pc, #140]	; (8005000 <TIM_OC1_SetConfig+0xf0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC1_SetConfig+0x6e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a22      	ldr	r2, [pc, #136]	; (8005004 <TIM_OC1_SetConfig+0xf4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10c      	bne.n	8004f98 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2208      	movs	r2, #8
 8004f82:	4393      	bics	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2204      	movs	r2, #4
 8004f94:	4393      	bics	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <TIM_OC1_SetConfig+0xec>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC1_SetConfig+0xa0>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a17      	ldr	r2, [pc, #92]	; (8005000 <TIM_OC1_SetConfig+0xf0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC1_SetConfig+0xa0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a16      	ldr	r2, [pc, #88]	; (8005004 <TIM_OC1_SetConfig+0xf4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4a15      	ldr	r2, [pc, #84]	; (8005008 <TIM_OC1_SetConfig+0xf8>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4a14      	ldr	r2, [pc, #80]	; (800500c <TIM_OC1_SetConfig+0xfc>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b006      	add	sp, #24
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	fffeff8f 	.word	0xfffeff8f
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800
 8005008:	fffffeff 	.word	0xfffffeff
 800500c:	fffffdff 	.word	0xfffffdff

08005010 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	2210      	movs	r2, #16
 8005026:	4393      	bics	r3, r2
 8005028:	001a      	movs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <TIM_OC2_SetConfig+0xe0>)
 800503e:	4013      	ands	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <TIM_OC2_SetConfig+0xe4>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2220      	movs	r2, #32
 800505a:	4393      	bics	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a22      	ldr	r2, [pc, #136]	; (80050f8 <TIM_OC2_SetConfig+0xe8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10d      	bne.n	800508e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2280      	movs	r2, #128	; 0x80
 8005076:	4393      	bics	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2240      	movs	r2, #64	; 0x40
 800508a:	4393      	bics	r3, r2
 800508c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <TIM_OC2_SetConfig+0xe8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_OC2_SetConfig+0x96>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <TIM_OC2_SetConfig+0xec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_OC2_SetConfig+0x96>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a17      	ldr	r2, [pc, #92]	; (8005100 <TIM_OC2_SetConfig+0xf0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d113      	bne.n	80050ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4a16      	ldr	r2, [pc, #88]	; (8005104 <TIM_OC2_SetConfig+0xf4>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <TIM_OC2_SetConfig+0xf8>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b006      	add	sp, #24
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	feff8fff 	.word	0xfeff8fff
 80050f4:	fffffcff 	.word	0xfffffcff
 80050f8:	40012c00 	.word	0x40012c00
 80050fc:	40014400 	.word	0x40014400
 8005100:	40014800 	.word	0x40014800
 8005104:	fffffbff 	.word	0xfffffbff
 8005108:	fffff7ff 	.word	0xfffff7ff

0800510c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4a31      	ldr	r2, [pc, #196]	; (80051e8 <TIM_OC3_SetConfig+0xdc>)
 8005122:	401a      	ands	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a2d      	ldr	r2, [pc, #180]	; (80051ec <TIM_OC3_SetConfig+0xe0>)
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2203      	movs	r2, #3
 8005140:	4393      	bics	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <TIM_OC3_SetConfig+0xe4>)
 8005152:	4013      	ands	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	4313      	orrs	r3, r2
 8005160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <TIM_OC3_SetConfig+0xe8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <TIM_OC3_SetConfig+0xec>)
 800516e:	4013      	ands	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	021b      	lsls	r3, r3, #8
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <TIM_OC3_SetConfig+0xf0>)
 8005182:	4013      	ands	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1a      	ldr	r2, [pc, #104]	; (80051f4 <TIM_OC3_SetConfig+0xe8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_OC3_SetConfig+0x92>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1b      	ldr	r2, [pc, #108]	; (8005200 <TIM_OC3_SetConfig+0xf4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_OC3_SetConfig+0x92>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <TIM_OC3_SetConfig+0xf8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d113      	bne.n	80051c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_OC3_SetConfig+0xfc>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_OC3_SetConfig+0x100>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffffeff 	.word	0xfffffeff
 80051ec:	fffeff8f 	.word	0xfffeff8f
 80051f0:	fffffdff 	.word	0xfffffdff
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	fffff7ff 	.word	0xfffff7ff
 80051fc:	fffffbff 	.word	0xfffffbff
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800
 8005208:	ffffefff 	.word	0xffffefff
 800520c:	ffffdfff 	.word	0xffffdfff

08005210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <TIM_OC4_SetConfig+0xa8>)
 8005226:	401a      	ands	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a20      	ldr	r2, [pc, #128]	; (80052bc <TIM_OC4_SetConfig+0xac>)
 800523c:	4013      	ands	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <TIM_OC4_SetConfig+0xb0>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4a1b      	ldr	r2, [pc, #108]	; (80052c4 <TIM_OC4_SetConfig+0xb4>)
 8005258:	4013      	ands	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	031b      	lsls	r3, r3, #12
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <TIM_OC4_SetConfig+0xb8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_OC4_SetConfig+0x70>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a16      	ldr	r2, [pc, #88]	; (80052cc <TIM_OC4_SetConfig+0xbc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC4_SetConfig+0x70>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC4_SetConfig+0xc0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d109      	bne.n	8005294 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <TIM_OC4_SetConfig+0xc4>)
 8005284:	4013      	ands	r3, r2
 8005286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	621a      	str	r2, [r3, #32]
}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b006      	add	sp, #24
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	ffffefff 	.word	0xffffefff
 80052bc:	feff8fff 	.word	0xfeff8fff
 80052c0:	fffffcff 	.word	0xfffffcff
 80052c4:	ffffdfff 	.word	0xffffdfff
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800
 80052d4:	ffffbfff 	.word	0xffffbfff

080052d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	4a21      	ldr	r2, [pc, #132]	; (8005374 <TIM_OC5_SetConfig+0x9c>)
 80052ee:	401a      	ands	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <TIM_OC5_SetConfig+0xa0>)
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4a19      	ldr	r2, [pc, #100]	; (800537c <TIM_OC5_SetConfig+0xa4>)
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a15      	ldr	r2, [pc, #84]	; (8005380 <TIM_OC5_SetConfig+0xa8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_OC5_SetConfig+0x66>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <TIM_OC5_SetConfig+0xac>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_OC5_SetConfig+0x66>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <TIM_OC5_SetConfig+0xb0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d109      	bne.n	8005352 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <TIM_OC5_SetConfig+0x9c>)
 8005342:	4013      	ands	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	621a      	str	r2, [r3, #32]
}
 800536c:	46c0      	nop			; (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b006      	add	sp, #24
 8005372:	bd80      	pop	{r7, pc}
 8005374:	fffeffff 	.word	0xfffeffff
 8005378:	fffeff8f 	.word	0xfffeff8f
 800537c:	fffdffff 	.word	0xfffdffff
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	4a22      	ldr	r2, [pc, #136]	; (800542c <TIM_OC6_SetConfig+0xa0>)
 80053a2:	401a      	ands	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <TIM_OC6_SetConfig+0xa4>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4a1a      	ldr	r2, [pc, #104]	; (8005434 <TIM_OC6_SetConfig+0xa8>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	051b      	lsls	r3, r3, #20
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a16      	ldr	r2, [pc, #88]	; (8005438 <TIM_OC6_SetConfig+0xac>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_OC6_SetConfig+0x68>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <TIM_OC6_SetConfig+0xb0>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC6_SetConfig+0x68>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a14      	ldr	r2, [pc, #80]	; (8005440 <TIM_OC6_SetConfig+0xb4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d109      	bne.n	8005408 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <TIM_OC6_SetConfig+0xb8>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	46bd      	mov	sp, r7
 8005426:	b006      	add	sp, #24
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	ffefffff 	.word	0xffefffff
 8005430:	feff8fff 	.word	0xfeff8fff
 8005434:	ffdfffff 	.word	0xffdfffff
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800
 8005444:	fffbffff 	.word	0xfffbffff

08005448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	221f      	movs	r2, #31
 8005458:	4013      	ands	r3, r2
 800545a:	2201      	movs	r2, #1
 800545c:	409a      	lsls	r2, r3
 800545e:	0013      	movs	r3, r2
 8005460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	43d2      	mvns	r2, r2
 800546a:	401a      	ands	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1a      	ldr	r2, [r3, #32]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	211f      	movs	r1, #31
 8005478:	400b      	ands	r3, r1
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4099      	lsls	r1, r3
 800547e:	000b      	movs	r3, r1
 8005480:	431a      	orrs	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b006      	add	sp, #24
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	223c      	movs	r2, #60	; 0x3c
 800549e:	5c9b      	ldrb	r3, [r3, r2]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e050      	b.n	800554a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	223c      	movs	r2, #60	; 0x3c
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223d      	movs	r2, #61	; 0x3d
 80054b4:	2102      	movs	r1, #2
 80054b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a21      	ldr	r2, [pc, #132]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d108      	bne.n	80054e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a20      	ldr	r2, [pc, #128]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2270      	movs	r2, #112	; 0x70
 80054e8:	4393      	bics	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a14      	ldr	r2, [pc, #80]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00a      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	05db      	lsls	r3, r3, #23
 8005510:	429a      	cmp	r2, r3
 8005512:	d004      	beq.n	800551e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a10      	ldr	r2, [pc, #64]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10c      	bne.n	8005538 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	4393      	bics	r3, r2
 8005524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4313      	orrs	r3, r2
 800552e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	223d      	movs	r2, #61	; 0x3d
 800553c:	2101      	movs	r1, #1
 800553e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	223c      	movs	r2, #60	; 0x3c
 8005544:	2100      	movs	r1, #0
 8005546:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	0018      	movs	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	b004      	add	sp, #16
 8005550:	bd80      	pop	{r7, pc}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	40012c00 	.word	0x40012c00
 8005558:	ff0fffff 	.word	0xff0fffff
 800555c:	40000400 	.word	0x40000400

08005560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e046      	b.n	8005600 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2288      	movs	r2, #136	; 0x88
 8005576:	589b      	ldr	r3, [r3, r2]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d107      	bne.n	800558c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2284      	movs	r2, #132	; 0x84
 8005580:	2100      	movs	r1, #0
 8005582:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	0018      	movs	r0, r3
 8005588:	f7fd f804 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2288      	movs	r2, #136	; 0x88
 8005590:	2124      	movs	r1, #36	; 0x24
 8005592:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2101      	movs	r1, #1
 80055a0:	438a      	bics	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 fde6 	bl	8006180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 fb6a 	bl	8005c90 <UART_SetConfig>
 80055bc:	0003      	movs	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e01c      	b.n	8005600 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	490d      	ldr	r1, [pc, #52]	; (8005608 <HAL_UART_Init+0xa8>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	212a      	movs	r1, #42	; 0x2a
 80055e2:	438a      	bics	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2101      	movs	r1, #1
 80055f2:	430a      	orrs	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fe75 	bl	80062e8 <UART_CheckIdleState>
 80055fe:	0003      	movs	r3, r0
}
 8005600:	0018      	movs	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}
 8005608:	ffffb7ff 	.word	0xffffb7ff

0800560c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800560c:	b5b0      	push	{r4, r5, r7, lr}
 800560e:	b0aa      	sub	sp, #168	; 0xa8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	22a4      	movs	r2, #164	; 0xa4
 800561c:	18b9      	adds	r1, r7, r2
 800561e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	20a0      	movs	r0, #160	; 0xa0
 8005628:	1839      	adds	r1, r7, r0
 800562a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	249c      	movs	r4, #156	; 0x9c
 8005634:	1939      	adds	r1, r7, r4
 8005636:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005638:	0011      	movs	r1, r2
 800563a:	18bb      	adds	r3, r7, r2
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4aa2      	ldr	r2, [pc, #648]	; (80058c8 <HAL_UART_IRQHandler+0x2bc>)
 8005640:	4013      	ands	r3, r2
 8005642:	2298      	movs	r2, #152	; 0x98
 8005644:	18bd      	adds	r5, r7, r2
 8005646:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005648:	18bb      	adds	r3, r7, r2
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d11a      	bne.n	8005686 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005650:	187b      	adds	r3, r7, r1
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2220      	movs	r2, #32
 8005656:	4013      	ands	r3, r2
 8005658:	d015      	beq.n	8005686 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800565a:	183b      	adds	r3, r7, r0
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2220      	movs	r2, #32
 8005660:	4013      	ands	r3, r2
 8005662:	d105      	bne.n	8005670 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005664:	193b      	adds	r3, r7, r4
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	055b      	lsls	r3, r3, #21
 800566c:	4013      	ands	r3, r2
 800566e:	d00a      	beq.n	8005686 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005674:	2b00      	cmp	r3, #0
 8005676:	d100      	bne.n	800567a <HAL_UART_IRQHandler+0x6e>
 8005678:	e2dc      	b.n	8005c34 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	0010      	movs	r0, r2
 8005682:	4798      	blx	r3
      }
      return;
 8005684:	e2d6      	b.n	8005c34 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005686:	2398      	movs	r3, #152	; 0x98
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d100      	bne.n	8005692 <HAL_UART_IRQHandler+0x86>
 8005690:	e122      	b.n	80058d8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005692:	239c      	movs	r3, #156	; 0x9c
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a8c      	ldr	r2, [pc, #560]	; (80058cc <HAL_UART_IRQHandler+0x2c0>)
 800569a:	4013      	ands	r3, r2
 800569c:	d106      	bne.n	80056ac <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800569e:	23a0      	movs	r3, #160	; 0xa0
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a8a      	ldr	r2, [pc, #552]	; (80058d0 <HAL_UART_IRQHandler+0x2c4>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	d100      	bne.n	80056ac <HAL_UART_IRQHandler+0xa0>
 80056aa:	e115      	b.n	80058d8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056ac:	23a4      	movs	r3, #164	; 0xa4
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	4013      	ands	r3, r2
 80056b6:	d012      	beq.n	80056de <HAL_UART_IRQHandler+0xd2>
 80056b8:	23a0      	movs	r3, #160	; 0xa0
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	d00b      	beq.n	80056de <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2201      	movs	r2, #1
 80056cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2290      	movs	r2, #144	; 0x90
 80056d2:	589b      	ldr	r3, [r3, r2]
 80056d4:	2201      	movs	r2, #1
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2190      	movs	r1, #144	; 0x90
 80056dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056de:	23a4      	movs	r3, #164	; 0xa4
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2202      	movs	r2, #2
 80056e6:	4013      	ands	r3, r2
 80056e8:	d011      	beq.n	800570e <HAL_UART_IRQHandler+0x102>
 80056ea:	239c      	movs	r3, #156	; 0x9c
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2201      	movs	r2, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	d00b      	beq.n	800570e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2202      	movs	r2, #2
 80056fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2290      	movs	r2, #144	; 0x90
 8005702:	589b      	ldr	r3, [r3, r2]
 8005704:	2204      	movs	r2, #4
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2190      	movs	r1, #144	; 0x90
 800570c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800570e:	23a4      	movs	r3, #164	; 0xa4
 8005710:	18fb      	adds	r3, r7, r3
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2204      	movs	r2, #4
 8005716:	4013      	ands	r3, r2
 8005718:	d011      	beq.n	800573e <HAL_UART_IRQHandler+0x132>
 800571a:	239c      	movs	r3, #156	; 0x9c
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	d00b      	beq.n	800573e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2204      	movs	r2, #4
 800572c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2290      	movs	r2, #144	; 0x90
 8005732:	589b      	ldr	r3, [r3, r2]
 8005734:	2202      	movs	r2, #2
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2190      	movs	r1, #144	; 0x90
 800573c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800573e:	23a4      	movs	r3, #164	; 0xa4
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2208      	movs	r2, #8
 8005746:	4013      	ands	r3, r2
 8005748:	d017      	beq.n	800577a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800574a:	23a0      	movs	r3, #160	; 0xa0
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2220      	movs	r2, #32
 8005752:	4013      	ands	r3, r2
 8005754:	d105      	bne.n	8005762 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005756:	239c      	movs	r3, #156	; 0x9c
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a5b      	ldr	r2, [pc, #364]	; (80058cc <HAL_UART_IRQHandler+0x2c0>)
 800575e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005760:	d00b      	beq.n	800577a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2208      	movs	r2, #8
 8005768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2290      	movs	r2, #144	; 0x90
 800576e:	589b      	ldr	r3, [r3, r2]
 8005770:	2208      	movs	r2, #8
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2190      	movs	r1, #144	; 0x90
 8005778:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800577a:	23a4      	movs	r3, #164	; 0xa4
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	2380      	movs	r3, #128	; 0x80
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	4013      	ands	r3, r2
 8005786:	d013      	beq.n	80057b0 <HAL_UART_IRQHandler+0x1a4>
 8005788:	23a0      	movs	r3, #160	; 0xa0
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	04db      	lsls	r3, r3, #19
 8005792:	4013      	ands	r3, r2
 8005794:	d00c      	beq.n	80057b0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2290      	movs	r2, #144	; 0x90
 80057a4:	589b      	ldr	r3, [r3, r2]
 80057a6:	2220      	movs	r2, #32
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2190      	movs	r1, #144	; 0x90
 80057ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2290      	movs	r2, #144	; 0x90
 80057b4:	589b      	ldr	r3, [r3, r2]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d100      	bne.n	80057bc <HAL_UART_IRQHandler+0x1b0>
 80057ba:	e23d      	b.n	8005c38 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057bc:	23a4      	movs	r3, #164	; 0xa4
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2220      	movs	r2, #32
 80057c4:	4013      	ands	r3, r2
 80057c6:	d015      	beq.n	80057f4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057c8:	23a0      	movs	r3, #160	; 0xa0
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2220      	movs	r2, #32
 80057d0:	4013      	ands	r3, r2
 80057d2:	d106      	bne.n	80057e2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057d4:	239c      	movs	r3, #156	; 0x9c
 80057d6:	18fb      	adds	r3, r7, r3
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	055b      	lsls	r3, r3, #21
 80057de:	4013      	ands	r3, r2
 80057e0:	d008      	beq.n	80057f4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	0010      	movs	r0, r2
 80057f2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2290      	movs	r2, #144	; 0x90
 80057f8:	589b      	ldr	r3, [r3, r2]
 80057fa:	2194      	movs	r1, #148	; 0x94
 80057fc:	187a      	adds	r2, r7, r1
 80057fe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2240      	movs	r2, #64	; 0x40
 8005808:	4013      	ands	r3, r2
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d004      	beq.n	8005818 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800580e:	187b      	adds	r3, r7, r1
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2228      	movs	r2, #40	; 0x28
 8005814:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005816:	d04c      	beq.n	80058b2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	0018      	movs	r0, r3
 800581c:	f000 fe7e 	bl	800651c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2240      	movs	r2, #64	; 0x40
 8005828:	4013      	ands	r3, r2
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d13c      	bne.n	80058a8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582e:	f3ef 8310 	mrs	r3, PRIMASK
 8005832:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005836:	2090      	movs	r0, #144	; 0x90
 8005838:	183a      	adds	r2, r7, r0
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	2301      	movs	r3, #1
 800583e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005842:	f383 8810 	msr	PRIMASK, r3
}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2140      	movs	r1, #64	; 0x40
 8005854:	438a      	bics	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
 8005858:	183b      	adds	r3, r7, r0
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005860:	f383 8810 	msr	PRIMASK, r3
}
 8005864:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2280      	movs	r2, #128	; 0x80
 800586a:	589b      	ldr	r3, [r3, r2]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d016      	beq.n	800589e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	589b      	ldr	r3, [r3, r2]
 8005876:	4a17      	ldr	r2, [pc, #92]	; (80058d4 <HAL_UART_IRQHandler+0x2c8>)
 8005878:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2280      	movs	r2, #128	; 0x80
 800587e:	589b      	ldr	r3, [r3, r2]
 8005880:	0018      	movs	r0, r3
 8005882:	f7fd f90b 	bl	8002a9c <HAL_DMA_Abort_IT>
 8005886:	1e03      	subs	r3, r0, #0
 8005888:	d01c      	beq.n	80058c4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	589b      	ldr	r3, [r3, r2]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	5852      	ldr	r2, [r2, r1]
 8005898:	0010      	movs	r0, r2
 800589a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e012      	b.n	80058c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 f9e1 	bl	8005c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a6:	e00d      	b.n	80058c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f000 f9dc 	bl	8005c68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	e008      	b.n	80058c4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 f9d7 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2290      	movs	r2, #144	; 0x90
 80058be:	2100      	movs	r1, #0
 80058c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80058c2:	e1b9      	b.n	8005c38 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	46c0      	nop			; (mov r8, r8)
    return;
 80058c6:	e1b7      	b.n	8005c38 <HAL_UART_IRQHandler+0x62c>
 80058c8:	0000080f 	.word	0x0000080f
 80058cc:	10000001 	.word	0x10000001
 80058d0:	04000120 	.word	0x04000120
 80058d4:	080065e9 	.word	0x080065e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d000      	beq.n	80058e2 <HAL_UART_IRQHandler+0x2d6>
 80058e0:	e13e      	b.n	8005b60 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058e2:	23a4      	movs	r3, #164	; 0xa4
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2210      	movs	r2, #16
 80058ea:	4013      	ands	r3, r2
 80058ec:	d100      	bne.n	80058f0 <HAL_UART_IRQHandler+0x2e4>
 80058ee:	e137      	b.n	8005b60 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058f0:	23a0      	movs	r3, #160	; 0xa0
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	4013      	ands	r3, r2
 80058fa:	d100      	bne.n	80058fe <HAL_UART_IRQHandler+0x2f2>
 80058fc:	e130      	b.n	8005b60 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2210      	movs	r2, #16
 8005904:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	4013      	ands	r3, r2
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d000      	beq.n	8005916 <HAL_UART_IRQHandler+0x30a>
 8005914:	e0a4      	b.n	8005a60 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2280      	movs	r2, #128	; 0x80
 800591a:	589b      	ldr	r3, [r3, r2]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	217e      	movs	r1, #126	; 0x7e
 8005922:	187b      	adds	r3, r7, r1
 8005924:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005926:	187b      	adds	r3, r7, r1
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d100      	bne.n	8005930 <HAL_UART_IRQHandler+0x324>
 800592e:	e185      	b.n	8005c3c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	225c      	movs	r2, #92	; 0x5c
 8005934:	5a9b      	ldrh	r3, [r3, r2]
 8005936:	187a      	adds	r2, r7, r1
 8005938:	8812      	ldrh	r2, [r2, #0]
 800593a:	429a      	cmp	r2, r3
 800593c:	d300      	bcc.n	8005940 <HAL_UART_IRQHandler+0x334>
 800593e:	e17d      	b.n	8005c3c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	187a      	adds	r2, r7, r1
 8005944:	215e      	movs	r1, #94	; 0x5e
 8005946:	8812      	ldrh	r2, [r2, #0]
 8005948:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	589b      	ldr	r3, [r3, r2]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2220      	movs	r2, #32
 8005956:	4013      	ands	r3, r2
 8005958:	d170      	bne.n	8005a3c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595a:	f3ef 8310 	mrs	r3, PRIMASK
 800595e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005962:	67bb      	str	r3, [r7, #120]	; 0x78
 8005964:	2301      	movs	r3, #1
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	49b4      	ldr	r1, [pc, #720]	; (8005c4c <HAL_UART_IRQHandler+0x640>)
 800597c:	400a      	ands	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005982:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598c:	f3ef 8310 	mrs	r3, PRIMASK
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	677b      	str	r3, [r7, #116]	; 0x74
 8005996:	2301      	movs	r3, #1
 8005998:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599c:	f383 8810 	msr	PRIMASK, r3
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	438a      	bics	r2, r1
 80059b0:	609a      	str	r2, [r3, #8]
 80059b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b8:	f383 8810 	msr	PRIMASK, r3
}
 80059bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059be:	f3ef 8310 	mrs	r3, PRIMASK
 80059c2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80059c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c6:	673b      	str	r3, [r7, #112]	; 0x70
 80059c8:	2301      	movs	r3, #1
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ce:	f383 8810 	msr	PRIMASK, r3
}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2140      	movs	r1, #64	; 0x40
 80059e0:	438a      	bics	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]
 80059e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ea:	f383 8810 	msr	PRIMASK, r3
}
 80059ee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	228c      	movs	r2, #140	; 0x8c
 80059f4:	2120      	movs	r1, #32
 80059f6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005a02:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a08:	2301      	movs	r3, #1
 8005a0a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2110      	movs	r1, #16
 8005a20:	438a      	bics	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a26:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	589b      	ldr	r3, [r3, r2]
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fc ffce 	bl	80029d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	225c      	movs	r2, #92	; 0x5c
 8005a46:	5a9a      	ldrh	r2, [r3, r2]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	215e      	movs	r1, #94	; 0x5e
 8005a4c:	5a5b      	ldrh	r3, [r3, r1]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0011      	movs	r1, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f000 f90d 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a5e:	e0ed      	b.n	8005c3c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	225c      	movs	r2, #92	; 0x5c
 8005a64:	5a99      	ldrh	r1, [r3, r2]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	225e      	movs	r2, #94	; 0x5e
 8005a6a:	5a9b      	ldrh	r3, [r3, r2]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	208e      	movs	r0, #142	; 0x8e
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	1a8a      	subs	r2, r1, r2
 8005a74:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	225e      	movs	r2, #94	; 0x5e
 8005a7a:	5a9b      	ldrh	r3, [r3, r2]
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d100      	bne.n	8005a84 <HAL_UART_IRQHandler+0x478>
 8005a82:	e0dd      	b.n	8005c40 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005a84:	183b      	adds	r3, r7, r0
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d100      	bne.n	8005a8e <HAL_UART_IRQHandler+0x482>
 8005a8c:	e0d8      	b.n	8005c40 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a92:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a94:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a96:	2488      	movs	r4, #136	; 0x88
 8005a98:	193a      	adds	r2, r7, r4
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f383 8810 	msr	PRIMASK, r3
}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4967      	ldr	r1, [pc, #412]	; (8005c50 <HAL_UART_IRQHandler+0x644>)
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	193b      	adds	r3, r7, r4
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f383 8810 	msr	PRIMASK, r3
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aca:	61bb      	str	r3, [r7, #24]
  return(result);
 8005acc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ace:	2484      	movs	r4, #132	; 0x84
 8005ad0:	193a      	adds	r2, r7, r4
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f383 8810 	msr	PRIMASK, r3
}
 8005ade:	46c0      	nop			; (mov r8, r8)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	495a      	ldr	r1, [pc, #360]	; (8005c54 <HAL_UART_IRQHandler+0x648>)
 8005aec:	400a      	ands	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	193b      	adds	r3, r7, r4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	f383 8810 	msr	PRIMASK, r3
}
 8005afc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	228c      	movs	r2, #140	; 0x8c
 8005b02:	2120      	movs	r1, #32
 8005b04:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b12:	f3ef 8310 	mrs	r3, PRIMASK
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b1a:	2480      	movs	r4, #128	; 0x80
 8005b1c:	193a      	adds	r2, r7, r4
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	2301      	movs	r3, #1
 8005b22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f383 8810 	msr	PRIMASK, r3
}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2110      	movs	r1, #16
 8005b38:	438a      	bics	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	193b      	adds	r3, r7, r4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b50:	183b      	adds	r3, r7, r0
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0011      	movs	r1, r2
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 f88d 	bl	8005c78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b5e:	e06f      	b.n	8005c40 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b60:	23a4      	movs	r3, #164	; 0xa4
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	2380      	movs	r3, #128	; 0x80
 8005b68:	035b      	lsls	r3, r3, #13
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d010      	beq.n	8005b90 <HAL_UART_IRQHandler+0x584>
 8005b6e:	239c      	movs	r3, #156	; 0x9c
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	03db      	lsls	r3, r3, #15
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d009      	beq.n	8005b90 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2280      	movs	r2, #128	; 0x80
 8005b82:	0352      	lsls	r2, r2, #13
 8005b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 fd70 	bl	800666e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b8e:	e05a      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b90:	23a4      	movs	r3, #164	; 0xa4
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d016      	beq.n	8005bca <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b9c:	23a0      	movs	r3, #160	; 0xa0
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2280      	movs	r2, #128	; 0x80
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d106      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ba8:	239c      	movs	r3, #156	; 0x9c
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d042      	beq.n	8005c44 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	0010      	movs	r0, r2
 8005bc6:	4798      	blx	r3
    }
    return;
 8005bc8:	e03c      	b.n	8005c44 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bca:	23a4      	movs	r3, #164	; 0xa4
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2240      	movs	r2, #64	; 0x40
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d00a      	beq.n	8005bec <HAL_UART_IRQHandler+0x5e0>
 8005bd6:	23a0      	movs	r3, #160	; 0xa0
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2240      	movs	r2, #64	; 0x40
 8005bde:	4013      	ands	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 fd16 	bl	8006616 <UART_EndTransmit_IT>
    return;
 8005bea:	e02c      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bec:	23a4      	movs	r3, #164	; 0xa4
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <HAL_UART_IRQHandler+0x606>
 8005bfa:	23a0      	movs	r3, #160	; 0xa0
 8005bfc:	18fb      	adds	r3, r7, r3
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	05db      	lsls	r3, r3, #23
 8005c04:	4013      	ands	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 fd3f 	bl	800668e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c10:	e019      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c12:	23a4      	movs	r3, #164	; 0xa4
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	045b      	lsls	r3, r3, #17
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d012      	beq.n	8005c46 <HAL_UART_IRQHandler+0x63a>
 8005c20:	23a0      	movs	r3, #160	; 0xa0
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	da0d      	bge.n	8005c46 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 fd26 	bl	800667e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c32:	e008      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	e006      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
    return;
 8005c38:	46c0      	nop			; (mov r8, r8)
 8005c3a:	e004      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	e002      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
      return;
 8005c40:	46c0      	nop			; (mov r8, r8)
 8005c42:	e000      	b.n	8005c46 <HAL_UART_IRQHandler+0x63a>
    return;
 8005c44:	46c0      	nop			; (mov r8, r8)
  }
}
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b02a      	add	sp, #168	; 0xa8
 8005c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c4c:	fffffeff 	.word	0xfffffeff
 8005c50:	fffffedf 	.word	0xfffffedf
 8005c54:	effffffe 	.word	0xeffffffe

08005c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c60:	46c0      	nop			; (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c70:	46c0      	nop			; (mov r8, r8)
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b002      	add	sp, #8
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	000a      	movs	r2, r1
 8005c82:	1cbb      	adds	r3, r7, #2
 8005c84:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b002      	add	sp, #8
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b5b0      	push	{r4, r5, r7, lr}
 8005c92:	b090      	sub	sp, #64	; 0x40
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c98:	231a      	movs	r3, #26
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	189b      	adds	r3, r3, r2
 8005c9e:	19db      	adds	r3, r3, r7
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	431a      	orrs	r2, r3
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4ac4      	ldr	r2, [pc, #784]	; (8005fd4 <UART_SetConfig+0x344>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4abf      	ldr	r2, [pc, #764]	; (8005fd8 <UART_SetConfig+0x348>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	0018      	movs	r0, r3
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	68d9      	ldr	r1, [r3, #12]
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	0003      	movs	r3, r0
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4ab9      	ldr	r2, [pc, #740]	; (8005fdc <UART_SetConfig+0x34c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d004      	beq.n	8005d06 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d02:	4313      	orrs	r3, r2
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	4ab4      	ldr	r2, [pc, #720]	; (8005fe0 <UART_SetConfig+0x350>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	0019      	movs	r1, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	220f      	movs	r2, #15
 8005d24:	4393      	bics	r3, r2
 8005d26:	0018      	movs	r0, r3
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	0003      	movs	r3, r0
 8005d32:	430b      	orrs	r3, r1
 8005d34:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4aaa      	ldr	r2, [pc, #680]	; (8005fe4 <UART_SetConfig+0x354>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d131      	bne.n	8005da4 <UART_SetConfig+0x114>
 8005d40:	4ba9      	ldr	r3, [pc, #676]	; (8005fe8 <UART_SetConfig+0x358>)
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	2203      	movs	r2, #3
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d01d      	beq.n	8005d88 <UART_SetConfig+0xf8>
 8005d4c:	d823      	bhi.n	8005d96 <UART_SetConfig+0x106>
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d00c      	beq.n	8005d6c <UART_SetConfig+0xdc>
 8005d52:	d820      	bhi.n	8005d96 <UART_SetConfig+0x106>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <UART_SetConfig+0xce>
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d00e      	beq.n	8005d7a <UART_SetConfig+0xea>
 8005d5c:	e01b      	b.n	8005d96 <UART_SetConfig+0x106>
 8005d5e:	231b      	movs	r3, #27
 8005d60:	2220      	movs	r2, #32
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	19db      	adds	r3, r3, r7
 8005d66:	2200      	movs	r2, #0
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e071      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005d6c:	231b      	movs	r3, #27
 8005d6e:	2220      	movs	r2, #32
 8005d70:	189b      	adds	r3, r3, r2
 8005d72:	19db      	adds	r3, r3, r7
 8005d74:	2202      	movs	r2, #2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e06a      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005d7a:	231b      	movs	r3, #27
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	189b      	adds	r3, r3, r2
 8005d80:	19db      	adds	r3, r3, r7
 8005d82:	2204      	movs	r2, #4
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e063      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005d88:	231b      	movs	r3, #27
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	189b      	adds	r3, r3, r2
 8005d8e:	19db      	adds	r3, r3, r7
 8005d90:	2208      	movs	r2, #8
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e05c      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005d96:	231b      	movs	r3, #27
 8005d98:	2220      	movs	r2, #32
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	19db      	adds	r3, r3, r7
 8005d9e:	2210      	movs	r2, #16
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e055      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a90      	ldr	r2, [pc, #576]	; (8005fec <UART_SetConfig+0x35c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d106      	bne.n	8005dbc <UART_SetConfig+0x12c>
 8005dae:	231b      	movs	r3, #27
 8005db0:	2220      	movs	r2, #32
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	19db      	adds	r3, r3, r7
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e049      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a86      	ldr	r2, [pc, #536]	; (8005fdc <UART_SetConfig+0x34c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d13e      	bne.n	8005e44 <UART_SetConfig+0x1b4>
 8005dc6:	4b88      	ldr	r3, [pc, #544]	; (8005fe8 <UART_SetConfig+0x358>)
 8005dc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dca:	23c0      	movs	r3, #192	; 0xc0
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	4013      	ands	r3, r2
 8005dd0:	22c0      	movs	r2, #192	; 0xc0
 8005dd2:	0112      	lsls	r2, r2, #4
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d027      	beq.n	8005e28 <UART_SetConfig+0x198>
 8005dd8:	22c0      	movs	r2, #192	; 0xc0
 8005dda:	0112      	lsls	r2, r2, #4
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d82a      	bhi.n	8005e36 <UART_SetConfig+0x1a6>
 8005de0:	2280      	movs	r2, #128	; 0x80
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d011      	beq.n	8005e0c <UART_SetConfig+0x17c>
 8005de8:	2280      	movs	r2, #128	; 0x80
 8005dea:	0112      	lsls	r2, r2, #4
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d822      	bhi.n	8005e36 <UART_SetConfig+0x1a6>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <UART_SetConfig+0x16e>
 8005df4:	2280      	movs	r2, #128	; 0x80
 8005df6:	00d2      	lsls	r2, r2, #3
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <UART_SetConfig+0x18a>
 8005dfc:	e01b      	b.n	8005e36 <UART_SetConfig+0x1a6>
 8005dfe:	231b      	movs	r3, #27
 8005e00:	2220      	movs	r2, #32
 8005e02:	189b      	adds	r3, r3, r2
 8005e04:	19db      	adds	r3, r3, r7
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	e021      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005e0c:	231b      	movs	r3, #27
 8005e0e:	2220      	movs	r2, #32
 8005e10:	189b      	adds	r3, r3, r2
 8005e12:	19db      	adds	r3, r3, r7
 8005e14:	2202      	movs	r2, #2
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e01a      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005e1a:	231b      	movs	r3, #27
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	19db      	adds	r3, r3, r7
 8005e22:	2204      	movs	r2, #4
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e013      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005e28:	231b      	movs	r3, #27
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	189b      	adds	r3, r3, r2
 8005e2e:	19db      	adds	r3, r3, r7
 8005e30:	2208      	movs	r2, #8
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	e00c      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005e36:	231b      	movs	r3, #27
 8005e38:	2220      	movs	r2, #32
 8005e3a:	189b      	adds	r3, r3, r2
 8005e3c:	19db      	adds	r3, r3, r7
 8005e3e:	2210      	movs	r2, #16
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e005      	b.n	8005e50 <UART_SetConfig+0x1c0>
 8005e44:	231b      	movs	r3, #27
 8005e46:	2220      	movs	r2, #32
 8005e48:	189b      	adds	r3, r3, r2
 8005e4a:	19db      	adds	r3, r3, r7
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a61      	ldr	r2, [pc, #388]	; (8005fdc <UART_SetConfig+0x34c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d000      	beq.n	8005e5c <UART_SetConfig+0x1cc>
 8005e5a:	e092      	b.n	8005f82 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e5c:	231b      	movs	r3, #27
 8005e5e:	2220      	movs	r2, #32
 8005e60:	189b      	adds	r3, r3, r2
 8005e62:	19db      	adds	r3, r3, r7
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d015      	beq.n	8005e96 <UART_SetConfig+0x206>
 8005e6a:	dc18      	bgt.n	8005e9e <UART_SetConfig+0x20e>
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d00d      	beq.n	8005e8c <UART_SetConfig+0x1fc>
 8005e70:	dc15      	bgt.n	8005e9e <UART_SetConfig+0x20e>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <UART_SetConfig+0x1ec>
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d005      	beq.n	8005e86 <UART_SetConfig+0x1f6>
 8005e7a:	e010      	b.n	8005e9e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e7c:	f7fe fbb2 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 8005e80:	0003      	movs	r3, r0
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e84:	e014      	b.n	8005eb0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e86:	4b5a      	ldr	r3, [pc, #360]	; (8005ff0 <UART_SetConfig+0x360>)
 8005e88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e8a:	e011      	b.n	8005eb0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8c:	f7fe fb1e 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8005e90:	0003      	movs	r3, r0
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e94:	e00c      	b.n	8005eb0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e96:	2380      	movs	r3, #128	; 0x80
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e9c:	e008      	b.n	8005eb0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005ea2:	231a      	movs	r3, #26
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	19db      	adds	r3, r3, r7
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
        break;
 8005eae:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d100      	bne.n	8005eb8 <UART_SetConfig+0x228>
 8005eb6:	e147      	b.n	8006148 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ebc:	4b4d      	ldr	r3, [pc, #308]	; (8005ff4 <UART_SetConfig+0x364>)
 8005ebe:	0052      	lsls	r2, r2, #1
 8005ec0:	5ad3      	ldrh	r3, [r2, r3]
 8005ec2:	0019      	movs	r1, r3
 8005ec4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ec6:	f7fa f91d 	bl	8000104 <__udivsi3>
 8005eca:	0003      	movs	r3, r0
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	0013      	movs	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	189b      	adds	r3, r3, r2
 8005ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d305      	bcc.n	8005eea <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d906      	bls.n	8005ef8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005eea:	231a      	movs	r3, #26
 8005eec:	2220      	movs	r2, #32
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	19db      	adds	r3, r3, r7
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e127      	b.n	8006148 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	2300      	movs	r3, #0
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f04:	4b3b      	ldr	r3, [pc, #236]	; (8005ff4 <UART_SetConfig+0x364>)
 8005f06:	0052      	lsls	r2, r2, #1
 8005f08:	5ad3      	ldrh	r3, [r2, r3]
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	69b8      	ldr	r0, [r7, #24]
 8005f16:	69f9      	ldr	r1, [r7, #28]
 8005f18:	f7fa fa6a 	bl	80003f0 <__aeabi_uldivmod>
 8005f1c:	0002      	movs	r2, r0
 8005f1e:	000b      	movs	r3, r1
 8005f20:	0e11      	lsrs	r1, r2, #24
 8005f22:	021d      	lsls	r5, r3, #8
 8005f24:	430d      	orrs	r5, r1
 8005f26:	0214      	lsls	r4, r2, #8
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68b8      	ldr	r0, [r7, #8]
 8005f36:	68f9      	ldr	r1, [r7, #12]
 8005f38:	1900      	adds	r0, r0, r4
 8005f3a:	4169      	adcs	r1, r5
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	2300      	movs	r3, #0
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f7fa fa51 	bl	80003f0 <__aeabi_uldivmod>
 8005f4e:	0002      	movs	r2, r0
 8005f50:	000b      	movs	r3, r1
 8005f52:	0013      	movs	r3, r2
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f58:	23c0      	movs	r3, #192	; 0xc0
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d309      	bcc.n	8005f74 <UART_SetConfig+0x2e4>
 8005f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	035b      	lsls	r3, r3, #13
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d204      	bcs.n	8005f74 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e0e9      	b.n	8006148 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f74:	231a      	movs	r3, #26
 8005f76:	2220      	movs	r2, #32
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	19db      	adds	r3, r3, r7
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e0e2      	b.n	8006148 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	69da      	ldr	r2, [r3, #28]
 8005f86:	2380      	movs	r3, #128	; 0x80
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d000      	beq.n	8005f90 <UART_SetConfig+0x300>
 8005f8e:	e083      	b.n	8006098 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005f90:	231b      	movs	r3, #27
 8005f92:	2220      	movs	r2, #32
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	19db      	adds	r3, r3, r7
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d015      	beq.n	8005fca <UART_SetConfig+0x33a>
 8005f9e:	dc2b      	bgt.n	8005ff8 <UART_SetConfig+0x368>
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d00d      	beq.n	8005fc0 <UART_SetConfig+0x330>
 8005fa4:	dc28      	bgt.n	8005ff8 <UART_SetConfig+0x368>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <UART_SetConfig+0x320>
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d005      	beq.n	8005fba <UART_SetConfig+0x32a>
 8005fae:	e023      	b.n	8005ff8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fb0:	f7fe fb18 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb8:	e027      	b.n	800600a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <UART_SetConfig+0x360>)
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fbe:	e024      	b.n	800600a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fc0:	f7fe fa84 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc8:	e01f      	b.n	800600a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fd0:	e01b      	b.n	800600a <UART_SetConfig+0x37a>
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	cfff69f3 	.word	0xcfff69f3
 8005fd8:	ffffcfff 	.word	0xffffcfff
 8005fdc:	40008000 	.word	0x40008000
 8005fe0:	11fff4ff 	.word	0x11fff4ff
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40004400 	.word	0x40004400
 8005ff0:	00f42400 	.word	0x00f42400
 8005ff4:	08006a38 	.word	0x08006a38
      default:
        pclk = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005ffc:	231a      	movs	r3, #26
 8005ffe:	2220      	movs	r2, #32
 8006000:	189b      	adds	r3, r3, r2
 8006002:	19db      	adds	r3, r3, r7
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
        break;
 8006008:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600c:	2b00      	cmp	r3, #0
 800600e:	d100      	bne.n	8006012 <UART_SetConfig+0x382>
 8006010:	e09a      	b.n	8006148 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006016:	4b58      	ldr	r3, [pc, #352]	; (8006178 <UART_SetConfig+0x4e8>)
 8006018:	0052      	lsls	r2, r2, #1
 800601a:	5ad3      	ldrh	r3, [r2, r3]
 800601c:	0019      	movs	r1, r3
 800601e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006020:	f7fa f870 	bl	8000104 <__udivsi3>
 8006024:	0003      	movs	r3, r0
 8006026:	005a      	lsls	r2, r3, #1
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	085b      	lsrs	r3, r3, #1
 800602e:	18d2      	adds	r2, r2, r3
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	0019      	movs	r1, r3
 8006036:	0010      	movs	r0, r2
 8006038:	f7fa f864 	bl	8000104 <__udivsi3>
 800603c:	0003      	movs	r3, r0
 800603e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2b0f      	cmp	r3, #15
 8006044:	d921      	bls.n	800608a <UART_SetConfig+0x3fa>
 8006046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	025b      	lsls	r3, r3, #9
 800604c:	429a      	cmp	r2, r3
 800604e:	d21c      	bcs.n	800608a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	b29a      	uxth	r2, r3
 8006054:	200e      	movs	r0, #14
 8006056:	2420      	movs	r4, #32
 8006058:	1903      	adds	r3, r0, r4
 800605a:	19db      	adds	r3, r3, r7
 800605c:	210f      	movs	r1, #15
 800605e:	438a      	bics	r2, r1
 8006060:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	085b      	lsrs	r3, r3, #1
 8006066:	b29b      	uxth	r3, r3
 8006068:	2207      	movs	r2, #7
 800606a:	4013      	ands	r3, r2
 800606c:	b299      	uxth	r1, r3
 800606e:	1903      	adds	r3, r0, r4
 8006070:	19db      	adds	r3, r3, r7
 8006072:	1902      	adds	r2, r0, r4
 8006074:	19d2      	adds	r2, r2, r7
 8006076:	8812      	ldrh	r2, [r2, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	1902      	adds	r2, r0, r4
 8006082:	19d2      	adds	r2, r2, r7
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	60da      	str	r2, [r3, #12]
 8006088:	e05e      	b.n	8006148 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800608a:	231a      	movs	r3, #26
 800608c:	2220      	movs	r2, #32
 800608e:	189b      	adds	r3, r3, r2
 8006090:	19db      	adds	r3, r3, r7
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e057      	b.n	8006148 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006098:	231b      	movs	r3, #27
 800609a:	2220      	movs	r2, #32
 800609c:	189b      	adds	r3, r3, r2
 800609e:	19db      	adds	r3, r3, r7
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d015      	beq.n	80060d2 <UART_SetConfig+0x442>
 80060a6:	dc18      	bgt.n	80060da <UART_SetConfig+0x44a>
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d00d      	beq.n	80060c8 <UART_SetConfig+0x438>
 80060ac:	dc15      	bgt.n	80060da <UART_SetConfig+0x44a>
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <UART_SetConfig+0x428>
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d005      	beq.n	80060c2 <UART_SetConfig+0x432>
 80060b6:	e010      	b.n	80060da <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b8:	f7fe fa94 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 80060bc:	0003      	movs	r3, r0
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c0:	e014      	b.n	80060ec <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c2:	4b2e      	ldr	r3, [pc, #184]	; (800617c <UART_SetConfig+0x4ec>)
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c6:	e011      	b.n	80060ec <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060c8:	f7fe fa00 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 80060cc:	0003      	movs	r3, r0
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d0:	e00c      	b.n	80060ec <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d8:	e008      	b.n	80060ec <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80060de:	231a      	movs	r3, #26
 80060e0:	2220      	movs	r2, #32
 80060e2:	189b      	adds	r3, r3, r2
 80060e4:	19db      	adds	r3, r3, r7
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
        break;
 80060ea:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02a      	beq.n	8006148 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f6:	4b20      	ldr	r3, [pc, #128]	; (8006178 <UART_SetConfig+0x4e8>)
 80060f8:	0052      	lsls	r2, r2, #1
 80060fa:	5ad3      	ldrh	r3, [r2, r3]
 80060fc:	0019      	movs	r1, r3
 80060fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006100:	f7fa f800 	bl	8000104 <__udivsi3>
 8006104:	0003      	movs	r3, r0
 8006106:	001a      	movs	r2, r3
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	18d2      	adds	r2, r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	0019      	movs	r1, r3
 8006116:	0010      	movs	r0, r2
 8006118:	f7f9 fff4 	bl	8000104 <__udivsi3>
 800611c:	0003      	movs	r3, r0
 800611e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	2b0f      	cmp	r3, #15
 8006124:	d90a      	bls.n	800613c <UART_SetConfig+0x4ac>
 8006126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	025b      	lsls	r3, r3, #9
 800612c:	429a      	cmp	r2, r3
 800612e:	d205      	bcs.n	800613c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	b29a      	uxth	r2, r3
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60da      	str	r2, [r3, #12]
 800613a:	e005      	b.n	8006148 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800613c:	231a      	movs	r3, #26
 800613e:	2220      	movs	r2, #32
 8006140:	189b      	adds	r3, r3, r2
 8006142:	19db      	adds	r3, r3, r7
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	226a      	movs	r2, #106	; 0x6a
 800614c:	2101      	movs	r1, #1
 800614e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	2268      	movs	r2, #104	; 0x68
 8006154:	2101      	movs	r1, #1
 8006156:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	2200      	movs	r2, #0
 800615c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	2200      	movs	r2, #0
 8006162:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006164:	231a      	movs	r3, #26
 8006166:	2220      	movs	r2, #32
 8006168:	189b      	adds	r3, r3, r2
 800616a:	19db      	adds	r3, r3, r7
 800616c:	781b      	ldrb	r3, [r3, #0]
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b010      	add	sp, #64	; 0x40
 8006174:	bdb0      	pop	{r4, r5, r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	08006a38 	.word	0x08006a38
 800617c:	00f42400 	.word	0x00f42400

08006180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	2208      	movs	r2, #8
 800618e:	4013      	ands	r3, r2
 8006190:	d00b      	beq.n	80061aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a4a      	ldr	r2, [pc, #296]	; (80062c4 <UART_AdvFeatureConfig+0x144>)
 800619a:	4013      	ands	r3, r2
 800619c:	0019      	movs	r1, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d00b      	beq.n	80061cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4a43      	ldr	r2, [pc, #268]	; (80062c8 <UART_AdvFeatureConfig+0x148>)
 80061bc:	4013      	ands	r3, r2
 80061be:	0019      	movs	r1, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	2202      	movs	r2, #2
 80061d2:	4013      	ands	r3, r2
 80061d4:	d00b      	beq.n	80061ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a3b      	ldr	r2, [pc, #236]	; (80062cc <UART_AdvFeatureConfig+0x14c>)
 80061de:	4013      	ands	r3, r2
 80061e0:	0019      	movs	r1, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	2204      	movs	r2, #4
 80061f4:	4013      	ands	r3, r2
 80061f6:	d00b      	beq.n	8006210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4a34      	ldr	r2, [pc, #208]	; (80062d0 <UART_AdvFeatureConfig+0x150>)
 8006200:	4013      	ands	r3, r2
 8006202:	0019      	movs	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	2210      	movs	r2, #16
 8006216:	4013      	ands	r3, r2
 8006218:	d00b      	beq.n	8006232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a2c      	ldr	r2, [pc, #176]	; (80062d4 <UART_AdvFeatureConfig+0x154>)
 8006222:	4013      	ands	r3, r2
 8006224:	0019      	movs	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	2220      	movs	r2, #32
 8006238:	4013      	ands	r3, r2
 800623a:	d00b      	beq.n	8006254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <UART_AdvFeatureConfig+0x158>)
 8006244:	4013      	ands	r3, r2
 8006246:	0019      	movs	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	2240      	movs	r2, #64	; 0x40
 800625a:	4013      	ands	r3, r2
 800625c:	d01d      	beq.n	800629a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <UART_AdvFeatureConfig+0x15c>)
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	035b      	lsls	r3, r3, #13
 800627e:	429a      	cmp	r2, r3
 8006280:	d10b      	bne.n	800629a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <UART_AdvFeatureConfig+0x160>)
 800628a:	4013      	ands	r3, r2
 800628c:	0019      	movs	r1, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	2280      	movs	r2, #128	; 0x80
 80062a0:	4013      	ands	r3, r2
 80062a2:	d00b      	beq.n	80062bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4a0e      	ldr	r2, [pc, #56]	; (80062e4 <UART_AdvFeatureConfig+0x164>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	0019      	movs	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	ffff7fff 	.word	0xffff7fff
 80062c8:	fffdffff 	.word	0xfffdffff
 80062cc:	fffeffff 	.word	0xfffeffff
 80062d0:	fffbffff 	.word	0xfffbffff
 80062d4:	ffffefff 	.word	0xffffefff
 80062d8:	ffffdfff 	.word	0xffffdfff
 80062dc:	ffefffff 	.word	0xffefffff
 80062e0:	ff9fffff 	.word	0xff9fffff
 80062e4:	fff7ffff 	.word	0xfff7ffff

080062e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b092      	sub	sp, #72	; 0x48
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2290      	movs	r2, #144	; 0x90
 80062f4:	2100      	movs	r1, #0
 80062f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f8:	f7fc fa86 	bl	8002808 <HAL_GetTick>
 80062fc:	0003      	movs	r3, r0
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2208      	movs	r2, #8
 8006308:	4013      	ands	r3, r2
 800630a:	2b08      	cmp	r3, #8
 800630c:	d12d      	bne.n	800636a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	0391      	lsls	r1, r2, #14
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4a47      	ldr	r2, [pc, #284]	; (8006434 <UART_CheckIdleState+0x14c>)
 8006318:	9200      	str	r2, [sp, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	f000 f88e 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d022      	beq.n	800636a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006324:	f3ef 8310 	mrs	r3, PRIMASK
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800632c:	63bb      	str	r3, [r7, #56]	; 0x38
 800632e:	2301      	movs	r3, #1
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	f383 8810 	msr	PRIMASK, r3
}
 8006338:	46c0      	nop			; (mov r8, r8)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	438a      	bics	r2, r1
 8006348:	601a      	str	r2, [r3, #0]
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	f383 8810 	msr	PRIMASK, r3
}
 8006354:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2288      	movs	r2, #136	; 0x88
 800635a:	2120      	movs	r1, #32
 800635c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2284      	movs	r2, #132	; 0x84
 8006362:	2100      	movs	r1, #0
 8006364:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e060      	b.n	800642c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2204      	movs	r2, #4
 8006372:	4013      	ands	r3, r2
 8006374:	2b04      	cmp	r3, #4
 8006376:	d146      	bne.n	8006406 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637a:	2280      	movs	r2, #128	; 0x80
 800637c:	03d1      	lsls	r1, r2, #15
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4a2c      	ldr	r2, [pc, #176]	; (8006434 <UART_CheckIdleState+0x14c>)
 8006382:	9200      	str	r2, [sp, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	f000 f859 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 800638a:	1e03      	subs	r3, r0, #0
 800638c:	d03b      	beq.n	8006406 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638e:	f3ef 8310 	mrs	r3, PRIMASK
 8006392:	60fb      	str	r3, [r7, #12]
  return(result);
 8006394:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
 8006398:	2301      	movs	r3, #1
 800639a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f383 8810 	msr	PRIMASK, r3
}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4922      	ldr	r1, [pc, #136]	; (8006438 <UART_CheckIdleState+0x150>)
 80063b0:	400a      	ands	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f383 8810 	msr	PRIMASK, r3
}
 80063be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c0:	f3ef 8310 	mrs	r3, PRIMASK
 80063c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80063c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ca:	2301      	movs	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f383 8810 	msr	PRIMASK, r3
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2101      	movs	r1, #1
 80063e2:	438a      	bics	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f383 8810 	msr	PRIMASK, r3
}
 80063f0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	228c      	movs	r2, #140	; 0x8c
 80063f6:	2120      	movs	r1, #32
 80063f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2284      	movs	r2, #132	; 0x84
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e012      	b.n	800642c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2288      	movs	r2, #136	; 0x88
 800640a:	2120      	movs	r1, #32
 800640c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	228c      	movs	r2, #140	; 0x8c
 8006412:	2120      	movs	r1, #32
 8006414:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2284      	movs	r2, #132	; 0x84
 8006426:	2100      	movs	r1, #0
 8006428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	0018      	movs	r0, r3
 800642e:	46bd      	mov	sp, r7
 8006430:	b010      	add	sp, #64	; 0x40
 8006432:	bd80      	pop	{r7, pc}
 8006434:	01ffffff 	.word	0x01ffffff
 8006438:	fffffedf 	.word	0xfffffedf

0800643c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	1dfb      	adds	r3, r7, #7
 800644a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644c:	e051      	b.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	3301      	adds	r3, #1
 8006452:	d04e      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fc f9d8 	bl	8002808 <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e051      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2204      	movs	r2, #4
 8006476:	4013      	ands	r3, r2
 8006478:	d03b      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d038      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d035      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	2208      	movs	r2, #8
 800648e:	4013      	ands	r3, r2
 8006490:	2b08      	cmp	r3, #8
 8006492:	d111      	bne.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2208      	movs	r2, #8
 800649a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f83c 	bl	800651c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2290      	movs	r2, #144	; 0x90
 80064a8:	2108      	movs	r1, #8
 80064aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2284      	movs	r2, #132	; 0x84
 80064b0:	2100      	movs	r1, #0
 80064b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e02c      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	2380      	movs	r3, #128	; 0x80
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	401a      	ands	r2, r3
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d112      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2280      	movs	r2, #128	; 0x80
 80064d2:	0112      	lsls	r2, r2, #4
 80064d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	0018      	movs	r0, r3
 80064da:	f000 f81f 	bl	800651c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2290      	movs	r2, #144	; 0x90
 80064e2:	2120      	movs	r1, #32
 80064e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2284      	movs	r2, #132	; 0x84
 80064ea:	2100      	movs	r1, #0
 80064ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e00f      	b.n	8006512 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	4013      	ands	r3, r2
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	425a      	negs	r2, r3
 8006502:	4153      	adcs	r3, r2
 8006504:	b2db      	uxtb	r3, r3
 8006506:	001a      	movs	r2, r3
 8006508:	1dfb      	adds	r3, r7, #7
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d09e      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b004      	add	sp, #16
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b08e      	sub	sp, #56	; 0x38
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006524:	f3ef 8310 	mrs	r3, PRIMASK
 8006528:	617b      	str	r3, [r7, #20]
  return(result);
 800652a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	f383 8810 	msr	PRIMASK, r3
}
 8006538:	46c0      	nop			; (mov r8, r8)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4926      	ldr	r1, [pc, #152]	; (80065e0 <UART_EndRxTransfer+0xc4>)
 8006546:	400a      	ands	r2, r1
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f383 8810 	msr	PRIMASK, r3
}
 8006554:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006556:	f3ef 8310 	mrs	r3, PRIMASK
 800655a:	623b      	str	r3, [r7, #32]
  return(result);
 800655c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800655e:	633b      	str	r3, [r7, #48]	; 0x30
 8006560:	2301      	movs	r3, #1
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f383 8810 	msr	PRIMASK, r3
}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	491b      	ldr	r1, [pc, #108]	; (80065e4 <UART_EndRxTransfer+0xc8>)
 8006578:	400a      	ands	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	f383 8810 	msr	PRIMASK, r3
}
 8006586:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d118      	bne.n	80065c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006590:	f3ef 8310 	mrs	r3, PRIMASK
 8006594:	60bb      	str	r3, [r7, #8]
  return(result);
 8006596:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659a:	2301      	movs	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f383 8810 	msr	PRIMASK, r3
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2110      	movs	r1, #16
 80065b2:	438a      	bics	r2, r1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f383 8810 	msr	PRIMASK, r3
}
 80065c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	228c      	movs	r2, #140	; 0x8c
 80065c6:	2120      	movs	r1, #32
 80065c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	46bd      	mov	sp, r7
 80065da:	b00e      	add	sp, #56	; 0x38
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	fffffedf 	.word	0xfffffedf
 80065e4:	effffffe 	.word	0xeffffffe

080065e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	225e      	movs	r2, #94	; 0x5e
 80065fa:	2100      	movs	r1, #0
 80065fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2256      	movs	r2, #86	; 0x56
 8006602:	2100      	movs	r1, #0
 8006604:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	0018      	movs	r0, r3
 800660a:	f7ff fb2d 	bl	8005c68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bd80      	pop	{r7, pc}

08006616 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b086      	sub	sp, #24
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800661e:	f3ef 8310 	mrs	r3, PRIMASK
 8006622:	60bb      	str	r3, [r7, #8]
  return(result);
 8006624:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	2301      	movs	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f383 8810 	msr	PRIMASK, r3
}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2140      	movs	r1, #64	; 0x40
 8006640:	438a      	bics	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2288      	movs	r2, #136	; 0x88
 8006654:	2120      	movs	r1, #32
 8006656:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f7ff faf9 	bl	8005c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	46bd      	mov	sp, r7
 800666a:	b006      	add	sp, #24
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	46bd      	mov	sp, r7
 800667a:	b002      	add	sp, #8
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2284      	movs	r2, #132	; 0x84
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e027      	b.n	8006706 <HAL_UARTEx_DisableFifoMode+0x66>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2284      	movs	r2, #132	; 0x84
 80066ba:	2101      	movs	r1, #1
 80066bc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2288      	movs	r2, #136	; 0x88
 80066c2:	2124      	movs	r1, #36	; 0x24
 80066c4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2101      	movs	r1, #1
 80066da:	438a      	bics	r2, r1
 80066dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <HAL_UARTEx_DisableFifoMode+0x70>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2288      	movs	r2, #136	; 0x88
 80066f8:	2120      	movs	r1, #32
 80066fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2284      	movs	r2, #132	; 0x84
 8006700:	2100      	movs	r1, #0
 8006702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b004      	add	sp, #16
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	dfffffff 	.word	0xdfffffff

08006714 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2284      	movs	r2, #132	; 0x84
 8006722:	5c9b      	ldrb	r3, [r3, r2]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006728:	2302      	movs	r3, #2
 800672a:	e02e      	b.n	800678a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2284      	movs	r2, #132	; 0x84
 8006730:	2101      	movs	r1, #1
 8006732:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2288      	movs	r2, #136	; 0x88
 8006738:	2124      	movs	r1, #36	; 0x24
 800673a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2101      	movs	r1, #1
 8006750:	438a      	bics	r2, r1
 8006752:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	08d9      	lsrs	r1, r3, #3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0018      	movs	r0, r3
 800676c:	f000 f854 	bl	8006818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2288      	movs	r2, #136	; 0x88
 800677c:	2120      	movs	r1, #32
 800677e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2284      	movs	r2, #132	; 0x84
 8006784:	2100      	movs	r1, #0
 8006786:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	0018      	movs	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	b004      	add	sp, #16
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2284      	movs	r2, #132	; 0x84
 80067a2:	5c9b      	ldrb	r3, [r3, r2]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e02f      	b.n	800680c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2284      	movs	r2, #132	; 0x84
 80067b0:	2101      	movs	r1, #1
 80067b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2288      	movs	r2, #136	; 0x88
 80067b8:	2124      	movs	r1, #36	; 0x24
 80067ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2101      	movs	r1, #1
 80067d0:	438a      	bics	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	4a0e      	ldr	r2, [pc, #56]	; (8006814 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80067dc:	4013      	ands	r3, r2
 80067de:	0019      	movs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 f813 	bl	8006818 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2288      	movs	r2, #136	; 0x88
 80067fe:	2120      	movs	r1, #32
 8006800:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2284      	movs	r2, #132	; 0x84
 8006806:	2100      	movs	r1, #0
 8006808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b004      	add	sp, #16
 8006812:	bd80      	pop	{r7, pc}
 8006814:	f1ffffff 	.word	0xf1ffffff

08006818 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006824:	2b00      	cmp	r3, #0
 8006826:	d108      	bne.n	800683a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	226a      	movs	r2, #106	; 0x6a
 800682c:	2101      	movs	r1, #1
 800682e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2268      	movs	r2, #104	; 0x68
 8006834:	2101      	movs	r1, #1
 8006836:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006838:	e043      	b.n	80068c2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800683a:	260f      	movs	r6, #15
 800683c:	19bb      	adds	r3, r7, r6
 800683e:	2208      	movs	r2, #8
 8006840:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006842:	200e      	movs	r0, #14
 8006844:	183b      	adds	r3, r7, r0
 8006846:	2208      	movs	r2, #8
 8006848:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	0e5b      	lsrs	r3, r3, #25
 8006852:	b2da      	uxtb	r2, r3
 8006854:	240d      	movs	r4, #13
 8006856:	193b      	adds	r3, r7, r4
 8006858:	2107      	movs	r1, #7
 800685a:	400a      	ands	r2, r1
 800685c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	0f5b      	lsrs	r3, r3, #29
 8006866:	b2da      	uxtb	r2, r3
 8006868:	250c      	movs	r5, #12
 800686a:	197b      	adds	r3, r7, r5
 800686c:	2107      	movs	r1, #7
 800686e:	400a      	ands	r2, r1
 8006870:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006872:	183b      	adds	r3, r7, r0
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	197a      	adds	r2, r7, r5
 8006878:	7812      	ldrb	r2, [r2, #0]
 800687a:	4914      	ldr	r1, [pc, #80]	; (80068cc <UARTEx_SetNbDataToProcess+0xb4>)
 800687c:	5c8a      	ldrb	r2, [r1, r2]
 800687e:	435a      	muls	r2, r3
 8006880:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006882:	197b      	adds	r3, r7, r5
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4a12      	ldr	r2, [pc, #72]	; (80068d0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006888:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800688a:	0019      	movs	r1, r3
 800688c:	f7f9 fcc4 	bl	8000218 <__divsi3>
 8006890:	0003      	movs	r3, r0
 8006892:	b299      	uxth	r1, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	226a      	movs	r2, #106	; 0x6a
 8006898:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800689a:	19bb      	adds	r3, r7, r6
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	193a      	adds	r2, r7, r4
 80068a0:	7812      	ldrb	r2, [r2, #0]
 80068a2:	490a      	ldr	r1, [pc, #40]	; (80068cc <UARTEx_SetNbDataToProcess+0xb4>)
 80068a4:	5c8a      	ldrb	r2, [r1, r2]
 80068a6:	435a      	muls	r2, r3
 80068a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80068aa:	193b      	adds	r3, r7, r4
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <UARTEx_SetNbDataToProcess+0xb8>)
 80068b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068b2:	0019      	movs	r1, r3
 80068b4:	f7f9 fcb0 	bl	8000218 <__divsi3>
 80068b8:	0003      	movs	r3, r0
 80068ba:	b299      	uxth	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2268      	movs	r2, #104	; 0x68
 80068c0:	5299      	strh	r1, [r3, r2]
}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b005      	add	sp, #20
 80068c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	08006a50 	.word	0x08006a50
 80068d0:	08006a58 	.word	0x08006a58

080068d4 <memset>:
 80068d4:	0003      	movs	r3, r0
 80068d6:	1882      	adds	r2, r0, r2
 80068d8:	4293      	cmp	r3, r2
 80068da:	d100      	bne.n	80068de <memset+0xa>
 80068dc:	4770      	bx	lr
 80068de:	7019      	strb	r1, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	e7f9      	b.n	80068d8 <memset+0x4>

080068e4 <__libc_init_array>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	2600      	movs	r6, #0
 80068e8:	4c0c      	ldr	r4, [pc, #48]	; (800691c <__libc_init_array+0x38>)
 80068ea:	4d0d      	ldr	r5, [pc, #52]	; (8006920 <__libc_init_array+0x3c>)
 80068ec:	1b64      	subs	r4, r4, r5
 80068ee:	10a4      	asrs	r4, r4, #2
 80068f0:	42a6      	cmp	r6, r4
 80068f2:	d109      	bne.n	8006908 <__libc_init_array+0x24>
 80068f4:	2600      	movs	r6, #0
 80068f6:	f000 f819 	bl	800692c <_init>
 80068fa:	4c0a      	ldr	r4, [pc, #40]	; (8006924 <__libc_init_array+0x40>)
 80068fc:	4d0a      	ldr	r5, [pc, #40]	; (8006928 <__libc_init_array+0x44>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	42a6      	cmp	r6, r4
 8006904:	d105      	bne.n	8006912 <__libc_init_array+0x2e>
 8006906:	bd70      	pop	{r4, r5, r6, pc}
 8006908:	00b3      	lsls	r3, r6, #2
 800690a:	58eb      	ldr	r3, [r5, r3]
 800690c:	4798      	blx	r3
 800690e:	3601      	adds	r6, #1
 8006910:	e7ee      	b.n	80068f0 <__libc_init_array+0xc>
 8006912:	00b3      	lsls	r3, r6, #2
 8006914:	58eb      	ldr	r3, [r5, r3]
 8006916:	4798      	blx	r3
 8006918:	3601      	adds	r6, #1
 800691a:	e7f2      	b.n	8006902 <__libc_init_array+0x1e>
 800691c:	08006a68 	.word	0x08006a68
 8006920:	08006a68 	.word	0x08006a68
 8006924:	08006a6c 	.word	0x08006a6c
 8006928:	08006a68 	.word	0x08006a68

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	46c0      	nop			; (mov r8, r8)
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
