
Proto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004574  08004574  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004574  08004574  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004574  08004574  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004574  08004574  00014574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004578  08004578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800457c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08004588  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08004588  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9e5  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3a  00000000  00000000  0002ca5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0002e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab5  00000000  00000000  0002f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ae3  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010291  00000000  00000000  00045be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c8ce  00000000  00000000  00055e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003338  00000000  00000000  000e2740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e5a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004488 	.word	0x08004488

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004488 	.word	0x08004488

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 ff21 	bl	800106c <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe81 	bl	8000f38 <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 faf8 	bl	8000834 <__aeabi_dsub>
 8000244:	f000 fe78 	bl	8000f38 <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_ddiv>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	030c      	lsls	r4, r1, #12
 8000266:	001f      	movs	r7, r3
 8000268:	004b      	lsls	r3, r1, #1
 800026a:	4681      	mov	r9, r0
 800026c:	4692      	mov	sl, r2
 800026e:	0005      	movs	r5, r0
 8000270:	b085      	sub	sp, #20
 8000272:	0b24      	lsrs	r4, r4, #12
 8000274:	0d5b      	lsrs	r3, r3, #21
 8000276:	0fce      	lsrs	r6, r1, #31
 8000278:	2b00      	cmp	r3, #0
 800027a:	d100      	bne.n	800027e <__aeabi_ddiv+0x26>
 800027c:	e152      	b.n	8000524 <__aeabi_ddiv+0x2cc>
 800027e:	4ad2      	ldr	r2, [pc, #840]	; (80005c8 <__aeabi_ddiv+0x370>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_ddiv+0x2e>
 8000284:	e16e      	b.n	8000564 <__aeabi_ddiv+0x30c>
 8000286:	0f42      	lsrs	r2, r0, #29
 8000288:	00e4      	lsls	r4, r4, #3
 800028a:	4314      	orrs	r4, r2
 800028c:	2280      	movs	r2, #128	; 0x80
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	4322      	orrs	r2, r4
 8000292:	4690      	mov	r8, r2
 8000294:	4acd      	ldr	r2, [pc, #820]	; (80005cc <__aeabi_ddiv+0x374>)
 8000296:	00c5      	lsls	r5, r0, #3
 8000298:	4693      	mov	fp, r2
 800029a:	449b      	add	fp, r3
 800029c:	2300      	movs	r3, #0
 800029e:	4699      	mov	r9, r3
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	033c      	lsls	r4, r7, #12
 80002a4:	007b      	lsls	r3, r7, #1
 80002a6:	4650      	mov	r0, sl
 80002a8:	0b24      	lsrs	r4, r4, #12
 80002aa:	0d5b      	lsrs	r3, r3, #21
 80002ac:	0fff      	lsrs	r7, r7, #31
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d100      	bne.n	80002b4 <__aeabi_ddiv+0x5c>
 80002b2:	e11a      	b.n	80004ea <__aeabi_ddiv+0x292>
 80002b4:	4ac4      	ldr	r2, [pc, #784]	; (80005c8 <__aeabi_ddiv+0x370>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d100      	bne.n	80002bc <__aeabi_ddiv+0x64>
 80002ba:	e15e      	b.n	800057a <__aeabi_ddiv+0x322>
 80002bc:	0f42      	lsrs	r2, r0, #29
 80002be:	00e4      	lsls	r4, r4, #3
 80002c0:	4322      	orrs	r2, r4
 80002c2:	2480      	movs	r4, #128	; 0x80
 80002c4:	0424      	lsls	r4, r4, #16
 80002c6:	4314      	orrs	r4, r2
 80002c8:	4ac0      	ldr	r2, [pc, #768]	; (80005cc <__aeabi_ddiv+0x374>)
 80002ca:	00c1      	lsls	r1, r0, #3
 80002cc:	4694      	mov	ip, r2
 80002ce:	465a      	mov	r2, fp
 80002d0:	4463      	add	r3, ip
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	469b      	mov	fp, r3
 80002d6:	2000      	movs	r0, #0
 80002d8:	0033      	movs	r3, r6
 80002da:	407b      	eors	r3, r7
 80002dc:	469a      	mov	sl, r3
 80002de:	464b      	mov	r3, r9
 80002e0:	2b0f      	cmp	r3, #15
 80002e2:	d827      	bhi.n	8000334 <__aeabi_ddiv+0xdc>
 80002e4:	4aba      	ldr	r2, [pc, #744]	; (80005d0 <__aeabi_ddiv+0x378>)
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	58d3      	ldr	r3, [r2, r3]
 80002ea:	469f      	mov	pc, r3
 80002ec:	46b2      	mov	sl, r6
 80002ee:	9b00      	ldr	r3, [sp, #0]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d016      	beq.n	8000322 <__aeabi_ddiv+0xca>
 80002f4:	2b03      	cmp	r3, #3
 80002f6:	d100      	bne.n	80002fa <__aeabi_ddiv+0xa2>
 80002f8:	e287      	b.n	800080a <__aeabi_ddiv+0x5b2>
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d000      	beq.n	8000300 <__aeabi_ddiv+0xa8>
 80002fe:	e0d5      	b.n	80004ac <__aeabi_ddiv+0x254>
 8000300:	2300      	movs	r3, #0
 8000302:	2200      	movs	r2, #0
 8000304:	2500      	movs	r5, #0
 8000306:	051b      	lsls	r3, r3, #20
 8000308:	4313      	orrs	r3, r2
 800030a:	4652      	mov	r2, sl
 800030c:	07d2      	lsls	r2, r2, #31
 800030e:	4313      	orrs	r3, r2
 8000310:	0028      	movs	r0, r5
 8000312:	0019      	movs	r1, r3
 8000314:	b005      	add	sp, #20
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	46bb      	mov	fp, r7
 800031a:	46b2      	mov	sl, r6
 800031c:	46a9      	mov	r9, r5
 800031e:	46a0      	mov	r8, r4
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000322:	2200      	movs	r2, #0
 8000324:	2500      	movs	r5, #0
 8000326:	4ba8      	ldr	r3, [pc, #672]	; (80005c8 <__aeabi_ddiv+0x370>)
 8000328:	e7ed      	b.n	8000306 <__aeabi_ddiv+0xae>
 800032a:	46ba      	mov	sl, r7
 800032c:	46a0      	mov	r8, r4
 800032e:	000d      	movs	r5, r1
 8000330:	9000      	str	r0, [sp, #0]
 8000332:	e7dc      	b.n	80002ee <__aeabi_ddiv+0x96>
 8000334:	4544      	cmp	r4, r8
 8000336:	d200      	bcs.n	800033a <__aeabi_ddiv+0xe2>
 8000338:	e1c4      	b.n	80006c4 <__aeabi_ddiv+0x46c>
 800033a:	d100      	bne.n	800033e <__aeabi_ddiv+0xe6>
 800033c:	e1bf      	b.n	80006be <__aeabi_ddiv+0x466>
 800033e:	2301      	movs	r3, #1
 8000340:	425b      	negs	r3, r3
 8000342:	469c      	mov	ip, r3
 8000344:	002e      	movs	r6, r5
 8000346:	4640      	mov	r0, r8
 8000348:	2500      	movs	r5, #0
 800034a:	44e3      	add	fp, ip
 800034c:	0223      	lsls	r3, r4, #8
 800034e:	0e0c      	lsrs	r4, r1, #24
 8000350:	431c      	orrs	r4, r3
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	4699      	mov	r9, r3
 8000356:	0423      	lsls	r3, r4, #16
 8000358:	020a      	lsls	r2, r1, #8
 800035a:	0c1f      	lsrs	r7, r3, #16
 800035c:	4649      	mov	r1, r9
 800035e:	9200      	str	r2, [sp, #0]
 8000360:	9701      	str	r7, [sp, #4]
 8000362:	f7ff ff55 	bl	8000210 <__aeabi_uidivmod>
 8000366:	0002      	movs	r2, r0
 8000368:	437a      	muls	r2, r7
 800036a:	040b      	lsls	r3, r1, #16
 800036c:	0c31      	lsrs	r1, r6, #16
 800036e:	4680      	mov	r8, r0
 8000370:	4319      	orrs	r1, r3
 8000372:	428a      	cmp	r2, r1
 8000374:	d907      	bls.n	8000386 <__aeabi_ddiv+0x12e>
 8000376:	2301      	movs	r3, #1
 8000378:	425b      	negs	r3, r3
 800037a:	469c      	mov	ip, r3
 800037c:	1909      	adds	r1, r1, r4
 800037e:	44e0      	add	r8, ip
 8000380:	428c      	cmp	r4, r1
 8000382:	d800      	bhi.n	8000386 <__aeabi_ddiv+0x12e>
 8000384:	e201      	b.n	800078a <__aeabi_ddiv+0x532>
 8000386:	1a88      	subs	r0, r1, r2
 8000388:	4649      	mov	r1, r9
 800038a:	f7ff ff41 	bl	8000210 <__aeabi_uidivmod>
 800038e:	9a01      	ldr	r2, [sp, #4]
 8000390:	0436      	lsls	r6, r6, #16
 8000392:	4342      	muls	r2, r0
 8000394:	0409      	lsls	r1, r1, #16
 8000396:	0c36      	lsrs	r6, r6, #16
 8000398:	0003      	movs	r3, r0
 800039a:	430e      	orrs	r6, r1
 800039c:	42b2      	cmp	r2, r6
 800039e:	d904      	bls.n	80003aa <__aeabi_ddiv+0x152>
 80003a0:	1936      	adds	r6, r6, r4
 80003a2:	3b01      	subs	r3, #1
 80003a4:	42b4      	cmp	r4, r6
 80003a6:	d800      	bhi.n	80003aa <__aeabi_ddiv+0x152>
 80003a8:	e1e9      	b.n	800077e <__aeabi_ddiv+0x526>
 80003aa:	1ab0      	subs	r0, r6, r2
 80003ac:	4642      	mov	r2, r8
 80003ae:	9e00      	ldr	r6, [sp, #0]
 80003b0:	0412      	lsls	r2, r2, #16
 80003b2:	431a      	orrs	r2, r3
 80003b4:	0c33      	lsrs	r3, r6, #16
 80003b6:	001f      	movs	r7, r3
 80003b8:	0c11      	lsrs	r1, r2, #16
 80003ba:	4690      	mov	r8, r2
 80003bc:	9302      	str	r3, [sp, #8]
 80003be:	0413      	lsls	r3, r2, #16
 80003c0:	0432      	lsls	r2, r6, #16
 80003c2:	0c16      	lsrs	r6, r2, #16
 80003c4:	0032      	movs	r2, r6
 80003c6:	0c1b      	lsrs	r3, r3, #16
 80003c8:	435a      	muls	r2, r3
 80003ca:	9603      	str	r6, [sp, #12]
 80003cc:	437b      	muls	r3, r7
 80003ce:	434e      	muls	r6, r1
 80003d0:	4379      	muls	r1, r7
 80003d2:	0c17      	lsrs	r7, r2, #16
 80003d4:	46bc      	mov	ip, r7
 80003d6:	199b      	adds	r3, r3, r6
 80003d8:	4463      	add	r3, ip
 80003da:	429e      	cmp	r6, r3
 80003dc:	d903      	bls.n	80003e6 <__aeabi_ddiv+0x18e>
 80003de:	2680      	movs	r6, #128	; 0x80
 80003e0:	0276      	lsls	r6, r6, #9
 80003e2:	46b4      	mov	ip, r6
 80003e4:	4461      	add	r1, ip
 80003e6:	0c1e      	lsrs	r6, r3, #16
 80003e8:	1871      	adds	r1, r6, r1
 80003ea:	0416      	lsls	r6, r2, #16
 80003ec:	041b      	lsls	r3, r3, #16
 80003ee:	0c36      	lsrs	r6, r6, #16
 80003f0:	199e      	adds	r6, r3, r6
 80003f2:	4288      	cmp	r0, r1
 80003f4:	d302      	bcc.n	80003fc <__aeabi_ddiv+0x1a4>
 80003f6:	d112      	bne.n	800041e <__aeabi_ddiv+0x1c6>
 80003f8:	42b5      	cmp	r5, r6
 80003fa:	d210      	bcs.n	800041e <__aeabi_ddiv+0x1c6>
 80003fc:	4643      	mov	r3, r8
 80003fe:	1e5a      	subs	r2, r3, #1
 8000400:	9b00      	ldr	r3, [sp, #0]
 8000402:	469c      	mov	ip, r3
 8000404:	4465      	add	r5, ip
 8000406:	001f      	movs	r7, r3
 8000408:	429d      	cmp	r5, r3
 800040a:	419b      	sbcs	r3, r3
 800040c:	425b      	negs	r3, r3
 800040e:	191b      	adds	r3, r3, r4
 8000410:	18c0      	adds	r0, r0, r3
 8000412:	4284      	cmp	r4, r0
 8000414:	d200      	bcs.n	8000418 <__aeabi_ddiv+0x1c0>
 8000416:	e19e      	b.n	8000756 <__aeabi_ddiv+0x4fe>
 8000418:	d100      	bne.n	800041c <__aeabi_ddiv+0x1c4>
 800041a:	e199      	b.n	8000750 <__aeabi_ddiv+0x4f8>
 800041c:	4690      	mov	r8, r2
 800041e:	1bae      	subs	r6, r5, r6
 8000420:	42b5      	cmp	r5, r6
 8000422:	41ad      	sbcs	r5, r5
 8000424:	1a40      	subs	r0, r0, r1
 8000426:	426d      	negs	r5, r5
 8000428:	1b40      	subs	r0, r0, r5
 800042a:	4284      	cmp	r4, r0
 800042c:	d100      	bne.n	8000430 <__aeabi_ddiv+0x1d8>
 800042e:	e1d2      	b.n	80007d6 <__aeabi_ddiv+0x57e>
 8000430:	4649      	mov	r1, r9
 8000432:	f7ff feed 	bl	8000210 <__aeabi_uidivmod>
 8000436:	9a01      	ldr	r2, [sp, #4]
 8000438:	040b      	lsls	r3, r1, #16
 800043a:	4342      	muls	r2, r0
 800043c:	0c31      	lsrs	r1, r6, #16
 800043e:	0005      	movs	r5, r0
 8000440:	4319      	orrs	r1, r3
 8000442:	428a      	cmp	r2, r1
 8000444:	d900      	bls.n	8000448 <__aeabi_ddiv+0x1f0>
 8000446:	e16c      	b.n	8000722 <__aeabi_ddiv+0x4ca>
 8000448:	1a88      	subs	r0, r1, r2
 800044a:	4649      	mov	r1, r9
 800044c:	f7ff fee0 	bl	8000210 <__aeabi_uidivmod>
 8000450:	9a01      	ldr	r2, [sp, #4]
 8000452:	0436      	lsls	r6, r6, #16
 8000454:	4342      	muls	r2, r0
 8000456:	0409      	lsls	r1, r1, #16
 8000458:	0c36      	lsrs	r6, r6, #16
 800045a:	0003      	movs	r3, r0
 800045c:	430e      	orrs	r6, r1
 800045e:	42b2      	cmp	r2, r6
 8000460:	d900      	bls.n	8000464 <__aeabi_ddiv+0x20c>
 8000462:	e153      	b.n	800070c <__aeabi_ddiv+0x4b4>
 8000464:	9803      	ldr	r0, [sp, #12]
 8000466:	1ab6      	subs	r6, r6, r2
 8000468:	0002      	movs	r2, r0
 800046a:	042d      	lsls	r5, r5, #16
 800046c:	431d      	orrs	r5, r3
 800046e:	9f02      	ldr	r7, [sp, #8]
 8000470:	042b      	lsls	r3, r5, #16
 8000472:	0c1b      	lsrs	r3, r3, #16
 8000474:	435a      	muls	r2, r3
 8000476:	437b      	muls	r3, r7
 8000478:	469c      	mov	ip, r3
 800047a:	0c29      	lsrs	r1, r5, #16
 800047c:	4348      	muls	r0, r1
 800047e:	0c13      	lsrs	r3, r2, #16
 8000480:	4484      	add	ip, r0
 8000482:	4463      	add	r3, ip
 8000484:	4379      	muls	r1, r7
 8000486:	4298      	cmp	r0, r3
 8000488:	d903      	bls.n	8000492 <__aeabi_ddiv+0x23a>
 800048a:	2080      	movs	r0, #128	; 0x80
 800048c:	0240      	lsls	r0, r0, #9
 800048e:	4684      	mov	ip, r0
 8000490:	4461      	add	r1, ip
 8000492:	0c18      	lsrs	r0, r3, #16
 8000494:	0412      	lsls	r2, r2, #16
 8000496:	041b      	lsls	r3, r3, #16
 8000498:	0c12      	lsrs	r2, r2, #16
 800049a:	1840      	adds	r0, r0, r1
 800049c:	189b      	adds	r3, r3, r2
 800049e:	4286      	cmp	r6, r0
 80004a0:	d200      	bcs.n	80004a4 <__aeabi_ddiv+0x24c>
 80004a2:	e100      	b.n	80006a6 <__aeabi_ddiv+0x44e>
 80004a4:	d100      	bne.n	80004a8 <__aeabi_ddiv+0x250>
 80004a6:	e0fb      	b.n	80006a0 <__aeabi_ddiv+0x448>
 80004a8:	2301      	movs	r3, #1
 80004aa:	431d      	orrs	r5, r3
 80004ac:	4b49      	ldr	r3, [pc, #292]	; (80005d4 <__aeabi_ddiv+0x37c>)
 80004ae:	445b      	add	r3, fp
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dc00      	bgt.n	80004b6 <__aeabi_ddiv+0x25e>
 80004b4:	e0aa      	b.n	800060c <__aeabi_ddiv+0x3b4>
 80004b6:	076a      	lsls	r2, r5, #29
 80004b8:	d000      	beq.n	80004bc <__aeabi_ddiv+0x264>
 80004ba:	e13d      	b.n	8000738 <__aeabi_ddiv+0x4e0>
 80004bc:	08e9      	lsrs	r1, r5, #3
 80004be:	4642      	mov	r2, r8
 80004c0:	01d2      	lsls	r2, r2, #7
 80004c2:	d506      	bpl.n	80004d2 <__aeabi_ddiv+0x27a>
 80004c4:	4642      	mov	r2, r8
 80004c6:	4b44      	ldr	r3, [pc, #272]	; (80005d8 <__aeabi_ddiv+0x380>)
 80004c8:	401a      	ands	r2, r3
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	4690      	mov	r8, r2
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	445b      	add	r3, fp
 80004d2:	4a42      	ldr	r2, [pc, #264]	; (80005dc <__aeabi_ddiv+0x384>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	dd00      	ble.n	80004da <__aeabi_ddiv+0x282>
 80004d8:	e723      	b.n	8000322 <__aeabi_ddiv+0xca>
 80004da:	4642      	mov	r2, r8
 80004dc:	055b      	lsls	r3, r3, #21
 80004de:	0755      	lsls	r5, r2, #29
 80004e0:	0252      	lsls	r2, r2, #9
 80004e2:	430d      	orrs	r5, r1
 80004e4:	0b12      	lsrs	r2, r2, #12
 80004e6:	0d5b      	lsrs	r3, r3, #21
 80004e8:	e70d      	b.n	8000306 <__aeabi_ddiv+0xae>
 80004ea:	4651      	mov	r1, sl
 80004ec:	4321      	orrs	r1, r4
 80004ee:	d100      	bne.n	80004f2 <__aeabi_ddiv+0x29a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_ddiv+0x394>
 80004f2:	2c00      	cmp	r4, #0
 80004f4:	d100      	bne.n	80004f8 <__aeabi_ddiv+0x2a0>
 80004f6:	e0fb      	b.n	80006f0 <__aeabi_ddiv+0x498>
 80004f8:	0020      	movs	r0, r4
 80004fa:	f000 fdc1 	bl	8001080 <__clzsi2>
 80004fe:	0002      	movs	r2, r0
 8000500:	3a0b      	subs	r2, #11
 8000502:	231d      	movs	r3, #29
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	4652      	mov	r2, sl
 8000508:	0001      	movs	r1, r0
 800050a:	40da      	lsrs	r2, r3
 800050c:	4653      	mov	r3, sl
 800050e:	3908      	subs	r1, #8
 8000510:	408b      	lsls	r3, r1
 8000512:	408c      	lsls	r4, r1
 8000514:	0019      	movs	r1, r3
 8000516:	4314      	orrs	r4, r2
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <__aeabi_ddiv+0x388>)
 800051a:	4458      	add	r0, fp
 800051c:	469b      	mov	fp, r3
 800051e:	4483      	add	fp, r0
 8000520:	2000      	movs	r0, #0
 8000522:	e6d9      	b.n	80002d8 <__aeabi_ddiv+0x80>
 8000524:	0003      	movs	r3, r0
 8000526:	4323      	orrs	r3, r4
 8000528:	4698      	mov	r8, r3
 800052a:	d044      	beq.n	80005b6 <__aeabi_ddiv+0x35e>
 800052c:	2c00      	cmp	r4, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_ddiv+0x2da>
 8000530:	e0cf      	b.n	80006d2 <__aeabi_ddiv+0x47a>
 8000532:	0020      	movs	r0, r4
 8000534:	f000 fda4 	bl	8001080 <__clzsi2>
 8000538:	0001      	movs	r1, r0
 800053a:	0002      	movs	r2, r0
 800053c:	390b      	subs	r1, #11
 800053e:	231d      	movs	r3, #29
 8000540:	1a5b      	subs	r3, r3, r1
 8000542:	4649      	mov	r1, r9
 8000544:	0010      	movs	r0, r2
 8000546:	40d9      	lsrs	r1, r3
 8000548:	3808      	subs	r0, #8
 800054a:	4084      	lsls	r4, r0
 800054c:	000b      	movs	r3, r1
 800054e:	464d      	mov	r5, r9
 8000550:	4323      	orrs	r3, r4
 8000552:	4698      	mov	r8, r3
 8000554:	4085      	lsls	r5, r0
 8000556:	4b23      	ldr	r3, [pc, #140]	; (80005e4 <__aeabi_ddiv+0x38c>)
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	469b      	mov	fp, r3
 800055c:	2300      	movs	r3, #0
 800055e:	4699      	mov	r9, r3
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	e69e      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 8000564:	0002      	movs	r2, r0
 8000566:	4322      	orrs	r2, r4
 8000568:	4690      	mov	r8, r2
 800056a:	d11d      	bne.n	80005a8 <__aeabi_ddiv+0x350>
 800056c:	2208      	movs	r2, #8
 800056e:	469b      	mov	fp, r3
 8000570:	2302      	movs	r3, #2
 8000572:	2500      	movs	r5, #0
 8000574:	4691      	mov	r9, r2
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	e693      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 800057a:	4651      	mov	r1, sl
 800057c:	4321      	orrs	r1, r4
 800057e:	d109      	bne.n	8000594 <__aeabi_ddiv+0x33c>
 8000580:	2302      	movs	r3, #2
 8000582:	464a      	mov	r2, r9
 8000584:	431a      	orrs	r2, r3
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <__aeabi_ddiv+0x390>)
 8000588:	4691      	mov	r9, r2
 800058a:	469c      	mov	ip, r3
 800058c:	2400      	movs	r4, #0
 800058e:	2002      	movs	r0, #2
 8000590:	44e3      	add	fp, ip
 8000592:	e6a1      	b.n	80002d8 <__aeabi_ddiv+0x80>
 8000594:	2303      	movs	r3, #3
 8000596:	464a      	mov	r2, r9
 8000598:	431a      	orrs	r2, r3
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <__aeabi_ddiv+0x390>)
 800059c:	4691      	mov	r9, r2
 800059e:	469c      	mov	ip, r3
 80005a0:	4651      	mov	r1, sl
 80005a2:	2003      	movs	r0, #3
 80005a4:	44e3      	add	fp, ip
 80005a6:	e697      	b.n	80002d8 <__aeabi_ddiv+0x80>
 80005a8:	220c      	movs	r2, #12
 80005aa:	469b      	mov	fp, r3
 80005ac:	2303      	movs	r3, #3
 80005ae:	46a0      	mov	r8, r4
 80005b0:	4691      	mov	r9, r2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	e675      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 80005b6:	2304      	movs	r3, #4
 80005b8:	4699      	mov	r9, r3
 80005ba:	2300      	movs	r3, #0
 80005bc:	469b      	mov	fp, r3
 80005be:	3301      	adds	r3, #1
 80005c0:	2500      	movs	r5, #0
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	e66d      	b.n	80002a2 <__aeabi_ddiv+0x4a>
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	000007ff 	.word	0x000007ff
 80005cc:	fffffc01 	.word	0xfffffc01
 80005d0:	080044a0 	.word	0x080044a0
 80005d4:	000003ff 	.word	0x000003ff
 80005d8:	feffffff 	.word	0xfeffffff
 80005dc:	000007fe 	.word	0x000007fe
 80005e0:	000003f3 	.word	0x000003f3
 80005e4:	fffffc0d 	.word	0xfffffc0d
 80005e8:	fffff801 	.word	0xfffff801
 80005ec:	464a      	mov	r2, r9
 80005ee:	2301      	movs	r3, #1
 80005f0:	431a      	orrs	r2, r3
 80005f2:	4691      	mov	r9, r2
 80005f4:	2400      	movs	r4, #0
 80005f6:	2001      	movs	r0, #1
 80005f8:	e66e      	b.n	80002d8 <__aeabi_ddiv+0x80>
 80005fa:	2300      	movs	r3, #0
 80005fc:	2280      	movs	r2, #128	; 0x80
 80005fe:	469a      	mov	sl, r3
 8000600:	2500      	movs	r5, #0
 8000602:	4b88      	ldr	r3, [pc, #544]	; (8000824 <__aeabi_ddiv+0x5cc>)
 8000604:	0312      	lsls	r2, r2, #12
 8000606:	e67e      	b.n	8000306 <__aeabi_ddiv+0xae>
 8000608:	2501      	movs	r5, #1
 800060a:	426d      	negs	r5, r5
 800060c:	2201      	movs	r2, #1
 800060e:	1ad2      	subs	r2, r2, r3
 8000610:	2a38      	cmp	r2, #56	; 0x38
 8000612:	dd00      	ble.n	8000616 <__aeabi_ddiv+0x3be>
 8000614:	e674      	b.n	8000300 <__aeabi_ddiv+0xa8>
 8000616:	2a1f      	cmp	r2, #31
 8000618:	dc00      	bgt.n	800061c <__aeabi_ddiv+0x3c4>
 800061a:	e0bd      	b.n	8000798 <__aeabi_ddiv+0x540>
 800061c:	211f      	movs	r1, #31
 800061e:	4249      	negs	r1, r1
 8000620:	1acb      	subs	r3, r1, r3
 8000622:	4641      	mov	r1, r8
 8000624:	40d9      	lsrs	r1, r3
 8000626:	000b      	movs	r3, r1
 8000628:	2a20      	cmp	r2, #32
 800062a:	d004      	beq.n	8000636 <__aeabi_ddiv+0x3de>
 800062c:	4641      	mov	r1, r8
 800062e:	4a7e      	ldr	r2, [pc, #504]	; (8000828 <__aeabi_ddiv+0x5d0>)
 8000630:	445a      	add	r2, fp
 8000632:	4091      	lsls	r1, r2
 8000634:	430d      	orrs	r5, r1
 8000636:	0029      	movs	r1, r5
 8000638:	1e4a      	subs	r2, r1, #1
 800063a:	4191      	sbcs	r1, r2
 800063c:	4319      	orrs	r1, r3
 800063e:	2307      	movs	r3, #7
 8000640:	001d      	movs	r5, r3
 8000642:	2200      	movs	r2, #0
 8000644:	400d      	ands	r5, r1
 8000646:	420b      	tst	r3, r1
 8000648:	d100      	bne.n	800064c <__aeabi_ddiv+0x3f4>
 800064a:	e0d0      	b.n	80007ee <__aeabi_ddiv+0x596>
 800064c:	220f      	movs	r2, #15
 800064e:	2300      	movs	r3, #0
 8000650:	400a      	ands	r2, r1
 8000652:	2a04      	cmp	r2, #4
 8000654:	d100      	bne.n	8000658 <__aeabi_ddiv+0x400>
 8000656:	e0c7      	b.n	80007e8 <__aeabi_ddiv+0x590>
 8000658:	1d0a      	adds	r2, r1, #4
 800065a:	428a      	cmp	r2, r1
 800065c:	4189      	sbcs	r1, r1
 800065e:	4249      	negs	r1, r1
 8000660:	185b      	adds	r3, r3, r1
 8000662:	0011      	movs	r1, r2
 8000664:	021a      	lsls	r2, r3, #8
 8000666:	d400      	bmi.n	800066a <__aeabi_ddiv+0x412>
 8000668:	e0be      	b.n	80007e8 <__aeabi_ddiv+0x590>
 800066a:	2301      	movs	r3, #1
 800066c:	2200      	movs	r2, #0
 800066e:	2500      	movs	r5, #0
 8000670:	e649      	b.n	8000306 <__aeabi_ddiv+0xae>
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	4643      	mov	r3, r8
 8000676:	0312      	lsls	r2, r2, #12
 8000678:	4213      	tst	r3, r2
 800067a:	d008      	beq.n	800068e <__aeabi_ddiv+0x436>
 800067c:	4214      	tst	r4, r2
 800067e:	d106      	bne.n	800068e <__aeabi_ddiv+0x436>
 8000680:	4322      	orrs	r2, r4
 8000682:	0312      	lsls	r2, r2, #12
 8000684:	46ba      	mov	sl, r7
 8000686:	000d      	movs	r5, r1
 8000688:	4b66      	ldr	r3, [pc, #408]	; (8000824 <__aeabi_ddiv+0x5cc>)
 800068a:	0b12      	lsrs	r2, r2, #12
 800068c:	e63b      	b.n	8000306 <__aeabi_ddiv+0xae>
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	4643      	mov	r3, r8
 8000692:	0312      	lsls	r2, r2, #12
 8000694:	431a      	orrs	r2, r3
 8000696:	0312      	lsls	r2, r2, #12
 8000698:	46b2      	mov	sl, r6
 800069a:	4b62      	ldr	r3, [pc, #392]	; (8000824 <__aeabi_ddiv+0x5cc>)
 800069c:	0b12      	lsrs	r2, r2, #12
 800069e:	e632      	b.n	8000306 <__aeabi_ddiv+0xae>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0x44e>
 80006a4:	e702      	b.n	80004ac <__aeabi_ddiv+0x254>
 80006a6:	19a6      	adds	r6, r4, r6
 80006a8:	1e6a      	subs	r2, r5, #1
 80006aa:	42a6      	cmp	r6, r4
 80006ac:	d200      	bcs.n	80006b0 <__aeabi_ddiv+0x458>
 80006ae:	e089      	b.n	80007c4 <__aeabi_ddiv+0x56c>
 80006b0:	4286      	cmp	r6, r0
 80006b2:	d200      	bcs.n	80006b6 <__aeabi_ddiv+0x45e>
 80006b4:	e09f      	b.n	80007f6 <__aeabi_ddiv+0x59e>
 80006b6:	d100      	bne.n	80006ba <__aeabi_ddiv+0x462>
 80006b8:	e0af      	b.n	800081a <__aeabi_ddiv+0x5c2>
 80006ba:	0015      	movs	r5, r2
 80006bc:	e6f4      	b.n	80004a8 <__aeabi_ddiv+0x250>
 80006be:	42a9      	cmp	r1, r5
 80006c0:	d900      	bls.n	80006c4 <__aeabi_ddiv+0x46c>
 80006c2:	e63c      	b.n	800033e <__aeabi_ddiv+0xe6>
 80006c4:	4643      	mov	r3, r8
 80006c6:	07de      	lsls	r6, r3, #31
 80006c8:	0858      	lsrs	r0, r3, #1
 80006ca:	086b      	lsrs	r3, r5, #1
 80006cc:	431e      	orrs	r6, r3
 80006ce:	07ed      	lsls	r5, r5, #31
 80006d0:	e63c      	b.n	800034c <__aeabi_ddiv+0xf4>
 80006d2:	f000 fcd5 	bl	8001080 <__clzsi2>
 80006d6:	0001      	movs	r1, r0
 80006d8:	0002      	movs	r2, r0
 80006da:	3115      	adds	r1, #21
 80006dc:	3220      	adds	r2, #32
 80006de:	291c      	cmp	r1, #28
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_ddiv+0x48c>
 80006e2:	e72c      	b.n	800053e <__aeabi_ddiv+0x2e6>
 80006e4:	464b      	mov	r3, r9
 80006e6:	3808      	subs	r0, #8
 80006e8:	4083      	lsls	r3, r0
 80006ea:	2500      	movs	r5, #0
 80006ec:	4698      	mov	r8, r3
 80006ee:	e732      	b.n	8000556 <__aeabi_ddiv+0x2fe>
 80006f0:	f000 fcc6 	bl	8001080 <__clzsi2>
 80006f4:	0003      	movs	r3, r0
 80006f6:	001a      	movs	r2, r3
 80006f8:	3215      	adds	r2, #21
 80006fa:	3020      	adds	r0, #32
 80006fc:	2a1c      	cmp	r2, #28
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_ddiv+0x4aa>
 8000700:	e6ff      	b.n	8000502 <__aeabi_ddiv+0x2aa>
 8000702:	4654      	mov	r4, sl
 8000704:	3b08      	subs	r3, #8
 8000706:	2100      	movs	r1, #0
 8000708:	409c      	lsls	r4, r3
 800070a:	e705      	b.n	8000518 <__aeabi_ddiv+0x2c0>
 800070c:	1936      	adds	r6, r6, r4
 800070e:	3b01      	subs	r3, #1
 8000710:	42b4      	cmp	r4, r6
 8000712:	d900      	bls.n	8000716 <__aeabi_ddiv+0x4be>
 8000714:	e6a6      	b.n	8000464 <__aeabi_ddiv+0x20c>
 8000716:	42b2      	cmp	r2, r6
 8000718:	d800      	bhi.n	800071c <__aeabi_ddiv+0x4c4>
 800071a:	e6a3      	b.n	8000464 <__aeabi_ddiv+0x20c>
 800071c:	1e83      	subs	r3, r0, #2
 800071e:	1936      	adds	r6, r6, r4
 8000720:	e6a0      	b.n	8000464 <__aeabi_ddiv+0x20c>
 8000722:	1909      	adds	r1, r1, r4
 8000724:	3d01      	subs	r5, #1
 8000726:	428c      	cmp	r4, r1
 8000728:	d900      	bls.n	800072c <__aeabi_ddiv+0x4d4>
 800072a:	e68d      	b.n	8000448 <__aeabi_ddiv+0x1f0>
 800072c:	428a      	cmp	r2, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x4da>
 8000730:	e68a      	b.n	8000448 <__aeabi_ddiv+0x1f0>
 8000732:	1e85      	subs	r5, r0, #2
 8000734:	1909      	adds	r1, r1, r4
 8000736:	e687      	b.n	8000448 <__aeabi_ddiv+0x1f0>
 8000738:	220f      	movs	r2, #15
 800073a:	402a      	ands	r2, r5
 800073c:	2a04      	cmp	r2, #4
 800073e:	d100      	bne.n	8000742 <__aeabi_ddiv+0x4ea>
 8000740:	e6bc      	b.n	80004bc <__aeabi_ddiv+0x264>
 8000742:	1d29      	adds	r1, r5, #4
 8000744:	42a9      	cmp	r1, r5
 8000746:	41ad      	sbcs	r5, r5
 8000748:	426d      	negs	r5, r5
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	44a8      	add	r8, r5
 800074e:	e6b6      	b.n	80004be <__aeabi_ddiv+0x266>
 8000750:	42af      	cmp	r7, r5
 8000752:	d900      	bls.n	8000756 <__aeabi_ddiv+0x4fe>
 8000754:	e662      	b.n	800041c <__aeabi_ddiv+0x1c4>
 8000756:	4281      	cmp	r1, r0
 8000758:	d804      	bhi.n	8000764 <__aeabi_ddiv+0x50c>
 800075a:	d000      	beq.n	800075e <__aeabi_ddiv+0x506>
 800075c:	e65e      	b.n	800041c <__aeabi_ddiv+0x1c4>
 800075e:	42ae      	cmp	r6, r5
 8000760:	d800      	bhi.n	8000764 <__aeabi_ddiv+0x50c>
 8000762:	e65b      	b.n	800041c <__aeabi_ddiv+0x1c4>
 8000764:	2302      	movs	r3, #2
 8000766:	425b      	negs	r3, r3
 8000768:	469c      	mov	ip, r3
 800076a:	9b00      	ldr	r3, [sp, #0]
 800076c:	44e0      	add	r8, ip
 800076e:	469c      	mov	ip, r3
 8000770:	4465      	add	r5, ip
 8000772:	429d      	cmp	r5, r3
 8000774:	419b      	sbcs	r3, r3
 8000776:	425b      	negs	r3, r3
 8000778:	191b      	adds	r3, r3, r4
 800077a:	18c0      	adds	r0, r0, r3
 800077c:	e64f      	b.n	800041e <__aeabi_ddiv+0x1c6>
 800077e:	42b2      	cmp	r2, r6
 8000780:	d800      	bhi.n	8000784 <__aeabi_ddiv+0x52c>
 8000782:	e612      	b.n	80003aa <__aeabi_ddiv+0x152>
 8000784:	1e83      	subs	r3, r0, #2
 8000786:	1936      	adds	r6, r6, r4
 8000788:	e60f      	b.n	80003aa <__aeabi_ddiv+0x152>
 800078a:	428a      	cmp	r2, r1
 800078c:	d800      	bhi.n	8000790 <__aeabi_ddiv+0x538>
 800078e:	e5fa      	b.n	8000386 <__aeabi_ddiv+0x12e>
 8000790:	1e83      	subs	r3, r0, #2
 8000792:	4698      	mov	r8, r3
 8000794:	1909      	adds	r1, r1, r4
 8000796:	e5f6      	b.n	8000386 <__aeabi_ddiv+0x12e>
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <__aeabi_ddiv+0x5d4>)
 800079a:	0028      	movs	r0, r5
 800079c:	445b      	add	r3, fp
 800079e:	4641      	mov	r1, r8
 80007a0:	409d      	lsls	r5, r3
 80007a2:	4099      	lsls	r1, r3
 80007a4:	40d0      	lsrs	r0, r2
 80007a6:	1e6b      	subs	r3, r5, #1
 80007a8:	419d      	sbcs	r5, r3
 80007aa:	4643      	mov	r3, r8
 80007ac:	4301      	orrs	r1, r0
 80007ae:	4329      	orrs	r1, r5
 80007b0:	40d3      	lsrs	r3, r2
 80007b2:	074a      	lsls	r2, r1, #29
 80007b4:	d100      	bne.n	80007b8 <__aeabi_ddiv+0x560>
 80007b6:	e755      	b.n	8000664 <__aeabi_ddiv+0x40c>
 80007b8:	220f      	movs	r2, #15
 80007ba:	400a      	ands	r2, r1
 80007bc:	2a04      	cmp	r2, #4
 80007be:	d000      	beq.n	80007c2 <__aeabi_ddiv+0x56a>
 80007c0:	e74a      	b.n	8000658 <__aeabi_ddiv+0x400>
 80007c2:	e74f      	b.n	8000664 <__aeabi_ddiv+0x40c>
 80007c4:	0015      	movs	r5, r2
 80007c6:	4286      	cmp	r6, r0
 80007c8:	d000      	beq.n	80007cc <__aeabi_ddiv+0x574>
 80007ca:	e66d      	b.n	80004a8 <__aeabi_ddiv+0x250>
 80007cc:	9a00      	ldr	r2, [sp, #0]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x57c>
 80007d2:	e669      	b.n	80004a8 <__aeabi_ddiv+0x250>
 80007d4:	e66a      	b.n	80004ac <__aeabi_ddiv+0x254>
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <__aeabi_ddiv+0x5d8>)
 80007d8:	445b      	add	r3, fp
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_ddiv+0x588>
 80007de:	e713      	b.n	8000608 <__aeabi_ddiv+0x3b0>
 80007e0:	2501      	movs	r5, #1
 80007e2:	2100      	movs	r1, #0
 80007e4:	44a8      	add	r8, r5
 80007e6:	e66a      	b.n	80004be <__aeabi_ddiv+0x266>
 80007e8:	075d      	lsls	r5, r3, #29
 80007ea:	025b      	lsls	r3, r3, #9
 80007ec:	0b1a      	lsrs	r2, r3, #12
 80007ee:	08c9      	lsrs	r1, r1, #3
 80007f0:	2300      	movs	r3, #0
 80007f2:	430d      	orrs	r5, r1
 80007f4:	e587      	b.n	8000306 <__aeabi_ddiv+0xae>
 80007f6:	9900      	ldr	r1, [sp, #0]
 80007f8:	3d02      	subs	r5, #2
 80007fa:	004a      	lsls	r2, r1, #1
 80007fc:	428a      	cmp	r2, r1
 80007fe:	41bf      	sbcs	r7, r7
 8000800:	427f      	negs	r7, r7
 8000802:	193f      	adds	r7, r7, r4
 8000804:	19f6      	adds	r6, r6, r7
 8000806:	9200      	str	r2, [sp, #0]
 8000808:	e7dd      	b.n	80007c6 <__aeabi_ddiv+0x56e>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	4643      	mov	r3, r8
 800080e:	0312      	lsls	r2, r2, #12
 8000810:	431a      	orrs	r2, r3
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <__aeabi_ddiv+0x5cc>)
 8000816:	0b12      	lsrs	r2, r2, #12
 8000818:	e575      	b.n	8000306 <__aeabi_ddiv+0xae>
 800081a:	9900      	ldr	r1, [sp, #0]
 800081c:	4299      	cmp	r1, r3
 800081e:	d3ea      	bcc.n	80007f6 <__aeabi_ddiv+0x59e>
 8000820:	0015      	movs	r5, r2
 8000822:	e7d3      	b.n	80007cc <__aeabi_ddiv+0x574>
 8000824:	000007ff 	.word	0x000007ff
 8000828:	0000043e 	.word	0x0000043e
 800082c:	0000041e 	.word	0x0000041e
 8000830:	000003ff 	.word	0x000003ff

08000834 <__aeabi_dsub>:
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000836:	4657      	mov	r7, sl
 8000838:	464e      	mov	r6, r9
 800083a:	4645      	mov	r5, r8
 800083c:	46de      	mov	lr, fp
 800083e:	b5e0      	push	{r5, r6, r7, lr}
 8000840:	000d      	movs	r5, r1
 8000842:	0004      	movs	r4, r0
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	032b      	lsls	r3, r5, #12
 800084a:	0a5b      	lsrs	r3, r3, #9
 800084c:	0f62      	lsrs	r2, r4, #29
 800084e:	431a      	orrs	r2, r3
 8000850:	00e3      	lsls	r3, r4, #3
 8000852:	030c      	lsls	r4, r1, #12
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0f47      	lsrs	r7, r0, #29
 8000858:	4327      	orrs	r7, r4
 800085a:	4cd0      	ldr	r4, [pc, #832]	; (8000b9c <__aeabi_dsub+0x368>)
 800085c:	006e      	lsls	r6, r5, #1
 800085e:	4691      	mov	r9, r2
 8000860:	b083      	sub	sp, #12
 8000862:	004a      	lsls	r2, r1, #1
 8000864:	00c0      	lsls	r0, r0, #3
 8000866:	4698      	mov	r8, r3
 8000868:	46a2      	mov	sl, r4
 800086a:	0d76      	lsrs	r6, r6, #21
 800086c:	0fed      	lsrs	r5, r5, #31
 800086e:	0d52      	lsrs	r2, r2, #21
 8000870:	0fc9      	lsrs	r1, r1, #31
 8000872:	9001      	str	r0, [sp, #4]
 8000874:	42a2      	cmp	r2, r4
 8000876:	d100      	bne.n	800087a <__aeabi_dsub+0x46>
 8000878:	e0b9      	b.n	80009ee <__aeabi_dsub+0x1ba>
 800087a:	2401      	movs	r4, #1
 800087c:	4061      	eors	r1, r4
 800087e:	468b      	mov	fp, r1
 8000880:	428d      	cmp	r5, r1
 8000882:	d100      	bne.n	8000886 <__aeabi_dsub+0x52>
 8000884:	e08d      	b.n	80009a2 <__aeabi_dsub+0x16e>
 8000886:	1ab4      	subs	r4, r6, r2
 8000888:	46a4      	mov	ip, r4
 800088a:	2c00      	cmp	r4, #0
 800088c:	dc00      	bgt.n	8000890 <__aeabi_dsub+0x5c>
 800088e:	e0b7      	b.n	8000a00 <__aeabi_dsub+0x1cc>
 8000890:	2a00      	cmp	r2, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_dsub+0x62>
 8000894:	e0cb      	b.n	8000a2e <__aeabi_dsub+0x1fa>
 8000896:	4ac1      	ldr	r2, [pc, #772]	; (8000b9c <__aeabi_dsub+0x368>)
 8000898:	4296      	cmp	r6, r2
 800089a:	d100      	bne.n	800089e <__aeabi_dsub+0x6a>
 800089c:	e186      	b.n	8000bac <__aeabi_dsub+0x378>
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	0412      	lsls	r2, r2, #16
 80008a2:	4317      	orrs	r7, r2
 80008a4:	4662      	mov	r2, ip
 80008a6:	2a38      	cmp	r2, #56	; 0x38
 80008a8:	dd00      	ble.n	80008ac <__aeabi_dsub+0x78>
 80008aa:	e1a4      	b.n	8000bf6 <__aeabi_dsub+0x3c2>
 80008ac:	2a1f      	cmp	r2, #31
 80008ae:	dd00      	ble.n	80008b2 <__aeabi_dsub+0x7e>
 80008b0:	e21d      	b.n	8000cee <__aeabi_dsub+0x4ba>
 80008b2:	4661      	mov	r1, ip
 80008b4:	2220      	movs	r2, #32
 80008b6:	003c      	movs	r4, r7
 80008b8:	1a52      	subs	r2, r2, r1
 80008ba:	0001      	movs	r1, r0
 80008bc:	4090      	lsls	r0, r2
 80008be:	4094      	lsls	r4, r2
 80008c0:	1e42      	subs	r2, r0, #1
 80008c2:	4190      	sbcs	r0, r2
 80008c4:	4662      	mov	r2, ip
 80008c6:	46a0      	mov	r8, r4
 80008c8:	4664      	mov	r4, ip
 80008ca:	40d7      	lsrs	r7, r2
 80008cc:	464a      	mov	r2, r9
 80008ce:	40e1      	lsrs	r1, r4
 80008d0:	4644      	mov	r4, r8
 80008d2:	1bd2      	subs	r2, r2, r7
 80008d4:	4691      	mov	r9, r2
 80008d6:	430c      	orrs	r4, r1
 80008d8:	4304      	orrs	r4, r0
 80008da:	1b1c      	subs	r4, r3, r4
 80008dc:	42a3      	cmp	r3, r4
 80008de:	4192      	sbcs	r2, r2
 80008e0:	464b      	mov	r3, r9
 80008e2:	4252      	negs	r2, r2
 80008e4:	1a9b      	subs	r3, r3, r2
 80008e6:	469a      	mov	sl, r3
 80008e8:	4653      	mov	r3, sl
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	d400      	bmi.n	80008f0 <__aeabi_dsub+0xbc>
 80008ee:	e12b      	b.n	8000b48 <__aeabi_dsub+0x314>
 80008f0:	4653      	mov	r3, sl
 80008f2:	025a      	lsls	r2, r3, #9
 80008f4:	0a53      	lsrs	r3, r2, #9
 80008f6:	469a      	mov	sl, r3
 80008f8:	4653      	mov	r3, sl
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_dsub+0xcc>
 80008fe:	e166      	b.n	8000bce <__aeabi_dsub+0x39a>
 8000900:	4650      	mov	r0, sl
 8000902:	f000 fbbd 	bl	8001080 <__clzsi2>
 8000906:	0003      	movs	r3, r0
 8000908:	3b08      	subs	r3, #8
 800090a:	2220      	movs	r2, #32
 800090c:	0020      	movs	r0, r4
 800090e:	1ad2      	subs	r2, r2, r3
 8000910:	4651      	mov	r1, sl
 8000912:	40d0      	lsrs	r0, r2
 8000914:	4099      	lsls	r1, r3
 8000916:	0002      	movs	r2, r0
 8000918:	409c      	lsls	r4, r3
 800091a:	430a      	orrs	r2, r1
 800091c:	429e      	cmp	r6, r3
 800091e:	dd00      	ble.n	8000922 <__aeabi_dsub+0xee>
 8000920:	e164      	b.n	8000bec <__aeabi_dsub+0x3b8>
 8000922:	1b9b      	subs	r3, r3, r6
 8000924:	1c59      	adds	r1, r3, #1
 8000926:	291f      	cmp	r1, #31
 8000928:	dd00      	ble.n	800092c <__aeabi_dsub+0xf8>
 800092a:	e0fe      	b.n	8000b2a <__aeabi_dsub+0x2f6>
 800092c:	2320      	movs	r3, #32
 800092e:	0010      	movs	r0, r2
 8000930:	0026      	movs	r6, r4
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	409c      	lsls	r4, r3
 8000936:	4098      	lsls	r0, r3
 8000938:	40ce      	lsrs	r6, r1
 800093a:	40ca      	lsrs	r2, r1
 800093c:	1e63      	subs	r3, r4, #1
 800093e:	419c      	sbcs	r4, r3
 8000940:	4330      	orrs	r0, r6
 8000942:	4692      	mov	sl, r2
 8000944:	2600      	movs	r6, #0
 8000946:	4304      	orrs	r4, r0
 8000948:	0763      	lsls	r3, r4, #29
 800094a:	d009      	beq.n	8000960 <__aeabi_dsub+0x12c>
 800094c:	230f      	movs	r3, #15
 800094e:	4023      	ands	r3, r4
 8000950:	2b04      	cmp	r3, #4
 8000952:	d005      	beq.n	8000960 <__aeabi_dsub+0x12c>
 8000954:	1d23      	adds	r3, r4, #4
 8000956:	42a3      	cmp	r3, r4
 8000958:	41a4      	sbcs	r4, r4
 800095a:	4264      	negs	r4, r4
 800095c:	44a2      	add	sl, r4
 800095e:	001c      	movs	r4, r3
 8000960:	4653      	mov	r3, sl
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	d400      	bmi.n	8000968 <__aeabi_dsub+0x134>
 8000966:	e0f2      	b.n	8000b4e <__aeabi_dsub+0x31a>
 8000968:	4b8c      	ldr	r3, [pc, #560]	; (8000b9c <__aeabi_dsub+0x368>)
 800096a:	3601      	adds	r6, #1
 800096c:	429e      	cmp	r6, r3
 800096e:	d100      	bne.n	8000972 <__aeabi_dsub+0x13e>
 8000970:	e10f      	b.n	8000b92 <__aeabi_dsub+0x35e>
 8000972:	4653      	mov	r3, sl
 8000974:	498a      	ldr	r1, [pc, #552]	; (8000ba0 <__aeabi_dsub+0x36c>)
 8000976:	08e4      	lsrs	r4, r4, #3
 8000978:	400b      	ands	r3, r1
 800097a:	0019      	movs	r1, r3
 800097c:	075b      	lsls	r3, r3, #29
 800097e:	4323      	orrs	r3, r4
 8000980:	0572      	lsls	r2, r6, #21
 8000982:	024c      	lsls	r4, r1, #9
 8000984:	0b24      	lsrs	r4, r4, #12
 8000986:	0d52      	lsrs	r2, r2, #21
 8000988:	0512      	lsls	r2, r2, #20
 800098a:	4322      	orrs	r2, r4
 800098c:	07ed      	lsls	r5, r5, #31
 800098e:	432a      	orrs	r2, r5
 8000990:	0018      	movs	r0, r3
 8000992:	0011      	movs	r1, r2
 8000994:	b003      	add	sp, #12
 8000996:	bcf0      	pop	{r4, r5, r6, r7}
 8000998:	46bb      	mov	fp, r7
 800099a:	46b2      	mov	sl, r6
 800099c:	46a9      	mov	r9, r5
 800099e:	46a0      	mov	r8, r4
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	1ab4      	subs	r4, r6, r2
 80009a4:	46a4      	mov	ip, r4
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	dd59      	ble.n	8000a5e <__aeabi_dsub+0x22a>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_dsub+0x17c>
 80009ae:	e0b0      	b.n	8000b12 <__aeabi_dsub+0x2de>
 80009b0:	4556      	cmp	r6, sl
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dsub+0x182>
 80009b4:	e0fa      	b.n	8000bac <__aeabi_dsub+0x378>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0412      	lsls	r2, r2, #16
 80009ba:	4317      	orrs	r7, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	2a38      	cmp	r2, #56	; 0x38
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dsub+0x190>
 80009c2:	e0d4      	b.n	8000b6e <__aeabi_dsub+0x33a>
 80009c4:	2a1f      	cmp	r2, #31
 80009c6:	dc00      	bgt.n	80009ca <__aeabi_dsub+0x196>
 80009c8:	e1c0      	b.n	8000d4c <__aeabi_dsub+0x518>
 80009ca:	0039      	movs	r1, r7
 80009cc:	3a20      	subs	r2, #32
 80009ce:	40d1      	lsrs	r1, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	2a20      	cmp	r2, #32
 80009d4:	d006      	beq.n	80009e4 <__aeabi_dsub+0x1b0>
 80009d6:	4664      	mov	r4, ip
 80009d8:	2240      	movs	r2, #64	; 0x40
 80009da:	1b12      	subs	r2, r2, r4
 80009dc:	003c      	movs	r4, r7
 80009de:	4094      	lsls	r4, r2
 80009e0:	4304      	orrs	r4, r0
 80009e2:	9401      	str	r4, [sp, #4]
 80009e4:	9c01      	ldr	r4, [sp, #4]
 80009e6:	1e62      	subs	r2, r4, #1
 80009e8:	4194      	sbcs	r4, r2
 80009ea:	430c      	orrs	r4, r1
 80009ec:	e0c3      	b.n	8000b76 <__aeabi_dsub+0x342>
 80009ee:	003c      	movs	r4, r7
 80009f0:	4304      	orrs	r4, r0
 80009f2:	d02b      	beq.n	8000a4c <__aeabi_dsub+0x218>
 80009f4:	468b      	mov	fp, r1
 80009f6:	428d      	cmp	r5, r1
 80009f8:	d02e      	beq.n	8000a58 <__aeabi_dsub+0x224>
 80009fa:	4c6a      	ldr	r4, [pc, #424]	; (8000ba4 <__aeabi_dsub+0x370>)
 80009fc:	46a4      	mov	ip, r4
 80009fe:	44b4      	add	ip, r6
 8000a00:	4664      	mov	r4, ip
 8000a02:	2c00      	cmp	r4, #0
 8000a04:	d05f      	beq.n	8000ac6 <__aeabi_dsub+0x292>
 8000a06:	1b94      	subs	r4, r2, r6
 8000a08:	46a4      	mov	ip, r4
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_dsub+0x1dc>
 8000a0e:	e120      	b.n	8000c52 <__aeabi_dsub+0x41e>
 8000a10:	464c      	mov	r4, r9
 8000a12:	431c      	orrs	r4, r3
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dsub+0x1e4>
 8000a16:	e1c7      	b.n	8000da8 <__aeabi_dsub+0x574>
 8000a18:	4661      	mov	r1, ip
 8000a1a:	1e4c      	subs	r4, r1, #1
 8000a1c:	2901      	cmp	r1, #1
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dsub+0x1ee>
 8000a20:	e223      	b.n	8000e6a <__aeabi_dsub+0x636>
 8000a22:	4d5e      	ldr	r5, [pc, #376]	; (8000b9c <__aeabi_dsub+0x368>)
 8000a24:	45ac      	cmp	ip, r5
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dsub+0x1f6>
 8000a28:	e1d8      	b.n	8000ddc <__aeabi_dsub+0x5a8>
 8000a2a:	46a4      	mov	ip, r4
 8000a2c:	e11a      	b.n	8000c64 <__aeabi_dsub+0x430>
 8000a2e:	003a      	movs	r2, r7
 8000a30:	4302      	orrs	r2, r0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_dsub+0x202>
 8000a34:	e0e4      	b.n	8000c00 <__aeabi_dsub+0x3cc>
 8000a36:	0022      	movs	r2, r4
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	2c01      	cmp	r4, #1
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dsub+0x20c>
 8000a3e:	e1c3      	b.n	8000dc8 <__aeabi_dsub+0x594>
 8000a40:	4956      	ldr	r1, [pc, #344]	; (8000b9c <__aeabi_dsub+0x368>)
 8000a42:	428c      	cmp	r4, r1
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x214>
 8000a46:	e0b1      	b.n	8000bac <__aeabi_dsub+0x378>
 8000a48:	4694      	mov	ip, r2
 8000a4a:	e72b      	b.n	80008a4 <__aeabi_dsub+0x70>
 8000a4c:	2401      	movs	r4, #1
 8000a4e:	4061      	eors	r1, r4
 8000a50:	468b      	mov	fp, r1
 8000a52:	428d      	cmp	r5, r1
 8000a54:	d000      	beq.n	8000a58 <__aeabi_dsub+0x224>
 8000a56:	e716      	b.n	8000886 <__aeabi_dsub+0x52>
 8000a58:	4952      	ldr	r1, [pc, #328]	; (8000ba4 <__aeabi_dsub+0x370>)
 8000a5a:	468c      	mov	ip, r1
 8000a5c:	44b4      	add	ip, r6
 8000a5e:	4664      	mov	r4, ip
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dsub+0x232>
 8000a64:	e0d3      	b.n	8000c0e <__aeabi_dsub+0x3da>
 8000a66:	1b91      	subs	r1, r2, r6
 8000a68:	468c      	mov	ip, r1
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dsub+0x23c>
 8000a6e:	e15e      	b.n	8000d2e <__aeabi_dsub+0x4fa>
 8000a70:	494a      	ldr	r1, [pc, #296]	; (8000b9c <__aeabi_dsub+0x368>)
 8000a72:	428a      	cmp	r2, r1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dsub+0x244>
 8000a76:	e1be      	b.n	8000df6 <__aeabi_dsub+0x5c2>
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	0409      	lsls	r1, r1, #16
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	46a1      	mov	r9, r4
 8000a82:	4661      	mov	r1, ip
 8000a84:	2938      	cmp	r1, #56	; 0x38
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_dsub+0x256>
 8000a88:	e1ba      	b.n	8000e00 <__aeabi_dsub+0x5cc>
 8000a8a:	291f      	cmp	r1, #31
 8000a8c:	dd00      	ble.n	8000a90 <__aeabi_dsub+0x25c>
 8000a8e:	e227      	b.n	8000ee0 <__aeabi_dsub+0x6ac>
 8000a90:	2420      	movs	r4, #32
 8000a92:	1a64      	subs	r4, r4, r1
 8000a94:	4649      	mov	r1, r9
 8000a96:	40a1      	lsls	r1, r4
 8000a98:	001e      	movs	r6, r3
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	40a3      	lsls	r3, r4
 8000aa0:	40ce      	lsrs	r6, r1
 8000aa2:	4641      	mov	r1, r8
 8000aa4:	1e5c      	subs	r4, r3, #1
 8000aa6:	41a3      	sbcs	r3, r4
 8000aa8:	4331      	orrs	r1, r6
 8000aaa:	4319      	orrs	r1, r3
 8000aac:	000c      	movs	r4, r1
 8000aae:	4663      	mov	r3, ip
 8000ab0:	4649      	mov	r1, r9
 8000ab2:	40d9      	lsrs	r1, r3
 8000ab4:	187f      	adds	r7, r7, r1
 8000ab6:	1824      	adds	r4, r4, r0
 8000ab8:	4284      	cmp	r4, r0
 8000aba:	419b      	sbcs	r3, r3
 8000abc:	425b      	negs	r3, r3
 8000abe:	469a      	mov	sl, r3
 8000ac0:	0016      	movs	r6, r2
 8000ac2:	44ba      	add	sl, r7
 8000ac4:	e05d      	b.n	8000b82 <__aeabi_dsub+0x34e>
 8000ac6:	4c38      	ldr	r4, [pc, #224]	; (8000ba8 <__aeabi_dsub+0x374>)
 8000ac8:	1c72      	adds	r2, r6, #1
 8000aca:	4222      	tst	r2, r4
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dsub+0x29c>
 8000ace:	e0df      	b.n	8000c90 <__aeabi_dsub+0x45c>
 8000ad0:	464a      	mov	r2, r9
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d000      	beq.n	8000ada <__aeabi_dsub+0x2a6>
 8000ad8:	e15c      	b.n	8000d94 <__aeabi_dsub+0x560>
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dsub+0x2ac>
 8000ade:	e1cf      	b.n	8000e80 <__aeabi_dsub+0x64c>
 8000ae0:	003a      	movs	r2, r7
 8000ae2:	4302      	orrs	r2, r0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dsub+0x2b4>
 8000ae6:	e17f      	b.n	8000de8 <__aeabi_dsub+0x5b4>
 8000ae8:	1a1c      	subs	r4, r3, r0
 8000aea:	464a      	mov	r2, r9
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	4189      	sbcs	r1, r1
 8000af0:	1bd2      	subs	r2, r2, r7
 8000af2:	4249      	negs	r1, r1
 8000af4:	1a52      	subs	r2, r2, r1
 8000af6:	4692      	mov	sl, r2
 8000af8:	0212      	lsls	r2, r2, #8
 8000afa:	d400      	bmi.n	8000afe <__aeabi_dsub+0x2ca>
 8000afc:	e20a      	b.n	8000f14 <__aeabi_dsub+0x6e0>
 8000afe:	1ac4      	subs	r4, r0, r3
 8000b00:	42a0      	cmp	r0, r4
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	464b      	mov	r3, r9
 8000b06:	4240      	negs	r0, r0
 8000b08:	1aff      	subs	r7, r7, r3
 8000b0a:	1a3b      	subs	r3, r7, r0
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	465d      	mov	r5, fp
 8000b10:	e71a      	b.n	8000948 <__aeabi_dsub+0x114>
 8000b12:	003a      	movs	r2, r7
 8000b14:	4302      	orrs	r2, r0
 8000b16:	d073      	beq.n	8000c00 <__aeabi_dsub+0x3cc>
 8000b18:	0022      	movs	r2, r4
 8000b1a:	3a01      	subs	r2, #1
 8000b1c:	2c01      	cmp	r4, #1
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dsub+0x2ee>
 8000b20:	e0cb      	b.n	8000cba <__aeabi_dsub+0x486>
 8000b22:	4554      	cmp	r4, sl
 8000b24:	d042      	beq.n	8000bac <__aeabi_dsub+0x378>
 8000b26:	4694      	mov	ip, r2
 8000b28:	e748      	b.n	80009bc <__aeabi_dsub+0x188>
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	3b1f      	subs	r3, #31
 8000b2e:	40d8      	lsrs	r0, r3
 8000b30:	2920      	cmp	r1, #32
 8000b32:	d003      	beq.n	8000b3c <__aeabi_dsub+0x308>
 8000b34:	2340      	movs	r3, #64	; 0x40
 8000b36:	1a5b      	subs	r3, r3, r1
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	4314      	orrs	r4, r2
 8000b3c:	1e63      	subs	r3, r4, #1
 8000b3e:	419c      	sbcs	r4, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	2600      	movs	r6, #0
 8000b44:	469a      	mov	sl, r3
 8000b46:	4304      	orrs	r4, r0
 8000b48:	0763      	lsls	r3, r4, #29
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dsub+0x31a>
 8000b4c:	e6fe      	b.n	800094c <__aeabi_dsub+0x118>
 8000b4e:	4652      	mov	r2, sl
 8000b50:	08e3      	lsrs	r3, r4, #3
 8000b52:	0752      	lsls	r2, r2, #29
 8000b54:	4313      	orrs	r3, r2
 8000b56:	4652      	mov	r2, sl
 8000b58:	46b4      	mov	ip, r6
 8000b5a:	08d2      	lsrs	r2, r2, #3
 8000b5c:	490f      	ldr	r1, [pc, #60]	; (8000b9c <__aeabi_dsub+0x368>)
 8000b5e:	458c      	cmp	ip, r1
 8000b60:	d02a      	beq.n	8000bb8 <__aeabi_dsub+0x384>
 8000b62:	0312      	lsls	r2, r2, #12
 8000b64:	0b14      	lsrs	r4, r2, #12
 8000b66:	4662      	mov	r2, ip
 8000b68:	0552      	lsls	r2, r2, #21
 8000b6a:	0d52      	lsrs	r2, r2, #21
 8000b6c:	e70c      	b.n	8000988 <__aeabi_dsub+0x154>
 8000b6e:	003c      	movs	r4, r7
 8000b70:	4304      	orrs	r4, r0
 8000b72:	1e62      	subs	r2, r4, #1
 8000b74:	4194      	sbcs	r4, r2
 8000b76:	18e4      	adds	r4, r4, r3
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	4192      	sbcs	r2, r2
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	444a      	add	r2, r9
 8000b80:	4692      	mov	sl, r2
 8000b82:	4653      	mov	r3, sl
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	d5df      	bpl.n	8000b48 <__aeabi_dsub+0x314>
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__aeabi_dsub+0x368>)
 8000b8a:	3601      	adds	r6, #1
 8000b8c:	429e      	cmp	r6, r3
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_dsub+0x35e>
 8000b90:	e0a0      	b.n	8000cd4 <__aeabi_dsub+0x4a0>
 8000b92:	0032      	movs	r2, r6
 8000b94:	2400      	movs	r4, #0
 8000b96:	2300      	movs	r3, #0
 8000b98:	e6f6      	b.n	8000988 <__aeabi_dsub+0x154>
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	000007ff 	.word	0x000007ff
 8000ba0:	ff7fffff 	.word	0xff7fffff
 8000ba4:	fffff801 	.word	0xfffff801
 8000ba8:	000007fe 	.word	0x000007fe
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	464a      	mov	r2, r9
 8000bb0:	0752      	lsls	r2, r2, #29
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	464a      	mov	r2, r9
 8000bb6:	08d2      	lsrs	r2, r2, #3
 8000bb8:	0019      	movs	r1, r3
 8000bba:	4311      	orrs	r1, r2
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x38c>
 8000bbe:	e1b5      	b.n	8000f2c <__aeabi_dsub+0x6f8>
 8000bc0:	2480      	movs	r4, #128	; 0x80
 8000bc2:	0324      	lsls	r4, r4, #12
 8000bc4:	4314      	orrs	r4, r2
 8000bc6:	0324      	lsls	r4, r4, #12
 8000bc8:	4ad5      	ldr	r2, [pc, #852]	; (8000f20 <__aeabi_dsub+0x6ec>)
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	e6dc      	b.n	8000988 <__aeabi_dsub+0x154>
 8000bce:	0020      	movs	r0, r4
 8000bd0:	f000 fa56 	bl	8001080 <__clzsi2>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	dc00      	bgt.n	8000bde <__aeabi_dsub+0x3aa>
 8000bdc:	e695      	b.n	800090a <__aeabi_dsub+0xd6>
 8000bde:	0022      	movs	r2, r4
 8000be0:	3808      	subs	r0, #8
 8000be2:	4082      	lsls	r2, r0
 8000be4:	2400      	movs	r4, #0
 8000be6:	429e      	cmp	r6, r3
 8000be8:	dc00      	bgt.n	8000bec <__aeabi_dsub+0x3b8>
 8000bea:	e69a      	b.n	8000922 <__aeabi_dsub+0xee>
 8000bec:	1af6      	subs	r6, r6, r3
 8000bee:	4bcd      	ldr	r3, [pc, #820]	; (8000f24 <__aeabi_dsub+0x6f0>)
 8000bf0:	401a      	ands	r2, r3
 8000bf2:	4692      	mov	sl, r2
 8000bf4:	e6a8      	b.n	8000948 <__aeabi_dsub+0x114>
 8000bf6:	003c      	movs	r4, r7
 8000bf8:	4304      	orrs	r4, r0
 8000bfa:	1e62      	subs	r2, r4, #1
 8000bfc:	4194      	sbcs	r4, r2
 8000bfe:	e66c      	b.n	80008da <__aeabi_dsub+0xa6>
 8000c00:	464a      	mov	r2, r9
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	0752      	lsls	r2, r2, #29
 8000c06:	4313      	orrs	r3, r2
 8000c08:	464a      	mov	r2, r9
 8000c0a:	08d2      	lsrs	r2, r2, #3
 8000c0c:	e7a6      	b.n	8000b5c <__aeabi_dsub+0x328>
 8000c0e:	4cc6      	ldr	r4, [pc, #792]	; (8000f28 <__aeabi_dsub+0x6f4>)
 8000c10:	1c72      	adds	r2, r6, #1
 8000c12:	4222      	tst	r2, r4
 8000c14:	d000      	beq.n	8000c18 <__aeabi_dsub+0x3e4>
 8000c16:	e0ac      	b.n	8000d72 <__aeabi_dsub+0x53e>
 8000c18:	464a      	mov	r2, r9
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	2e00      	cmp	r6, #0
 8000c1e:	d000      	beq.n	8000c22 <__aeabi_dsub+0x3ee>
 8000c20:	e105      	b.n	8000e2e <__aeabi_dsub+0x5fa>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dsub+0x3f4>
 8000c26:	e156      	b.n	8000ed6 <__aeabi_dsub+0x6a2>
 8000c28:	003a      	movs	r2, r7
 8000c2a:	4302      	orrs	r2, r0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_dsub+0x3fc>
 8000c2e:	e0db      	b.n	8000de8 <__aeabi_dsub+0x5b4>
 8000c30:	181c      	adds	r4, r3, r0
 8000c32:	429c      	cmp	r4, r3
 8000c34:	419b      	sbcs	r3, r3
 8000c36:	444f      	add	r7, r9
 8000c38:	46ba      	mov	sl, r7
 8000c3a:	425b      	negs	r3, r3
 8000c3c:	449a      	add	sl, r3
 8000c3e:	4653      	mov	r3, sl
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	d400      	bmi.n	8000c46 <__aeabi_dsub+0x412>
 8000c44:	e780      	b.n	8000b48 <__aeabi_dsub+0x314>
 8000c46:	4652      	mov	r2, sl
 8000c48:	4bb6      	ldr	r3, [pc, #728]	; (8000f24 <__aeabi_dsub+0x6f0>)
 8000c4a:	2601      	movs	r6, #1
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	4692      	mov	sl, r2
 8000c50:	e77a      	b.n	8000b48 <__aeabi_dsub+0x314>
 8000c52:	4cb3      	ldr	r4, [pc, #716]	; (8000f20 <__aeabi_dsub+0x6ec>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dsub+0x426>
 8000c58:	e0c0      	b.n	8000ddc <__aeabi_dsub+0x5a8>
 8000c5a:	2480      	movs	r4, #128	; 0x80
 8000c5c:	464d      	mov	r5, r9
 8000c5e:	0424      	lsls	r4, r4, #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	46a9      	mov	r9, r5
 8000c64:	4664      	mov	r4, ip
 8000c66:	2c38      	cmp	r4, #56	; 0x38
 8000c68:	dc53      	bgt.n	8000d12 <__aeabi_dsub+0x4de>
 8000c6a:	4661      	mov	r1, ip
 8000c6c:	2c1f      	cmp	r4, #31
 8000c6e:	dd00      	ble.n	8000c72 <__aeabi_dsub+0x43e>
 8000c70:	e0cd      	b.n	8000e0e <__aeabi_dsub+0x5da>
 8000c72:	2520      	movs	r5, #32
 8000c74:	001e      	movs	r6, r3
 8000c76:	1b2d      	subs	r5, r5, r4
 8000c78:	464c      	mov	r4, r9
 8000c7a:	40ab      	lsls	r3, r5
 8000c7c:	40ac      	lsls	r4, r5
 8000c7e:	40ce      	lsrs	r6, r1
 8000c80:	1e5d      	subs	r5, r3, #1
 8000c82:	41ab      	sbcs	r3, r5
 8000c84:	4334      	orrs	r4, r6
 8000c86:	4323      	orrs	r3, r4
 8000c88:	464c      	mov	r4, r9
 8000c8a:	40cc      	lsrs	r4, r1
 8000c8c:	1b3f      	subs	r7, r7, r4
 8000c8e:	e045      	b.n	8000d1c <__aeabi_dsub+0x4e8>
 8000c90:	464a      	mov	r2, r9
 8000c92:	1a1c      	subs	r4, r3, r0
 8000c94:	1bd1      	subs	r1, r2, r7
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	4192      	sbcs	r2, r2
 8000c9a:	4252      	negs	r2, r2
 8000c9c:	4692      	mov	sl, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	4651      	mov	r1, sl
 8000ca2:	1a52      	subs	r2, r2, r1
 8000ca4:	4692      	mov	sl, r2
 8000ca6:	0212      	lsls	r2, r2, #8
 8000ca8:	d500      	bpl.n	8000cac <__aeabi_dsub+0x478>
 8000caa:	e083      	b.n	8000db4 <__aeabi_dsub+0x580>
 8000cac:	4653      	mov	r3, sl
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_dsub+0x480>
 8000cb2:	e621      	b.n	80008f8 <__aeabi_dsub+0xc4>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	e753      	b.n	8000b62 <__aeabi_dsub+0x32e>
 8000cba:	181c      	adds	r4, r3, r0
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	444f      	add	r7, r9
 8000cc2:	46ba      	mov	sl, r7
 8000cc4:	425b      	negs	r3, r3
 8000cc6:	449a      	add	sl, r3
 8000cc8:	4653      	mov	r3, sl
 8000cca:	2601      	movs	r6, #1
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	d400      	bmi.n	8000cd2 <__aeabi_dsub+0x49e>
 8000cd0:	e73a      	b.n	8000b48 <__aeabi_dsub+0x314>
 8000cd2:	2602      	movs	r6, #2
 8000cd4:	4652      	mov	r2, sl
 8000cd6:	4b93      	ldr	r3, [pc, #588]	; (8000f24 <__aeabi_dsub+0x6f0>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	401a      	ands	r2, r3
 8000cdc:	0013      	movs	r3, r2
 8000cde:	4021      	ands	r1, r4
 8000ce0:	0862      	lsrs	r2, r4, #1
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	07dc      	lsls	r4, r3, #31
 8000ce6:	085b      	lsrs	r3, r3, #1
 8000ce8:	469a      	mov	sl, r3
 8000cea:	4314      	orrs	r4, r2
 8000cec:	e62c      	b.n	8000948 <__aeabi_dsub+0x114>
 8000cee:	0039      	movs	r1, r7
 8000cf0:	3a20      	subs	r2, #32
 8000cf2:	40d1      	lsrs	r1, r2
 8000cf4:	4662      	mov	r2, ip
 8000cf6:	2a20      	cmp	r2, #32
 8000cf8:	d006      	beq.n	8000d08 <__aeabi_dsub+0x4d4>
 8000cfa:	4664      	mov	r4, ip
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	1b12      	subs	r2, r2, r4
 8000d00:	003c      	movs	r4, r7
 8000d02:	4094      	lsls	r4, r2
 8000d04:	4304      	orrs	r4, r0
 8000d06:	9401      	str	r4, [sp, #4]
 8000d08:	9c01      	ldr	r4, [sp, #4]
 8000d0a:	1e62      	subs	r2, r4, #1
 8000d0c:	4194      	sbcs	r4, r2
 8000d0e:	430c      	orrs	r4, r1
 8000d10:	e5e3      	b.n	80008da <__aeabi_dsub+0xa6>
 8000d12:	4649      	mov	r1, r9
 8000d14:	4319      	orrs	r1, r3
 8000d16:	000b      	movs	r3, r1
 8000d18:	1e5c      	subs	r4, r3, #1
 8000d1a:	41a3      	sbcs	r3, r4
 8000d1c:	1ac4      	subs	r4, r0, r3
 8000d1e:	42a0      	cmp	r0, r4
 8000d20:	419b      	sbcs	r3, r3
 8000d22:	425b      	negs	r3, r3
 8000d24:	1afb      	subs	r3, r7, r3
 8000d26:	469a      	mov	sl, r3
 8000d28:	465d      	mov	r5, fp
 8000d2a:	0016      	movs	r6, r2
 8000d2c:	e5dc      	b.n	80008e8 <__aeabi_dsub+0xb4>
 8000d2e:	4649      	mov	r1, r9
 8000d30:	4319      	orrs	r1, r3
 8000d32:	d100      	bne.n	8000d36 <__aeabi_dsub+0x502>
 8000d34:	e0ae      	b.n	8000e94 <__aeabi_dsub+0x660>
 8000d36:	4661      	mov	r1, ip
 8000d38:	4664      	mov	r4, ip
 8000d3a:	3901      	subs	r1, #1
 8000d3c:	2c01      	cmp	r4, #1
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dsub+0x50e>
 8000d40:	e0e0      	b.n	8000f04 <__aeabi_dsub+0x6d0>
 8000d42:	4c77      	ldr	r4, [pc, #476]	; (8000f20 <__aeabi_dsub+0x6ec>)
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	d056      	beq.n	8000df6 <__aeabi_dsub+0x5c2>
 8000d48:	468c      	mov	ip, r1
 8000d4a:	e69a      	b.n	8000a82 <__aeabi_dsub+0x24e>
 8000d4c:	4661      	mov	r1, ip
 8000d4e:	2220      	movs	r2, #32
 8000d50:	003c      	movs	r4, r7
 8000d52:	1a52      	subs	r2, r2, r1
 8000d54:	4094      	lsls	r4, r2
 8000d56:	0001      	movs	r1, r0
 8000d58:	4090      	lsls	r0, r2
 8000d5a:	46a0      	mov	r8, r4
 8000d5c:	4664      	mov	r4, ip
 8000d5e:	1e42      	subs	r2, r0, #1
 8000d60:	4190      	sbcs	r0, r2
 8000d62:	4662      	mov	r2, ip
 8000d64:	40e1      	lsrs	r1, r4
 8000d66:	4644      	mov	r4, r8
 8000d68:	40d7      	lsrs	r7, r2
 8000d6a:	430c      	orrs	r4, r1
 8000d6c:	4304      	orrs	r4, r0
 8000d6e:	44b9      	add	r9, r7
 8000d70:	e701      	b.n	8000b76 <__aeabi_dsub+0x342>
 8000d72:	496b      	ldr	r1, [pc, #428]	; (8000f20 <__aeabi_dsub+0x6ec>)
 8000d74:	428a      	cmp	r2, r1
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dsub+0x546>
 8000d78:	e70c      	b.n	8000b94 <__aeabi_dsub+0x360>
 8000d7a:	1818      	adds	r0, r3, r0
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	419b      	sbcs	r3, r3
 8000d80:	444f      	add	r7, r9
 8000d82:	425b      	negs	r3, r3
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	07dc      	lsls	r4, r3, #31
 8000d88:	0840      	lsrs	r0, r0, #1
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	469a      	mov	sl, r3
 8000d8e:	0016      	movs	r6, r2
 8000d90:	4304      	orrs	r4, r0
 8000d92:	e6d9      	b.n	8000b48 <__aeabi_dsub+0x314>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_dsub+0x566>
 8000d98:	e081      	b.n	8000e9e <__aeabi_dsub+0x66a>
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	4303      	orrs	r3, r0
 8000d9e:	d11d      	bne.n	8000ddc <__aeabi_dsub+0x5a8>
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	2500      	movs	r5, #0
 8000da4:	0312      	lsls	r2, r2, #12
 8000da6:	e70b      	b.n	8000bc0 <__aeabi_dsub+0x38c>
 8000da8:	08c0      	lsrs	r0, r0, #3
 8000daa:	077b      	lsls	r3, r7, #29
 8000dac:	465d      	mov	r5, fp
 8000dae:	4303      	orrs	r3, r0
 8000db0:	08fa      	lsrs	r2, r7, #3
 8000db2:	e6d3      	b.n	8000b5c <__aeabi_dsub+0x328>
 8000db4:	1ac4      	subs	r4, r0, r3
 8000db6:	42a0      	cmp	r0, r4
 8000db8:	4180      	sbcs	r0, r0
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4240      	negs	r0, r0
 8000dbe:	1aff      	subs	r7, r7, r3
 8000dc0:	1a3b      	subs	r3, r7, r0
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	465d      	mov	r5, fp
 8000dc6:	e597      	b.n	80008f8 <__aeabi_dsub+0xc4>
 8000dc8:	1a1c      	subs	r4, r3, r0
 8000dca:	464a      	mov	r2, r9
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	419b      	sbcs	r3, r3
 8000dd0:	1bd7      	subs	r7, r2, r7
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	1afb      	subs	r3, r7, r3
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	2601      	movs	r6, #1
 8000dda:	e585      	b.n	80008e8 <__aeabi_dsub+0xb4>
 8000ddc:	08c0      	lsrs	r0, r0, #3
 8000dde:	077b      	lsls	r3, r7, #29
 8000de0:	465d      	mov	r5, fp
 8000de2:	4303      	orrs	r3, r0
 8000de4:	08fa      	lsrs	r2, r7, #3
 8000de6:	e6e7      	b.n	8000bb8 <__aeabi_dsub+0x384>
 8000de8:	464a      	mov	r2, r9
 8000dea:	08db      	lsrs	r3, r3, #3
 8000dec:	0752      	lsls	r2, r2, #29
 8000dee:	4313      	orrs	r3, r2
 8000df0:	464a      	mov	r2, r9
 8000df2:	08d2      	lsrs	r2, r2, #3
 8000df4:	e6b5      	b.n	8000b62 <__aeabi_dsub+0x32e>
 8000df6:	08c0      	lsrs	r0, r0, #3
 8000df8:	077b      	lsls	r3, r7, #29
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	08fa      	lsrs	r2, r7, #3
 8000dfe:	e6db      	b.n	8000bb8 <__aeabi_dsub+0x384>
 8000e00:	4649      	mov	r1, r9
 8000e02:	4319      	orrs	r1, r3
 8000e04:	000b      	movs	r3, r1
 8000e06:	1e59      	subs	r1, r3, #1
 8000e08:	418b      	sbcs	r3, r1
 8000e0a:	001c      	movs	r4, r3
 8000e0c:	e653      	b.n	8000ab6 <__aeabi_dsub+0x282>
 8000e0e:	464d      	mov	r5, r9
 8000e10:	3c20      	subs	r4, #32
 8000e12:	40e5      	lsrs	r5, r4
 8000e14:	2920      	cmp	r1, #32
 8000e16:	d005      	beq.n	8000e24 <__aeabi_dsub+0x5f0>
 8000e18:	2440      	movs	r4, #64	; 0x40
 8000e1a:	1a64      	subs	r4, r4, r1
 8000e1c:	4649      	mov	r1, r9
 8000e1e:	40a1      	lsls	r1, r4
 8000e20:	430b      	orrs	r3, r1
 8000e22:	4698      	mov	r8, r3
 8000e24:	4643      	mov	r3, r8
 8000e26:	1e5c      	subs	r4, r3, #1
 8000e28:	41a3      	sbcs	r3, r4
 8000e2a:	432b      	orrs	r3, r5
 8000e2c:	e776      	b.n	8000d1c <__aeabi_dsub+0x4e8>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d0e1      	beq.n	8000df6 <__aeabi_dsub+0x5c2>
 8000e32:	003a      	movs	r2, r7
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	4302      	orrs	r2, r0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dsub+0x608>
 8000e3a:	e6b8      	b.n	8000bae <__aeabi_dsub+0x37a>
 8000e3c:	464a      	mov	r2, r9
 8000e3e:	0752      	lsls	r2, r2, #29
 8000e40:	2480      	movs	r4, #128	; 0x80
 8000e42:	4313      	orrs	r3, r2
 8000e44:	464a      	mov	r2, r9
 8000e46:	0324      	lsls	r4, r4, #12
 8000e48:	08d2      	lsrs	r2, r2, #3
 8000e4a:	4222      	tst	r2, r4
 8000e4c:	d007      	beq.n	8000e5e <__aeabi_dsub+0x62a>
 8000e4e:	08fe      	lsrs	r6, r7, #3
 8000e50:	4226      	tst	r6, r4
 8000e52:	d104      	bne.n	8000e5e <__aeabi_dsub+0x62a>
 8000e54:	465d      	mov	r5, fp
 8000e56:	0032      	movs	r2, r6
 8000e58:	08c3      	lsrs	r3, r0, #3
 8000e5a:	077f      	lsls	r7, r7, #29
 8000e5c:	433b      	orrs	r3, r7
 8000e5e:	0f59      	lsrs	r1, r3, #29
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	0749      	lsls	r1, r1, #29
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	430b      	orrs	r3, r1
 8000e68:	e6a6      	b.n	8000bb8 <__aeabi_dsub+0x384>
 8000e6a:	1ac4      	subs	r4, r0, r3
 8000e6c:	42a0      	cmp	r0, r4
 8000e6e:	4180      	sbcs	r0, r0
 8000e70:	464b      	mov	r3, r9
 8000e72:	4240      	negs	r0, r0
 8000e74:	1aff      	subs	r7, r7, r3
 8000e76:	1a3b      	subs	r3, r7, r0
 8000e78:	469a      	mov	sl, r3
 8000e7a:	465d      	mov	r5, fp
 8000e7c:	2601      	movs	r6, #1
 8000e7e:	e533      	b.n	80008e8 <__aeabi_dsub+0xb4>
 8000e80:	003b      	movs	r3, r7
 8000e82:	4303      	orrs	r3, r0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dsub+0x654>
 8000e86:	e715      	b.n	8000cb4 <__aeabi_dsub+0x480>
 8000e88:	08c0      	lsrs	r0, r0, #3
 8000e8a:	077b      	lsls	r3, r7, #29
 8000e8c:	465d      	mov	r5, fp
 8000e8e:	4303      	orrs	r3, r0
 8000e90:	08fa      	lsrs	r2, r7, #3
 8000e92:	e666      	b.n	8000b62 <__aeabi_dsub+0x32e>
 8000e94:	08c0      	lsrs	r0, r0, #3
 8000e96:	077b      	lsls	r3, r7, #29
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	08fa      	lsrs	r2, r7, #3
 8000e9c:	e65e      	b.n	8000b5c <__aeabi_dsub+0x328>
 8000e9e:	003a      	movs	r2, r7
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dsub+0x674>
 8000ea6:	e682      	b.n	8000bae <__aeabi_dsub+0x37a>
 8000ea8:	464a      	mov	r2, r9
 8000eaa:	0752      	lsls	r2, r2, #29
 8000eac:	2480      	movs	r4, #128	; 0x80
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	464a      	mov	r2, r9
 8000eb2:	0324      	lsls	r4, r4, #12
 8000eb4:	08d2      	lsrs	r2, r2, #3
 8000eb6:	4222      	tst	r2, r4
 8000eb8:	d007      	beq.n	8000eca <__aeabi_dsub+0x696>
 8000eba:	08fe      	lsrs	r6, r7, #3
 8000ebc:	4226      	tst	r6, r4
 8000ebe:	d104      	bne.n	8000eca <__aeabi_dsub+0x696>
 8000ec0:	465d      	mov	r5, fp
 8000ec2:	0032      	movs	r2, r6
 8000ec4:	08c3      	lsrs	r3, r0, #3
 8000ec6:	077f      	lsls	r7, r7, #29
 8000ec8:	433b      	orrs	r3, r7
 8000eca:	0f59      	lsrs	r1, r3, #29
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	0749      	lsls	r1, r1, #29
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	e670      	b.n	8000bb8 <__aeabi_dsub+0x384>
 8000ed6:	08c0      	lsrs	r0, r0, #3
 8000ed8:	077b      	lsls	r3, r7, #29
 8000eda:	4303      	orrs	r3, r0
 8000edc:	08fa      	lsrs	r2, r7, #3
 8000ede:	e640      	b.n	8000b62 <__aeabi_dsub+0x32e>
 8000ee0:	464c      	mov	r4, r9
 8000ee2:	3920      	subs	r1, #32
 8000ee4:	40cc      	lsrs	r4, r1
 8000ee6:	4661      	mov	r1, ip
 8000ee8:	2920      	cmp	r1, #32
 8000eea:	d006      	beq.n	8000efa <__aeabi_dsub+0x6c6>
 8000eec:	4666      	mov	r6, ip
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	1b89      	subs	r1, r1, r6
 8000ef2:	464e      	mov	r6, r9
 8000ef4:	408e      	lsls	r6, r1
 8000ef6:	4333      	orrs	r3, r6
 8000ef8:	4698      	mov	r8, r3
 8000efa:	4643      	mov	r3, r8
 8000efc:	1e59      	subs	r1, r3, #1
 8000efe:	418b      	sbcs	r3, r1
 8000f00:	431c      	orrs	r4, r3
 8000f02:	e5d8      	b.n	8000ab6 <__aeabi_dsub+0x282>
 8000f04:	181c      	adds	r4, r3, r0
 8000f06:	4284      	cmp	r4, r0
 8000f08:	4180      	sbcs	r0, r0
 8000f0a:	444f      	add	r7, r9
 8000f0c:	46ba      	mov	sl, r7
 8000f0e:	4240      	negs	r0, r0
 8000f10:	4482      	add	sl, r0
 8000f12:	e6d9      	b.n	8000cc8 <__aeabi_dsub+0x494>
 8000f14:	4653      	mov	r3, sl
 8000f16:	4323      	orrs	r3, r4
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dsub+0x6e8>
 8000f1a:	e6cb      	b.n	8000cb4 <__aeabi_dsub+0x480>
 8000f1c:	e614      	b.n	8000b48 <__aeabi_dsub+0x314>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	000007ff 	.word	0x000007ff
 8000f24:	ff7fffff 	.word	0xff7fffff
 8000f28:	000007fe 	.word	0x000007fe
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	4a01      	ldr	r2, [pc, #4]	; (8000f34 <__aeabi_dsub+0x700>)
 8000f30:	001c      	movs	r4, r3
 8000f32:	e529      	b.n	8000988 <__aeabi_dsub+0x154>
 8000f34:	000007ff 	.word	0x000007ff

08000f38 <__aeabi_d2iz>:
 8000f38:	000a      	movs	r2, r1
 8000f3a:	b530      	push	{r4, r5, lr}
 8000f3c:	4c13      	ldr	r4, [pc, #76]	; (8000f8c <__aeabi_d2iz+0x54>)
 8000f3e:	0053      	lsls	r3, r2, #1
 8000f40:	0309      	lsls	r1, r1, #12
 8000f42:	0005      	movs	r5, r0
 8000f44:	0b09      	lsrs	r1, r1, #12
 8000f46:	2000      	movs	r0, #0
 8000f48:	0d5b      	lsrs	r3, r3, #21
 8000f4a:	0fd2      	lsrs	r2, r2, #31
 8000f4c:	42a3      	cmp	r3, r4
 8000f4e:	dd04      	ble.n	8000f5a <__aeabi_d2iz+0x22>
 8000f50:	480f      	ldr	r0, [pc, #60]	; (8000f90 <__aeabi_d2iz+0x58>)
 8000f52:	4283      	cmp	r3, r0
 8000f54:	dd02      	ble.n	8000f5c <__aeabi_d2iz+0x24>
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <__aeabi_d2iz+0x5c>)
 8000f58:	18d0      	adds	r0, r2, r3
 8000f5a:	bd30      	pop	{r4, r5, pc}
 8000f5c:	2080      	movs	r0, #128	; 0x80
 8000f5e:	0340      	lsls	r0, r0, #13
 8000f60:	4301      	orrs	r1, r0
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <__aeabi_d2iz+0x60>)
 8000f64:	1ac0      	subs	r0, r0, r3
 8000f66:	281f      	cmp	r0, #31
 8000f68:	dd08      	ble.n	8000f7c <__aeabi_d2iz+0x44>
 8000f6a:	480c      	ldr	r0, [pc, #48]	; (8000f9c <__aeabi_d2iz+0x64>)
 8000f6c:	1ac3      	subs	r3, r0, r3
 8000f6e:	40d9      	lsrs	r1, r3
 8000f70:	000b      	movs	r3, r1
 8000f72:	4258      	negs	r0, r3
 8000f74:	2a00      	cmp	r2, #0
 8000f76:	d1f0      	bne.n	8000f5a <__aeabi_d2iz+0x22>
 8000f78:	0018      	movs	r0, r3
 8000f7a:	e7ee      	b.n	8000f5a <__aeabi_d2iz+0x22>
 8000f7c:	4c08      	ldr	r4, [pc, #32]	; (8000fa0 <__aeabi_d2iz+0x68>)
 8000f7e:	40c5      	lsrs	r5, r0
 8000f80:	46a4      	mov	ip, r4
 8000f82:	4463      	add	r3, ip
 8000f84:	4099      	lsls	r1, r3
 8000f86:	000b      	movs	r3, r1
 8000f88:	432b      	orrs	r3, r5
 8000f8a:	e7f2      	b.n	8000f72 <__aeabi_d2iz+0x3a>
 8000f8c:	000003fe 	.word	0x000003fe
 8000f90:	0000041d 	.word	0x0000041d
 8000f94:	7fffffff 	.word	0x7fffffff
 8000f98:	00000433 	.word	0x00000433
 8000f9c:	00000413 	.word	0x00000413
 8000fa0:	fffffbed 	.word	0xfffffbed

08000fa4 <__aeabi_i2d>:
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d016      	beq.n	8000fd8 <__aeabi_i2d+0x34>
 8000faa:	17c3      	asrs	r3, r0, #31
 8000fac:	18c5      	adds	r5, r0, r3
 8000fae:	405d      	eors	r5, r3
 8000fb0:	0fc4      	lsrs	r4, r0, #31
 8000fb2:	0028      	movs	r0, r5
 8000fb4:	f000 f864 	bl	8001080 <__clzsi2>
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <__aeabi_i2d+0x5c>)
 8000fba:	1a1b      	subs	r3, r3, r0
 8000fbc:	280a      	cmp	r0, #10
 8000fbe:	dc16      	bgt.n	8000fee <__aeabi_i2d+0x4a>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	002e      	movs	r6, r5
 8000fc4:	3215      	adds	r2, #21
 8000fc6:	4096      	lsls	r6, r2
 8000fc8:	220b      	movs	r2, #11
 8000fca:	1a12      	subs	r2, r2, r0
 8000fcc:	40d5      	lsrs	r5, r2
 8000fce:	055b      	lsls	r3, r3, #21
 8000fd0:	032d      	lsls	r5, r5, #12
 8000fd2:	0b2d      	lsrs	r5, r5, #12
 8000fd4:	0d5b      	lsrs	r3, r3, #21
 8000fd6:	e003      	b.n	8000fe0 <__aeabi_i2d+0x3c>
 8000fd8:	2400      	movs	r4, #0
 8000fda:	2300      	movs	r3, #0
 8000fdc:	2500      	movs	r5, #0
 8000fde:	2600      	movs	r6, #0
 8000fe0:	051b      	lsls	r3, r3, #20
 8000fe2:	432b      	orrs	r3, r5
 8000fe4:	07e4      	lsls	r4, r4, #31
 8000fe6:	4323      	orrs	r3, r4
 8000fe8:	0030      	movs	r0, r6
 8000fea:	0019      	movs	r1, r3
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
 8000fee:	380b      	subs	r0, #11
 8000ff0:	4085      	lsls	r5, r0
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	032d      	lsls	r5, r5, #12
 8000ff6:	2600      	movs	r6, #0
 8000ff8:	0b2d      	lsrs	r5, r5, #12
 8000ffa:	0d5b      	lsrs	r3, r3, #21
 8000ffc:	e7f0      	b.n	8000fe0 <__aeabi_i2d+0x3c>
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	0000041e 	.word	0x0000041e

08001004 <__aeabi_cdrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	0010      	movs	r0, r2
 8001008:	4662      	mov	r2, ip
 800100a:	468c      	mov	ip, r1
 800100c:	0019      	movs	r1, r3
 800100e:	4663      	mov	r3, ip
 8001010:	e000      	b.n	8001014 <__aeabi_cdcmpeq>
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__aeabi_cdcmpeq>:
 8001014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001016:	f000 f8f9 	bl	800120c <__ledf2>
 800101a:	2800      	cmp	r0, #0
 800101c:	d401      	bmi.n	8001022 <__aeabi_cdcmpeq+0xe>
 800101e:	2100      	movs	r1, #0
 8001020:	42c8      	cmn	r0, r1
 8001022:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001024 <__aeabi_dcmpeq>:
 8001024:	b510      	push	{r4, lr}
 8001026:	f000 f849 	bl	80010bc <__eqdf2>
 800102a:	4240      	negs	r0, r0
 800102c:	3001      	adds	r0, #1
 800102e:	bd10      	pop	{r4, pc}

08001030 <__aeabi_dcmplt>:
 8001030:	b510      	push	{r4, lr}
 8001032:	f000 f8eb 	bl	800120c <__ledf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	db01      	blt.n	800103e <__aeabi_dcmplt+0xe>
 800103a:	2000      	movs	r0, #0
 800103c:	bd10      	pop	{r4, pc}
 800103e:	2001      	movs	r0, #1
 8001040:	bd10      	pop	{r4, pc}
 8001042:	46c0      	nop			; (mov r8, r8)

08001044 <__aeabi_dcmple>:
 8001044:	b510      	push	{r4, lr}
 8001046:	f000 f8e1 	bl	800120c <__ledf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	dd01      	ble.n	8001052 <__aeabi_dcmple+0xe>
 800104e:	2000      	movs	r0, #0
 8001050:	bd10      	pop	{r4, pc}
 8001052:	2001      	movs	r0, #1
 8001054:	bd10      	pop	{r4, pc}
 8001056:	46c0      	nop			; (mov r8, r8)

08001058 <__aeabi_dcmpgt>:
 8001058:	b510      	push	{r4, lr}
 800105a:	f000 f871 	bl	8001140 <__gedf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	dc01      	bgt.n	8001066 <__aeabi_dcmpgt+0xe>
 8001062:	2000      	movs	r0, #0
 8001064:	bd10      	pop	{r4, pc}
 8001066:	2001      	movs	r0, #1
 8001068:	bd10      	pop	{r4, pc}
 800106a:	46c0      	nop			; (mov r8, r8)

0800106c <__aeabi_dcmpge>:
 800106c:	b510      	push	{r4, lr}
 800106e:	f000 f867 	bl	8001140 <__gedf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	da01      	bge.n	800107a <__aeabi_dcmpge+0xe>
 8001076:	2000      	movs	r0, #0
 8001078:	bd10      	pop	{r4, pc}
 800107a:	2001      	movs	r0, #1
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <__clzsi2>:
 8001080:	211c      	movs	r1, #28
 8001082:	2301      	movs	r3, #1
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d301      	bcc.n	800108e <__clzsi2+0xe>
 800108a:	0c00      	lsrs	r0, r0, #16
 800108c:	3910      	subs	r1, #16
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4298      	cmp	r0, r3
 8001092:	d301      	bcc.n	8001098 <__clzsi2+0x18>
 8001094:	0a00      	lsrs	r0, r0, #8
 8001096:	3908      	subs	r1, #8
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	4298      	cmp	r0, r3
 800109c:	d301      	bcc.n	80010a2 <__clzsi2+0x22>
 800109e:	0900      	lsrs	r0, r0, #4
 80010a0:	3904      	subs	r1, #4
 80010a2:	a202      	add	r2, pc, #8	; (adr r2, 80010ac <__clzsi2+0x2c>)
 80010a4:	5c10      	ldrb	r0, [r2, r0]
 80010a6:	1840      	adds	r0, r0, r1
 80010a8:	4770      	bx	lr
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	02020304 	.word	0x02020304
 80010b0:	01010101 	.word	0x01010101
	...

080010bc <__eqdf2>:
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	464e      	mov	r6, r9
 80010c0:	4645      	mov	r5, r8
 80010c2:	46de      	mov	lr, fp
 80010c4:	4657      	mov	r7, sl
 80010c6:	4690      	mov	r8, r2
 80010c8:	b5e0      	push	{r5, r6, r7, lr}
 80010ca:	0017      	movs	r7, r2
 80010cc:	031a      	lsls	r2, r3, #12
 80010ce:	0b12      	lsrs	r2, r2, #12
 80010d0:	0005      	movs	r5, r0
 80010d2:	4684      	mov	ip, r0
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <__eqdf2+0x80>)
 80010d6:	030e      	lsls	r6, r1, #12
 80010d8:	004c      	lsls	r4, r1, #1
 80010da:	4691      	mov	r9, r2
 80010dc:	005a      	lsls	r2, r3, #1
 80010de:	0fdb      	lsrs	r3, r3, #31
 80010e0:	469b      	mov	fp, r3
 80010e2:	0b36      	lsrs	r6, r6, #12
 80010e4:	0d64      	lsrs	r4, r4, #21
 80010e6:	0fc9      	lsrs	r1, r1, #31
 80010e8:	0d52      	lsrs	r2, r2, #21
 80010ea:	4284      	cmp	r4, r0
 80010ec:	d019      	beq.n	8001122 <__eqdf2+0x66>
 80010ee:	4282      	cmp	r2, r0
 80010f0:	d010      	beq.n	8001114 <__eqdf2+0x58>
 80010f2:	2001      	movs	r0, #1
 80010f4:	4294      	cmp	r4, r2
 80010f6:	d10e      	bne.n	8001116 <__eqdf2+0x5a>
 80010f8:	454e      	cmp	r6, r9
 80010fa:	d10c      	bne.n	8001116 <__eqdf2+0x5a>
 80010fc:	2001      	movs	r0, #1
 80010fe:	45c4      	cmp	ip, r8
 8001100:	d109      	bne.n	8001116 <__eqdf2+0x5a>
 8001102:	4559      	cmp	r1, fp
 8001104:	d017      	beq.n	8001136 <__eqdf2+0x7a>
 8001106:	2c00      	cmp	r4, #0
 8001108:	d105      	bne.n	8001116 <__eqdf2+0x5a>
 800110a:	0030      	movs	r0, r6
 800110c:	4328      	orrs	r0, r5
 800110e:	1e43      	subs	r3, r0, #1
 8001110:	4198      	sbcs	r0, r3
 8001112:	e000      	b.n	8001116 <__eqdf2+0x5a>
 8001114:	2001      	movs	r0, #1
 8001116:	bcf0      	pop	{r4, r5, r6, r7}
 8001118:	46bb      	mov	fp, r7
 800111a:	46b2      	mov	sl, r6
 800111c:	46a9      	mov	r9, r5
 800111e:	46a0      	mov	r8, r4
 8001120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001122:	0033      	movs	r3, r6
 8001124:	2001      	movs	r0, #1
 8001126:	432b      	orrs	r3, r5
 8001128:	d1f5      	bne.n	8001116 <__eqdf2+0x5a>
 800112a:	42a2      	cmp	r2, r4
 800112c:	d1f3      	bne.n	8001116 <__eqdf2+0x5a>
 800112e:	464b      	mov	r3, r9
 8001130:	433b      	orrs	r3, r7
 8001132:	d1f0      	bne.n	8001116 <__eqdf2+0x5a>
 8001134:	e7e2      	b.n	80010fc <__eqdf2+0x40>
 8001136:	2000      	movs	r0, #0
 8001138:	e7ed      	b.n	8001116 <__eqdf2+0x5a>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff

08001140 <__gedf2>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	4647      	mov	r7, r8
 8001144:	46ce      	mov	lr, r9
 8001146:	0004      	movs	r4, r0
 8001148:	0018      	movs	r0, r3
 800114a:	0016      	movs	r6, r2
 800114c:	031b      	lsls	r3, r3, #12
 800114e:	0b1b      	lsrs	r3, r3, #12
 8001150:	4d2d      	ldr	r5, [pc, #180]	; (8001208 <__gedf2+0xc8>)
 8001152:	004a      	lsls	r2, r1, #1
 8001154:	4699      	mov	r9, r3
 8001156:	b580      	push	{r7, lr}
 8001158:	0043      	lsls	r3, r0, #1
 800115a:	030f      	lsls	r7, r1, #12
 800115c:	46a4      	mov	ip, r4
 800115e:	46b0      	mov	r8, r6
 8001160:	0b3f      	lsrs	r7, r7, #12
 8001162:	0d52      	lsrs	r2, r2, #21
 8001164:	0fc9      	lsrs	r1, r1, #31
 8001166:	0d5b      	lsrs	r3, r3, #21
 8001168:	0fc0      	lsrs	r0, r0, #31
 800116a:	42aa      	cmp	r2, r5
 800116c:	d021      	beq.n	80011b2 <__gedf2+0x72>
 800116e:	42ab      	cmp	r3, r5
 8001170:	d013      	beq.n	800119a <__gedf2+0x5a>
 8001172:	2a00      	cmp	r2, #0
 8001174:	d122      	bne.n	80011bc <__gedf2+0x7c>
 8001176:	433c      	orrs	r4, r7
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <__gedf2+0x42>
 800117c:	464d      	mov	r5, r9
 800117e:	432e      	orrs	r6, r5
 8001180:	d022      	beq.n	80011c8 <__gedf2+0x88>
 8001182:	2c00      	cmp	r4, #0
 8001184:	d010      	beq.n	80011a8 <__gedf2+0x68>
 8001186:	4281      	cmp	r1, r0
 8001188:	d022      	beq.n	80011d0 <__gedf2+0x90>
 800118a:	2002      	movs	r0, #2
 800118c:	3901      	subs	r1, #1
 800118e:	4008      	ands	r0, r1
 8001190:	3801      	subs	r0, #1
 8001192:	bcc0      	pop	{r6, r7}
 8001194:	46b9      	mov	r9, r7
 8001196:	46b0      	mov	r8, r6
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	464d      	mov	r5, r9
 800119c:	432e      	orrs	r6, r5
 800119e:	d129      	bne.n	80011f4 <__gedf2+0xb4>
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d1f0      	bne.n	8001186 <__gedf2+0x46>
 80011a4:	433c      	orrs	r4, r7
 80011a6:	d1ee      	bne.n	8001186 <__gedf2+0x46>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d1f2      	bne.n	8001192 <__gedf2+0x52>
 80011ac:	2001      	movs	r0, #1
 80011ae:	4240      	negs	r0, r0
 80011b0:	e7ef      	b.n	8001192 <__gedf2+0x52>
 80011b2:	003d      	movs	r5, r7
 80011b4:	4325      	orrs	r5, r4
 80011b6:	d11d      	bne.n	80011f4 <__gedf2+0xb4>
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d0ee      	beq.n	800119a <__gedf2+0x5a>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e2      	bne.n	8001186 <__gedf2+0x46>
 80011c0:	464c      	mov	r4, r9
 80011c2:	4326      	orrs	r6, r4
 80011c4:	d1df      	bne.n	8001186 <__gedf2+0x46>
 80011c6:	e7e0      	b.n	800118a <__gedf2+0x4a>
 80011c8:	2000      	movs	r0, #0
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	d0e1      	beq.n	8001192 <__gedf2+0x52>
 80011ce:	e7dc      	b.n	800118a <__gedf2+0x4a>
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dc0a      	bgt.n	80011ea <__gedf2+0xaa>
 80011d4:	dbe8      	blt.n	80011a8 <__gedf2+0x68>
 80011d6:	454f      	cmp	r7, r9
 80011d8:	d8d7      	bhi.n	800118a <__gedf2+0x4a>
 80011da:	d00e      	beq.n	80011fa <__gedf2+0xba>
 80011dc:	2000      	movs	r0, #0
 80011de:	454f      	cmp	r7, r9
 80011e0:	d2d7      	bcs.n	8001192 <__gedf2+0x52>
 80011e2:	2900      	cmp	r1, #0
 80011e4:	d0e2      	beq.n	80011ac <__gedf2+0x6c>
 80011e6:	0008      	movs	r0, r1
 80011e8:	e7d3      	b.n	8001192 <__gedf2+0x52>
 80011ea:	4243      	negs	r3, r0
 80011ec:	4158      	adcs	r0, r3
 80011ee:	0040      	lsls	r0, r0, #1
 80011f0:	3801      	subs	r0, #1
 80011f2:	e7ce      	b.n	8001192 <__gedf2+0x52>
 80011f4:	2002      	movs	r0, #2
 80011f6:	4240      	negs	r0, r0
 80011f8:	e7cb      	b.n	8001192 <__gedf2+0x52>
 80011fa:	45c4      	cmp	ip, r8
 80011fc:	d8c5      	bhi.n	800118a <__gedf2+0x4a>
 80011fe:	2000      	movs	r0, #0
 8001200:	45c4      	cmp	ip, r8
 8001202:	d2c6      	bcs.n	8001192 <__gedf2+0x52>
 8001204:	e7ed      	b.n	80011e2 <__gedf2+0xa2>
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	000007ff 	.word	0x000007ff

0800120c <__ledf2>:
 800120c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120e:	4647      	mov	r7, r8
 8001210:	46ce      	mov	lr, r9
 8001212:	0004      	movs	r4, r0
 8001214:	0018      	movs	r0, r3
 8001216:	0016      	movs	r6, r2
 8001218:	031b      	lsls	r3, r3, #12
 800121a:	0b1b      	lsrs	r3, r3, #12
 800121c:	4d2c      	ldr	r5, [pc, #176]	; (80012d0 <__ledf2+0xc4>)
 800121e:	004a      	lsls	r2, r1, #1
 8001220:	4699      	mov	r9, r3
 8001222:	b580      	push	{r7, lr}
 8001224:	0043      	lsls	r3, r0, #1
 8001226:	030f      	lsls	r7, r1, #12
 8001228:	46a4      	mov	ip, r4
 800122a:	46b0      	mov	r8, r6
 800122c:	0b3f      	lsrs	r7, r7, #12
 800122e:	0d52      	lsrs	r2, r2, #21
 8001230:	0fc9      	lsrs	r1, r1, #31
 8001232:	0d5b      	lsrs	r3, r3, #21
 8001234:	0fc0      	lsrs	r0, r0, #31
 8001236:	42aa      	cmp	r2, r5
 8001238:	d00d      	beq.n	8001256 <__ledf2+0x4a>
 800123a:	42ab      	cmp	r3, r5
 800123c:	d010      	beq.n	8001260 <__ledf2+0x54>
 800123e:	2a00      	cmp	r2, #0
 8001240:	d127      	bne.n	8001292 <__ledf2+0x86>
 8001242:	433c      	orrs	r4, r7
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <__ledf2+0x60>
 8001248:	464d      	mov	r5, r9
 800124a:	432e      	orrs	r6, r5
 800124c:	d10e      	bne.n	800126c <__ledf2+0x60>
 800124e:	2000      	movs	r0, #0
 8001250:	2c00      	cmp	r4, #0
 8001252:	d015      	beq.n	8001280 <__ledf2+0x74>
 8001254:	e00e      	b.n	8001274 <__ledf2+0x68>
 8001256:	003d      	movs	r5, r7
 8001258:	4325      	orrs	r5, r4
 800125a:	d110      	bne.n	800127e <__ledf2+0x72>
 800125c:	4293      	cmp	r3, r2
 800125e:	d118      	bne.n	8001292 <__ledf2+0x86>
 8001260:	464d      	mov	r5, r9
 8001262:	432e      	orrs	r6, r5
 8001264:	d10b      	bne.n	800127e <__ledf2+0x72>
 8001266:	2a00      	cmp	r2, #0
 8001268:	d102      	bne.n	8001270 <__ledf2+0x64>
 800126a:	433c      	orrs	r4, r7
 800126c:	2c00      	cmp	r4, #0
 800126e:	d00b      	beq.n	8001288 <__ledf2+0x7c>
 8001270:	4281      	cmp	r1, r0
 8001272:	d014      	beq.n	800129e <__ledf2+0x92>
 8001274:	2002      	movs	r0, #2
 8001276:	3901      	subs	r1, #1
 8001278:	4008      	ands	r0, r1
 800127a:	3801      	subs	r0, #1
 800127c:	e000      	b.n	8001280 <__ledf2+0x74>
 800127e:	2002      	movs	r0, #2
 8001280:	bcc0      	pop	{r6, r7}
 8001282:	46b9      	mov	r9, r7
 8001284:	46b0      	mov	r8, r6
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001288:	2800      	cmp	r0, #0
 800128a:	d1f9      	bne.n	8001280 <__ledf2+0x74>
 800128c:	2001      	movs	r0, #1
 800128e:	4240      	negs	r0, r0
 8001290:	e7f6      	b.n	8001280 <__ledf2+0x74>
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ec      	bne.n	8001270 <__ledf2+0x64>
 8001296:	464c      	mov	r4, r9
 8001298:	4326      	orrs	r6, r4
 800129a:	d1e9      	bne.n	8001270 <__ledf2+0x64>
 800129c:	e7ea      	b.n	8001274 <__ledf2+0x68>
 800129e:	429a      	cmp	r2, r3
 80012a0:	dd04      	ble.n	80012ac <__ledf2+0xa0>
 80012a2:	4243      	negs	r3, r0
 80012a4:	4158      	adcs	r0, r3
 80012a6:	0040      	lsls	r0, r0, #1
 80012a8:	3801      	subs	r0, #1
 80012aa:	e7e9      	b.n	8001280 <__ledf2+0x74>
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbeb      	blt.n	8001288 <__ledf2+0x7c>
 80012b0:	454f      	cmp	r7, r9
 80012b2:	d8df      	bhi.n	8001274 <__ledf2+0x68>
 80012b4:	d006      	beq.n	80012c4 <__ledf2+0xb8>
 80012b6:	2000      	movs	r0, #0
 80012b8:	454f      	cmp	r7, r9
 80012ba:	d2e1      	bcs.n	8001280 <__ledf2+0x74>
 80012bc:	2900      	cmp	r1, #0
 80012be:	d0e5      	beq.n	800128c <__ledf2+0x80>
 80012c0:	0008      	movs	r0, r1
 80012c2:	e7dd      	b.n	8001280 <__ledf2+0x74>
 80012c4:	45c4      	cmp	ip, r8
 80012c6:	d8d5      	bhi.n	8001274 <__ledf2+0x68>
 80012c8:	2000      	movs	r0, #0
 80012ca:	45c4      	cmp	ip, r8
 80012cc:	d2d8      	bcs.n	8001280 <__ledf2+0x74>
 80012ce:	e7f5      	b.n	80012bc <__ledf2+0xb0>
 80012d0:	000007ff 	.word	0x000007ff

080012d4 <Read_IMU_Gyro>:
	temp_degree = ((temperature/340) + 36.53);
}


void Read_IMU_Gyro()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_GYRO_X_H ,1, Rx_gyro_values, 6, 1000);
 80012da:	483b      	ldr	r0, [pc, #236]	; (80013c8 <Read_IMU_Gyro+0xf4>)
 80012dc:	23fa      	movs	r3, #250	; 0xfa
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2306      	movs	r3, #6
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <Read_IMU_Gyro+0xf8>)
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	2243      	movs	r2, #67	; 0x43
 80012ee:	21d0      	movs	r1, #208	; 0xd0
 80012f0:	f001 f8bc 	bl	800246c <HAL_I2C_Mem_Read>
    Gyro_X_data = (int16_t)(Rx_gyro_values[0] << 8 | Rx_gyro_values [1]);
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <Read_IMU_Gyro+0xf8>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b33      	ldr	r3, [pc, #204]	; (80013cc <Read_IMU_Gyro+0xf8>)
 80012fe:	785b      	ldrb	r3, [r3, #1]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <Read_IMU_Gyro+0xfc>)
 8001308:	801a      	strh	r2, [r3, #0]
    Gyro_Y_data = (int16_t)(Rx_gyro_values[2] << 8 | Rx_gyro_values [3]);
 800130a:	4b30      	ldr	r3, [pc, #192]	; (80013cc <Read_IMU_Gyro+0xf8>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <Read_IMU_Gyro+0xf8>)
 8001314:	78db      	ldrb	r3, [r3, #3]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <Read_IMU_Gyro+0x100>)
 800131e:	801a      	strh	r2, [r3, #0]
    Gyro_Z_data = (int16_t)(Rx_gyro_values[4] << 8 | Rx_gyro_values [5]);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <Read_IMU_Gyro+0xf8>)
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <Read_IMU_Gyro+0xf8>)
 800132a:	795b      	ldrb	r3, [r3, #5]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <Read_IMU_Gyro+0x104>)
 8001334:	801a      	strh	r2, [r3, #0]

    Gx = Gyro_X_data / 131.0;
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <Read_IMU_Gyro+0xfc>)
 8001338:	2200      	movs	r2, #0
 800133a:	5e9b      	ldrsh	r3, [r3, r2]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff fe31 	bl	8000fa4 <__aeabi_i2d>
 8001342:	2200      	movs	r2, #0
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <Read_IMU_Gyro+0x108>)
 8001346:	f7fe ff87 	bl	8000258 <__aeabi_ddiv>
 800134a:	0002      	movs	r2, r0
 800134c:	000b      	movs	r3, r1
 800134e:	0010      	movs	r0, r2
 8001350:	0019      	movs	r1, r3
 8001352:	f7fe ff63 	bl	800021c <__aeabi_d2uiz>
 8001356:	0003      	movs	r3, r0
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <Read_IMU_Gyro+0x10c>)
 800135c:	701a      	strb	r2, [r3, #0]
    Gy = Gyro_Y_data / 131.0;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <Read_IMU_Gyro+0x100>)
 8001360:	2200      	movs	r2, #0
 8001362:	5e9b      	ldrsh	r3, [r3, r2]
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff fe1d 	bl	8000fa4 <__aeabi_i2d>
 800136a:	2200      	movs	r2, #0
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <Read_IMU_Gyro+0x108>)
 800136e:	f7fe ff73 	bl	8000258 <__aeabi_ddiv>
 8001372:	0002      	movs	r2, r0
 8001374:	000b      	movs	r3, r1
 8001376:	0010      	movs	r0, r2
 8001378:	0019      	movs	r1, r3
 800137a:	f7fe ff4f 	bl	800021c <__aeabi_d2uiz>
 800137e:	0003      	movs	r3, r0
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <Read_IMU_Gyro+0x110>)
 8001384:	701a      	strb	r2, [r3, #0]
    Gy = Gyro_X_data / 131.0;
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <Read_IMU_Gyro+0xfc>)
 8001388:	2200      	movs	r2, #0
 800138a:	5e9b      	ldrsh	r3, [r3, r2]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fe09 	bl	8000fa4 <__aeabi_i2d>
 8001392:	2200      	movs	r2, #0
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <Read_IMU_Gyro+0x108>)
 8001396:	f7fe ff5f 	bl	8000258 <__aeabi_ddiv>
 800139a:	0002      	movs	r2, r0
 800139c:	000b      	movs	r3, r1
 800139e:	0010      	movs	r0, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	f7fe ff3b 	bl	800021c <__aeabi_d2uiz>
 80013a6:	0003      	movs	r3, r0
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <Read_IMU_Gyro+0x110>)
 80013ac:	701a      	strb	r2, [r3, #0]

    if (Gx >= 5)
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <Read_IMU_Gyro+0x10c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d905      	bls.n	80013c2 <Read_IMU_Gyro+0xee>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80013b6:	23a0      	movs	r3, #160	; 0xa0
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	2102      	movs	r1, #2
 80013bc:	0018      	movs	r0, r3
 80013be:	f000 fe66 	bl	800208e <HAL_GPIO_TogglePin>
	}
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000003c 	.word	0x2000003c
 80013cc:	2000002c 	.word	0x2000002c
 80013d0:	20000032 	.word	0x20000032
 80013d4:	20000034 	.word	0x20000034
 80013d8:	20000036 	.word	0x20000036
 80013dc:	40606000 	.word	0x40606000
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000039 	.word	0x20000039

080013e8 <init_IMU_MPU6050>:


void init_IMU_MPU6050()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af04      	add	r7, sp, #16
uint8_t check;

	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, 0x75, 1, &check, 1, 1000);
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <init_IMU_MPU6050+0xb0>)
 80013f0:	23fa      	movs	r3, #250	; 0xfa
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	2275      	movs	r2, #117	; 0x75
 8001402:	21d0      	movs	r1, #208	; 0xd0
 8001404:	f001 f832 	bl	800246c <HAL_I2C_Mem_Read>

	if	(check == 0x68)
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b68      	cmp	r3, #104	; 0x68
 800140e:	d13f      	bne.n	8001490 <init_IMU_MPU6050+0xa8>

		{
//			HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, 0x75, 1, &rx_buffer, 1, 1000);
			tx_buffer = 0x07;
 8001410:	4b22      	ldr	r3, [pc, #136]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001412:	2207      	movs	r2, #7
 8001414:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_SMPLRT_DIV, 1, &tx_buffer, 1, 1000);
 8001416:	4820      	ldr	r0, [pc, #128]	; (8001498 <init_IMU_MPU6050+0xb0>)
 8001418:	23fa      	movs	r3, #250	; 0xfa
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	2301      	movs	r3, #1
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	2219      	movs	r2, #25
 800142a:	21d1      	movs	r1, #209	; 0xd1
 800142c:	f000 fef0 	bl	8002210 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_GYRO_CONFIG, 1, &tx_buffer, 1, 1000);
 8001436:	4818      	ldr	r0, [pc, #96]	; (8001498 <init_IMU_MPU6050+0xb0>)
 8001438:	23fa      	movs	r3, #250	; 0xfa
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4b16      	ldr	r3, [pc, #88]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2301      	movs	r3, #1
 8001448:	221b      	movs	r2, #27
 800144a:	21d1      	movs	r1, #209	; 0xd1
 800144c:	f000 fee0 	bl	8002210 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_PWR_MNGMT, 1, &tx_buffer, 1, 1000);
 8001456:	4810      	ldr	r0, [pc, #64]	; (8001498 <init_IMU_MPU6050+0xb0>)
 8001458:	23fa      	movs	r3, #250	; 0xfa
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	2301      	movs	r3, #1
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	226b      	movs	r2, #107	; 0x6b
 800146a:	21d1      	movs	r1, #209	; 0xd1
 800146c:	f000 fed0 	bl	8002210 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_ACCEL_CONFIG, 1, &tx_buffer, 1, 1000);
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <init_IMU_MPU6050+0xb0>)
 8001478:	23fa      	movs	r3, #250	; 0xfa
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2301      	movs	r3, #1
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <init_IMU_MPU6050+0xb4>)
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	221c      	movs	r2, #28
 800148a:	21d1      	movs	r1, #209	; 0xd1
 800148c:	f000 fec0 	bl	8002210 <HAL_I2C_Mem_Write>
		}


}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000003c 	.word	0x2000003c
 800149c:	20000028 	.word	0x20000028

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fb13 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f83b 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f000 f93f 	bl	8001730 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014b2:	f000 f8d5 	bl	8001660 <MX_TIM2_Init>
  MX_I2C2_Init();
 80014b6:	f000 f893 	bl	80015e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  init_IMU_MPU6050();
 80014ba:	f7ff ff95 	bl	80013e8 <init_IMU_MPU6050>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 80014be:	1dbb      	adds	r3, r7, #6
 80014c0:	2200      	movs	r2, #0
 80014c2:	801a      	strh	r2, [r3, #0]
 80014c4:	e00c      	b.n	80014e0 <main+0x40>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <main+0x80>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1dba      	adds	r2, r7, #6
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f000 fb83 	bl	8001bdc <HAL_Delay>
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 80014d6:	1dbb      	adds	r3, r7, #6
 80014d8:	881a      	ldrh	r2, [r3, #0]
 80014da:	1dbb      	adds	r3, r7, #6
 80014dc:	3201      	adds	r2, #1
 80014de:	801a      	strh	r2, [r3, #0]
 80014e0:	1dbb      	adds	r3, r7, #6
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2bb3      	cmp	r3, #179	; 0xb3
 80014e6:	d9ee      	bls.n	80014c6 <main+0x26>
	  }


	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	22b4      	movs	r2, #180	; 0xb4
 80014ec:	801a      	strh	r2, [r3, #0]
 80014ee:	e00c      	b.n	800150a <main+0x6a>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <main+0x80>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1d3a      	adds	r2, r7, #4
 80014f6:	8812      	ldrh	r2, [r2, #0]
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f000 fb6e 	bl	8001bdc <HAL_Delay>
	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	881a      	ldrh	r2, [r3, #0]
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	3a01      	subs	r2, #1
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ee      	bne.n	80014f0 <main+0x50>
	  }
	  Read_IMU_Gyro();
 8001512:	f7ff fedf 	bl	80012d4 <Read_IMU_Gyro>
	  HAL_Delay(10);
 8001516:	200a      	movs	r0, #10
 8001518:	f000 fb60 	bl	8001bdc <HAL_Delay>
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 800151c:	e7cf      	b.n	80014be <main+0x1e>
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000090 	.word	0x20000090

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b093      	sub	sp, #76	; 0x4c
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	2410      	movs	r4, #16
 800152c:	193b      	adds	r3, r7, r4
 800152e:	0018      	movs	r0, r3
 8001530:	2338      	movs	r3, #56	; 0x38
 8001532:	001a      	movs	r2, r3
 8001534:	2100      	movs	r1, #0
 8001536:	f002 ff7b 	bl	8004430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153a:	003b      	movs	r3, r7
 800153c:	0018      	movs	r0, r3
 800153e:	2310      	movs	r3, #16
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f002 ff74 	bl	8004430 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	0018      	movs	r0, r3
 800154e:	f001 fc5d 	bl	8002e0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001552:	193b      	adds	r3, r7, r4
 8001554:	2202      	movs	r2, #2
 8001556:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	193b      	adds	r3, r7, r4
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0052      	lsls	r2, r2, #1
 800155e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001560:	0021      	movs	r1, r4
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2202      	movs	r2, #2
 8001572:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2202      	movs	r2, #2
 8001578:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001580:	187b      	adds	r3, r7, r1
 8001582:	2208      	movs	r2, #8
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	0292      	lsls	r2, r2, #10
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	0492      	lsls	r2, r2, #18
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	0592      	lsls	r2, r2, #22
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	0018      	movs	r0, r3
 80015a2:	f001 fc73 	bl	8002e8c <HAL_RCC_OscConfig>
 80015a6:	1e03      	subs	r3, r0, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015aa:	f000 f97d 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ae:	003b      	movs	r3, r7
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b4:	003b      	movs	r3, r7
 80015b6:	2202      	movs	r2, #2
 80015b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ba:	003b      	movs	r3, r7
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c0:	003b      	movs	r3, r7
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c6:	003b      	movs	r3, r7
 80015c8:	2102      	movs	r1, #2
 80015ca:	0018      	movs	r0, r3
 80015cc:	f001 ff78 	bl	80034c0 <HAL_RCC_ClockConfig>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015d4:	f000 f968 	bl	80018a8 <Error_Handler>
  }
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b013      	add	sp, #76	; 0x4c
 80015de:	bd90      	pop	{r4, r7, pc}

080015e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
//	RCC->APBENR1 |= (1<<22);  // enable I2C CLOCK
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_I2C2_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_I2C2_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10807DBB;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_I2C2_Init+0x74>)
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <MX_I2C2_Init+0x7c>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_I2C2_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_I2C2_Init+0x74>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_I2C2_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_I2C2_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C2_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C2_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C2_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_I2C2_Init+0x74>)
 800161c:	0018      	movs	r0, r3
 800161e:	f000 fd51 	bl	80020c4 <HAL_I2C_Init>
 8001622:	1e03      	subs	r3, r0, #0
 8001624:	d001      	beq.n	800162a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001626:	f000 f93f 	bl	80018a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_I2C2_Init+0x74>)
 800162c:	2100      	movs	r1, #0
 800162e:	0018      	movs	r0, r3
 8001630:	f001 fb54 	bl	8002cdc <HAL_I2CEx_ConfigAnalogFilter>
 8001634:	1e03      	subs	r3, r0, #0
 8001636:	d001      	beq.n	800163c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001638:	f000 f936 	bl	80018a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <MX_I2C2_Init+0x74>)
 800163e:	2100      	movs	r1, #0
 8001640:	0018      	movs	r0, r3
 8001642:	f001 fb97 	bl	8002d74 <HAL_I2CEx_ConfigDigitalFilter>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 f92d 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000003c 	.word	0x2000003c
 8001658:	40005800 	.word	0x40005800
 800165c:	10807dbb 	.word	0x10807dbb

08001660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	231c      	movs	r3, #28
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	0018      	movs	r0, r3
 800166c:	230c      	movs	r3, #12
 800166e:	001a      	movs	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	f002 fedd 	bl	8004430 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001676:	003b      	movs	r3, r7
 8001678:	0018      	movs	r0, r3
 800167a:	231c      	movs	r3, #28
 800167c:	001a      	movs	r2, r3
 800167e:	2100      	movs	r1, #0
 8001680:	f002 fed6 	bl	8004430 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <MX_TIM2_Init+0xcc>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	05d2      	lsls	r2, r2, #23
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <MX_TIM2_Init+0xcc>)
 800168e:	2200      	movs	r2, #0
 8001690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <MX_TIM2_Init+0xcc>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <MX_TIM2_Init+0xcc>)
 800169a:	22ff      	movs	r2, #255	; 0xff
 800169c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <MX_TIM2_Init+0xcc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <MX_TIM2_Init+0xcc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_TIM2_Init+0xcc>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f002 f8dd 	bl	800386c <HAL_TIM_PWM_Init>
 80016b2:	1e03      	subs	r3, r0, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80016b6:	f000 f8f7 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ba:	211c      	movs	r1, #28
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c8:	187a      	adds	r2, r7, r1
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_TIM2_Init+0xcc>)
 80016cc:	0011      	movs	r1, r2
 80016ce:	0018      	movs	r0, r3
 80016d0:	f002 fe46 	bl	8004360 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	1e03      	subs	r3, r0, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80016d8:	f000 f8e6 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016dc:	003b      	movs	r3, r7
 80016de:	2260      	movs	r2, #96	; 0x60
 80016e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 80016e2:	003b      	movs	r3, r7
 80016e4:	220f      	movs	r2, #15
 80016e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	003b      	movs	r3, r7
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ee:	003b      	movs	r3, r7
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016f4:	0039      	movs	r1, r7
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <MX_TIM2_Init+0xcc>)
 80016f8:	2208      	movs	r2, #8
 80016fa:	0018      	movs	r0, r3
 80016fc:	f002 f9ec 	bl	8003ad8 <HAL_TIM_PWM_ConfigChannel>
 8001700:	1e03      	subs	r3, r0, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001704:	f000 f8d0 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start(&htim2);
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_TIM2_Init+0xcc>)
 800170a:	0018      	movs	r0, r3
 800170c:	f002 f862 	bl	80037d4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_TIM2_Init+0xcc>)
 8001712:	2108      	movs	r1, #8
 8001714:	0018      	movs	r0, r3
 8001716:	f002 f901 	bl	800391c <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <MX_TIM2_Init+0xcc>)
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f955 	bl	80019cc <HAL_TIM_MspPostInit>

}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b00a      	add	sp, #40	; 0x28
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000090 	.word	0x20000090

08001730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	240c      	movs	r4, #12
 8001738:	193b      	adds	r3, r7, r4
 800173a:	0018      	movs	r0, r3
 800173c:	2314      	movs	r3, #20
 800173e:	001a      	movs	r2, r3
 8001740:	2100      	movs	r1, #0
 8001742:	f002 fe75 	bl	8004430 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	4b56      	ldr	r3, [pc, #344]	; (80018a0 <MX_GPIO_Init+0x170>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174a:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <MX_GPIO_Init+0x170>)
 800174c:	2104      	movs	r1, #4
 800174e:	430a      	orrs	r2, r1
 8001750:	635a      	str	r2, [r3, #52]	; 0x34
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <MX_GPIO_Init+0x170>)
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2204      	movs	r2, #4
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <MX_GPIO_Init+0x170>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001762:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <MX_GPIO_Init+0x170>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
 800176a:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <MX_GPIO_Init+0x170>)
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <MX_GPIO_Init+0x170>)
 8001778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <MX_GPIO_Init+0x170>)
 800177c:	2102      	movs	r1, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <MX_GPIO_Init+0x170>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 800178e:	23a0      	movs	r3, #160	; 0xa0
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	2200      	movs	r2, #0
 8001794:	213a      	movs	r1, #58	; 0x3a
 8001796:	0018      	movs	r0, r3
 8001798:	f000 fc5c 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800179c:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <MX_GPIO_Init+0x174>)
 800179e:	2200      	movs	r2, #0
 80017a0:	2102      	movs	r1, #2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 fc56 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	223a      	movs	r2, #58	; 0x3a
 80017ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	2201      	movs	r2, #1
 80017b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	193a      	adds	r2, r7, r4
 80017c2:	23a0      	movs	r3, #160	; 0xa0
 80017c4:	05db      	lsls	r3, r3, #23
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 fadf 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	22c0      	movs	r2, #192	; 0xc0
 80017d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	2202      	movs	r2, #2
 80017d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	193a      	adds	r2, r7, r4
 80017ee:	23a0      	movs	r3, #160	; 0xa0
 80017f0:	05db      	lsls	r3, r3, #23
 80017f2:	0011      	movs	r1, r2
 80017f4:	0018      	movs	r0, r3
 80017f6:	f000 fac9 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	2209      	movs	r2, #9
 80017fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	193b      	adds	r3, r7, r4
 8001802:	2202      	movs	r2, #2
 8001804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	193b      	adds	r3, r7, r4
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	193b      	adds	r3, r7, r4
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001812:	193b      	adds	r3, r7, r4
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	193b      	adds	r3, r7, r4
 800181a:	4a22      	ldr	r2, [pc, #136]	; (80018a4 <MX_GPIO_Init+0x174>)
 800181c:	0019      	movs	r1, r3
 800181e:	0010      	movs	r0, r2
 8001820:	f000 fab4 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2201      	movs	r2, #1
 800182e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 800183c:	193b      	adds	r3, r7, r4
 800183e:	4a19      	ldr	r2, [pc, #100]	; (80018a4 <MX_GPIO_Init+0x174>)
 8001840:	0019      	movs	r1, r3
 8001842:	0010      	movs	r0, r2
 8001844:	f000 faa2 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001848:	193b      	adds	r3, r7, r4
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	0212      	lsls	r2, r2, #8
 800184e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2203      	movs	r2, #3
 8001854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	193a      	adds	r2, r7, r4
 800185e:	23a0      	movs	r3, #160	; 0xa0
 8001860:	05db      	lsls	r3, r3, #23
 8001862:	0011      	movs	r1, r2
 8001864:	0018      	movs	r0, r3
 8001866:	f000 fa91 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800186a:	0021      	movs	r1, r4
 800186c:	187b      	adds	r3, r7, r1
 800186e:	22c0      	movs	r2, #192	; 0xc0
 8001870:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2202      	movs	r2, #2
 8001876:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	187b      	adds	r3, r7, r1
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <MX_GPIO_Init+0x174>)
 800188e:	0019      	movs	r1, r3
 8001890:	0010      	movs	r0, r2
 8001892:	f000 fa7b 	bl	8001d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b009      	add	sp, #36	; 0x24
 800189c:	bd90      	pop	{r4, r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	40021000 	.word	0x40021000
 80018a4:	50000400 	.word	0x50000400

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <Error_Handler+0x8>
	...

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_MspInit+0x44>)
 80018bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_MspInit+0x44>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_MspInit+0x44>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_MspInit+0x44>)
 80018d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_MspInit+0x44>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0549      	lsls	r1, r1, #21
 80018dc:	430a      	orrs	r2, r1
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_MspInit+0x44>)
 80018e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	4013      	ands	r3, r2
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	2414      	movs	r4, #20
 8001906:	193b      	adds	r3, r7, r4
 8001908:	0018      	movs	r0, r3
 800190a:	2314      	movs	r3, #20
 800190c:	001a      	movs	r2, r3
 800190e:	2100      	movs	r1, #0
 8001910:	f002 fd8e 	bl	8004430 <memset>
  if(hi2c->Instance==I2C2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <HAL_I2C_MspInit+0x90>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d131      	bne.n	8001982 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_I2C_MspInit+0x94>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_I2C_MspInit+0x94>)
 8001924:	2101      	movs	r1, #1
 8001926:	430a      	orrs	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_I2C_MspInit+0x94>)
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001936:	193b      	adds	r3, r7, r4
 8001938:	22c0      	movs	r2, #192	; 0xc0
 800193a:	0152      	lsls	r2, r2, #5
 800193c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193e:	0021      	movs	r1, r4
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2212      	movs	r2, #18
 8001944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2201      	movs	r2, #1
 8001950:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2206      	movs	r2, #6
 8001956:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	187a      	adds	r2, r7, r1
 800195a:	23a0      	movs	r3, #160	; 0xa0
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	0011      	movs	r1, r2
 8001960:	0018      	movs	r0, r3
 8001962:	f000 fa13 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_I2C_MspInit+0x94>)
 8001968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_I2C_MspInit+0x94>)
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	03c9      	lsls	r1, r1, #15
 8001970:	430a      	orrs	r2, r1
 8001972:	63da      	str	r2, [r3, #60]	; 0x3c
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_I2C_MspInit+0x94>)
 8001976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	03db      	lsls	r3, r3, #15
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b00b      	add	sp, #44	; 0x2c
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40005800 	.word	0x40005800
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	05db      	lsls	r3, r3, #23
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10b      	bne.n	80019c0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_TIM_PWM_MspInit+0x34>)
 80019aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_TIM_PWM_MspInit+0x34>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <HAL_TIM_PWM_MspInit+0x34>)
 80019b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b004      	add	sp, #16
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	240c      	movs	r4, #12
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	0018      	movs	r0, r3
 80019da:	2314      	movs	r3, #20
 80019dc:	001a      	movs	r2, r3
 80019de:	2100      	movs	r1, #0
 80019e0:	f002 fd26 	bl	8004430 <memset>
  if(htim->Instance==TIM2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d122      	bne.n	8001a36 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_TIM_MspPostInit+0x74>)
 80019f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_TIM_MspPostInit+0x74>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	430a      	orrs	r2, r1
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0x74>)
 80019fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a08:	0021      	movs	r1, r4
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2202      	movs	r2, #2
 8001a14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2202      	movs	r2, #2
 8001a26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	187a      	adds	r2, r7, r1
 8001a2a:	23a0      	movs	r3, #160	; 0xa0
 8001a2c:	05db      	lsls	r3, r3, #23
 8001a2e:	0011      	movs	r1, r2
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 f9ab 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b009      	add	sp, #36	; 0x24
 8001a3c:	bd90      	pop	{r4, r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40021000 	.word	0x40021000

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f89c 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a80:	f7ff fff7 	bl	8001a72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopForever+0xe>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopForever+0x16>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001aaa:	f002 fcc9 	bl	8004440 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001aae:	f7ff fcf7 	bl	80014a0 <main>

08001ab2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   r0, =_estack
 8001ab4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ac0:	0800457c 	.word	0x0800457c
  ldr r2, =_sbss
 8001ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ac8:	200000e0 	.word	0x200000e0

08001acc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x3c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Init+0x3c>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0049      	lsls	r1, r1, #1
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aea:	2003      	movs	r0, #3
 8001aec:	f000 f810 	bl	8001b10 <HAL_InitTick>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d003      	beq.n	8001afc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e001      	b.n	8001b00 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff feda 	bl	80018b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b00:	1dfb      	adds	r3, r7, #7
 8001b02:	781b      	ldrb	r3, [r3, #0]
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_InitTick+0x88>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02b      	beq.n	8001b80 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_InitTick+0x8c>)
 8001b2a:	681c      	ldr	r4, [r3, #0]
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_InitTick+0x88>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	0019      	movs	r1, r3
 8001b32:	23fa      	movs	r3, #250	; 0xfa
 8001b34:	0098      	lsls	r0, r3, #2
 8001b36:	f7fe fae5 	bl	8000104 <__udivsi3>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f7fe fae0 	bl	8000104 <__udivsi3>
 8001b44:	0003      	movs	r3, r0
 8001b46:	0018      	movs	r0, r3
 8001b48:	f000 f913 	bl	8001d72 <HAL_SYSTICK_Config>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d112      	bne.n	8001b76 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d80a      	bhi.n	8001b6c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f8f2 	bl	8001d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_InitTick+0x90>)
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e00d      	b.n	8001b88 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
 8001b74:	e008      	b.n	8001b88 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b76:	230f      	movs	r3, #15
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	e003      	b.n	8001b88 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b80:	230f      	movs	r3, #15
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b88:	230f      	movs	r3, #15
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	781b      	ldrb	r3, [r3, #0]
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b005      	add	sp, #20
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_IncTick+0x1c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	001a      	movs	r2, r3
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_IncTick+0x20>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	18d2      	adds	r2, r2, r3
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_IncTick+0x20>)
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	200000dc 	.word	0x200000dc

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b02      	ldr	r3, [pc, #8]	; (8001bd8 <HAL_GetTick+0x10>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	200000dc 	.word	0x200000dc

08001bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff fff0 	bl	8001bc8 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	d005      	beq.n	8001c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_Delay+0x44>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	189b      	adds	r3, r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	f7ff ffe0 	bl	8001bc8 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d8f7      	bhi.n	8001c04 <HAL_Delay+0x28>
  {
  }
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	20000008 	.word	0x20000008

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b7f      	cmp	r3, #127	; 0x7f
 8001c38:	d828      	bhi.n	8001c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c3a:	4a2f      	ldr	r2, [pc, #188]	; (8001cf8 <__NVIC_SetPriority+0xd4>)
 8001c3c:	1dfb      	adds	r3, r7, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	33c0      	adds	r3, #192	; 0xc0
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	589b      	ldr	r3, [r3, r2]
 8001c4a:	1dfa      	adds	r2, r7, #7
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	0011      	movs	r1, r2
 8001c50:	2203      	movs	r2, #3
 8001c52:	400a      	ands	r2, r1
 8001c54:	00d2      	lsls	r2, r2, #3
 8001c56:	21ff      	movs	r1, #255	; 0xff
 8001c58:	4091      	lsls	r1, r2
 8001c5a:	000a      	movs	r2, r1
 8001c5c:	43d2      	mvns	r2, r2
 8001c5e:	401a      	ands	r2, r3
 8001c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	22ff      	movs	r2, #255	; 0xff
 8001c68:	401a      	ands	r2, r3
 8001c6a:	1dfb      	adds	r3, r7, #7
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	2303      	movs	r3, #3
 8001c72:	4003      	ands	r3, r0
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c78:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <__NVIC_SetPriority+0xd4>)
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	430a      	orrs	r2, r1
 8001c84:	33c0      	adds	r3, #192	; 0xc0
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c8a:	e031      	b.n	8001cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <__NVIC_SetPriority+0xd8>)
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0019      	movs	r1, r3
 8001c94:	230f      	movs	r3, #15
 8001c96:	400b      	ands	r3, r1
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	18d3      	adds	r3, r2, r3
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1dfa      	adds	r2, r7, #7
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	0011      	movs	r1, r2
 8001cac:	2203      	movs	r2, #3
 8001cae:	400a      	ands	r2, r1
 8001cb0:	00d2      	lsls	r2, r2, #3
 8001cb2:	21ff      	movs	r1, #255	; 0xff
 8001cb4:	4091      	lsls	r1, r2
 8001cb6:	000a      	movs	r2, r1
 8001cb8:	43d2      	mvns	r2, r2
 8001cba:	401a      	ands	r2, r3
 8001cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	019b      	lsls	r3, r3, #6
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	2303      	movs	r3, #3
 8001cce:	4003      	ands	r3, r0
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd4:	4809      	ldr	r0, [pc, #36]	; (8001cfc <__NVIC_SetPriority+0xd8>)
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	001c      	movs	r4, r3
 8001cdc:	230f      	movs	r3, #15
 8001cde:	4023      	ands	r3, r4
 8001ce0:	3b08      	subs	r3, #8
 8001ce2:	089b      	lsrs	r3, r3, #2
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	18c3      	adds	r3, r0, r3
 8001cec:	3304      	adds	r3, #4
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1e5a      	subs	r2, r3, #1
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	045b      	lsls	r3, r3, #17
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d301      	bcc.n	8001d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d14:	2301      	movs	r3, #1
 8001d16:	e010      	b.n	8001d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <SysTick_Config+0x44>)
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d20:	2301      	movs	r3, #1
 8001d22:	425b      	negs	r3, r3
 8001d24:	2103      	movs	r1, #3
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff ff7c 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <SysTick_Config+0x44>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <SysTick_Config+0x44>)
 8001d34:	2207      	movs	r2, #7
 8001d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	e000e010 	.word	0xe000e010

08001d48 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	210f      	movs	r1, #15
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	1c02      	adds	r2, r0, #0
 8001d58:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	0011      	movs	r1, r2
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b004      	add	sp, #16
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ffbf 	bl	8001d00 <SysTick_Config>
 8001d82:	0003      	movs	r3, r0
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e147      	b.n	800202c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4091      	lsls	r1, r2
 8001da6:	000a      	movs	r2, r1
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <HAL_GPIO_Init+0x28>
 8001db2:	e138      	b.n	8002026 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2203      	movs	r2, #3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d005      	beq.n	8001dcc <HAL_GPIO_Init+0x40>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d130      	bne.n	8001e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	409a      	lsls	r2, r3
 8001dee:	0013      	movs	r3, r2
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e02:	2201      	movs	r2, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	2201      	movs	r2, #1
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2203      	movs	r2, #3
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d017      	beq.n	8001e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d123      	bne.n	8001ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	08da      	lsrs	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3208      	adds	r2, #8
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	58d3      	ldr	r3, [r2, r3]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2207      	movs	r2, #7
 8001e88:	4013      	ands	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	43da      	mvns	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2107      	movs	r1, #7
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	0013      	movs	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	6939      	ldr	r1, [r7, #16]
 8001ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2203      	movs	r2, #3
 8001edc:	401a      	ands	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	0013      	movs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	23c0      	movs	r3, #192	; 0xc0
 8001ef8:	029b      	lsls	r3, r3, #10
 8001efa:	4013      	ands	r3, r2
 8001efc:	d100      	bne.n	8001f00 <HAL_GPIO_Init+0x174>
 8001efe:	e092      	b.n	8002026 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f00:	4a50      	ldr	r2, [pc, #320]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3318      	adds	r3, #24
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	589b      	ldr	r3, [r3, r2]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2203      	movs	r2, #3
 8001f12:	4013      	ands	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	220f      	movs	r2, #15
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	43da      	mvns	r2, r3
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	23a0      	movs	r3, #160	; 0xa0
 8001f28:	05db      	lsls	r3, r3, #23
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x1ca>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_GPIO_Init+0x2bc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00d      	beq.n	8001f52 <HAL_GPIO_Init+0x1c6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a44      	ldr	r2, [pc, #272]	; (800204c <HAL_GPIO_Init+0x2c0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <HAL_GPIO_Init+0x1c2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_GPIO_Init+0x2c4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_GPIO_Init+0x1be>
 8001f46:	2303      	movs	r3, #3
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x1cc>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x1cc>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x1cc>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x1cc>
 8001f56:	2300      	movs	r3, #0
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	00d2      	lsls	r2, r2, #3
 8001f60:	4093      	lsls	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f68:	4936      	ldr	r1, [pc, #216]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3318      	adds	r3, #24
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	035b      	lsls	r3, r3, #13
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	039b      	lsls	r3, r3, #14
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fca:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001fcc:	2384      	movs	r3, #132	; 0x84
 8001fce:	58d3      	ldr	r3, [r2, r3]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff0:	4914      	ldr	r1, [pc, #80]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001ff2:	2284      	movs	r2, #132	; 0x84
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001ff8:	4a12      	ldr	r2, [pc, #72]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	58d3      	ldr	r3, [r2, r3]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43da      	mvns	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	025b      	lsls	r3, r3, #9
 8002012:	4013      	ands	r3, r2
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201e:	4909      	ldr	r1, [pc, #36]	; (8002044 <HAL_GPIO_Init+0x2b8>)
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	40da      	lsrs	r2, r3
 8002034:	1e13      	subs	r3, r2, #0
 8002036:	d000      	beq.n	800203a <HAL_GPIO_Init+0x2ae>
 8002038:	e6b0      	b.n	8001d9c <HAL_GPIO_Init+0x10>
  }
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b006      	add	sp, #24
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021800 	.word	0x40021800
 8002048:	50000400 	.word	0x50000400
 800204c:	50000800 	.word	0x50000800
 8002050:	50000c00 	.word	0x50000c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	0008      	movs	r0, r1
 800205e:	0011      	movs	r1, r2
 8002060:	1cbb      	adds	r3, r7, #2
 8002062:	1c02      	adds	r2, r0, #0
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	1c7b      	adds	r3, r7, #1
 8002068:	1c0a      	adds	r2, r1, #0
 800206a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206c:	1c7b      	adds	r3, r7, #1
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002074:	1cbb      	adds	r3, r7, #2
 8002076:	881a      	ldrh	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207e:	1cbb      	adds	r3, r7, #2
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	000a      	movs	r2, r1
 8002098:	1cbb      	adds	r3, r7, #2
 800209a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a2:	1cbb      	adds	r3, r7, #2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	1cb9      	adds	r1, r7, #2
 80020b2:	8809      	ldrh	r1, [r1, #0]
 80020b4:	400b      	ands	r3, r1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08f      	b.n	80021f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2241      	movs	r2, #65	; 0x41
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	2100      	movs	r1, #0
 80020e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff fc05 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2241      	movs	r2, #65	; 0x41
 80020f6:	2124      	movs	r1, #36	; 0x24
 80020f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	438a      	bics	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	493b      	ldr	r1, [pc, #236]	; (8002200 <HAL_I2C_Init+0x13c>)
 8002114:	400a      	ands	r2, r1
 8002116:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4938      	ldr	r1, [pc, #224]	; (8002204 <HAL_I2C_Init+0x140>)
 8002124:	400a      	ands	r2, r1
 8002126:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d108      	bne.n	8002142 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2180      	movs	r1, #128	; 0x80
 800213a:	0209      	lsls	r1, r1, #8
 800213c:	430a      	orrs	r2, r1
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	e007      	b.n	8002152 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2184      	movs	r1, #132	; 0x84
 800214c:	0209      	lsls	r1, r1, #8
 800214e:	430a      	orrs	r2, r1
 8002150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d109      	bne.n	800216e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0109      	lsls	r1, r1, #4
 8002168:	430a      	orrs	r2, r1
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	e007      	b.n	800217e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4923      	ldr	r1, [pc, #140]	; (8002208 <HAL_I2C_Init+0x144>)
 800217a:	400a      	ands	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4920      	ldr	r1, [pc, #128]	; (800220c <HAL_I2C_Init+0x148>)
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	491a      	ldr	r1, [pc, #104]	; (8002204 <HAL_I2C_Init+0x140>)
 800219a:	400a      	ands	r2, r1
 800219c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	69d9      	ldr	r1, [r3, #28]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2101      	movs	r1, #1
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2241      	movs	r2, #65	; 0x41
 80021e2:	2120      	movs	r1, #32
 80021e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2242      	movs	r2, #66	; 0x42
 80021f0:	2100      	movs	r1, #0
 80021f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b002      	add	sp, #8
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	f0ffffff 	.word	0xf0ffffff
 8002204:	ffff7fff 	.word	0xffff7fff
 8002208:	fffff7ff 	.word	0xfffff7ff
 800220c:	02008000 	.word	0x02008000

08002210 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	000c      	movs	r4, r1
 800221a:	0010      	movs	r0, r2
 800221c:	0019      	movs	r1, r3
 800221e:	230a      	movs	r3, #10
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	1c22      	adds	r2, r4, #0
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	2308      	movs	r3, #8
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	1c02      	adds	r2, r0, #0
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	1c0a      	adds	r2, r1, #0
 8002232:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2241      	movs	r2, #65	; 0x41
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	d000      	beq.n	8002242 <HAL_I2C_Mem_Write+0x32>
 8002240:	e10c      	b.n	800245c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_I2C_Mem_Write+0x42>
 8002248:	232c      	movs	r3, #44	; 0x2c
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2280      	movs	r2, #128	; 0x80
 8002256:	0092      	lsls	r2, r2, #2
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0ff      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	5c9b      	ldrb	r3, [r3, r2]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_I2C_Mem_Write+0x5c>
 8002268:	2302      	movs	r3, #2
 800226a:	e0f8      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002274:	f7ff fca8 	bl	8001bc8 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	0219      	lsls	r1, r3, #8
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2319      	movs	r3, #25
 8002288:	2201      	movs	r2, #1
 800228a:	f000 fb0b 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e3      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2241      	movs	r2, #65	; 0x41
 800229a:	2121      	movs	r1, #33	; 0x21
 800229c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2242      	movs	r2, #66	; 0x42
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	222c      	movs	r2, #44	; 0x2c
 80022b6:	18ba      	adds	r2, r7, r2
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022c2:	1dbb      	adds	r3, r7, #6
 80022c4:	881c      	ldrh	r4, [r3, #0]
 80022c6:	2308      	movs	r3, #8
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	881a      	ldrh	r2, [r3, #0]
 80022cc:	230a      	movs	r3, #10
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	8819      	ldrh	r1, [r3, #0]
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	0023      	movs	r3, r4
 80022de:	f000 f9f9 	bl	80026d4 <I2C_RequestMemoryWrite>
 80022e2:	1e03      	subs	r3, r0, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	2100      	movs	r1, #0
 80022ec:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0b5      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2bff      	cmp	r3, #255	; 0xff
 80022fa:	d911      	bls.n	8002320 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	22ff      	movs	r2, #255	; 0xff
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002306:	b2da      	uxtb	r2, r3
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	045c      	lsls	r4, r3, #17
 800230c:	230a      	movs	r3, #10
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	8819      	ldrh	r1, [r3, #0]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	2300      	movs	r3, #0
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	0023      	movs	r3, r4
 800231a:	f000 fca5 	bl	8002c68 <I2C_TransferConfig>
 800231e:	e012      	b.n	8002346 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232e:	b2da      	uxtb	r2, r3
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	049c      	lsls	r4, r3, #18
 8002334:	230a      	movs	r3, #10
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	8819      	ldrh	r1, [r3, #0]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	0023      	movs	r3, r4
 8002342:	f000 fc91 	bl	8002c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 fb01 	bl	8002954 <I2C_WaitOnTXISFlagUntilTimeout>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e081      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d03a      	beq.n	800240a <HAL_I2C_Mem_Write+0x1fa>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d136      	bne.n	800240a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800239c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	0013      	movs	r3, r2
 80023a6:	2200      	movs	r2, #0
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	f000 fa7b 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	1e03      	subs	r3, r0, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e053      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2bff      	cmp	r3, #255	; 0xff
 80023be:	d911      	bls.n	80023e4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	22ff      	movs	r2, #255	; 0xff
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	045c      	lsls	r4, r3, #17
 80023d0:	230a      	movs	r3, #10
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	8819      	ldrh	r1, [r3, #0]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	2300      	movs	r3, #0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	0023      	movs	r3, r4
 80023de:	f000 fc43 	bl	8002c68 <I2C_TransferConfig>
 80023e2:	e012      	b.n	800240a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	049c      	lsls	r4, r3, #18
 80023f8:	230a      	movs	r3, #10
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	8819      	ldrh	r1, [r3, #0]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	2300      	movs	r3, #0
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	0023      	movs	r3, r4
 8002406:	f000 fc2f 	bl	8002c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d198      	bne.n	8002346 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fae0 	bl	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01a      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2220      	movs	r2, #32
 800242e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	490b      	ldr	r1, [pc, #44]	; (8002468 <HAL_I2C_Mem_Write+0x258>)
 800243c:	400a      	ands	r2, r1
 800243e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2241      	movs	r2, #65	; 0x41
 8002444:	2120      	movs	r1, #32
 8002446:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2242      	movs	r2, #66	; 0x42
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2240      	movs	r2, #64	; 0x40
 8002454:	2100      	movs	r1, #0
 8002456:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b007      	add	sp, #28
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	fe00e800 	.word	0xfe00e800

0800246c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	000c      	movs	r4, r1
 8002476:	0010      	movs	r0, r2
 8002478:	0019      	movs	r1, r3
 800247a:	230a      	movs	r3, #10
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	1c22      	adds	r2, r4, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	2308      	movs	r3, #8
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	1c02      	adds	r2, r0, #0
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	1dbb      	adds	r3, r7, #6
 800248c:	1c0a      	adds	r2, r1, #0
 800248e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2241      	movs	r2, #65	; 0x41
 8002494:	5c9b      	ldrb	r3, [r3, r2]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b20      	cmp	r3, #32
 800249a:	d000      	beq.n	800249e <HAL_I2C_Mem_Read+0x32>
 800249c:	e110      	b.n	80026c0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_I2C_Mem_Read+0x42>
 80024a4:	232c      	movs	r3, #44	; 0x2c
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e103      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2240      	movs	r2, #64	; 0x40
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_I2C_Mem_Read+0x5c>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e0fc      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	2101      	movs	r1, #1
 80024ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d0:	f7ff fb7a 	bl	8001bc8 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	0219      	lsls	r1, r3, #8
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2319      	movs	r3, #25
 80024e4:	2201      	movs	r2, #1
 80024e6:	f000 f9dd 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0e7      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2241      	movs	r2, #65	; 0x41
 80024f6:	2122      	movs	r1, #34	; 0x22
 80024f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2242      	movs	r2, #66	; 0x42
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	222c      	movs	r2, #44	; 0x2c
 8002512:	18ba      	adds	r2, r7, r2
 8002514:	8812      	ldrh	r2, [r2, #0]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800251e:	1dbb      	adds	r3, r7, #6
 8002520:	881c      	ldrh	r4, [r3, #0]
 8002522:	2308      	movs	r3, #8
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	881a      	ldrh	r2, [r3, #0]
 8002528:	230a      	movs	r3, #10
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	8819      	ldrh	r1, [r3, #0]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	0023      	movs	r3, r4
 800253a:	f000 f92f 	bl	800279c <I2C_RequestMemoryRead>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d005      	beq.n	800254e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	2100      	movs	r1, #0
 8002548:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0b9      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2bff      	cmp	r3, #255	; 0xff
 8002556:	d911      	bls.n	800257c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	b2da      	uxtb	r2, r3
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	045c      	lsls	r4, r3, #17
 8002568:	230a      	movs	r3, #10
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	8819      	ldrh	r1, [r3, #0]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	4b56      	ldr	r3, [pc, #344]	; (80026cc <HAL_I2C_Mem_Read+0x260>)
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	0023      	movs	r3, r4
 8002576:	f000 fb77 	bl	8002c68 <I2C_TransferConfig>
 800257a:	e012      	b.n	80025a2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	b2da      	uxtb	r2, r3
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	049c      	lsls	r4, r3, #18
 8002590:	230a      	movs	r3, #10
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	8819      	ldrh	r1, [r3, #0]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_I2C_Mem_Read+0x260>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	0023      	movs	r3, r4
 800259e:	f000 fb63 	bl	8002c68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	0013      	movs	r3, r2
 80025ac:	2200      	movs	r2, #0
 80025ae:	2104      	movs	r1, #4
 80025b0:	f000 f978 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	1e03      	subs	r3, r0, #0
 80025b6:	d001      	beq.n	80025bc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e082      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d03a      	beq.n	800266e <HAL_I2C_Mem_Read+0x202>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d136      	bne.n	800266e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	0013      	movs	r3, r2
 800260a:	2200      	movs	r2, #0
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	f000 f949 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002612:	1e03      	subs	r3, r0, #0
 8002614:	d001      	beq.n	800261a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e053      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2bff      	cmp	r3, #255	; 0xff
 8002622:	d911      	bls.n	8002648 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	22ff      	movs	r2, #255	; 0xff
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	b2da      	uxtb	r2, r3
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	045c      	lsls	r4, r3, #17
 8002634:	230a      	movs	r3, #10
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	8819      	ldrh	r1, [r3, #0]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	0023      	movs	r3, r4
 8002642:	f000 fb11 	bl	8002c68 <I2C_TransferConfig>
 8002646:	e012      	b.n	800266e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	b2da      	uxtb	r2, r3
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	049c      	lsls	r4, r3, #18
 800265c:	230a      	movs	r3, #10
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	8819      	ldrh	r1, [r3, #0]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	0023      	movs	r3, r4
 800266a:	f000 fafd 	bl	8002c68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d194      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f9ae 	bl	80029e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002684:	1e03      	subs	r3, r0, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e01a      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2220      	movs	r2, #32
 8002692:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	490c      	ldr	r1, [pc, #48]	; (80026d0 <HAL_I2C_Mem_Read+0x264>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2241      	movs	r2, #65	; 0x41
 80026a8:	2120      	movs	r1, #32
 80026aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2242      	movs	r2, #66	; 0x42
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e000      	b.n	80026c2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b007      	add	sp, #28
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	80002400 	.word	0x80002400
 80026d0:	fe00e800 	.word	0xfe00e800

080026d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026d4:	b5b0      	push	{r4, r5, r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	000c      	movs	r4, r1
 80026de:	0010      	movs	r0, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	250a      	movs	r5, #10
 80026e4:	197b      	adds	r3, r7, r5
 80026e6:	1c22      	adds	r2, r4, #0
 80026e8:	801a      	strh	r2, [r3, #0]
 80026ea:	2308      	movs	r3, #8
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	1c02      	adds	r2, r0, #0
 80026f0:	801a      	strh	r2, [r3, #0]
 80026f2:	1dbb      	adds	r3, r7, #6
 80026f4:	1c0a      	adds	r2, r1, #0
 80026f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026f8:	1dbb      	adds	r3, r7, #6
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	045c      	lsls	r4, r3, #17
 8002702:	197b      	adds	r3, r7, r5
 8002704:	8819      	ldrh	r1, [r3, #0]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <I2C_RequestMemoryWrite+0xc4>)
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0023      	movs	r3, r4
 800270e:	f000 faab 	bl	8002c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002714:	6a39      	ldr	r1, [r7, #32]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f91b 	bl	8002954 <I2C_WaitOnTXISFlagUntilTimeout>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d001      	beq.n	8002726 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e033      	b.n	800278e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002726:	1dbb      	adds	r3, r7, #6
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800272e:	2308      	movs	r3, #8
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
 800273c:	e019      	b.n	8002772 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800273e:	2308      	movs	r3, #8
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	b29b      	uxth	r3, r3
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002752:	6a39      	ldr	r1, [r7, #32]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 f8fc 	bl	8002954 <I2C_WaitOnTXISFlagUntilTimeout>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d001      	beq.n	8002764 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e014      	b.n	800278e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002764:	2308      	movs	r3, #8
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	0013      	movs	r3, r2
 800277c:	2200      	movs	r2, #0
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	f000 f890 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bdb0      	pop	{r4, r5, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	80002000 	.word	0x80002000

0800279c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800279c:	b5b0      	push	{r4, r5, r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	000c      	movs	r4, r1
 80027a6:	0010      	movs	r0, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	250a      	movs	r5, #10
 80027ac:	197b      	adds	r3, r7, r5
 80027ae:	1c22      	adds	r2, r4, #0
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	2308      	movs	r3, #8
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	1c02      	adds	r2, r0, #0
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	1dbb      	adds	r3, r7, #6
 80027bc:	1c0a      	adds	r2, r1, #0
 80027be:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027c0:	1dbb      	adds	r3, r7, #6
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	197b      	adds	r3, r7, r5
 80027c8:	8819      	ldrh	r1, [r3, #0]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <I2C_RequestMemoryRead+0xc0>)
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2300      	movs	r3, #0
 80027d2:	f000 fa49 	bl	8002c68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0018      	movs	r0, r3
 80027de:	f000 f8b9 	bl	8002954 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d001      	beq.n	80027ea <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e033      	b.n	8002852 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ea:	1dbb      	adds	r3, r7, #6
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f2:	2308      	movs	r3, #8
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002800:	e019      	b.n	8002836 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002802:	2308      	movs	r3, #8
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29b      	uxth	r3, r3
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6a39      	ldr	r1, [r7, #32]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f89a 	bl	8002954 <I2C_WaitOnTXISFlagUntilTimeout>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e014      	b.n	8002852 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002828:	2308      	movs	r3, #8
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002836:	6a3a      	ldr	r2, [r7, #32]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	0013      	movs	r3, r2
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	f000 f82e 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d001      	beq.n	8002850 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	0018      	movs	r0, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	b004      	add	sp, #16
 8002858:	bdb0      	pop	{r4, r5, r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	80002000 	.word	0x80002000

08002860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d103      	bne.n	800287e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2201      	movs	r2, #1
 8002886:	4013      	ands	r3, r2
 8002888:	2b01      	cmp	r3, #1
 800288a:	d007      	beq.n	800289c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]
  }
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b002      	add	sp, #8
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	1dfb      	adds	r3, r7, #7
 80028b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b4:	e03a      	b.n	800292c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	6839      	ldr	r1, [r7, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0018      	movs	r0, r3
 80028be:	f000 f8d3 	bl	8002a68 <I2C_IsErrorOccurred>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d001      	beq.n	80028ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e040      	b.n	800294c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	d02d      	beq.n	800292c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d0:	f7ff f97a 	bl	8001bc8 <HAL_GetTick>
 80028d4:	0002      	movs	r2, r0
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0x42>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d122      	bne.n	800292c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	425a      	negs	r2, r3
 80028f6:	4153      	adcs	r3, r2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	001a      	movs	r2, r3
 80028fc:	1dfb      	adds	r3, r7, #7
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d113      	bne.n	800292c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	2220      	movs	r2, #32
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2241      	movs	r2, #65	; 0x41
 8002914:	2120      	movs	r1, #32
 8002916:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2242      	movs	r2, #66	; 0x42
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2240      	movs	r2, #64	; 0x40
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e00f      	b.n	800294c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	4013      	ands	r3, r2
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	425a      	negs	r2, r3
 800293c:	4153      	adcs	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	001a      	movs	r2, r3
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d0b5      	beq.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}

08002954 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002960:	e032      	b.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 f87d 	bl	8002a68 <I2C_IsErrorOccurred>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e030      	b.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	3301      	adds	r3, #1
 800297a:	d025      	beq.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297c:	f7ff f924 	bl	8001bc8 <HAL_GetTick>
 8002980:	0002      	movs	r2, r0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	429a      	cmp	r2, r3
 800298a:	d302      	bcc.n	8002992 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d11a      	bne.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d013      	beq.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	2220      	movs	r2, #32
 80029a6:	431a      	orrs	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2241      	movs	r2, #65	; 0x41
 80029b0:	2120      	movs	r1, #32
 80029b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2242      	movs	r2, #66	; 0x42
 80029b8:	2100      	movs	r1, #0
 80029ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2202      	movs	r2, #2
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d1c5      	bne.n	8002962 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ec:	e02f      	b.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f837 	bl	8002a68 <I2C_IsErrorOccurred>
 80029fa:	1e03      	subs	r3, r0, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e02d      	b.n	8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7ff f8e1 	bl	8001bc8 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11a      	bne.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d013      	beq.n	8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2241      	movs	r2, #65	; 0x41
 8002a36:	2120      	movs	r1, #32
 8002a38:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2242      	movs	r2, #66	; 0x42
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2240      	movs	r2, #64	; 0x40
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e007      	b.n	8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2220      	movs	r2, #32
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d1c8      	bne.n	80029ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b08b      	sub	sp, #44	; 0x2c
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2327      	movs	r3, #39	; 0x27
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2210      	movs	r2, #16
 8002a90:	4013      	ands	r3, r2
 8002a92:	d100      	bne.n	8002a96 <I2C_IsErrorOccurred+0x2e>
 8002a94:	e082      	b.n	8002b9c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a9e:	e060      	b.n	8002b62 <I2C_IsErrorOccurred+0xfa>
 8002aa0:	2427      	movs	r4, #39	; 0x27
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	193a      	adds	r2, r7, r4
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	d058      	beq.n	8002b62 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ab0:	f7ff f88a 	bl	8001bc8 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d306      	bcc.n	8002ace <I2C_IsErrorOccurred+0x66>
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	193a      	adds	r2, r7, r4
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d149      	bne.n	8002b62 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	01db      	lsls	r3, r3, #7
 8002ad8:	4013      	ands	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002adc:	2013      	movs	r0, #19
 8002ade:	183b      	adds	r3, r7, r0
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	2142      	movs	r1, #66	; 0x42
 8002ae4:	5c52      	ldrb	r2, [r2, r1]
 8002ae6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	401a      	ands	r2, r3
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d126      	bne.n	8002b4a <I2C_IsErrorOccurred+0xe2>
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d021      	beq.n	8002b4a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d01d      	beq.n	8002b4a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	01c9      	lsls	r1, r1, #7
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b20:	f7ff f852 	bl	8001bc8 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b28:	e00f      	b.n	8002b4a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b2a:	f7ff f84d 	bl	8001bc8 <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b19      	cmp	r3, #25
 8002b36:	d908      	bls.n	8002b4a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b40:	2327      	movs	r3, #39	; 0x27
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]

              break;
 8002b48:	e00b      	b.n	8002b62 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2220      	movs	r2, #32
 8002b52:	4013      	ands	r3, r2
 8002b54:	2127      	movs	r1, #39	; 0x27
 8002b56:	187a      	adds	r2, r7, r1
 8002b58:	1879      	adds	r1, r7, r1
 8002b5a:	7809      	ldrb	r1, [r1, #0]
 8002b5c:	7011      	strb	r1, [r2, #0]
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d1e3      	bne.n	8002b2a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d004      	beq.n	8002b7a <I2C_IsErrorOccurred+0x112>
 8002b70:	2327      	movs	r3, #39	; 0x27
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d092      	beq.n	8002aa0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b7a:	2327      	movs	r3, #39	; 0x27
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	4313      	orrs	r3, r2
 8002b92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b94:	2327      	movs	r3, #39	; 0x27
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d00c      	beq.n	8002bc8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	0052      	lsls	r2, r2, #1
 8002bbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc0:	2327      	movs	r3, #39	; 0x27
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d00c      	beq.n	8002bec <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2280      	movs	r2, #128	; 0x80
 8002be0:	00d2      	lsls	r2, r2, #3
 8002be2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002be4:	2327      	movs	r3, #39	; 0x27
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d00c      	beq.n	8002c10 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	0092      	lsls	r2, r2, #2
 8002c06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c08:	2327      	movs	r3, #39	; 0x27
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002c10:	2327      	movs	r3, #39	; 0x27
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01d      	beq.n	8002c56 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff fe1f 	bl	8002860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	490d      	ldr	r1, [pc, #52]	; (8002c64 <I2C_IsErrorOccurred+0x1fc>)
 8002c2e:	400a      	ands	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2241      	movs	r2, #65	; 0x41
 8002c42:	2120      	movs	r1, #32
 8002c44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2242      	movs	r2, #66	; 0x42
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2240      	movs	r2, #64	; 0x40
 8002c52:	2100      	movs	r1, #0
 8002c54:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c56:	2327      	movs	r3, #39	; 0x27
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	781b      	ldrb	r3, [r3, #0]
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b00b      	add	sp, #44	; 0x2c
 8002c62:	bd90      	pop	{r4, r7, pc}
 8002c64:	fe00e800 	.word	0xfe00e800

08002c68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	0008      	movs	r0, r1
 8002c72:	0011      	movs	r1, r2
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	240a      	movs	r4, #10
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	1c02      	adds	r2, r0, #0
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	2009      	movs	r0, #9
 8002c80:	183b      	adds	r3, r7, r0
 8002c82:	1c0a      	adds	r2, r1, #0
 8002c84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	059b      	lsls	r3, r3, #22
 8002c8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c8e:	183b      	adds	r3, r7, r0
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	0419      	lsls	r1, r3, #16
 8002c94:	23ff      	movs	r3, #255	; 0xff
 8002c96:	041b      	lsls	r3, r3, #16
 8002c98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb2:	0d51      	lsrs	r1, r2, #21
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	00d2      	lsls	r2, r2, #3
 8002cb8:	400a      	ands	r2, r1
 8002cba:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <I2C_TransferConfig+0x70>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	43d2      	mvns	r2, r2
 8002cc0:	401a      	ands	r2, r3
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b007      	add	sp, #28
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	03ff63ff 	.word	0x03ff63ff

08002cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2241      	movs	r2, #65	; 0x41
 8002cea:	5c9b      	ldrb	r3, [r3, r2]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d138      	bne.n	8002d64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	5c9b      	ldrb	r3, [r3, r2]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e032      	b.n	8002d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2240      	movs	r2, #64	; 0x40
 8002d04:	2101      	movs	r1, #1
 8002d06:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2241      	movs	r2, #65	; 0x41
 8002d0c:	2124      	movs	r1, #36	; 0x24
 8002d0e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	438a      	bics	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4911      	ldr	r1, [pc, #68]	; (8002d70 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2241      	movs	r2, #65	; 0x41
 8002d54:	2120      	movs	r1, #32
 8002d56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e000      	b.n	8002d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d64:	2302      	movs	r3, #2
  }
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	ffffefff 	.word	0xffffefff

08002d74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2241      	movs	r2, #65	; 0x41
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d139      	bne.n	8002dfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2240      	movs	r2, #64	; 0x40
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e033      	b.n	8002e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2241      	movs	r2, #65	; 0x41
 8002da4:	2124      	movs	r1, #36	; 0x24
 8002da6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2101      	movs	r1, #1
 8002de6:	430a      	orrs	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2241      	movs	r2, #65	; 0x41
 8002dee:	2120      	movs	r1, #32
 8002df0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2240      	movs	r2, #64	; 0x40
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b004      	add	sp, #16
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	fffff0ff 	.word	0xfffff0ff

08002e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d11f      	bne.n	8002e70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	0013      	movs	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	189b      	adds	r3, r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4912      	ldr	r1, [pc, #72]	; (8002e88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7fd f960 	bl	8000104 <__udivsi3>
 8002e44:	0003      	movs	r3, r0
 8002e46:	3301      	adds	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e4a:	e008      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e001      	b.n	8002e5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e009      	b.n	8002e72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	401a      	ands	r2, r3
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0ed      	beq.n	8002e4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b004      	add	sp, #16
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	fffff9ff 	.word	0xfffff9ff
 8002e84:	20000000 	.word	0x20000000
 8002e88:	000f4240 	.word	0x000f4240

08002e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e2fe      	b.n	800349c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <HAL_RCC_OscConfig+0x1e>
 8002ea8:	e07c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eaa:	4bc3      	ldr	r3, [pc, #780]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2238      	movs	r2, #56	; 0x38
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb4:	4bc0      	ldr	r3, [pc, #768]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d102      	bne.n	8002eca <HAL_RCC_OscConfig+0x3e>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d002      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d10b      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed0:	4bb9      	ldr	r3, [pc, #740]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d062      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x116>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d15e      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e2d9      	b.n	800349c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	025b      	lsls	r3, r3, #9
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x78>
 8002ef4:	4bb0      	ldr	r3, [pc, #704]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4baf      	ldr	r3, [pc, #700]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	0249      	lsls	r1, r1, #9
 8002efe:	430a      	orrs	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e020      	b.n	8002f46 <HAL_RCC_OscConfig+0xba>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	23a0      	movs	r3, #160	; 0xa0
 8002f0a:	02db      	lsls	r3, r3, #11
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10e      	bne.n	8002f2e <HAL_RCC_OscConfig+0xa2>
 8002f10:	4ba9      	ldr	r3, [pc, #676]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4ba8      	ldr	r3, [pc, #672]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	02c9      	lsls	r1, r1, #11
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	4ba6      	ldr	r3, [pc, #664]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4ba5      	ldr	r3, [pc, #660]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	0249      	lsls	r1, r1, #9
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e00b      	b.n	8002f46 <HAL_RCC_OscConfig+0xba>
 8002f2e:	4ba2      	ldr	r3, [pc, #648]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	4ba1      	ldr	r3, [pc, #644]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f34:	49a1      	ldr	r1, [pc, #644]	; (80031bc <HAL_RCC_OscConfig+0x330>)
 8002f36:	400a      	ands	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	4b9f      	ldr	r3, [pc, #636]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b9e      	ldr	r3, [pc, #632]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f40:	499f      	ldr	r1, [pc, #636]	; (80031c0 <HAL_RCC_OscConfig+0x334>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d014      	beq.n	8002f78 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fe3b 	bl	8001bc8 <HAL_GetTick>
 8002f52:	0003      	movs	r3, r0
 8002f54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fe36 	bl	8001bc8 <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e298      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	4b93      	ldr	r3, [pc, #588]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	029b      	lsls	r3, r3, #10
 8002f72:	4013      	ands	r3, r2
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0xcc>
 8002f76:	e015      	b.n	8002fa4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fe26 	bl	8001bc8 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f82:	f7fe fe21 	bl	8001bc8 <HAL_GetTick>
 8002f86:	0002      	movs	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	; 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e283      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f94:	4b88      	ldr	r3, [pc, #544]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	029b      	lsls	r3, r3, #10
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0xf6>
 8002fa0:	e000      	b.n	8002fa4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4013      	ands	r3, r2
 8002fac:	d100      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x124>
 8002fae:	e099      	b.n	80030e4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb0:	4b81      	ldr	r3, [pc, #516]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2238      	movs	r2, #56	; 0x38
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fba:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x144>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d002      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d135      	bne.n	8003042 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd6:	4b78      	ldr	r3, [pc, #480]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x162>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e256      	b.n	800349c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b72      	ldr	r3, [pc, #456]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <HAL_RCC_OscConfig+0x338>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	021a      	lsls	r2, r3, #8
 8002ffe:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d112      	bne.n	8003030 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800300a:	4b6b      	ldr	r3, [pc, #428]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_RCC_OscConfig+0x33c>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800301e:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0adb      	lsrs	r3, r3, #11
 8003024:	2207      	movs	r2, #7
 8003026:	4013      	ands	r3, r2
 8003028:	4a68      	ldr	r2, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x340>)
 800302a:	40da      	lsrs	r2, r3
 800302c:	4b68      	ldr	r3, [pc, #416]	; (80031d0 <HAL_RCC_OscConfig+0x344>)
 800302e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003030:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x348>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0018      	movs	r0, r3
 8003036:	f7fe fd6b 	bl	8001b10 <HAL_InitTick>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d051      	beq.n	80030e2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e22c      	b.n	800349c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d030      	beq.n	80030ac <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800304a:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5e      	ldr	r2, [pc, #376]	; (80031c8 <HAL_RCC_OscConfig+0x33c>)
 8003050:	4013      	ands	r3, r2
 8003052:	0019      	movs	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800305a:	430a      	orrs	r2, r1
 800305c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800305e:	4b56      	ldr	r3, [pc, #344]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4b55      	ldr	r3, [pc, #340]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0049      	lsls	r1, r1, #1
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fdac 	bl	8001bc8 <HAL_GetTick>
 8003070:	0003      	movs	r3, r0
 8003072:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003076:	f7fe fda7 	bl	8001bc8 <HAL_GetTick>
 800307a:	0002      	movs	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e209      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4013      	ands	r3, r2
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b48      	ldr	r3, [pc, #288]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a4a      	ldr	r2, [pc, #296]	; (80031c4 <HAL_RCC_OscConfig+0x338>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e01b      	b.n	80030e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030ac:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80030b2:	4949      	ldr	r1, [pc, #292]	; (80031d8 <HAL_RCC_OscConfig+0x34c>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fe fd86 	bl	8001bc8 <HAL_GetTick>
 80030bc:	0003      	movs	r3, r0
 80030be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe fd81 	bl	8001bc8 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1e3      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4013      	ands	r3, r2
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x236>
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2208      	movs	r2, #8
 80030ea:	4013      	ands	r3, r2
 80030ec:	d047      	beq.n	800317e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2238      	movs	r2, #56	; 0x38
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b18      	cmp	r3, #24
 80030f8:	d10a      	bne.n	8003110 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	2202      	movs	r2, #2
 8003100:	4013      	ands	r3, r2
 8003102:	d03c      	beq.n	800317e <HAL_RCC_OscConfig+0x2f2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d138      	bne.n	800317e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e1c5      	b.n	800349c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d019      	beq.n	800314c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800311a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800311e:	2101      	movs	r1, #1
 8003120:	430a      	orrs	r2, r1
 8003122:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fd50 	bl	8001bc8 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312e:	f7fe fd4b 	bl	8001bc8 <HAL_GetTick>
 8003132:	0002      	movs	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e1ad      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003144:	2202      	movs	r2, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d0f1      	beq.n	800312e <HAL_RCC_OscConfig+0x2a2>
 800314a:	e018      	b.n	800317e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 800314e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003152:	2101      	movs	r1, #1
 8003154:	438a      	bics	r2, r1
 8003156:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fd36 	bl	8001bc8 <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe fd31 	bl	8001bc8 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e193      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003174:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	2202      	movs	r2, #2
 800317a:	4013      	ands	r3, r2
 800317c:	d1f1      	bne.n	8003162 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2204      	movs	r2, #4
 8003184:	4013      	ands	r3, r2
 8003186:	d100      	bne.n	800318a <HAL_RCC_OscConfig+0x2fe>
 8003188:	e0c6      	b.n	8003318 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318a:	231f      	movs	r3, #31
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2238      	movs	r2, #56	; 0x38
 8003198:	4013      	ands	r3, r2
 800319a:	2b20      	cmp	r3, #32
 800319c:	d11e      	bne.n	80031dc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_OscConfig+0x32c>)
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	2202      	movs	r2, #2
 80031a4:	4013      	ands	r3, r2
 80031a6:	d100      	bne.n	80031aa <HAL_RCC_OscConfig+0x31e>
 80031a8:	e0b6      	b.n	8003318 <HAL_RCC_OscConfig+0x48c>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d000      	beq.n	80031b4 <HAL_RCC_OscConfig+0x328>
 80031b2:	e0b1      	b.n	8003318 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e171      	b.n	800349c <HAL_RCC_OscConfig+0x610>
 80031b8:	40021000 	.word	0x40021000
 80031bc:	fffeffff 	.word	0xfffeffff
 80031c0:	fffbffff 	.word	0xfffbffff
 80031c4:	ffff80ff 	.word	0xffff80ff
 80031c8:	ffffc7ff 	.word	0xffffc7ff
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000004 	.word	0x20000004
 80031d8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031dc:	4bb1      	ldr	r3, [pc, #708]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80031de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e0:	2380      	movs	r3, #128	; 0x80
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	4013      	ands	r3, r2
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x360>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x362>
 80031ec:	2300      	movs	r3, #0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d011      	beq.n	8003216 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	4bac      	ldr	r3, [pc, #688]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80031f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f6:	4bab      	ldr	r3, [pc, #684]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	0549      	lsls	r1, r1, #21
 80031fc:	430a      	orrs	r2, r1
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8003200:	4ba8      	ldr	r3, [pc, #672]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	055b      	lsls	r3, r3, #21
 8003208:	4013      	ands	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800320e:	231f      	movs	r3, #31
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003216:	4ba4      	ldr	r3, [pc, #656]	; (80034a8 <HAL_RCC_OscConfig+0x61c>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d11a      	bne.n	8003258 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003222:	4ba1      	ldr	r3, [pc, #644]	; (80034a8 <HAL_RCC_OscConfig+0x61c>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4ba0      	ldr	r3, [pc, #640]	; (80034a8 <HAL_RCC_OscConfig+0x61c>)
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	0049      	lsls	r1, r1, #1
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003230:	f7fe fcca 	bl	8001bc8 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7fe fcc5 	bl	8001bc8 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e127      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324c:	4b96      	ldr	r3, [pc, #600]	; (80034a8 <HAL_RCC_OscConfig+0x61c>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x3e2>
 8003260:	4b90      	ldr	r3, [pc, #576]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003262:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003264:	4b8f      	ldr	r3, [pc, #572]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003266:	2101      	movs	r1, #1
 8003268:	430a      	orrs	r2, r1
 800326a:	65da      	str	r2, [r3, #92]	; 0x5c
 800326c:	e01c      	b.n	80032a8 <HAL_RCC_OscConfig+0x41c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x404>
 8003276:	4b8b      	ldr	r3, [pc, #556]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003278:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800327a:	4b8a      	ldr	r3, [pc, #552]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800327c:	2104      	movs	r1, #4
 800327e:	430a      	orrs	r2, r1
 8003280:	65da      	str	r2, [r3, #92]	; 0x5c
 8003282:	4b88      	ldr	r3, [pc, #544]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003286:	4b87      	ldr	r3, [pc, #540]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003288:	2101      	movs	r1, #1
 800328a:	430a      	orrs	r2, r1
 800328c:	65da      	str	r2, [r3, #92]	; 0x5c
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x41c>
 8003290:	4b84      	ldr	r3, [pc, #528]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003294:	4b83      	ldr	r3, [pc, #524]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003296:	2101      	movs	r1, #1
 8003298:	438a      	bics	r2, r1
 800329a:	65da      	str	r2, [r3, #92]	; 0x5c
 800329c:	4b81      	ldr	r3, [pc, #516]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800329e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a0:	4b80      	ldr	r3, [pc, #512]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80032a2:	2104      	movs	r1, #4
 80032a4:	438a      	bics	r2, r1
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d014      	beq.n	80032da <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b0:	f7fe fc8a 	bl	8001bc8 <HAL_GetTick>
 80032b4:	0003      	movs	r3, r0
 80032b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032b8:	e009      	b.n	80032ce <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe fc85 	bl	8001bc8 <HAL_GetTick>
 80032be:	0002      	movs	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	4a79      	ldr	r2, [pc, #484]	; (80034ac <HAL_RCC_OscConfig+0x620>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0e6      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ce:	4b75      	ldr	r3, [pc, #468]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	2202      	movs	r2, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x42e>
 80032d8:	e013      	b.n	8003302 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe fc75 	bl	8001bc8 <HAL_GetTick>
 80032de:	0003      	movs	r3, r0
 80032e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e2:	e009      	b.n	80032f8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7fe fc70 	bl	8001bc8 <HAL_GetTick>
 80032e8:	0002      	movs	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	4a6f      	ldr	r2, [pc, #444]	; (80034ac <HAL_RCC_OscConfig+0x620>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0d1      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f8:	4b6a      	ldr	r3, [pc, #424]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	2202      	movs	r2, #2
 80032fe:	4013      	ands	r3, r2
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003302:	231f      	movs	r3, #31
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b65      	ldr	r3, [pc, #404]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	4b64      	ldr	r3, [pc, #400]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003312:	4967      	ldr	r1, [pc, #412]	; (80034b0 <HAL_RCC_OscConfig+0x624>)
 8003314:	400a      	ands	r2, r1
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d100      	bne.n	8003322 <HAL_RCC_OscConfig+0x496>
 8003320:	e0bb      	b.n	800349a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003322:	4b60      	ldr	r3, [pc, #384]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2238      	movs	r2, #56	; 0x38
 8003328:	4013      	ands	r3, r2
 800332a:	2b10      	cmp	r3, #16
 800332c:	d100      	bne.n	8003330 <HAL_RCC_OscConfig+0x4a4>
 800332e:	e07b      	b.n	8003428 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d156      	bne.n	80033e6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b5a      	ldr	r3, [pc, #360]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b59      	ldr	r3, [pc, #356]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800333e:	495d      	ldr	r1, [pc, #372]	; (80034b4 <HAL_RCC_OscConfig+0x628>)
 8003340:	400a      	ands	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fc40 	bl	8001bc8 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334e:	f7fe fc3b 	bl	8001bc8 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e09d      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	4b50      	ldr	r3, [pc, #320]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	049b      	lsls	r3, r3, #18
 8003368:	4013      	ands	r3, r2
 800336a:	d1f0      	bne.n	800334e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a51      	ldr	r2, [pc, #324]	; (80034b8 <HAL_RCC_OscConfig+0x62c>)
 8003372:	4013      	ands	r3, r2
 8003374:	0019      	movs	r1, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	021b      	lsls	r3, r3, #8
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003398:	431a      	orrs	r2, r3
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a0:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033a6:	2180      	movs	r1, #128	; 0x80
 80033a8:	0449      	lsls	r1, r1, #17
 80033aa:	430a      	orrs	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b3c      	ldr	r3, [pc, #240]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	0549      	lsls	r1, r1, #21
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fc04 	bl	8001bc8 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fe fbff 	bl	8001bc8 <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e061      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d8:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	049b      	lsls	r3, r3, #18
 80033e0:	4013      	ands	r3, r2
 80033e2:	d0f0      	beq.n	80033c6 <HAL_RCC_OscConfig+0x53a>
 80033e4:	e059      	b.n	800349a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 80033ec:	4931      	ldr	r1, [pc, #196]	; (80034b4 <HAL_RCC_OscConfig+0x628>)
 80033ee:	400a      	ands	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f2:	f7fe fbe9 	bl	8001bc8 <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fbe4 	bl	8001bc8 <HAL_GetTick>
 8003400:	0002      	movs	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e046      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340e:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	049b      	lsls	r3, r3, #18
 8003416:	4013      	ands	r3, r2
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	4b21      	ldr	r3, [pc, #132]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003420:	4926      	ldr	r1, [pc, #152]	; (80034bc <HAL_RCC_OscConfig+0x630>)
 8003422:	400a      	ands	r2, r1
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	e038      	b.n	800349a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e033      	b.n	800349c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_RCC_OscConfig+0x618>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2203      	movs	r2, #3
 800343e:	401a      	ands	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	429a      	cmp	r2, r3
 8003446:	d126      	bne.n	8003496 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2270      	movs	r2, #112	; 0x70
 800344c:	401a      	ands	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d11f      	bne.n	8003496 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	23fe      	movs	r3, #254	; 0xfe
 800345a:	01db      	lsls	r3, r3, #7
 800345c:	401a      	ands	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d116      	bne.n	8003496 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	23f8      	movs	r3, #248	; 0xf8
 800346c:	039b      	lsls	r3, r3, #14
 800346e:	401a      	ands	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d10e      	bne.n	8003496 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	23e0      	movs	r3, #224	; 0xe0
 800347c:	051b      	lsls	r3, r3, #20
 800347e:	401a      	ands	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	0f5b      	lsrs	r3, r3, #29
 800348c:	075a      	lsls	r2, r3, #29
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b008      	add	sp, #32
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	00001388 	.word	0x00001388
 80034b0:	efffffff 	.word	0xefffffff
 80034b4:	feffffff 	.word	0xfeffffff
 80034b8:	11c1808c 	.word	0x11c1808c
 80034bc:	eefefffc 	.word	0xeefefffc

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0e9      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2207      	movs	r2, #7
 80034da:	4013      	ands	r3, r2
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d91e      	bls.n	8003520 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b73      	ldr	r3, [pc, #460]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2207      	movs	r2, #7
 80034e8:	4393      	bics	r3, r2
 80034ea:	0019      	movs	r1, r3
 80034ec:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034f4:	f7fe fb68 	bl	8001bc8 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034fc:	e009      	b.n	8003512 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fe:	f7fe fb63 	bl	8001bc8 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	4a6a      	ldr	r2, [pc, #424]	; (80036b4 <HAL_RCC_ClockConfig+0x1f4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0ca      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003512:	4b67      	ldr	r3, [pc, #412]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2207      	movs	r2, #7
 8003518:	4013      	ands	r3, r2
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d1ee      	bne.n	80034fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d015      	beq.n	8003556 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	d006      	beq.n	8003542 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003534:	4b60      	ldr	r3, [pc, #384]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	4b5f      	ldr	r3, [pc, #380]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 800353a:	21e0      	movs	r1, #224	; 0xe0
 800353c:	01c9      	lsls	r1, r1, #7
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4a5d      	ldr	r2, [pc, #372]	; (80036bc <HAL_RCC_ClockConfig+0x1fc>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	4013      	ands	r3, r2
 800355e:	d057      	beq.n	8003610 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003568:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	4013      	ands	r3, r2
 8003572:	d12b      	bne.n	80035cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e097      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d107      	bne.n	8003590 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003580:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	049b      	lsls	r3, r3, #18
 8003588:	4013      	ands	r3, r2
 800358a:	d11f      	bne.n	80035cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e08b      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003598:	4b47      	ldr	r3, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	d113      	bne.n	80035cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e07f      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d106      	bne.n	80035be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b0:	4b41      	ldr	r3, [pc, #260]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 80035b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035b4:	2202      	movs	r2, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	d108      	bne.n	80035cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e074      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035be:	4b3e      	ldr	r3, [pc, #248]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e06d      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2207      	movs	r2, #7
 80035d2:	4393      	bics	r3, r2
 80035d4:	0019      	movs	r1, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4b37      	ldr	r3, [pc, #220]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fe faf2 	bl	8001bc8 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e8:	e009      	b.n	80035fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ea:	f7fe faed 	bl	8001bc8 <HAL_GetTick>
 80035ee:	0002      	movs	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <HAL_RCC_ClockConfig+0x1f4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e054      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2238      	movs	r2, #56	; 0x38
 8003604:	401a      	ands	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	429a      	cmp	r2, r3
 800360e:	d1ec      	bne.n	80035ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2207      	movs	r2, #7
 8003616:	4013      	ands	r3, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d21e      	bcs.n	800365c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b24      	ldr	r3, [pc, #144]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2207      	movs	r2, #7
 8003624:	4393      	bics	r3, r2
 8003626:	0019      	movs	r1, r3
 8003628:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003630:	f7fe faca 	bl	8001bc8 <HAL_GetTick>
 8003634:	0003      	movs	r3, r0
 8003636:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003638:	e009      	b.n	800364e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363a:	f7fe fac5 	bl	8001bc8 <HAL_GetTick>
 800363e:	0002      	movs	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e02c      	b.n	80036a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800364e:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2207      	movs	r2, #7
 8003654:	4013      	ands	r3, r2
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d1ee      	bne.n	800363a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2204      	movs	r2, #4
 8003662:	4013      	ands	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <HAL_RCC_ClockConfig+0x200>)
 800366c:	4013      	ands	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800367a:	f000 f829 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 800367e:	0001      	movs	r1, r0
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	220f      	movs	r2, #15
 8003688:	401a      	ands	r2, r3
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCC_ClockConfig+0x204>)
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	58d3      	ldr	r3, [r2, r3]
 8003690:	221f      	movs	r2, #31
 8003692:	4013      	ands	r3, r2
 8003694:	000a      	movs	r2, r1
 8003696:	40da      	lsrs	r2, r3
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_ClockConfig+0x208>)
 800369a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x20c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fe fa35 	bl	8001b10 <HAL_InitTick>
 80036a6:	0003      	movs	r3, r0
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b004      	add	sp, #16
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40022000 	.word	0x40022000
 80036b4:	00001388 	.word	0x00001388
 80036b8:	40021000 	.word	0x40021000
 80036bc:	fffff0ff 	.word	0xfffff0ff
 80036c0:	ffff8fff 	.word	0xffff8fff
 80036c4:	080044e0 	.word	0x080044e0
 80036c8:	20000000 	.word	0x20000000
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036d6:	4b3c      	ldr	r3, [pc, #240]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2238      	movs	r2, #56	; 0x38
 80036dc:	4013      	ands	r3, r2
 80036de:	d10f      	bne.n	8003700 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0adb      	lsrs	r3, r3, #11
 80036e6:	2207      	movs	r2, #7
 80036e8:	4013      	ands	r3, r2
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	0013      	movs	r3, r2
 80036f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	4835      	ldr	r0, [pc, #212]	; (80037cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80036f6:	f7fc fd05 	bl	8000104 <__udivsi3>
 80036fa:	0003      	movs	r3, r0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	e05d      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2238      	movs	r2, #56	; 0x38
 8003706:	4013      	ands	r3, r2
 8003708:	2b08      	cmp	r3, #8
 800370a:	d102      	bne.n	8003712 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	e054      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2238      	movs	r2, #56	; 0x38
 8003718:	4013      	ands	r3, r2
 800371a:	2b10      	cmp	r3, #16
 800371c:	d138      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2203      	movs	r2, #3
 8003724:	4013      	ands	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	2207      	movs	r2, #7
 8003730:	4013      	ands	r3, r2
 8003732:	3301      	adds	r3, #1
 8003734:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d10d      	bne.n	8003758 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	4824      	ldr	r0, [pc, #144]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003740:	f7fc fce0 	bl	8000104 <__udivsi3>
 8003744:	0003      	movs	r3, r0
 8003746:	0019      	movs	r1, r3
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	227f      	movs	r2, #127	; 0x7f
 8003750:	4013      	ands	r3, r2
 8003752:	434b      	muls	r3, r1
 8003754:	617b      	str	r3, [r7, #20]
        break;
 8003756:	e00d      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	481c      	ldr	r0, [pc, #112]	; (80037cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800375c:	f7fc fcd2 	bl	8000104 <__udivsi3>
 8003760:	0003      	movs	r3, r0
 8003762:	0019      	movs	r1, r3
 8003764:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	227f      	movs	r2, #127	; 0x7f
 800376c:	4013      	ands	r3, r2
 800376e:	434b      	muls	r3, r1
 8003770:	617b      	str	r3, [r7, #20]
        break;
 8003772:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0f5b      	lsrs	r3, r3, #29
 800377a:	2207      	movs	r2, #7
 800377c:	4013      	ands	r3, r2
 800377e:	3301      	adds	r3, #1
 8003780:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	6978      	ldr	r0, [r7, #20]
 8003786:	f7fc fcbd 	bl	8000104 <__udivsi3>
 800378a:	0003      	movs	r3, r0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	e015      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003790:	4b0d      	ldr	r3, [pc, #52]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2238      	movs	r2, #56	; 0x38
 8003796:	4013      	ands	r3, r2
 8003798:	2b20      	cmp	r3, #32
 800379a:	d103      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2238      	movs	r2, #56	; 0x38
 80037aa:	4013      	ands	r3, r2
 80037ac:	2b18      	cmp	r3, #24
 80037ae:	d103      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037b0:	23fa      	movs	r3, #250	; 0xfa
 80037b2:	01db      	lsls	r3, r3, #7
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	e001      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037bc:	693b      	ldr	r3, [r7, #16]
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	40021000 	.word	0x40021000
 80037cc:	00f42400 	.word	0x00f42400
 80037d0:	007a1200 	.word	0x007a1200

080037d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	223d      	movs	r2, #61	; 0x3d
 80037e0:	5c9b      	ldrb	r3, [r3, r2]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d001      	beq.n	80037ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e035      	b.n	8003858 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	223d      	movs	r2, #61	; 0x3d
 80037f0:	2102      	movs	r1, #2
 80037f2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_TIM_Base_Start+0x8c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00a      	beq.n	8003814 <HAL_TIM_Base_Start+0x40>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	05db      	lsls	r3, r3, #23
 8003806:	429a      	cmp	r2, r3
 8003808:	d004      	beq.n	8003814 <HAL_TIM_Base_Start+0x40>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <HAL_TIM_Base_Start+0x90>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d116      	bne.n	8003842 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_TIM_Base_Start+0x94>)
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d016      	beq.n	8003854 <HAL_TIM_Base_Start+0x80>
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	025b      	lsls	r3, r3, #9
 800382c:	429a      	cmp	r2, r3
 800382e:	d011      	beq.n	8003854 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	430a      	orrs	r2, r1
 800383e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	e008      	b.n	8003854 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	e000      	b.n	8003856 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003854:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b004      	add	sp, #16
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40000400 	.word	0x40000400
 8003868:	00010007 	.word	0x00010007

0800386c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e04a      	b.n	8003914 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	223d      	movs	r2, #61	; 0x3d
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d107      	bne.n	800389a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	223c      	movs	r2, #60	; 0x3c
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fe f87d 	bl	8001994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	223d      	movs	r2, #61	; 0x3d
 800389e:	2102      	movs	r1, #2
 80038a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	0019      	movs	r1, r3
 80038ac:	0010      	movs	r0, r2
 80038ae:	f000 fa13 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2248      	movs	r2, #72	; 0x48
 80038b6:	2101      	movs	r1, #1
 80038b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223e      	movs	r2, #62	; 0x3e
 80038be:	2101      	movs	r1, #1
 80038c0:	5499      	strb	r1, [r3, r2]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	223f      	movs	r2, #63	; 0x3f
 80038c6:	2101      	movs	r1, #1
 80038c8:	5499      	strb	r1, [r3, r2]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	2101      	movs	r1, #1
 80038d0:	5499      	strb	r1, [r3, r2]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2241      	movs	r2, #65	; 0x41
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2242      	movs	r2, #66	; 0x42
 80038de:	2101      	movs	r1, #1
 80038e0:	5499      	strb	r1, [r3, r2]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2243      	movs	r2, #67	; 0x43
 80038e6:	2101      	movs	r1, #1
 80038e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2244      	movs	r2, #68	; 0x44
 80038ee:	2101      	movs	r1, #1
 80038f0:	5499      	strb	r1, [r3, r2]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2245      	movs	r2, #69	; 0x45
 80038f6:	2101      	movs	r1, #1
 80038f8:	5499      	strb	r1, [r3, r2]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2246      	movs	r2, #70	; 0x46
 80038fe:	2101      	movs	r1, #1
 8003900:	5499      	strb	r1, [r3, r2]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2247      	movs	r2, #71	; 0x47
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223d      	movs	r2, #61	; 0x3d
 800390e:	2101      	movs	r1, #1
 8003910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b002      	add	sp, #8
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d108      	bne.n	800393e <HAL_TIM_PWM_Start+0x22>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	223e      	movs	r2, #62	; 0x3e
 8003930:	5c9b      	ldrb	r3, [r3, r2]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	1e5a      	subs	r2, r3, #1
 8003938:	4193      	sbcs	r3, r2
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e037      	b.n	80039ae <HAL_TIM_PWM_Start+0x92>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d108      	bne.n	8003956 <HAL_TIM_PWM_Start+0x3a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223f      	movs	r2, #63	; 0x3f
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	1e5a      	subs	r2, r3, #1
 8003950:	4193      	sbcs	r3, r2
 8003952:	b2db      	uxtb	r3, r3
 8003954:	e02b      	b.n	80039ae <HAL_TIM_PWM_Start+0x92>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d108      	bne.n	800396e <HAL_TIM_PWM_Start+0x52>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	5c9b      	ldrb	r3, [r3, r2]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	4193      	sbcs	r3, r2
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e01f      	b.n	80039ae <HAL_TIM_PWM_Start+0x92>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b0c      	cmp	r3, #12
 8003972:	d108      	bne.n	8003986 <HAL_TIM_PWM_Start+0x6a>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2241      	movs	r2, #65	; 0x41
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	4193      	sbcs	r3, r2
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e013      	b.n	80039ae <HAL_TIM_PWM_Start+0x92>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b10      	cmp	r3, #16
 800398a:	d108      	bne.n	800399e <HAL_TIM_PWM_Start+0x82>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2242      	movs	r2, #66	; 0x42
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	1e5a      	subs	r2, r3, #1
 8003998:	4193      	sbcs	r3, r2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	e007      	b.n	80039ae <HAL_TIM_PWM_Start+0x92>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2243      	movs	r2, #67	; 0x43
 80039a2:	5c9b      	ldrb	r3, [r3, r2]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	4193      	sbcs	r3, r2
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e081      	b.n	8003aba <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d104      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xaa>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	223e      	movs	r2, #62	; 0x3e
 80039c0:	2102      	movs	r1, #2
 80039c2:	5499      	strb	r1, [r3, r2]
 80039c4:	e023      	b.n	8003a0e <HAL_TIM_PWM_Start+0xf2>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d104      	bne.n	80039d6 <HAL_TIM_PWM_Start+0xba>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	223f      	movs	r2, #63	; 0x3f
 80039d0:	2102      	movs	r1, #2
 80039d2:	5499      	strb	r1, [r3, r2]
 80039d4:	e01b      	b.n	8003a0e <HAL_TIM_PWM_Start+0xf2>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d104      	bne.n	80039e6 <HAL_TIM_PWM_Start+0xca>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	2102      	movs	r1, #2
 80039e2:	5499      	strb	r1, [r3, r2]
 80039e4:	e013      	b.n	8003a0e <HAL_TIM_PWM_Start+0xf2>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d104      	bne.n	80039f6 <HAL_TIM_PWM_Start+0xda>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2241      	movs	r2, #65	; 0x41
 80039f0:	2102      	movs	r1, #2
 80039f2:	5499      	strb	r1, [r3, r2]
 80039f4:	e00b      	b.n	8003a0e <HAL_TIM_PWM_Start+0xf2>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_PWM_Start+0xea>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2242      	movs	r2, #66	; 0x42
 8003a00:	2102      	movs	r1, #2
 8003a02:	5499      	strb	r1, [r3, r2]
 8003a04:	e003      	b.n	8003a0e <HAL_TIM_PWM_Start+0xf2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2243      	movs	r2, #67	; 0x43
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6839      	ldr	r1, [r7, #0]
 8003a14:	2201      	movs	r2, #1
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 fc7e 	bl	8004318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a28      	ldr	r2, [pc, #160]	; (8003ac4 <HAL_TIM_PWM_Start+0x1a8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x11e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_TIM_PWM_Start+0x1ac>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIM_PWM_Start+0x11e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a25      	ldr	r2, [pc, #148]	; (8003acc <HAL_TIM_PWM_Start+0x1b0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_PWM_Start+0x122>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_TIM_PWM_Start+0x124>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2180      	movs	r1, #128	; 0x80
 8003a50:	0209      	lsls	r1, r1, #8
 8003a52:	430a      	orrs	r2, r1
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <HAL_TIM_PWM_Start+0x1a8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00a      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x15a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2380      	movs	r3, #128	; 0x80
 8003a66:	05db      	lsls	r3, r3, #23
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d004      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x15a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_TIM_PWM_Start+0x1b4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d116      	bne.n	8003aa4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <HAL_TIM_PWM_Start+0x1b8>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d016      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x19a>
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	025b      	lsls	r3, r3, #9
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d011      	beq.n	8003ab6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	e008      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e000      	b.n	8003ab8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b004      	add	sp, #16
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	00010007 	.word	0x00010007

08003ad8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	223c      	movs	r2, #60	; 0x3c
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e0e5      	b.n	8003cc6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	223c      	movs	r2, #60	; 0x3c
 8003afe:	2101      	movs	r1, #1
 8003b00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b14      	cmp	r3, #20
 8003b06:	d900      	bls.n	8003b0a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003b08:	e0d1      	b.n	8003cae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	009a      	lsls	r2, r3, #2
 8003b0e:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003b10:	18d3      	adds	r3, r2, r3
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 f95e 	bl	8003de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2108      	movs	r1, #8
 8003b30:	430a      	orrs	r2, r1
 8003b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2104      	movs	r1, #4
 8003b40:	438a      	bics	r2, r1
 8003b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6999      	ldr	r1, [r3, #24]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	619a      	str	r2, [r3, #24]
      break;
 8003b56:	e0af      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	0011      	movs	r1, r2
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f9bd 	bl	8003ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2180      	movs	r1, #128	; 0x80
 8003b72:	0109      	lsls	r1, r1, #4
 8003b74:	430a      	orrs	r2, r1
 8003b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4954      	ldr	r1, [pc, #336]	; (8003cd4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b84:	400a      	ands	r2, r1
 8003b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]
      break;
 8003b9c:	e08c      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	0011      	movs	r1, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f000 fa18 	bl	8003fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	438a      	bics	r2, r1
 8003bca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69d9      	ldr	r1, [r3, #28]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	61da      	str	r2, [r3, #28]
      break;
 8003bde:	e06b      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 fa79 	bl	80040e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0109      	lsls	r1, r1, #4
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4932      	ldr	r1, [pc, #200]	; (8003cd4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69d9      	ldr	r1, [r3, #28]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	021a      	lsls	r2, r3, #8
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	61da      	str	r2, [r3, #28]
      break;
 8003c24:	e048      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	0011      	movs	r1, r2
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 faba 	bl	80041a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2108      	movs	r1, #8
 8003c40:	430a      	orrs	r2, r1
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2104      	movs	r1, #4
 8003c50:	438a      	bics	r2, r1
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c66:	e027      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	0011      	movs	r1, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 faf3 	bl	800425c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0109      	lsls	r1, r1, #4
 8003c84:	430a      	orrs	r2, r1
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4910      	ldr	r1, [pc, #64]	; (8003cd4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cac:	e004      	b.n	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003cae:	2317      	movs	r3, #23
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
      break;
 8003cb6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	223c      	movs	r2, #60	; 0x3c
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

  return status;
 8003cc0:	2317      	movs	r3, #23
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b006      	add	sp, #24
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	08004520 	.word	0x08004520
 8003cd4:	fffffbff 	.word	0xfffffbff

08003cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <TIM_Base_SetConfig+0xf0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d008      	beq.n	8003d02 <TIM_Base_SetConfig+0x2a>
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	05db      	lsls	r3, r3, #23
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x2a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <TIM_Base_SetConfig+0xf4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2270      	movs	r2, #112	; 0x70
 8003d06:	4393      	bics	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <TIM_Base_SetConfig+0xf0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d014      	beq.n	8003d46 <TIM_Base_SetConfig+0x6e>
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d00f      	beq.n	8003d46 <TIM_Base_SetConfig+0x6e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <TIM_Base_SetConfig+0xf4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_Base_SetConfig+0x6e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <TIM_Base_SetConfig+0xf8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_Base_SetConfig+0x6e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <TIM_Base_SetConfig+0xfc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_Base_SetConfig+0x6e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <TIM_Base_SetConfig+0x100>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d108      	bne.n	8003d58 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <TIM_Base_SetConfig+0x104>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	4393      	bics	r3, r2
 8003d5e:	001a      	movs	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <TIM_Base_SetConfig+0xf0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0xbe>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <TIM_Base_SetConfig+0xfc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0xbe>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <TIM_Base_SetConfig+0x100>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d103      	bne.n	8003d9e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2201      	movs	r2, #1
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2201      	movs	r2, #1
 8003db6:	4393      	bics	r3, r2
 8003db8:	001a      	movs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]
  }
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b004      	add	sp, #16
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40000400 	.word	0x40000400
 8003dd0:	40002000 	.word	0x40002000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800
 8003ddc:	fffffcff 	.word	0xfffffcff

08003de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	2201      	movs	r2, #1
 8003df6:	4393      	bics	r3, r2
 8003df8:	001a      	movs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a2e      	ldr	r2, [pc, #184]	; (8003ec8 <TIM_OC1_SetConfig+0xe8>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2203      	movs	r2, #3
 8003e16:	4393      	bics	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2202      	movs	r2, #2
 8003e28:	4393      	bics	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <TIM_OC1_SetConfig+0xec>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_OC1_SetConfig+0x6e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <TIM_OC1_SetConfig+0xf0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_OC1_SetConfig+0x6e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a22      	ldr	r2, [pc, #136]	; (8003ed4 <TIM_OC1_SetConfig+0xf4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10c      	bne.n	8003e68 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2208      	movs	r2, #8
 8003e52:	4393      	bics	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2204      	movs	r2, #4
 8003e64:	4393      	bics	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <TIM_OC1_SetConfig+0xec>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d007      	beq.n	8003e80 <TIM_OC1_SetConfig+0xa0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <TIM_OC1_SetConfig+0xf0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <TIM_OC1_SetConfig+0xa0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <TIM_OC1_SetConfig+0xf4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d111      	bne.n	8003ea4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <TIM_OC1_SetConfig+0xf8>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4a14      	ldr	r2, [pc, #80]	; (8003edc <TIM_OC1_SetConfig+0xfc>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b006      	add	sp, #24
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	fffeff8f 	.word	0xfffeff8f
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800
 8003ed8:	fffffeff 	.word	0xfffffeff
 8003edc:	fffffdff 	.word	0xfffffdff

08003ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	001a      	movs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a2c      	ldr	r2, [pc, #176]	; (8003fc0 <TIM_OC2_SetConfig+0xe0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a2b      	ldr	r2, [pc, #172]	; (8003fc4 <TIM_OC2_SetConfig+0xe4>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	021b      	lsls	r3, r3, #8
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <TIM_OC2_SetConfig+0xe8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10d      	bne.n	8003f5e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	4393      	bics	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2240      	movs	r2, #64	; 0x40
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <TIM_OC2_SetConfig+0xe8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_OC2_SetConfig+0x96>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a18      	ldr	r2, [pc, #96]	; (8003fcc <TIM_OC2_SetConfig+0xec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_OC2_SetConfig+0x96>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <TIM_OC2_SetConfig+0xf0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d113      	bne.n	8003f9e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <TIM_OC2_SetConfig+0xf4>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <TIM_OC2_SetConfig+0xf8>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	621a      	str	r2, [r3, #32]
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b006      	add	sp, #24
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	feff8fff 	.word	0xfeff8fff
 8003fc4:	fffffcff 	.word	0xfffffcff
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800
 8003fd4:	fffffbff 	.word	0xfffffbff
 8003fd8:	fffff7ff 	.word	0xfffff7ff

08003fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <TIM_OC3_SetConfig+0xdc>)
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <TIM_OC3_SetConfig+0xe0>)
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2203      	movs	r2, #3
 8004010:	4393      	bics	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <TIM_OC3_SetConfig+0xe4>)
 8004022:	4013      	ands	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a23      	ldr	r2, [pc, #140]	; (80040c4 <TIM_OC3_SetConfig+0xe8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d10d      	bne.n	8004056 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <TIM_OC3_SetConfig+0xec>)
 800403e:	4013      	ands	r3, r2
 8004040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <TIM_OC3_SetConfig+0xf0>)
 8004052:	4013      	ands	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <TIM_OC3_SetConfig+0xe8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <TIM_OC3_SetConfig+0x92>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <TIM_OC3_SetConfig+0xf4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_OC3_SetConfig+0x92>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1a      	ldr	r2, [pc, #104]	; (80040d4 <TIM_OC3_SetConfig+0xf8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d113      	bne.n	8004096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <TIM_OC3_SetConfig+0xfc>)
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4a18      	ldr	r2, [pc, #96]	; (80040dc <TIM_OC3_SetConfig+0x100>)
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	46c0      	nop			; (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b006      	add	sp, #24
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	fffffeff 	.word	0xfffffeff
 80040bc:	fffeff8f 	.word	0xfffeff8f
 80040c0:	fffffdff 	.word	0xfffffdff
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	fffff7ff 	.word	0xfffff7ff
 80040cc:	fffffbff 	.word	0xfffffbff
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	ffffefff 	.word	0xffffefff
 80040dc:	ffffdfff 	.word	0xffffdfff

080040e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4a24      	ldr	r2, [pc, #144]	; (8004188 <TIM_OC4_SetConfig+0xa8>)
 80040f6:	401a      	ands	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4a20      	ldr	r2, [pc, #128]	; (800418c <TIM_OC4_SetConfig+0xac>)
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a1f      	ldr	r2, [pc, #124]	; (8004190 <TIM_OC4_SetConfig+0xb0>)
 8004114:	4013      	ands	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <TIM_OC4_SetConfig+0xb4>)
 8004128:	4013      	ands	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	031b      	lsls	r3, r3, #12
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a17      	ldr	r2, [pc, #92]	; (8004198 <TIM_OC4_SetConfig+0xb8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d007      	beq.n	8004150 <TIM_OC4_SetConfig+0x70>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a16      	ldr	r2, [pc, #88]	; (800419c <TIM_OC4_SetConfig+0xbc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC4_SetConfig+0x70>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <TIM_OC4_SetConfig+0xc0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d109      	bne.n	8004164 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <TIM_OC4_SetConfig+0xc4>)
 8004154:	4013      	ands	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	b006      	add	sp, #24
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	ffffefff 	.word	0xffffefff
 800418c:	feff8fff 	.word	0xfeff8fff
 8004190:	fffffcff 	.word	0xfffffcff
 8004194:	ffffdfff 	.word	0xffffdfff
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40014400 	.word	0x40014400
 80041a0:	40014800 	.word	0x40014800
 80041a4:	ffffbfff 	.word	0xffffbfff

080041a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4a21      	ldr	r2, [pc, #132]	; (8004244 <TIM_OC5_SetConfig+0x9c>)
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <TIM_OC5_SetConfig+0xa0>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <TIM_OC5_SetConfig+0xa4>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a15      	ldr	r2, [pc, #84]	; (8004250 <TIM_OC5_SetConfig+0xa8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d007      	beq.n	800420e <TIM_OC5_SetConfig+0x66>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <TIM_OC5_SetConfig+0xac>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_OC5_SetConfig+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <TIM_OC5_SetConfig+0xb0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d109      	bne.n	8004222 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <TIM_OC5_SetConfig+0x9c>)
 8004212:	4013      	ands	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	621a      	str	r2, [r3, #32]
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b006      	add	sp, #24
 8004242:	bd80      	pop	{r7, pc}
 8004244:	fffeffff 	.word	0xfffeffff
 8004248:	fffeff8f 	.word	0xfffeff8f
 800424c:	fffdffff 	.word	0xfffdffff
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	4a22      	ldr	r2, [pc, #136]	; (80042fc <TIM_OC6_SetConfig+0xa0>)
 8004272:	401a      	ands	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <TIM_OC6_SetConfig+0xa4>)
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <TIM_OC6_SetConfig+0xa8>)
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	051b      	lsls	r3, r3, #20
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a16      	ldr	r2, [pc, #88]	; (8004308 <TIM_OC6_SetConfig+0xac>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <TIM_OC6_SetConfig+0x68>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a15      	ldr	r2, [pc, #84]	; (800430c <TIM_OC6_SetConfig+0xb0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d003      	beq.n	80042c4 <TIM_OC6_SetConfig+0x68>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a14      	ldr	r2, [pc, #80]	; (8004310 <TIM_OC6_SetConfig+0xb4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d109      	bne.n	80042d8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	4a13      	ldr	r2, [pc, #76]	; (8004314 <TIM_OC6_SetConfig+0xb8>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	029b      	lsls	r3, r3, #10
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	621a      	str	r2, [r3, #32]
}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	46bd      	mov	sp, r7
 80042f6:	b006      	add	sp, #24
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	ffefffff 	.word	0xffefffff
 8004300:	feff8fff 	.word	0xfeff8fff
 8004304:	ffdfffff 	.word	0xffdfffff
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800
 8004314:	fffbffff 	.word	0xfffbffff

08004318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	221f      	movs	r2, #31
 8004328:	4013      	ands	r3, r2
 800432a:	2201      	movs	r2, #1
 800432c:	409a      	lsls	r2, r3
 800432e:	0013      	movs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	43d2      	mvns	r2, r2
 800433a:	401a      	ands	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	211f      	movs	r1, #31
 8004348:	400b      	ands	r3, r1
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4099      	lsls	r1, r3
 800434e:	000b      	movs	r3, r1
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b006      	add	sp, #24
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	223c      	movs	r2, #60	; 0x3c
 800436e:	5c9b      	ldrb	r3, [r3, r2]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004374:	2302      	movs	r3, #2
 8004376:	e050      	b.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	223c      	movs	r2, #60	; 0x3c
 800437c:	2101      	movs	r1, #1
 800437e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	223d      	movs	r2, #61	; 0x3d
 8004384:	2102      	movs	r1, #2
 8004386:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a21      	ldr	r2, [pc, #132]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a20      	ldr	r2, [pc, #128]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2270      	movs	r2, #112	; 0x70
 80043b8:	4393      	bics	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a14      	ldr	r2, [pc, #80]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00a      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	05db      	lsls	r3, r3, #23
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d004      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a10      	ldr	r2, [pc, #64]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2280      	movs	r2, #128	; 0x80
 80043f2:	4393      	bics	r3, r2
 80043f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	223d      	movs	r2, #61	; 0x3d
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	223c      	movs	r2, #60	; 0x3c
 8004414:	2100      	movs	r1, #0
 8004416:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	40012c00 	.word	0x40012c00
 8004428:	ff0fffff 	.word	0xff0fffff
 800442c:	40000400 	.word	0x40000400

08004430 <memset>:
 8004430:	0003      	movs	r3, r0
 8004432:	1882      	adds	r2, r0, r2
 8004434:	4293      	cmp	r3, r2
 8004436:	d100      	bne.n	800443a <memset+0xa>
 8004438:	4770      	bx	lr
 800443a:	7019      	strb	r1, [r3, #0]
 800443c:	3301      	adds	r3, #1
 800443e:	e7f9      	b.n	8004434 <memset+0x4>

08004440 <__libc_init_array>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	2600      	movs	r6, #0
 8004444:	4c0c      	ldr	r4, [pc, #48]	; (8004478 <__libc_init_array+0x38>)
 8004446:	4d0d      	ldr	r5, [pc, #52]	; (800447c <__libc_init_array+0x3c>)
 8004448:	1b64      	subs	r4, r4, r5
 800444a:	10a4      	asrs	r4, r4, #2
 800444c:	42a6      	cmp	r6, r4
 800444e:	d109      	bne.n	8004464 <__libc_init_array+0x24>
 8004450:	2600      	movs	r6, #0
 8004452:	f000 f819 	bl	8004488 <_init>
 8004456:	4c0a      	ldr	r4, [pc, #40]	; (8004480 <__libc_init_array+0x40>)
 8004458:	4d0a      	ldr	r5, [pc, #40]	; (8004484 <__libc_init_array+0x44>)
 800445a:	1b64      	subs	r4, r4, r5
 800445c:	10a4      	asrs	r4, r4, #2
 800445e:	42a6      	cmp	r6, r4
 8004460:	d105      	bne.n	800446e <__libc_init_array+0x2e>
 8004462:	bd70      	pop	{r4, r5, r6, pc}
 8004464:	00b3      	lsls	r3, r6, #2
 8004466:	58eb      	ldr	r3, [r5, r3]
 8004468:	4798      	blx	r3
 800446a:	3601      	adds	r6, #1
 800446c:	e7ee      	b.n	800444c <__libc_init_array+0xc>
 800446e:	00b3      	lsls	r3, r6, #2
 8004470:	58eb      	ldr	r3, [r5, r3]
 8004472:	4798      	blx	r3
 8004474:	3601      	adds	r6, #1
 8004476:	e7f2      	b.n	800445e <__libc_init_array+0x1e>
 8004478:	08004574 	.word	0x08004574
 800447c:	08004574 	.word	0x08004574
 8004480:	08004578 	.word	0x08004578
 8004484:	08004574 	.word	0x08004574

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
