
Proto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c8  080049c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080049c8  080049c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c8  080049c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080049d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  080049dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080049dc  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c909  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001df2  00000000  00000000  0002c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0002e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab4  00000000  00000000  0002f528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ae3  00000000  00000000  0002ffdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010272  00000000  00000000  00045abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c8be  00000000  00000000  00055d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003354  00000000  00000000  000e25f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e5944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800491c 	.word	0x0800491c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800491c 	.word	0x0800491c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_d2uiz>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	2200      	movs	r2, #0
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <__aeabi_d2uiz+0x38>)
 80003f6:	0004      	movs	r4, r0
 80003f8:	000d      	movs	r5, r1
 80003fa:	f000 ff93 	bl	8001324 <__aeabi_dcmpge>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d104      	bne.n	800040c <__aeabi_d2uiz+0x1c>
 8000402:	0020      	movs	r0, r4
 8000404:	0029      	movs	r1, r5
 8000406:	f000 fef3 	bl	80011f0 <__aeabi_d2iz>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <__aeabi_d2uiz+0x38>)
 800040e:	2200      	movs	r2, #0
 8000410:	0020      	movs	r0, r4
 8000412:	0029      	movs	r1, r5
 8000414:	f000 fb6a 	bl	8000aec <__aeabi_dsub>
 8000418:	f000 feea 	bl	80011f0 <__aeabi_d2iz>
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	061b      	lsls	r3, r3, #24
 8000420:	469c      	mov	ip, r3
 8000422:	4460      	add	r0, ip
 8000424:	e7f1      	b.n	800040a <__aeabi_d2uiz+0x1a>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	41e00000 	.word	0x41e00000

0800042c <__aeabi_dadd>:
 800042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042e:	464f      	mov	r7, r9
 8000430:	4646      	mov	r6, r8
 8000432:	46d6      	mov	lr, sl
 8000434:	0004      	movs	r4, r0
 8000436:	b5c0      	push	{r6, r7, lr}
 8000438:	001f      	movs	r7, r3
 800043a:	030b      	lsls	r3, r1, #12
 800043c:	0010      	movs	r0, r2
 800043e:	004e      	lsls	r6, r1, #1
 8000440:	0a5b      	lsrs	r3, r3, #9
 8000442:	0fcd      	lsrs	r5, r1, #31
 8000444:	0f61      	lsrs	r1, r4, #29
 8000446:	007a      	lsls	r2, r7, #1
 8000448:	4319      	orrs	r1, r3
 800044a:	00e3      	lsls	r3, r4, #3
 800044c:	033c      	lsls	r4, r7, #12
 800044e:	0fff      	lsrs	r7, r7, #31
 8000450:	46bc      	mov	ip, r7
 8000452:	0a64      	lsrs	r4, r4, #9
 8000454:	0f47      	lsrs	r7, r0, #29
 8000456:	4327      	orrs	r7, r4
 8000458:	0d76      	lsrs	r6, r6, #21
 800045a:	0d52      	lsrs	r2, r2, #21
 800045c:	00c0      	lsls	r0, r0, #3
 800045e:	46b9      	mov	r9, r7
 8000460:	4680      	mov	r8, r0
 8000462:	1ab7      	subs	r7, r6, r2
 8000464:	4565      	cmp	r5, ip
 8000466:	d100      	bne.n	800046a <__aeabi_dadd+0x3e>
 8000468:	e09b      	b.n	80005a2 <__aeabi_dadd+0x176>
 800046a:	2f00      	cmp	r7, #0
 800046c:	dc00      	bgt.n	8000470 <__aeabi_dadd+0x44>
 800046e:	e084      	b.n	800057a <__aeabi_dadd+0x14e>
 8000470:	2a00      	cmp	r2, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_dadd+0x4a>
 8000474:	e0be      	b.n	80005f4 <__aeabi_dadd+0x1c8>
 8000476:	4ac8      	ldr	r2, [pc, #800]	; (8000798 <__aeabi_dadd+0x36c>)
 8000478:	4296      	cmp	r6, r2
 800047a:	d100      	bne.n	800047e <__aeabi_dadd+0x52>
 800047c:	e124      	b.n	80006c8 <__aeabi_dadd+0x29c>
 800047e:	2280      	movs	r2, #128	; 0x80
 8000480:	464c      	mov	r4, r9
 8000482:	0412      	lsls	r2, r2, #16
 8000484:	4314      	orrs	r4, r2
 8000486:	46a1      	mov	r9, r4
 8000488:	2f38      	cmp	r7, #56	; 0x38
 800048a:	dd00      	ble.n	800048e <__aeabi_dadd+0x62>
 800048c:	e167      	b.n	800075e <__aeabi_dadd+0x332>
 800048e:	2f1f      	cmp	r7, #31
 8000490:	dd00      	ble.n	8000494 <__aeabi_dadd+0x68>
 8000492:	e1d6      	b.n	8000842 <__aeabi_dadd+0x416>
 8000494:	2220      	movs	r2, #32
 8000496:	464c      	mov	r4, r9
 8000498:	1bd2      	subs	r2, r2, r7
 800049a:	4094      	lsls	r4, r2
 800049c:	46a2      	mov	sl, r4
 800049e:	4644      	mov	r4, r8
 80004a0:	40fc      	lsrs	r4, r7
 80004a2:	0020      	movs	r0, r4
 80004a4:	4654      	mov	r4, sl
 80004a6:	4304      	orrs	r4, r0
 80004a8:	4640      	mov	r0, r8
 80004aa:	4090      	lsls	r0, r2
 80004ac:	1e42      	subs	r2, r0, #1
 80004ae:	4190      	sbcs	r0, r2
 80004b0:	464a      	mov	r2, r9
 80004b2:	40fa      	lsrs	r2, r7
 80004b4:	4304      	orrs	r4, r0
 80004b6:	1a89      	subs	r1, r1, r2
 80004b8:	1b1c      	subs	r4, r3, r4
 80004ba:	42a3      	cmp	r3, r4
 80004bc:	4192      	sbcs	r2, r2
 80004be:	4252      	negs	r2, r2
 80004c0:	1a8b      	subs	r3, r1, r2
 80004c2:	469a      	mov	sl, r3
 80004c4:	4653      	mov	r3, sl
 80004c6:	021b      	lsls	r3, r3, #8
 80004c8:	d400      	bmi.n	80004cc <__aeabi_dadd+0xa0>
 80004ca:	e0d4      	b.n	8000676 <__aeabi_dadd+0x24a>
 80004cc:	4653      	mov	r3, sl
 80004ce:	025a      	lsls	r2, r3, #9
 80004d0:	0a53      	lsrs	r3, r2, #9
 80004d2:	469a      	mov	sl, r3
 80004d4:	4653      	mov	r3, sl
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_dadd+0xb0>
 80004da:	e104      	b.n	80006e6 <__aeabi_dadd+0x2ba>
 80004dc:	4650      	mov	r0, sl
 80004de:	f000 ff2b 	bl	8001338 <__clzsi2>
 80004e2:	0003      	movs	r3, r0
 80004e4:	3b08      	subs	r3, #8
 80004e6:	2220      	movs	r2, #32
 80004e8:	0020      	movs	r0, r4
 80004ea:	1ad2      	subs	r2, r2, r3
 80004ec:	4651      	mov	r1, sl
 80004ee:	40d0      	lsrs	r0, r2
 80004f0:	4099      	lsls	r1, r3
 80004f2:	0002      	movs	r2, r0
 80004f4:	409c      	lsls	r4, r3
 80004f6:	430a      	orrs	r2, r1
 80004f8:	42b3      	cmp	r3, r6
 80004fa:	da00      	bge.n	80004fe <__aeabi_dadd+0xd2>
 80004fc:	e102      	b.n	8000704 <__aeabi_dadd+0x2d8>
 80004fe:	1b9b      	subs	r3, r3, r6
 8000500:	1c59      	adds	r1, r3, #1
 8000502:	291f      	cmp	r1, #31
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0xdc>
 8000506:	e0a7      	b.n	8000658 <__aeabi_dadd+0x22c>
 8000508:	2320      	movs	r3, #32
 800050a:	0010      	movs	r0, r2
 800050c:	0026      	movs	r6, r4
 800050e:	1a5b      	subs	r3, r3, r1
 8000510:	409c      	lsls	r4, r3
 8000512:	4098      	lsls	r0, r3
 8000514:	40ce      	lsrs	r6, r1
 8000516:	40ca      	lsrs	r2, r1
 8000518:	1e63      	subs	r3, r4, #1
 800051a:	419c      	sbcs	r4, r3
 800051c:	4330      	orrs	r0, r6
 800051e:	4692      	mov	sl, r2
 8000520:	2600      	movs	r6, #0
 8000522:	4304      	orrs	r4, r0
 8000524:	0763      	lsls	r3, r4, #29
 8000526:	d009      	beq.n	800053c <__aeabi_dadd+0x110>
 8000528:	230f      	movs	r3, #15
 800052a:	4023      	ands	r3, r4
 800052c:	2b04      	cmp	r3, #4
 800052e:	d005      	beq.n	800053c <__aeabi_dadd+0x110>
 8000530:	1d23      	adds	r3, r4, #4
 8000532:	42a3      	cmp	r3, r4
 8000534:	41a4      	sbcs	r4, r4
 8000536:	4264      	negs	r4, r4
 8000538:	44a2      	add	sl, r4
 800053a:	001c      	movs	r4, r3
 800053c:	4653      	mov	r3, sl
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	d400      	bmi.n	8000544 <__aeabi_dadd+0x118>
 8000542:	e09b      	b.n	800067c <__aeabi_dadd+0x250>
 8000544:	4b94      	ldr	r3, [pc, #592]	; (8000798 <__aeabi_dadd+0x36c>)
 8000546:	3601      	adds	r6, #1
 8000548:	429e      	cmp	r6, r3
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0x122>
 800054c:	e0b8      	b.n	80006c0 <__aeabi_dadd+0x294>
 800054e:	4653      	mov	r3, sl
 8000550:	4992      	ldr	r1, [pc, #584]	; (800079c <__aeabi_dadd+0x370>)
 8000552:	08e4      	lsrs	r4, r4, #3
 8000554:	400b      	ands	r3, r1
 8000556:	0019      	movs	r1, r3
 8000558:	075b      	lsls	r3, r3, #29
 800055a:	4323      	orrs	r3, r4
 800055c:	0572      	lsls	r2, r6, #21
 800055e:	024c      	lsls	r4, r1, #9
 8000560:	0b24      	lsrs	r4, r4, #12
 8000562:	0d52      	lsrs	r2, r2, #21
 8000564:	0512      	lsls	r2, r2, #20
 8000566:	07ed      	lsls	r5, r5, #31
 8000568:	4322      	orrs	r2, r4
 800056a:	432a      	orrs	r2, r5
 800056c:	0018      	movs	r0, r3
 800056e:	0011      	movs	r1, r2
 8000570:	bce0      	pop	{r5, r6, r7}
 8000572:	46ba      	mov	sl, r7
 8000574:	46b1      	mov	r9, r6
 8000576:	46a8      	mov	r8, r5
 8000578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800057a:	2f00      	cmp	r7, #0
 800057c:	d048      	beq.n	8000610 <__aeabi_dadd+0x1e4>
 800057e:	1b97      	subs	r7, r2, r6
 8000580:	2e00      	cmp	r6, #0
 8000582:	d000      	beq.n	8000586 <__aeabi_dadd+0x15a>
 8000584:	e10e      	b.n	80007a4 <__aeabi_dadd+0x378>
 8000586:	000c      	movs	r4, r1
 8000588:	431c      	orrs	r4, r3
 800058a:	d100      	bne.n	800058e <__aeabi_dadd+0x162>
 800058c:	e1b7      	b.n	80008fe <__aeabi_dadd+0x4d2>
 800058e:	1e7c      	subs	r4, r7, #1
 8000590:	2f01      	cmp	r7, #1
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0x16a>
 8000594:	e226      	b.n	80009e4 <__aeabi_dadd+0x5b8>
 8000596:	4d80      	ldr	r5, [pc, #512]	; (8000798 <__aeabi_dadd+0x36c>)
 8000598:	42af      	cmp	r7, r5
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x172>
 800059c:	e1d5      	b.n	800094a <__aeabi_dadd+0x51e>
 800059e:	0027      	movs	r7, r4
 80005a0:	e107      	b.n	80007b2 <__aeabi_dadd+0x386>
 80005a2:	2f00      	cmp	r7, #0
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_dadd+0x17c>
 80005a6:	e0b2      	b.n	800070e <__aeabi_dadd+0x2e2>
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d047      	beq.n	800063c <__aeabi_dadd+0x210>
 80005ac:	4a7a      	ldr	r2, [pc, #488]	; (8000798 <__aeabi_dadd+0x36c>)
 80005ae:	4296      	cmp	r6, r2
 80005b0:	d100      	bne.n	80005b4 <__aeabi_dadd+0x188>
 80005b2:	e089      	b.n	80006c8 <__aeabi_dadd+0x29c>
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	464c      	mov	r4, r9
 80005b8:	0412      	lsls	r2, r2, #16
 80005ba:	4314      	orrs	r4, r2
 80005bc:	46a1      	mov	r9, r4
 80005be:	2f38      	cmp	r7, #56	; 0x38
 80005c0:	dc6b      	bgt.n	800069a <__aeabi_dadd+0x26e>
 80005c2:	2f1f      	cmp	r7, #31
 80005c4:	dc00      	bgt.n	80005c8 <__aeabi_dadd+0x19c>
 80005c6:	e16e      	b.n	80008a6 <__aeabi_dadd+0x47a>
 80005c8:	003a      	movs	r2, r7
 80005ca:	4648      	mov	r0, r9
 80005cc:	3a20      	subs	r2, #32
 80005ce:	40d0      	lsrs	r0, r2
 80005d0:	4684      	mov	ip, r0
 80005d2:	2f20      	cmp	r7, #32
 80005d4:	d007      	beq.n	80005e6 <__aeabi_dadd+0x1ba>
 80005d6:	2240      	movs	r2, #64	; 0x40
 80005d8:	4648      	mov	r0, r9
 80005da:	1bd2      	subs	r2, r2, r7
 80005dc:	4090      	lsls	r0, r2
 80005de:	0002      	movs	r2, r0
 80005e0:	4640      	mov	r0, r8
 80005e2:	4310      	orrs	r0, r2
 80005e4:	4680      	mov	r8, r0
 80005e6:	4640      	mov	r0, r8
 80005e8:	1e42      	subs	r2, r0, #1
 80005ea:	4190      	sbcs	r0, r2
 80005ec:	4662      	mov	r2, ip
 80005ee:	0004      	movs	r4, r0
 80005f0:	4314      	orrs	r4, r2
 80005f2:	e057      	b.n	80006a4 <__aeabi_dadd+0x278>
 80005f4:	464a      	mov	r2, r9
 80005f6:	4302      	orrs	r2, r0
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x1d0>
 80005fa:	e103      	b.n	8000804 <__aeabi_dadd+0x3d8>
 80005fc:	1e7a      	subs	r2, r7, #1
 80005fe:	2f01      	cmp	r7, #1
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x1d8>
 8000602:	e193      	b.n	800092c <__aeabi_dadd+0x500>
 8000604:	4c64      	ldr	r4, [pc, #400]	; (8000798 <__aeabi_dadd+0x36c>)
 8000606:	42a7      	cmp	r7, r4
 8000608:	d100      	bne.n	800060c <__aeabi_dadd+0x1e0>
 800060a:	e18a      	b.n	8000922 <__aeabi_dadd+0x4f6>
 800060c:	0017      	movs	r7, r2
 800060e:	e73b      	b.n	8000488 <__aeabi_dadd+0x5c>
 8000610:	4c63      	ldr	r4, [pc, #396]	; (80007a0 <__aeabi_dadd+0x374>)
 8000612:	1c72      	adds	r2, r6, #1
 8000614:	4222      	tst	r2, r4
 8000616:	d000      	beq.n	800061a <__aeabi_dadd+0x1ee>
 8000618:	e0e0      	b.n	80007dc <__aeabi_dadd+0x3b0>
 800061a:	000a      	movs	r2, r1
 800061c:	431a      	orrs	r2, r3
 800061e:	2e00      	cmp	r6, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_dadd+0x1f8>
 8000622:	e174      	b.n	800090e <__aeabi_dadd+0x4e2>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x1fe>
 8000628:	e1d0      	b.n	80009cc <__aeabi_dadd+0x5a0>
 800062a:	464a      	mov	r2, r9
 800062c:	4302      	orrs	r2, r0
 800062e:	d000      	beq.n	8000632 <__aeabi_dadd+0x206>
 8000630:	e1e3      	b.n	80009fa <__aeabi_dadd+0x5ce>
 8000632:	074a      	lsls	r2, r1, #29
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	4313      	orrs	r3, r2
 8000638:	08c9      	lsrs	r1, r1, #3
 800063a:	e029      	b.n	8000690 <__aeabi_dadd+0x264>
 800063c:	464a      	mov	r2, r9
 800063e:	4302      	orrs	r2, r0
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x218>
 8000642:	e17d      	b.n	8000940 <__aeabi_dadd+0x514>
 8000644:	1e7a      	subs	r2, r7, #1
 8000646:	2f01      	cmp	r7, #1
 8000648:	d100      	bne.n	800064c <__aeabi_dadd+0x220>
 800064a:	e0e0      	b.n	800080e <__aeabi_dadd+0x3e2>
 800064c:	4c52      	ldr	r4, [pc, #328]	; (8000798 <__aeabi_dadd+0x36c>)
 800064e:	42a7      	cmp	r7, r4
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x228>
 8000652:	e166      	b.n	8000922 <__aeabi_dadd+0x4f6>
 8000654:	0017      	movs	r7, r2
 8000656:	e7b2      	b.n	80005be <__aeabi_dadd+0x192>
 8000658:	0010      	movs	r0, r2
 800065a:	3b1f      	subs	r3, #31
 800065c:	40d8      	lsrs	r0, r3
 800065e:	2920      	cmp	r1, #32
 8000660:	d003      	beq.n	800066a <__aeabi_dadd+0x23e>
 8000662:	2340      	movs	r3, #64	; 0x40
 8000664:	1a5b      	subs	r3, r3, r1
 8000666:	409a      	lsls	r2, r3
 8000668:	4314      	orrs	r4, r2
 800066a:	1e63      	subs	r3, r4, #1
 800066c:	419c      	sbcs	r4, r3
 800066e:	2300      	movs	r3, #0
 8000670:	2600      	movs	r6, #0
 8000672:	469a      	mov	sl, r3
 8000674:	4304      	orrs	r4, r0
 8000676:	0763      	lsls	r3, r4, #29
 8000678:	d000      	beq.n	800067c <__aeabi_dadd+0x250>
 800067a:	e755      	b.n	8000528 <__aeabi_dadd+0xfc>
 800067c:	4652      	mov	r2, sl
 800067e:	08e3      	lsrs	r3, r4, #3
 8000680:	0752      	lsls	r2, r2, #29
 8000682:	4313      	orrs	r3, r2
 8000684:	4652      	mov	r2, sl
 8000686:	0037      	movs	r7, r6
 8000688:	08d1      	lsrs	r1, r2, #3
 800068a:	4a43      	ldr	r2, [pc, #268]	; (8000798 <__aeabi_dadd+0x36c>)
 800068c:	4297      	cmp	r7, r2
 800068e:	d01f      	beq.n	80006d0 <__aeabi_dadd+0x2a4>
 8000690:	0309      	lsls	r1, r1, #12
 8000692:	057a      	lsls	r2, r7, #21
 8000694:	0b0c      	lsrs	r4, r1, #12
 8000696:	0d52      	lsrs	r2, r2, #21
 8000698:	e764      	b.n	8000564 <__aeabi_dadd+0x138>
 800069a:	4642      	mov	r2, r8
 800069c:	464c      	mov	r4, r9
 800069e:	4314      	orrs	r4, r2
 80006a0:	1e62      	subs	r2, r4, #1
 80006a2:	4194      	sbcs	r4, r2
 80006a4:	18e4      	adds	r4, r4, r3
 80006a6:	429c      	cmp	r4, r3
 80006a8:	4192      	sbcs	r2, r2
 80006aa:	4252      	negs	r2, r2
 80006ac:	4692      	mov	sl, r2
 80006ae:	448a      	add	sl, r1
 80006b0:	4653      	mov	r3, sl
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	d5df      	bpl.n	8000676 <__aeabi_dadd+0x24a>
 80006b6:	4b38      	ldr	r3, [pc, #224]	; (8000798 <__aeabi_dadd+0x36c>)
 80006b8:	3601      	adds	r6, #1
 80006ba:	429e      	cmp	r6, r3
 80006bc:	d000      	beq.n	80006c0 <__aeabi_dadd+0x294>
 80006be:	e0b3      	b.n	8000828 <__aeabi_dadd+0x3fc>
 80006c0:	0032      	movs	r2, r6
 80006c2:	2400      	movs	r4, #0
 80006c4:	2300      	movs	r3, #0
 80006c6:	e74d      	b.n	8000564 <__aeabi_dadd+0x138>
 80006c8:	074a      	lsls	r2, r1, #29
 80006ca:	08db      	lsrs	r3, r3, #3
 80006cc:	4313      	orrs	r3, r2
 80006ce:	08c9      	lsrs	r1, r1, #3
 80006d0:	001a      	movs	r2, r3
 80006d2:	430a      	orrs	r2, r1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x2ac>
 80006d6:	e200      	b.n	8000ada <__aeabi_dadd+0x6ae>
 80006d8:	2480      	movs	r4, #128	; 0x80
 80006da:	0324      	lsls	r4, r4, #12
 80006dc:	430c      	orrs	r4, r1
 80006de:	0324      	lsls	r4, r4, #12
 80006e0:	4a2d      	ldr	r2, [pc, #180]	; (8000798 <__aeabi_dadd+0x36c>)
 80006e2:	0b24      	lsrs	r4, r4, #12
 80006e4:	e73e      	b.n	8000564 <__aeabi_dadd+0x138>
 80006e6:	0020      	movs	r0, r4
 80006e8:	f000 fe26 	bl	8001338 <__clzsi2>
 80006ec:	0003      	movs	r3, r0
 80006ee:	3318      	adds	r3, #24
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dc00      	bgt.n	80006f6 <__aeabi_dadd+0x2ca>
 80006f4:	e6f7      	b.n	80004e6 <__aeabi_dadd+0xba>
 80006f6:	0022      	movs	r2, r4
 80006f8:	3808      	subs	r0, #8
 80006fa:	4082      	lsls	r2, r0
 80006fc:	2400      	movs	r4, #0
 80006fe:	42b3      	cmp	r3, r6
 8000700:	db00      	blt.n	8000704 <__aeabi_dadd+0x2d8>
 8000702:	e6fc      	b.n	80004fe <__aeabi_dadd+0xd2>
 8000704:	1af6      	subs	r6, r6, r3
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <__aeabi_dadd+0x370>)
 8000708:	401a      	ands	r2, r3
 800070a:	4692      	mov	sl, r2
 800070c:	e70a      	b.n	8000524 <__aeabi_dadd+0xf8>
 800070e:	2f00      	cmp	r7, #0
 8000710:	d02b      	beq.n	800076a <__aeabi_dadd+0x33e>
 8000712:	1b97      	subs	r7, r2, r6
 8000714:	2e00      	cmp	r6, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x2ee>
 8000718:	e0b8      	b.n	800088c <__aeabi_dadd+0x460>
 800071a:	4c1f      	ldr	r4, [pc, #124]	; (8000798 <__aeabi_dadd+0x36c>)
 800071c:	42a2      	cmp	r2, r4
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x2f6>
 8000720:	e11c      	b.n	800095c <__aeabi_dadd+0x530>
 8000722:	2480      	movs	r4, #128	; 0x80
 8000724:	0424      	lsls	r4, r4, #16
 8000726:	4321      	orrs	r1, r4
 8000728:	2f38      	cmp	r7, #56	; 0x38
 800072a:	dd00      	ble.n	800072e <__aeabi_dadd+0x302>
 800072c:	e11e      	b.n	800096c <__aeabi_dadd+0x540>
 800072e:	2f1f      	cmp	r7, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x308>
 8000732:	e19e      	b.n	8000a72 <__aeabi_dadd+0x646>
 8000734:	2620      	movs	r6, #32
 8000736:	000c      	movs	r4, r1
 8000738:	1bf6      	subs	r6, r6, r7
 800073a:	0018      	movs	r0, r3
 800073c:	40b3      	lsls	r3, r6
 800073e:	40b4      	lsls	r4, r6
 8000740:	40f8      	lsrs	r0, r7
 8000742:	1e5e      	subs	r6, r3, #1
 8000744:	41b3      	sbcs	r3, r6
 8000746:	40f9      	lsrs	r1, r7
 8000748:	4304      	orrs	r4, r0
 800074a:	431c      	orrs	r4, r3
 800074c:	4489      	add	r9, r1
 800074e:	4444      	add	r4, r8
 8000750:	4544      	cmp	r4, r8
 8000752:	419b      	sbcs	r3, r3
 8000754:	425b      	negs	r3, r3
 8000756:	444b      	add	r3, r9
 8000758:	469a      	mov	sl, r3
 800075a:	0016      	movs	r6, r2
 800075c:	e7a8      	b.n	80006b0 <__aeabi_dadd+0x284>
 800075e:	4642      	mov	r2, r8
 8000760:	464c      	mov	r4, r9
 8000762:	4314      	orrs	r4, r2
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	e6a6      	b.n	80004b8 <__aeabi_dadd+0x8c>
 800076a:	4c0d      	ldr	r4, [pc, #52]	; (80007a0 <__aeabi_dadd+0x374>)
 800076c:	1c72      	adds	r2, r6, #1
 800076e:	4222      	tst	r2, r4
 8000770:	d000      	beq.n	8000774 <__aeabi_dadd+0x348>
 8000772:	e0a8      	b.n	80008c6 <__aeabi_dadd+0x49a>
 8000774:	000a      	movs	r2, r1
 8000776:	431a      	orrs	r2, r3
 8000778:	2e00      	cmp	r6, #0
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x352>
 800077c:	e10a      	b.n	8000994 <__aeabi_dadd+0x568>
 800077e:	2a00      	cmp	r2, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x358>
 8000782:	e15e      	b.n	8000a42 <__aeabi_dadd+0x616>
 8000784:	464a      	mov	r2, r9
 8000786:	4302      	orrs	r2, r0
 8000788:	d000      	beq.n	800078c <__aeabi_dadd+0x360>
 800078a:	e161      	b.n	8000a50 <__aeabi_dadd+0x624>
 800078c:	074a      	lsls	r2, r1, #29
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	4313      	orrs	r3, r2
 8000792:	08c9      	lsrs	r1, r1, #3
 8000794:	e77c      	b.n	8000690 <__aeabi_dadd+0x264>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	000007ff 	.word	0x000007ff
 800079c:	ff7fffff 	.word	0xff7fffff
 80007a0:	000007fe 	.word	0x000007fe
 80007a4:	4ccf      	ldr	r4, [pc, #828]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 80007a6:	42a2      	cmp	r2, r4
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x380>
 80007aa:	e0ce      	b.n	800094a <__aeabi_dadd+0x51e>
 80007ac:	2480      	movs	r4, #128	; 0x80
 80007ae:	0424      	lsls	r4, r4, #16
 80007b0:	4321      	orrs	r1, r4
 80007b2:	2f38      	cmp	r7, #56	; 0x38
 80007b4:	dc5b      	bgt.n	800086e <__aeabi_dadd+0x442>
 80007b6:	2f1f      	cmp	r7, #31
 80007b8:	dd00      	ble.n	80007bc <__aeabi_dadd+0x390>
 80007ba:	e0dc      	b.n	8000976 <__aeabi_dadd+0x54a>
 80007bc:	2520      	movs	r5, #32
 80007be:	000c      	movs	r4, r1
 80007c0:	1bed      	subs	r5, r5, r7
 80007c2:	001e      	movs	r6, r3
 80007c4:	40ab      	lsls	r3, r5
 80007c6:	40ac      	lsls	r4, r5
 80007c8:	40fe      	lsrs	r6, r7
 80007ca:	1e5d      	subs	r5, r3, #1
 80007cc:	41ab      	sbcs	r3, r5
 80007ce:	4334      	orrs	r4, r6
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	431c      	orrs	r4, r3
 80007d4:	464b      	mov	r3, r9
 80007d6:	1a5b      	subs	r3, r3, r1
 80007d8:	4699      	mov	r9, r3
 80007da:	e04c      	b.n	8000876 <__aeabi_dadd+0x44a>
 80007dc:	464a      	mov	r2, r9
 80007de:	1a1c      	subs	r4, r3, r0
 80007e0:	1a88      	subs	r0, r1, r2
 80007e2:	42a3      	cmp	r3, r4
 80007e4:	4192      	sbcs	r2, r2
 80007e6:	4252      	negs	r2, r2
 80007e8:	4692      	mov	sl, r2
 80007ea:	0002      	movs	r2, r0
 80007ec:	4650      	mov	r0, sl
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	4692      	mov	sl, r2
 80007f2:	0212      	lsls	r2, r2, #8
 80007f4:	d478      	bmi.n	80008e8 <__aeabi_dadd+0x4bc>
 80007f6:	4653      	mov	r3, sl
 80007f8:	4323      	orrs	r3, r4
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x3d2>
 80007fc:	e66a      	b.n	80004d4 <__aeabi_dadd+0xa8>
 80007fe:	2100      	movs	r1, #0
 8000800:	2500      	movs	r5, #0
 8000802:	e745      	b.n	8000690 <__aeabi_dadd+0x264>
 8000804:	074a      	lsls	r2, r1, #29
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	4313      	orrs	r3, r2
 800080a:	08c9      	lsrs	r1, r1, #3
 800080c:	e73d      	b.n	800068a <__aeabi_dadd+0x25e>
 800080e:	181c      	adds	r4, r3, r0
 8000810:	429c      	cmp	r4, r3
 8000812:	419b      	sbcs	r3, r3
 8000814:	4449      	add	r1, r9
 8000816:	468a      	mov	sl, r1
 8000818:	425b      	negs	r3, r3
 800081a:	449a      	add	sl, r3
 800081c:	4653      	mov	r3, sl
 800081e:	2601      	movs	r6, #1
 8000820:	021b      	lsls	r3, r3, #8
 8000822:	d400      	bmi.n	8000826 <__aeabi_dadd+0x3fa>
 8000824:	e727      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000826:	2602      	movs	r6, #2
 8000828:	4652      	mov	r2, sl
 800082a:	4baf      	ldr	r3, [pc, #700]	; (8000ae8 <__aeabi_dadd+0x6bc>)
 800082c:	2101      	movs	r1, #1
 800082e:	401a      	ands	r2, r3
 8000830:	0013      	movs	r3, r2
 8000832:	4021      	ands	r1, r4
 8000834:	0862      	lsrs	r2, r4, #1
 8000836:	430a      	orrs	r2, r1
 8000838:	07dc      	lsls	r4, r3, #31
 800083a:	085b      	lsrs	r3, r3, #1
 800083c:	469a      	mov	sl, r3
 800083e:	4314      	orrs	r4, r2
 8000840:	e670      	b.n	8000524 <__aeabi_dadd+0xf8>
 8000842:	003a      	movs	r2, r7
 8000844:	464c      	mov	r4, r9
 8000846:	3a20      	subs	r2, #32
 8000848:	40d4      	lsrs	r4, r2
 800084a:	46a4      	mov	ip, r4
 800084c:	2f20      	cmp	r7, #32
 800084e:	d007      	beq.n	8000860 <__aeabi_dadd+0x434>
 8000850:	2240      	movs	r2, #64	; 0x40
 8000852:	4648      	mov	r0, r9
 8000854:	1bd2      	subs	r2, r2, r7
 8000856:	4090      	lsls	r0, r2
 8000858:	0002      	movs	r2, r0
 800085a:	4640      	mov	r0, r8
 800085c:	4310      	orrs	r0, r2
 800085e:	4680      	mov	r8, r0
 8000860:	4640      	mov	r0, r8
 8000862:	1e42      	subs	r2, r0, #1
 8000864:	4190      	sbcs	r0, r2
 8000866:	4662      	mov	r2, ip
 8000868:	0004      	movs	r4, r0
 800086a:	4314      	orrs	r4, r2
 800086c:	e624      	b.n	80004b8 <__aeabi_dadd+0x8c>
 800086e:	4319      	orrs	r1, r3
 8000870:	000c      	movs	r4, r1
 8000872:	1e63      	subs	r3, r4, #1
 8000874:	419c      	sbcs	r4, r3
 8000876:	4643      	mov	r3, r8
 8000878:	1b1c      	subs	r4, r3, r4
 800087a:	45a0      	cmp	r8, r4
 800087c:	419b      	sbcs	r3, r3
 800087e:	4649      	mov	r1, r9
 8000880:	425b      	negs	r3, r3
 8000882:	1acb      	subs	r3, r1, r3
 8000884:	469a      	mov	sl, r3
 8000886:	4665      	mov	r5, ip
 8000888:	0016      	movs	r6, r2
 800088a:	e61b      	b.n	80004c4 <__aeabi_dadd+0x98>
 800088c:	000c      	movs	r4, r1
 800088e:	431c      	orrs	r4, r3
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x468>
 8000892:	e0c7      	b.n	8000a24 <__aeabi_dadd+0x5f8>
 8000894:	1e7c      	subs	r4, r7, #1
 8000896:	2f01      	cmp	r7, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x470>
 800089a:	e0f9      	b.n	8000a90 <__aeabi_dadd+0x664>
 800089c:	4e91      	ldr	r6, [pc, #580]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 800089e:	42b7      	cmp	r7, r6
 80008a0:	d05c      	beq.n	800095c <__aeabi_dadd+0x530>
 80008a2:	0027      	movs	r7, r4
 80008a4:	e740      	b.n	8000728 <__aeabi_dadd+0x2fc>
 80008a6:	2220      	movs	r2, #32
 80008a8:	464c      	mov	r4, r9
 80008aa:	4640      	mov	r0, r8
 80008ac:	1bd2      	subs	r2, r2, r7
 80008ae:	4094      	lsls	r4, r2
 80008b0:	40f8      	lsrs	r0, r7
 80008b2:	4304      	orrs	r4, r0
 80008b4:	4640      	mov	r0, r8
 80008b6:	4090      	lsls	r0, r2
 80008b8:	1e42      	subs	r2, r0, #1
 80008ba:	4190      	sbcs	r0, r2
 80008bc:	464a      	mov	r2, r9
 80008be:	40fa      	lsrs	r2, r7
 80008c0:	4304      	orrs	r4, r0
 80008c2:	1889      	adds	r1, r1, r2
 80008c4:	e6ee      	b.n	80006a4 <__aeabi_dadd+0x278>
 80008c6:	4c87      	ldr	r4, [pc, #540]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 80008c8:	42a2      	cmp	r2, r4
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x4a2>
 80008cc:	e6f9      	b.n	80006c2 <__aeabi_dadd+0x296>
 80008ce:	1818      	adds	r0, r3, r0
 80008d0:	4298      	cmp	r0, r3
 80008d2:	419b      	sbcs	r3, r3
 80008d4:	4449      	add	r1, r9
 80008d6:	425b      	negs	r3, r3
 80008d8:	18cb      	adds	r3, r1, r3
 80008da:	07dc      	lsls	r4, r3, #31
 80008dc:	0840      	lsrs	r0, r0, #1
 80008de:	085b      	lsrs	r3, r3, #1
 80008e0:	469a      	mov	sl, r3
 80008e2:	0016      	movs	r6, r2
 80008e4:	4304      	orrs	r4, r0
 80008e6:	e6c6      	b.n	8000676 <__aeabi_dadd+0x24a>
 80008e8:	4642      	mov	r2, r8
 80008ea:	1ad4      	subs	r4, r2, r3
 80008ec:	45a0      	cmp	r8, r4
 80008ee:	4180      	sbcs	r0, r0
 80008f0:	464b      	mov	r3, r9
 80008f2:	4240      	negs	r0, r0
 80008f4:	1a59      	subs	r1, r3, r1
 80008f6:	1a0b      	subs	r3, r1, r0
 80008f8:	469a      	mov	sl, r3
 80008fa:	4665      	mov	r5, ip
 80008fc:	e5ea      	b.n	80004d4 <__aeabi_dadd+0xa8>
 80008fe:	464b      	mov	r3, r9
 8000900:	464a      	mov	r2, r9
 8000902:	08c0      	lsrs	r0, r0, #3
 8000904:	075b      	lsls	r3, r3, #29
 8000906:	4665      	mov	r5, ip
 8000908:	4303      	orrs	r3, r0
 800090a:	08d1      	lsrs	r1, r2, #3
 800090c:	e6bd      	b.n	800068a <__aeabi_dadd+0x25e>
 800090e:	2a00      	cmp	r2, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_dadd+0x4e8>
 8000912:	e08e      	b.n	8000a32 <__aeabi_dadd+0x606>
 8000914:	464b      	mov	r3, r9
 8000916:	4303      	orrs	r3, r0
 8000918:	d117      	bne.n	800094a <__aeabi_dadd+0x51e>
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	2500      	movs	r5, #0
 800091e:	0309      	lsls	r1, r1, #12
 8000920:	e6da      	b.n	80006d8 <__aeabi_dadd+0x2ac>
 8000922:	074a      	lsls	r2, r1, #29
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	4313      	orrs	r3, r2
 8000928:	08c9      	lsrs	r1, r1, #3
 800092a:	e6d1      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 800092c:	1a1c      	subs	r4, r3, r0
 800092e:	464a      	mov	r2, r9
 8000930:	42a3      	cmp	r3, r4
 8000932:	419b      	sbcs	r3, r3
 8000934:	1a89      	subs	r1, r1, r2
 8000936:	425b      	negs	r3, r3
 8000938:	1acb      	subs	r3, r1, r3
 800093a:	469a      	mov	sl, r3
 800093c:	2601      	movs	r6, #1
 800093e:	e5c1      	b.n	80004c4 <__aeabi_dadd+0x98>
 8000940:	074a      	lsls	r2, r1, #29
 8000942:	08db      	lsrs	r3, r3, #3
 8000944:	4313      	orrs	r3, r2
 8000946:	08c9      	lsrs	r1, r1, #3
 8000948:	e69f      	b.n	800068a <__aeabi_dadd+0x25e>
 800094a:	4643      	mov	r3, r8
 800094c:	08d8      	lsrs	r0, r3, #3
 800094e:	464b      	mov	r3, r9
 8000950:	464a      	mov	r2, r9
 8000952:	075b      	lsls	r3, r3, #29
 8000954:	4665      	mov	r5, ip
 8000956:	4303      	orrs	r3, r0
 8000958:	08d1      	lsrs	r1, r2, #3
 800095a:	e6b9      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 800095c:	4643      	mov	r3, r8
 800095e:	08d8      	lsrs	r0, r3, #3
 8000960:	464b      	mov	r3, r9
 8000962:	464a      	mov	r2, r9
 8000964:	075b      	lsls	r3, r3, #29
 8000966:	4303      	orrs	r3, r0
 8000968:	08d1      	lsrs	r1, r2, #3
 800096a:	e6b1      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 800096c:	4319      	orrs	r1, r3
 800096e:	000c      	movs	r4, r1
 8000970:	1e63      	subs	r3, r4, #1
 8000972:	419c      	sbcs	r4, r3
 8000974:	e6eb      	b.n	800074e <__aeabi_dadd+0x322>
 8000976:	003c      	movs	r4, r7
 8000978:	000d      	movs	r5, r1
 800097a:	3c20      	subs	r4, #32
 800097c:	40e5      	lsrs	r5, r4
 800097e:	2f20      	cmp	r7, #32
 8000980:	d003      	beq.n	800098a <__aeabi_dadd+0x55e>
 8000982:	2440      	movs	r4, #64	; 0x40
 8000984:	1be4      	subs	r4, r4, r7
 8000986:	40a1      	lsls	r1, r4
 8000988:	430b      	orrs	r3, r1
 800098a:	001c      	movs	r4, r3
 800098c:	1e63      	subs	r3, r4, #1
 800098e:	419c      	sbcs	r4, r3
 8000990:	432c      	orrs	r4, r5
 8000992:	e770      	b.n	8000876 <__aeabi_dadd+0x44a>
 8000994:	2a00      	cmp	r2, #0
 8000996:	d0e1      	beq.n	800095c <__aeabi_dadd+0x530>
 8000998:	464a      	mov	r2, r9
 800099a:	4302      	orrs	r2, r0
 800099c:	d0c1      	beq.n	8000922 <__aeabi_dadd+0x4f6>
 800099e:	074a      	lsls	r2, r1, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	2280      	movs	r2, #128	; 0x80
 80009a6:	08c9      	lsrs	r1, r1, #3
 80009a8:	0312      	lsls	r2, r2, #12
 80009aa:	4211      	tst	r1, r2
 80009ac:	d008      	beq.n	80009c0 <__aeabi_dadd+0x594>
 80009ae:	4648      	mov	r0, r9
 80009b0:	08c4      	lsrs	r4, r0, #3
 80009b2:	4214      	tst	r4, r2
 80009b4:	d104      	bne.n	80009c0 <__aeabi_dadd+0x594>
 80009b6:	4643      	mov	r3, r8
 80009b8:	0021      	movs	r1, r4
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	0742      	lsls	r2, r0, #29
 80009be:	4313      	orrs	r3, r2
 80009c0:	0f5a      	lsrs	r2, r3, #29
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	0752      	lsls	r2, r2, #29
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	e681      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 80009cc:	464b      	mov	r3, r9
 80009ce:	4303      	orrs	r3, r0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x5a8>
 80009d2:	e714      	b.n	80007fe <__aeabi_dadd+0x3d2>
 80009d4:	464b      	mov	r3, r9
 80009d6:	464a      	mov	r2, r9
 80009d8:	08c0      	lsrs	r0, r0, #3
 80009da:	075b      	lsls	r3, r3, #29
 80009dc:	4665      	mov	r5, ip
 80009de:	4303      	orrs	r3, r0
 80009e0:	08d1      	lsrs	r1, r2, #3
 80009e2:	e655      	b.n	8000690 <__aeabi_dadd+0x264>
 80009e4:	1ac4      	subs	r4, r0, r3
 80009e6:	45a0      	cmp	r8, r4
 80009e8:	4180      	sbcs	r0, r0
 80009ea:	464b      	mov	r3, r9
 80009ec:	4240      	negs	r0, r0
 80009ee:	1a59      	subs	r1, r3, r1
 80009f0:	1a0b      	subs	r3, r1, r0
 80009f2:	469a      	mov	sl, r3
 80009f4:	4665      	mov	r5, ip
 80009f6:	2601      	movs	r6, #1
 80009f8:	e564      	b.n	80004c4 <__aeabi_dadd+0x98>
 80009fa:	1a1c      	subs	r4, r3, r0
 80009fc:	464a      	mov	r2, r9
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	4180      	sbcs	r0, r0
 8000a02:	1a8a      	subs	r2, r1, r2
 8000a04:	4240      	negs	r0, r0
 8000a06:	1a12      	subs	r2, r2, r0
 8000a08:	4692      	mov	sl, r2
 8000a0a:	0212      	lsls	r2, r2, #8
 8000a0c:	d549      	bpl.n	8000aa2 <__aeabi_dadd+0x676>
 8000a0e:	4642      	mov	r2, r8
 8000a10:	1ad4      	subs	r4, r2, r3
 8000a12:	45a0      	cmp	r8, r4
 8000a14:	4180      	sbcs	r0, r0
 8000a16:	464b      	mov	r3, r9
 8000a18:	4240      	negs	r0, r0
 8000a1a:	1a59      	subs	r1, r3, r1
 8000a1c:	1a0b      	subs	r3, r1, r0
 8000a1e:	469a      	mov	sl, r3
 8000a20:	4665      	mov	r5, ip
 8000a22:	e57f      	b.n	8000524 <__aeabi_dadd+0xf8>
 8000a24:	464b      	mov	r3, r9
 8000a26:	464a      	mov	r2, r9
 8000a28:	08c0      	lsrs	r0, r0, #3
 8000a2a:	075b      	lsls	r3, r3, #29
 8000a2c:	4303      	orrs	r3, r0
 8000a2e:	08d1      	lsrs	r1, r2, #3
 8000a30:	e62b      	b.n	800068a <__aeabi_dadd+0x25e>
 8000a32:	464a      	mov	r2, r9
 8000a34:	08db      	lsrs	r3, r3, #3
 8000a36:	4302      	orrs	r2, r0
 8000a38:	d138      	bne.n	8000aac <__aeabi_dadd+0x680>
 8000a3a:	074a      	lsls	r2, r1, #29
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	e646      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 8000a42:	464b      	mov	r3, r9
 8000a44:	464a      	mov	r2, r9
 8000a46:	08c0      	lsrs	r0, r0, #3
 8000a48:	075b      	lsls	r3, r3, #29
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	08d1      	lsrs	r1, r2, #3
 8000a4e:	e61f      	b.n	8000690 <__aeabi_dadd+0x264>
 8000a50:	181c      	adds	r4, r3, r0
 8000a52:	429c      	cmp	r4, r3
 8000a54:	419b      	sbcs	r3, r3
 8000a56:	4449      	add	r1, r9
 8000a58:	468a      	mov	sl, r1
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	449a      	add	sl, r3
 8000a5e:	4653      	mov	r3, sl
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	d400      	bmi.n	8000a66 <__aeabi_dadd+0x63a>
 8000a64:	e607      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000a66:	4652      	mov	r2, sl
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <__aeabi_dadd+0x6bc>)
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	4692      	mov	sl, r2
 8000a70:	e601      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000a72:	003c      	movs	r4, r7
 8000a74:	000e      	movs	r6, r1
 8000a76:	3c20      	subs	r4, #32
 8000a78:	40e6      	lsrs	r6, r4
 8000a7a:	2f20      	cmp	r7, #32
 8000a7c:	d003      	beq.n	8000a86 <__aeabi_dadd+0x65a>
 8000a7e:	2440      	movs	r4, #64	; 0x40
 8000a80:	1be4      	subs	r4, r4, r7
 8000a82:	40a1      	lsls	r1, r4
 8000a84:	430b      	orrs	r3, r1
 8000a86:	001c      	movs	r4, r3
 8000a88:	1e63      	subs	r3, r4, #1
 8000a8a:	419c      	sbcs	r4, r3
 8000a8c:	4334      	orrs	r4, r6
 8000a8e:	e65e      	b.n	800074e <__aeabi_dadd+0x322>
 8000a90:	4443      	add	r3, r8
 8000a92:	4283      	cmp	r3, r0
 8000a94:	4180      	sbcs	r0, r0
 8000a96:	4449      	add	r1, r9
 8000a98:	468a      	mov	sl, r1
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	001c      	movs	r4, r3
 8000a9e:	4482      	add	sl, r0
 8000aa0:	e6bc      	b.n	800081c <__aeabi_dadd+0x3f0>
 8000aa2:	4653      	mov	r3, sl
 8000aa4:	4323      	orrs	r3, r4
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dadd+0x67e>
 8000aa8:	e6a9      	b.n	80007fe <__aeabi_dadd+0x3d2>
 8000aaa:	e5e4      	b.n	8000676 <__aeabi_dadd+0x24a>
 8000aac:	074a      	lsls	r2, r1, #29
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	08c9      	lsrs	r1, r1, #3
 8000ab4:	0312      	lsls	r2, r2, #12
 8000ab6:	4211      	tst	r1, r2
 8000ab8:	d009      	beq.n	8000ace <__aeabi_dadd+0x6a2>
 8000aba:	4648      	mov	r0, r9
 8000abc:	08c4      	lsrs	r4, r0, #3
 8000abe:	4214      	tst	r4, r2
 8000ac0:	d105      	bne.n	8000ace <__aeabi_dadd+0x6a2>
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	4665      	mov	r5, ip
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	0742      	lsls	r2, r0, #29
 8000acc:	4313      	orrs	r3, r2
 8000ace:	0f5a      	lsrs	r2, r3, #29
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	08db      	lsrs	r3, r3, #3
 8000ad4:	0752      	lsls	r2, r2, #29
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	e5fa      	b.n	80006d0 <__aeabi_dadd+0x2a4>
 8000ada:	2300      	movs	r3, #0
 8000adc:	4a01      	ldr	r2, [pc, #4]	; (8000ae4 <__aeabi_dadd+0x6b8>)
 8000ade:	001c      	movs	r4, r3
 8000ae0:	e540      	b.n	8000564 <__aeabi_dadd+0x138>
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	000007ff 	.word	0x000007ff
 8000ae8:	ff7fffff 	.word	0xff7fffff

08000aec <__aeabi_dsub>:
 8000aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aee:	4657      	mov	r7, sl
 8000af0:	464e      	mov	r6, r9
 8000af2:	4645      	mov	r5, r8
 8000af4:	46de      	mov	lr, fp
 8000af6:	b5e0      	push	{r5, r6, r7, lr}
 8000af8:	000d      	movs	r5, r1
 8000afa:	0004      	movs	r4, r0
 8000afc:	0019      	movs	r1, r3
 8000afe:	0010      	movs	r0, r2
 8000b00:	032b      	lsls	r3, r5, #12
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	0f62      	lsrs	r2, r4, #29
 8000b06:	431a      	orrs	r2, r3
 8000b08:	00e3      	lsls	r3, r4, #3
 8000b0a:	030c      	lsls	r4, r1, #12
 8000b0c:	0a64      	lsrs	r4, r4, #9
 8000b0e:	0f47      	lsrs	r7, r0, #29
 8000b10:	4327      	orrs	r7, r4
 8000b12:	4cd0      	ldr	r4, [pc, #832]	; (8000e54 <__aeabi_dsub+0x368>)
 8000b14:	006e      	lsls	r6, r5, #1
 8000b16:	4691      	mov	r9, r2
 8000b18:	b083      	sub	sp, #12
 8000b1a:	004a      	lsls	r2, r1, #1
 8000b1c:	00c0      	lsls	r0, r0, #3
 8000b1e:	4698      	mov	r8, r3
 8000b20:	46a2      	mov	sl, r4
 8000b22:	0d76      	lsrs	r6, r6, #21
 8000b24:	0fed      	lsrs	r5, r5, #31
 8000b26:	0d52      	lsrs	r2, r2, #21
 8000b28:	0fc9      	lsrs	r1, r1, #31
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	42a2      	cmp	r2, r4
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dsub+0x46>
 8000b30:	e0b9      	b.n	8000ca6 <__aeabi_dsub+0x1ba>
 8000b32:	2401      	movs	r4, #1
 8000b34:	4061      	eors	r1, r4
 8000b36:	468b      	mov	fp, r1
 8000b38:	428d      	cmp	r5, r1
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dsub+0x52>
 8000b3c:	e08d      	b.n	8000c5a <__aeabi_dsub+0x16e>
 8000b3e:	1ab4      	subs	r4, r6, r2
 8000b40:	46a4      	mov	ip, r4
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	dc00      	bgt.n	8000b48 <__aeabi_dsub+0x5c>
 8000b46:	e0b7      	b.n	8000cb8 <__aeabi_dsub+0x1cc>
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dsub+0x62>
 8000b4c:	e0cb      	b.n	8000ce6 <__aeabi_dsub+0x1fa>
 8000b4e:	4ac1      	ldr	r2, [pc, #772]	; (8000e54 <__aeabi_dsub+0x368>)
 8000b50:	4296      	cmp	r6, r2
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dsub+0x6a>
 8000b54:	e186      	b.n	8000e64 <__aeabi_dsub+0x378>
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	0412      	lsls	r2, r2, #16
 8000b5a:	4317      	orrs	r7, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	2a38      	cmp	r2, #56	; 0x38
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dsub+0x78>
 8000b62:	e1a4      	b.n	8000eae <__aeabi_dsub+0x3c2>
 8000b64:	2a1f      	cmp	r2, #31
 8000b66:	dd00      	ble.n	8000b6a <__aeabi_dsub+0x7e>
 8000b68:	e21d      	b.n	8000fa6 <__aeabi_dsub+0x4ba>
 8000b6a:	4661      	mov	r1, ip
 8000b6c:	2220      	movs	r2, #32
 8000b6e:	003c      	movs	r4, r7
 8000b70:	1a52      	subs	r2, r2, r1
 8000b72:	0001      	movs	r1, r0
 8000b74:	4090      	lsls	r0, r2
 8000b76:	4094      	lsls	r4, r2
 8000b78:	1e42      	subs	r2, r0, #1
 8000b7a:	4190      	sbcs	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	46a0      	mov	r8, r4
 8000b80:	4664      	mov	r4, ip
 8000b82:	40d7      	lsrs	r7, r2
 8000b84:	464a      	mov	r2, r9
 8000b86:	40e1      	lsrs	r1, r4
 8000b88:	4644      	mov	r4, r8
 8000b8a:	1bd2      	subs	r2, r2, r7
 8000b8c:	4691      	mov	r9, r2
 8000b8e:	430c      	orrs	r4, r1
 8000b90:	4304      	orrs	r4, r0
 8000b92:	1b1c      	subs	r4, r3, r4
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	4192      	sbcs	r2, r2
 8000b98:	464b      	mov	r3, r9
 8000b9a:	4252      	negs	r2, r2
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	469a      	mov	sl, r3
 8000ba0:	4653      	mov	r3, sl
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	d400      	bmi.n	8000ba8 <__aeabi_dsub+0xbc>
 8000ba6:	e12b      	b.n	8000e00 <__aeabi_dsub+0x314>
 8000ba8:	4653      	mov	r3, sl
 8000baa:	025a      	lsls	r2, r3, #9
 8000bac:	0a53      	lsrs	r3, r2, #9
 8000bae:	469a      	mov	sl, r3
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dsub+0xcc>
 8000bb6:	e166      	b.n	8000e86 <__aeabi_dsub+0x39a>
 8000bb8:	4650      	mov	r0, sl
 8000bba:	f000 fbbd 	bl	8001338 <__clzsi2>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	0020      	movs	r0, r4
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	4651      	mov	r1, sl
 8000bca:	40d0      	lsrs	r0, r2
 8000bcc:	4099      	lsls	r1, r3
 8000bce:	0002      	movs	r2, r0
 8000bd0:	409c      	lsls	r4, r3
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	429e      	cmp	r6, r3
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dsub+0xee>
 8000bd8:	e164      	b.n	8000ea4 <__aeabi_dsub+0x3b8>
 8000bda:	1b9b      	subs	r3, r3, r6
 8000bdc:	1c59      	adds	r1, r3, #1
 8000bde:	291f      	cmp	r1, #31
 8000be0:	dd00      	ble.n	8000be4 <__aeabi_dsub+0xf8>
 8000be2:	e0fe      	b.n	8000de2 <__aeabi_dsub+0x2f6>
 8000be4:	2320      	movs	r3, #32
 8000be6:	0010      	movs	r0, r2
 8000be8:	0026      	movs	r6, r4
 8000bea:	1a5b      	subs	r3, r3, r1
 8000bec:	409c      	lsls	r4, r3
 8000bee:	4098      	lsls	r0, r3
 8000bf0:	40ce      	lsrs	r6, r1
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	1e63      	subs	r3, r4, #1
 8000bf6:	419c      	sbcs	r4, r3
 8000bf8:	4330      	orrs	r0, r6
 8000bfa:	4692      	mov	sl, r2
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	4304      	orrs	r4, r0
 8000c00:	0763      	lsls	r3, r4, #29
 8000c02:	d009      	beq.n	8000c18 <__aeabi_dsub+0x12c>
 8000c04:	230f      	movs	r3, #15
 8000c06:	4023      	ands	r3, r4
 8000c08:	2b04      	cmp	r3, #4
 8000c0a:	d005      	beq.n	8000c18 <__aeabi_dsub+0x12c>
 8000c0c:	1d23      	adds	r3, r4, #4
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	41a4      	sbcs	r4, r4
 8000c12:	4264      	negs	r4, r4
 8000c14:	44a2      	add	sl, r4
 8000c16:	001c      	movs	r4, r3
 8000c18:	4653      	mov	r3, sl
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	d400      	bmi.n	8000c20 <__aeabi_dsub+0x134>
 8000c1e:	e0f2      	b.n	8000e06 <__aeabi_dsub+0x31a>
 8000c20:	4b8c      	ldr	r3, [pc, #560]	; (8000e54 <__aeabi_dsub+0x368>)
 8000c22:	3601      	adds	r6, #1
 8000c24:	429e      	cmp	r6, r3
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dsub+0x13e>
 8000c28:	e10f      	b.n	8000e4a <__aeabi_dsub+0x35e>
 8000c2a:	4653      	mov	r3, sl
 8000c2c:	498a      	ldr	r1, [pc, #552]	; (8000e58 <__aeabi_dsub+0x36c>)
 8000c2e:	08e4      	lsrs	r4, r4, #3
 8000c30:	400b      	ands	r3, r1
 8000c32:	0019      	movs	r1, r3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4323      	orrs	r3, r4
 8000c38:	0572      	lsls	r2, r6, #21
 8000c3a:	024c      	lsls	r4, r1, #9
 8000c3c:	0b24      	lsrs	r4, r4, #12
 8000c3e:	0d52      	lsrs	r2, r2, #21
 8000c40:	0512      	lsls	r2, r2, #20
 8000c42:	4322      	orrs	r2, r4
 8000c44:	07ed      	lsls	r5, r5, #31
 8000c46:	432a      	orrs	r2, r5
 8000c48:	0018      	movs	r0, r3
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	b003      	add	sp, #12
 8000c4e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c50:	46bb      	mov	fp, r7
 8000c52:	46b2      	mov	sl, r6
 8000c54:	46a9      	mov	r9, r5
 8000c56:	46a0      	mov	r8, r4
 8000c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5a:	1ab4      	subs	r4, r6, r2
 8000c5c:	46a4      	mov	ip, r4
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	dd59      	ble.n	8000d16 <__aeabi_dsub+0x22a>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dsub+0x17c>
 8000c66:	e0b0      	b.n	8000dca <__aeabi_dsub+0x2de>
 8000c68:	4556      	cmp	r6, sl
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_dsub+0x182>
 8000c6c:	e0fa      	b.n	8000e64 <__aeabi_dsub+0x378>
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0412      	lsls	r2, r2, #16
 8000c72:	4317      	orrs	r7, r2
 8000c74:	4662      	mov	r2, ip
 8000c76:	2a38      	cmp	r2, #56	; 0x38
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_dsub+0x190>
 8000c7a:	e0d4      	b.n	8000e26 <__aeabi_dsub+0x33a>
 8000c7c:	2a1f      	cmp	r2, #31
 8000c7e:	dc00      	bgt.n	8000c82 <__aeabi_dsub+0x196>
 8000c80:	e1c0      	b.n	8001004 <__aeabi_dsub+0x518>
 8000c82:	0039      	movs	r1, r7
 8000c84:	3a20      	subs	r2, #32
 8000c86:	40d1      	lsrs	r1, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d006      	beq.n	8000c9c <__aeabi_dsub+0x1b0>
 8000c8e:	4664      	mov	r4, ip
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	1b12      	subs	r2, r2, r4
 8000c94:	003c      	movs	r4, r7
 8000c96:	4094      	lsls	r4, r2
 8000c98:	4304      	orrs	r4, r0
 8000c9a:	9401      	str	r4, [sp, #4]
 8000c9c:	9c01      	ldr	r4, [sp, #4]
 8000c9e:	1e62      	subs	r2, r4, #1
 8000ca0:	4194      	sbcs	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	e0c3      	b.n	8000e2e <__aeabi_dsub+0x342>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	4304      	orrs	r4, r0
 8000caa:	d02b      	beq.n	8000d04 <__aeabi_dsub+0x218>
 8000cac:	468b      	mov	fp, r1
 8000cae:	428d      	cmp	r5, r1
 8000cb0:	d02e      	beq.n	8000d10 <__aeabi_dsub+0x224>
 8000cb2:	4c6a      	ldr	r4, [pc, #424]	; (8000e5c <__aeabi_dsub+0x370>)
 8000cb4:	46a4      	mov	ip, r4
 8000cb6:	44b4      	add	ip, r6
 8000cb8:	4664      	mov	r4, ip
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d05f      	beq.n	8000d7e <__aeabi_dsub+0x292>
 8000cbe:	1b94      	subs	r4, r2, r6
 8000cc0:	46a4      	mov	ip, r4
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_dsub+0x1dc>
 8000cc6:	e120      	b.n	8000f0a <__aeabi_dsub+0x41e>
 8000cc8:	464c      	mov	r4, r9
 8000cca:	431c      	orrs	r4, r3
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_dsub+0x1e4>
 8000cce:	e1c7      	b.n	8001060 <__aeabi_dsub+0x574>
 8000cd0:	4661      	mov	r1, ip
 8000cd2:	1e4c      	subs	r4, r1, #1
 8000cd4:	2901      	cmp	r1, #1
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dsub+0x1ee>
 8000cd8:	e223      	b.n	8001122 <__aeabi_dsub+0x636>
 8000cda:	4d5e      	ldr	r5, [pc, #376]	; (8000e54 <__aeabi_dsub+0x368>)
 8000cdc:	45ac      	cmp	ip, r5
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_dsub+0x1f6>
 8000ce0:	e1d8      	b.n	8001094 <__aeabi_dsub+0x5a8>
 8000ce2:	46a4      	mov	ip, r4
 8000ce4:	e11a      	b.n	8000f1c <__aeabi_dsub+0x430>
 8000ce6:	003a      	movs	r2, r7
 8000ce8:	4302      	orrs	r2, r0
 8000cea:	d100      	bne.n	8000cee <__aeabi_dsub+0x202>
 8000cec:	e0e4      	b.n	8000eb8 <__aeabi_dsub+0x3cc>
 8000cee:	0022      	movs	r2, r4
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	2c01      	cmp	r4, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dsub+0x20c>
 8000cf6:	e1c3      	b.n	8001080 <__aeabi_dsub+0x594>
 8000cf8:	4956      	ldr	r1, [pc, #344]	; (8000e54 <__aeabi_dsub+0x368>)
 8000cfa:	428c      	cmp	r4, r1
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dsub+0x214>
 8000cfe:	e0b1      	b.n	8000e64 <__aeabi_dsub+0x378>
 8000d00:	4694      	mov	ip, r2
 8000d02:	e72b      	b.n	8000b5c <__aeabi_dsub+0x70>
 8000d04:	2401      	movs	r4, #1
 8000d06:	4061      	eors	r1, r4
 8000d08:	468b      	mov	fp, r1
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_dsub+0x224>
 8000d0e:	e716      	b.n	8000b3e <__aeabi_dsub+0x52>
 8000d10:	4952      	ldr	r1, [pc, #328]	; (8000e5c <__aeabi_dsub+0x370>)
 8000d12:	468c      	mov	ip, r1
 8000d14:	44b4      	add	ip, r6
 8000d16:	4664      	mov	r4, ip
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_dsub+0x232>
 8000d1c:	e0d3      	b.n	8000ec6 <__aeabi_dsub+0x3da>
 8000d1e:	1b91      	subs	r1, r2, r6
 8000d20:	468c      	mov	ip, r1
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_dsub+0x23c>
 8000d26:	e15e      	b.n	8000fe6 <__aeabi_dsub+0x4fa>
 8000d28:	494a      	ldr	r1, [pc, #296]	; (8000e54 <__aeabi_dsub+0x368>)
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dsub+0x244>
 8000d2e:	e1be      	b.n	80010ae <__aeabi_dsub+0x5c2>
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	464c      	mov	r4, r9
 8000d34:	0409      	lsls	r1, r1, #16
 8000d36:	430c      	orrs	r4, r1
 8000d38:	46a1      	mov	r9, r4
 8000d3a:	4661      	mov	r1, ip
 8000d3c:	2938      	cmp	r1, #56	; 0x38
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_dsub+0x256>
 8000d40:	e1ba      	b.n	80010b8 <__aeabi_dsub+0x5cc>
 8000d42:	291f      	cmp	r1, #31
 8000d44:	dd00      	ble.n	8000d48 <__aeabi_dsub+0x25c>
 8000d46:	e227      	b.n	8001198 <__aeabi_dsub+0x6ac>
 8000d48:	2420      	movs	r4, #32
 8000d4a:	1a64      	subs	r4, r4, r1
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	40a1      	lsls	r1, r4
 8000d50:	001e      	movs	r6, r3
 8000d52:	4688      	mov	r8, r1
 8000d54:	4661      	mov	r1, ip
 8000d56:	40a3      	lsls	r3, r4
 8000d58:	40ce      	lsrs	r6, r1
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	1e5c      	subs	r4, r3, #1
 8000d5e:	41a3      	sbcs	r3, r4
 8000d60:	4331      	orrs	r1, r6
 8000d62:	4319      	orrs	r1, r3
 8000d64:	000c      	movs	r4, r1
 8000d66:	4663      	mov	r3, ip
 8000d68:	4649      	mov	r1, r9
 8000d6a:	40d9      	lsrs	r1, r3
 8000d6c:	187f      	adds	r7, r7, r1
 8000d6e:	1824      	adds	r4, r4, r0
 8000d70:	4284      	cmp	r4, r0
 8000d72:	419b      	sbcs	r3, r3
 8000d74:	425b      	negs	r3, r3
 8000d76:	469a      	mov	sl, r3
 8000d78:	0016      	movs	r6, r2
 8000d7a:	44ba      	add	sl, r7
 8000d7c:	e05d      	b.n	8000e3a <__aeabi_dsub+0x34e>
 8000d7e:	4c38      	ldr	r4, [pc, #224]	; (8000e60 <__aeabi_dsub+0x374>)
 8000d80:	1c72      	adds	r2, r6, #1
 8000d82:	4222      	tst	r2, r4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dsub+0x29c>
 8000d86:	e0df      	b.n	8000f48 <__aeabi_dsub+0x45c>
 8000d88:	464a      	mov	r2, r9
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_dsub+0x2a6>
 8000d90:	e15c      	b.n	800104c <__aeabi_dsub+0x560>
 8000d92:	2a00      	cmp	r2, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dsub+0x2ac>
 8000d96:	e1cf      	b.n	8001138 <__aeabi_dsub+0x64c>
 8000d98:	003a      	movs	r2, r7
 8000d9a:	4302      	orrs	r2, r0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dsub+0x2b4>
 8000d9e:	e17f      	b.n	80010a0 <__aeabi_dsub+0x5b4>
 8000da0:	1a1c      	subs	r4, r3, r0
 8000da2:	464a      	mov	r2, r9
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	4189      	sbcs	r1, r1
 8000da8:	1bd2      	subs	r2, r2, r7
 8000daa:	4249      	negs	r1, r1
 8000dac:	1a52      	subs	r2, r2, r1
 8000dae:	4692      	mov	sl, r2
 8000db0:	0212      	lsls	r2, r2, #8
 8000db2:	d400      	bmi.n	8000db6 <__aeabi_dsub+0x2ca>
 8000db4:	e20a      	b.n	80011cc <__aeabi_dsub+0x6e0>
 8000db6:	1ac4      	subs	r4, r0, r3
 8000db8:	42a0      	cmp	r0, r4
 8000dba:	4180      	sbcs	r0, r0
 8000dbc:	464b      	mov	r3, r9
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	1aff      	subs	r7, r7, r3
 8000dc2:	1a3b      	subs	r3, r7, r0
 8000dc4:	469a      	mov	sl, r3
 8000dc6:	465d      	mov	r5, fp
 8000dc8:	e71a      	b.n	8000c00 <__aeabi_dsub+0x114>
 8000dca:	003a      	movs	r2, r7
 8000dcc:	4302      	orrs	r2, r0
 8000dce:	d073      	beq.n	8000eb8 <__aeabi_dsub+0x3cc>
 8000dd0:	0022      	movs	r2, r4
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	2c01      	cmp	r4, #1
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dsub+0x2ee>
 8000dd8:	e0cb      	b.n	8000f72 <__aeabi_dsub+0x486>
 8000dda:	4554      	cmp	r4, sl
 8000ddc:	d042      	beq.n	8000e64 <__aeabi_dsub+0x378>
 8000dde:	4694      	mov	ip, r2
 8000de0:	e748      	b.n	8000c74 <__aeabi_dsub+0x188>
 8000de2:	0010      	movs	r0, r2
 8000de4:	3b1f      	subs	r3, #31
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	2920      	cmp	r1, #32
 8000dea:	d003      	beq.n	8000df4 <__aeabi_dsub+0x308>
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	1a5b      	subs	r3, r3, r1
 8000df0:	409a      	lsls	r2, r3
 8000df2:	4314      	orrs	r4, r2
 8000df4:	1e63      	subs	r3, r4, #1
 8000df6:	419c      	sbcs	r4, r3
 8000df8:	2300      	movs	r3, #0
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	469a      	mov	sl, r3
 8000dfe:	4304      	orrs	r4, r0
 8000e00:	0763      	lsls	r3, r4, #29
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dsub+0x31a>
 8000e04:	e6fe      	b.n	8000c04 <__aeabi_dsub+0x118>
 8000e06:	4652      	mov	r2, sl
 8000e08:	08e3      	lsrs	r3, r4, #3
 8000e0a:	0752      	lsls	r2, r2, #29
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	4652      	mov	r2, sl
 8000e10:	46b4      	mov	ip, r6
 8000e12:	08d2      	lsrs	r2, r2, #3
 8000e14:	490f      	ldr	r1, [pc, #60]	; (8000e54 <__aeabi_dsub+0x368>)
 8000e16:	458c      	cmp	ip, r1
 8000e18:	d02a      	beq.n	8000e70 <__aeabi_dsub+0x384>
 8000e1a:	0312      	lsls	r2, r2, #12
 8000e1c:	0b14      	lsrs	r4, r2, #12
 8000e1e:	4662      	mov	r2, ip
 8000e20:	0552      	lsls	r2, r2, #21
 8000e22:	0d52      	lsrs	r2, r2, #21
 8000e24:	e70c      	b.n	8000c40 <__aeabi_dsub+0x154>
 8000e26:	003c      	movs	r4, r7
 8000e28:	4304      	orrs	r4, r0
 8000e2a:	1e62      	subs	r2, r4, #1
 8000e2c:	4194      	sbcs	r4, r2
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	429c      	cmp	r4, r3
 8000e32:	4192      	sbcs	r2, r2
 8000e34:	4252      	negs	r2, r2
 8000e36:	444a      	add	r2, r9
 8000e38:	4692      	mov	sl, r2
 8000e3a:	4653      	mov	r3, sl
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	d5df      	bpl.n	8000e00 <__aeabi_dsub+0x314>
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__aeabi_dsub+0x368>)
 8000e42:	3601      	adds	r6, #1
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d000      	beq.n	8000e4a <__aeabi_dsub+0x35e>
 8000e48:	e0a0      	b.n	8000f8c <__aeabi_dsub+0x4a0>
 8000e4a:	0032      	movs	r2, r6
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e6f6      	b.n	8000c40 <__aeabi_dsub+0x154>
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	000007ff 	.word	0x000007ff
 8000e58:	ff7fffff 	.word	0xff7fffff
 8000e5c:	fffff801 	.word	0xfffff801
 8000e60:	000007fe 	.word	0x000007fe
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	0752      	lsls	r2, r2, #29
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	464a      	mov	r2, r9
 8000e6e:	08d2      	lsrs	r2, r2, #3
 8000e70:	0019      	movs	r1, r3
 8000e72:	4311      	orrs	r1, r2
 8000e74:	d100      	bne.n	8000e78 <__aeabi_dsub+0x38c>
 8000e76:	e1b5      	b.n	80011e4 <__aeabi_dsub+0x6f8>
 8000e78:	2480      	movs	r4, #128	; 0x80
 8000e7a:	0324      	lsls	r4, r4, #12
 8000e7c:	4314      	orrs	r4, r2
 8000e7e:	0324      	lsls	r4, r4, #12
 8000e80:	4ad5      	ldr	r2, [pc, #852]	; (80011d8 <__aeabi_dsub+0x6ec>)
 8000e82:	0b24      	lsrs	r4, r4, #12
 8000e84:	e6dc      	b.n	8000c40 <__aeabi_dsub+0x154>
 8000e86:	0020      	movs	r0, r4
 8000e88:	f000 fa56 	bl	8001338 <__clzsi2>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	3318      	adds	r3, #24
 8000e90:	2b1f      	cmp	r3, #31
 8000e92:	dc00      	bgt.n	8000e96 <__aeabi_dsub+0x3aa>
 8000e94:	e695      	b.n	8000bc2 <__aeabi_dsub+0xd6>
 8000e96:	0022      	movs	r2, r4
 8000e98:	3808      	subs	r0, #8
 8000e9a:	4082      	lsls	r2, r0
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_dsub+0x3b8>
 8000ea2:	e69a      	b.n	8000bda <__aeabi_dsub+0xee>
 8000ea4:	1af6      	subs	r6, r6, r3
 8000ea6:	4bcd      	ldr	r3, [pc, #820]	; (80011dc <__aeabi_dsub+0x6f0>)
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	4692      	mov	sl, r2
 8000eac:	e6a8      	b.n	8000c00 <__aeabi_dsub+0x114>
 8000eae:	003c      	movs	r4, r7
 8000eb0:	4304      	orrs	r4, r0
 8000eb2:	1e62      	subs	r2, r4, #1
 8000eb4:	4194      	sbcs	r4, r2
 8000eb6:	e66c      	b.n	8000b92 <__aeabi_dsub+0xa6>
 8000eb8:	464a      	mov	r2, r9
 8000eba:	08db      	lsrs	r3, r3, #3
 8000ebc:	0752      	lsls	r2, r2, #29
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	08d2      	lsrs	r2, r2, #3
 8000ec4:	e7a6      	b.n	8000e14 <__aeabi_dsub+0x328>
 8000ec6:	4cc6      	ldr	r4, [pc, #792]	; (80011e0 <__aeabi_dsub+0x6f4>)
 8000ec8:	1c72      	adds	r2, r6, #1
 8000eca:	4222      	tst	r2, r4
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_dsub+0x3e4>
 8000ece:	e0ac      	b.n	800102a <__aeabi_dsub+0x53e>
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	d000      	beq.n	8000eda <__aeabi_dsub+0x3ee>
 8000ed8:	e105      	b.n	80010e6 <__aeabi_dsub+0x5fa>
 8000eda:	2a00      	cmp	r2, #0
 8000edc:	d100      	bne.n	8000ee0 <__aeabi_dsub+0x3f4>
 8000ede:	e156      	b.n	800118e <__aeabi_dsub+0x6a2>
 8000ee0:	003a      	movs	r2, r7
 8000ee2:	4302      	orrs	r2, r0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dsub+0x3fc>
 8000ee6:	e0db      	b.n	80010a0 <__aeabi_dsub+0x5b4>
 8000ee8:	181c      	adds	r4, r3, r0
 8000eea:	429c      	cmp	r4, r3
 8000eec:	419b      	sbcs	r3, r3
 8000eee:	444f      	add	r7, r9
 8000ef0:	46ba      	mov	sl, r7
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	449a      	add	sl, r3
 8000ef6:	4653      	mov	r3, sl
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	d400      	bmi.n	8000efe <__aeabi_dsub+0x412>
 8000efc:	e780      	b.n	8000e00 <__aeabi_dsub+0x314>
 8000efe:	4652      	mov	r2, sl
 8000f00:	4bb6      	ldr	r3, [pc, #728]	; (80011dc <__aeabi_dsub+0x6f0>)
 8000f02:	2601      	movs	r6, #1
 8000f04:	401a      	ands	r2, r3
 8000f06:	4692      	mov	sl, r2
 8000f08:	e77a      	b.n	8000e00 <__aeabi_dsub+0x314>
 8000f0a:	4cb3      	ldr	r4, [pc, #716]	; (80011d8 <__aeabi_dsub+0x6ec>)
 8000f0c:	42a2      	cmp	r2, r4
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dsub+0x426>
 8000f10:	e0c0      	b.n	8001094 <__aeabi_dsub+0x5a8>
 8000f12:	2480      	movs	r4, #128	; 0x80
 8000f14:	464d      	mov	r5, r9
 8000f16:	0424      	lsls	r4, r4, #16
 8000f18:	4325      	orrs	r5, r4
 8000f1a:	46a9      	mov	r9, r5
 8000f1c:	4664      	mov	r4, ip
 8000f1e:	2c38      	cmp	r4, #56	; 0x38
 8000f20:	dc53      	bgt.n	8000fca <__aeabi_dsub+0x4de>
 8000f22:	4661      	mov	r1, ip
 8000f24:	2c1f      	cmp	r4, #31
 8000f26:	dd00      	ble.n	8000f2a <__aeabi_dsub+0x43e>
 8000f28:	e0cd      	b.n	80010c6 <__aeabi_dsub+0x5da>
 8000f2a:	2520      	movs	r5, #32
 8000f2c:	001e      	movs	r6, r3
 8000f2e:	1b2d      	subs	r5, r5, r4
 8000f30:	464c      	mov	r4, r9
 8000f32:	40ab      	lsls	r3, r5
 8000f34:	40ac      	lsls	r4, r5
 8000f36:	40ce      	lsrs	r6, r1
 8000f38:	1e5d      	subs	r5, r3, #1
 8000f3a:	41ab      	sbcs	r3, r5
 8000f3c:	4334      	orrs	r4, r6
 8000f3e:	4323      	orrs	r3, r4
 8000f40:	464c      	mov	r4, r9
 8000f42:	40cc      	lsrs	r4, r1
 8000f44:	1b3f      	subs	r7, r7, r4
 8000f46:	e045      	b.n	8000fd4 <__aeabi_dsub+0x4e8>
 8000f48:	464a      	mov	r2, r9
 8000f4a:	1a1c      	subs	r4, r3, r0
 8000f4c:	1bd1      	subs	r1, r2, r7
 8000f4e:	42a3      	cmp	r3, r4
 8000f50:	4192      	sbcs	r2, r2
 8000f52:	4252      	negs	r2, r2
 8000f54:	4692      	mov	sl, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	4651      	mov	r1, sl
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	4692      	mov	sl, r2
 8000f5e:	0212      	lsls	r2, r2, #8
 8000f60:	d500      	bpl.n	8000f64 <__aeabi_dsub+0x478>
 8000f62:	e083      	b.n	800106c <__aeabi_dsub+0x580>
 8000f64:	4653      	mov	r3, sl
 8000f66:	4323      	orrs	r3, r4
 8000f68:	d000      	beq.n	8000f6c <__aeabi_dsub+0x480>
 8000f6a:	e621      	b.n	8000bb0 <__aeabi_dsub+0xc4>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2500      	movs	r5, #0
 8000f70:	e753      	b.n	8000e1a <__aeabi_dsub+0x32e>
 8000f72:	181c      	adds	r4, r3, r0
 8000f74:	429c      	cmp	r4, r3
 8000f76:	419b      	sbcs	r3, r3
 8000f78:	444f      	add	r7, r9
 8000f7a:	46ba      	mov	sl, r7
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	449a      	add	sl, r3
 8000f80:	4653      	mov	r3, sl
 8000f82:	2601      	movs	r6, #1
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	d400      	bmi.n	8000f8a <__aeabi_dsub+0x49e>
 8000f88:	e73a      	b.n	8000e00 <__aeabi_dsub+0x314>
 8000f8a:	2602      	movs	r6, #2
 8000f8c:	4652      	mov	r2, sl
 8000f8e:	4b93      	ldr	r3, [pc, #588]	; (80011dc <__aeabi_dsub+0x6f0>)
 8000f90:	2101      	movs	r1, #1
 8000f92:	401a      	ands	r2, r3
 8000f94:	0013      	movs	r3, r2
 8000f96:	4021      	ands	r1, r4
 8000f98:	0862      	lsrs	r2, r4, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	07dc      	lsls	r4, r3, #31
 8000f9e:	085b      	lsrs	r3, r3, #1
 8000fa0:	469a      	mov	sl, r3
 8000fa2:	4314      	orrs	r4, r2
 8000fa4:	e62c      	b.n	8000c00 <__aeabi_dsub+0x114>
 8000fa6:	0039      	movs	r1, r7
 8000fa8:	3a20      	subs	r2, #32
 8000faa:	40d1      	lsrs	r1, r2
 8000fac:	4662      	mov	r2, ip
 8000fae:	2a20      	cmp	r2, #32
 8000fb0:	d006      	beq.n	8000fc0 <__aeabi_dsub+0x4d4>
 8000fb2:	4664      	mov	r4, ip
 8000fb4:	2240      	movs	r2, #64	; 0x40
 8000fb6:	1b12      	subs	r2, r2, r4
 8000fb8:	003c      	movs	r4, r7
 8000fba:	4094      	lsls	r4, r2
 8000fbc:	4304      	orrs	r4, r0
 8000fbe:	9401      	str	r4, [sp, #4]
 8000fc0:	9c01      	ldr	r4, [sp, #4]
 8000fc2:	1e62      	subs	r2, r4, #1
 8000fc4:	4194      	sbcs	r4, r2
 8000fc6:	430c      	orrs	r4, r1
 8000fc8:	e5e3      	b.n	8000b92 <__aeabi_dsub+0xa6>
 8000fca:	4649      	mov	r1, r9
 8000fcc:	4319      	orrs	r1, r3
 8000fce:	000b      	movs	r3, r1
 8000fd0:	1e5c      	subs	r4, r3, #1
 8000fd2:	41a3      	sbcs	r3, r4
 8000fd4:	1ac4      	subs	r4, r0, r3
 8000fd6:	42a0      	cmp	r0, r4
 8000fd8:	419b      	sbcs	r3, r3
 8000fda:	425b      	negs	r3, r3
 8000fdc:	1afb      	subs	r3, r7, r3
 8000fde:	469a      	mov	sl, r3
 8000fe0:	465d      	mov	r5, fp
 8000fe2:	0016      	movs	r6, r2
 8000fe4:	e5dc      	b.n	8000ba0 <__aeabi_dsub+0xb4>
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	4319      	orrs	r1, r3
 8000fea:	d100      	bne.n	8000fee <__aeabi_dsub+0x502>
 8000fec:	e0ae      	b.n	800114c <__aeabi_dsub+0x660>
 8000fee:	4661      	mov	r1, ip
 8000ff0:	4664      	mov	r4, ip
 8000ff2:	3901      	subs	r1, #1
 8000ff4:	2c01      	cmp	r4, #1
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_dsub+0x50e>
 8000ff8:	e0e0      	b.n	80011bc <__aeabi_dsub+0x6d0>
 8000ffa:	4c77      	ldr	r4, [pc, #476]	; (80011d8 <__aeabi_dsub+0x6ec>)
 8000ffc:	45a4      	cmp	ip, r4
 8000ffe:	d056      	beq.n	80010ae <__aeabi_dsub+0x5c2>
 8001000:	468c      	mov	ip, r1
 8001002:	e69a      	b.n	8000d3a <__aeabi_dsub+0x24e>
 8001004:	4661      	mov	r1, ip
 8001006:	2220      	movs	r2, #32
 8001008:	003c      	movs	r4, r7
 800100a:	1a52      	subs	r2, r2, r1
 800100c:	4094      	lsls	r4, r2
 800100e:	0001      	movs	r1, r0
 8001010:	4090      	lsls	r0, r2
 8001012:	46a0      	mov	r8, r4
 8001014:	4664      	mov	r4, ip
 8001016:	1e42      	subs	r2, r0, #1
 8001018:	4190      	sbcs	r0, r2
 800101a:	4662      	mov	r2, ip
 800101c:	40e1      	lsrs	r1, r4
 800101e:	4644      	mov	r4, r8
 8001020:	40d7      	lsrs	r7, r2
 8001022:	430c      	orrs	r4, r1
 8001024:	4304      	orrs	r4, r0
 8001026:	44b9      	add	r9, r7
 8001028:	e701      	b.n	8000e2e <__aeabi_dsub+0x342>
 800102a:	496b      	ldr	r1, [pc, #428]	; (80011d8 <__aeabi_dsub+0x6ec>)
 800102c:	428a      	cmp	r2, r1
 800102e:	d100      	bne.n	8001032 <__aeabi_dsub+0x546>
 8001030:	e70c      	b.n	8000e4c <__aeabi_dsub+0x360>
 8001032:	1818      	adds	r0, r3, r0
 8001034:	4298      	cmp	r0, r3
 8001036:	419b      	sbcs	r3, r3
 8001038:	444f      	add	r7, r9
 800103a:	425b      	negs	r3, r3
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	07dc      	lsls	r4, r3, #31
 8001040:	0840      	lsrs	r0, r0, #1
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	469a      	mov	sl, r3
 8001046:	0016      	movs	r6, r2
 8001048:	4304      	orrs	r4, r0
 800104a:	e6d9      	b.n	8000e00 <__aeabi_dsub+0x314>
 800104c:	2a00      	cmp	r2, #0
 800104e:	d000      	beq.n	8001052 <__aeabi_dsub+0x566>
 8001050:	e081      	b.n	8001156 <__aeabi_dsub+0x66a>
 8001052:	003b      	movs	r3, r7
 8001054:	4303      	orrs	r3, r0
 8001056:	d11d      	bne.n	8001094 <__aeabi_dsub+0x5a8>
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	2500      	movs	r5, #0
 800105c:	0312      	lsls	r2, r2, #12
 800105e:	e70b      	b.n	8000e78 <__aeabi_dsub+0x38c>
 8001060:	08c0      	lsrs	r0, r0, #3
 8001062:	077b      	lsls	r3, r7, #29
 8001064:	465d      	mov	r5, fp
 8001066:	4303      	orrs	r3, r0
 8001068:	08fa      	lsrs	r2, r7, #3
 800106a:	e6d3      	b.n	8000e14 <__aeabi_dsub+0x328>
 800106c:	1ac4      	subs	r4, r0, r3
 800106e:	42a0      	cmp	r0, r4
 8001070:	4180      	sbcs	r0, r0
 8001072:	464b      	mov	r3, r9
 8001074:	4240      	negs	r0, r0
 8001076:	1aff      	subs	r7, r7, r3
 8001078:	1a3b      	subs	r3, r7, r0
 800107a:	469a      	mov	sl, r3
 800107c:	465d      	mov	r5, fp
 800107e:	e597      	b.n	8000bb0 <__aeabi_dsub+0xc4>
 8001080:	1a1c      	subs	r4, r3, r0
 8001082:	464a      	mov	r2, r9
 8001084:	42a3      	cmp	r3, r4
 8001086:	419b      	sbcs	r3, r3
 8001088:	1bd7      	subs	r7, r2, r7
 800108a:	425b      	negs	r3, r3
 800108c:	1afb      	subs	r3, r7, r3
 800108e:	469a      	mov	sl, r3
 8001090:	2601      	movs	r6, #1
 8001092:	e585      	b.n	8000ba0 <__aeabi_dsub+0xb4>
 8001094:	08c0      	lsrs	r0, r0, #3
 8001096:	077b      	lsls	r3, r7, #29
 8001098:	465d      	mov	r5, fp
 800109a:	4303      	orrs	r3, r0
 800109c:	08fa      	lsrs	r2, r7, #3
 800109e:	e6e7      	b.n	8000e70 <__aeabi_dsub+0x384>
 80010a0:	464a      	mov	r2, r9
 80010a2:	08db      	lsrs	r3, r3, #3
 80010a4:	0752      	lsls	r2, r2, #29
 80010a6:	4313      	orrs	r3, r2
 80010a8:	464a      	mov	r2, r9
 80010aa:	08d2      	lsrs	r2, r2, #3
 80010ac:	e6b5      	b.n	8000e1a <__aeabi_dsub+0x32e>
 80010ae:	08c0      	lsrs	r0, r0, #3
 80010b0:	077b      	lsls	r3, r7, #29
 80010b2:	4303      	orrs	r3, r0
 80010b4:	08fa      	lsrs	r2, r7, #3
 80010b6:	e6db      	b.n	8000e70 <__aeabi_dsub+0x384>
 80010b8:	4649      	mov	r1, r9
 80010ba:	4319      	orrs	r1, r3
 80010bc:	000b      	movs	r3, r1
 80010be:	1e59      	subs	r1, r3, #1
 80010c0:	418b      	sbcs	r3, r1
 80010c2:	001c      	movs	r4, r3
 80010c4:	e653      	b.n	8000d6e <__aeabi_dsub+0x282>
 80010c6:	464d      	mov	r5, r9
 80010c8:	3c20      	subs	r4, #32
 80010ca:	40e5      	lsrs	r5, r4
 80010cc:	2920      	cmp	r1, #32
 80010ce:	d005      	beq.n	80010dc <__aeabi_dsub+0x5f0>
 80010d0:	2440      	movs	r4, #64	; 0x40
 80010d2:	1a64      	subs	r4, r4, r1
 80010d4:	4649      	mov	r1, r9
 80010d6:	40a1      	lsls	r1, r4
 80010d8:	430b      	orrs	r3, r1
 80010da:	4698      	mov	r8, r3
 80010dc:	4643      	mov	r3, r8
 80010de:	1e5c      	subs	r4, r3, #1
 80010e0:	41a3      	sbcs	r3, r4
 80010e2:	432b      	orrs	r3, r5
 80010e4:	e776      	b.n	8000fd4 <__aeabi_dsub+0x4e8>
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d0e1      	beq.n	80010ae <__aeabi_dsub+0x5c2>
 80010ea:	003a      	movs	r2, r7
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	4302      	orrs	r2, r0
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dsub+0x608>
 80010f2:	e6b8      	b.n	8000e66 <__aeabi_dsub+0x37a>
 80010f4:	464a      	mov	r2, r9
 80010f6:	0752      	lsls	r2, r2, #29
 80010f8:	2480      	movs	r4, #128	; 0x80
 80010fa:	4313      	orrs	r3, r2
 80010fc:	464a      	mov	r2, r9
 80010fe:	0324      	lsls	r4, r4, #12
 8001100:	08d2      	lsrs	r2, r2, #3
 8001102:	4222      	tst	r2, r4
 8001104:	d007      	beq.n	8001116 <__aeabi_dsub+0x62a>
 8001106:	08fe      	lsrs	r6, r7, #3
 8001108:	4226      	tst	r6, r4
 800110a:	d104      	bne.n	8001116 <__aeabi_dsub+0x62a>
 800110c:	465d      	mov	r5, fp
 800110e:	0032      	movs	r2, r6
 8001110:	08c3      	lsrs	r3, r0, #3
 8001112:	077f      	lsls	r7, r7, #29
 8001114:	433b      	orrs	r3, r7
 8001116:	0f59      	lsrs	r1, r3, #29
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	0749      	lsls	r1, r1, #29
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	430b      	orrs	r3, r1
 8001120:	e6a6      	b.n	8000e70 <__aeabi_dsub+0x384>
 8001122:	1ac4      	subs	r4, r0, r3
 8001124:	42a0      	cmp	r0, r4
 8001126:	4180      	sbcs	r0, r0
 8001128:	464b      	mov	r3, r9
 800112a:	4240      	negs	r0, r0
 800112c:	1aff      	subs	r7, r7, r3
 800112e:	1a3b      	subs	r3, r7, r0
 8001130:	469a      	mov	sl, r3
 8001132:	465d      	mov	r5, fp
 8001134:	2601      	movs	r6, #1
 8001136:	e533      	b.n	8000ba0 <__aeabi_dsub+0xb4>
 8001138:	003b      	movs	r3, r7
 800113a:	4303      	orrs	r3, r0
 800113c:	d100      	bne.n	8001140 <__aeabi_dsub+0x654>
 800113e:	e715      	b.n	8000f6c <__aeabi_dsub+0x480>
 8001140:	08c0      	lsrs	r0, r0, #3
 8001142:	077b      	lsls	r3, r7, #29
 8001144:	465d      	mov	r5, fp
 8001146:	4303      	orrs	r3, r0
 8001148:	08fa      	lsrs	r2, r7, #3
 800114a:	e666      	b.n	8000e1a <__aeabi_dsub+0x32e>
 800114c:	08c0      	lsrs	r0, r0, #3
 800114e:	077b      	lsls	r3, r7, #29
 8001150:	4303      	orrs	r3, r0
 8001152:	08fa      	lsrs	r2, r7, #3
 8001154:	e65e      	b.n	8000e14 <__aeabi_dsub+0x328>
 8001156:	003a      	movs	r2, r7
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	4302      	orrs	r2, r0
 800115c:	d100      	bne.n	8001160 <__aeabi_dsub+0x674>
 800115e:	e682      	b.n	8000e66 <__aeabi_dsub+0x37a>
 8001160:	464a      	mov	r2, r9
 8001162:	0752      	lsls	r2, r2, #29
 8001164:	2480      	movs	r4, #128	; 0x80
 8001166:	4313      	orrs	r3, r2
 8001168:	464a      	mov	r2, r9
 800116a:	0324      	lsls	r4, r4, #12
 800116c:	08d2      	lsrs	r2, r2, #3
 800116e:	4222      	tst	r2, r4
 8001170:	d007      	beq.n	8001182 <__aeabi_dsub+0x696>
 8001172:	08fe      	lsrs	r6, r7, #3
 8001174:	4226      	tst	r6, r4
 8001176:	d104      	bne.n	8001182 <__aeabi_dsub+0x696>
 8001178:	465d      	mov	r5, fp
 800117a:	0032      	movs	r2, r6
 800117c:	08c3      	lsrs	r3, r0, #3
 800117e:	077f      	lsls	r7, r7, #29
 8001180:	433b      	orrs	r3, r7
 8001182:	0f59      	lsrs	r1, r3, #29
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	0749      	lsls	r1, r1, #29
 800118a:	430b      	orrs	r3, r1
 800118c:	e670      	b.n	8000e70 <__aeabi_dsub+0x384>
 800118e:	08c0      	lsrs	r0, r0, #3
 8001190:	077b      	lsls	r3, r7, #29
 8001192:	4303      	orrs	r3, r0
 8001194:	08fa      	lsrs	r2, r7, #3
 8001196:	e640      	b.n	8000e1a <__aeabi_dsub+0x32e>
 8001198:	464c      	mov	r4, r9
 800119a:	3920      	subs	r1, #32
 800119c:	40cc      	lsrs	r4, r1
 800119e:	4661      	mov	r1, ip
 80011a0:	2920      	cmp	r1, #32
 80011a2:	d006      	beq.n	80011b2 <__aeabi_dsub+0x6c6>
 80011a4:	4666      	mov	r6, ip
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	1b89      	subs	r1, r1, r6
 80011aa:	464e      	mov	r6, r9
 80011ac:	408e      	lsls	r6, r1
 80011ae:	4333      	orrs	r3, r6
 80011b0:	4698      	mov	r8, r3
 80011b2:	4643      	mov	r3, r8
 80011b4:	1e59      	subs	r1, r3, #1
 80011b6:	418b      	sbcs	r3, r1
 80011b8:	431c      	orrs	r4, r3
 80011ba:	e5d8      	b.n	8000d6e <__aeabi_dsub+0x282>
 80011bc:	181c      	adds	r4, r3, r0
 80011be:	4284      	cmp	r4, r0
 80011c0:	4180      	sbcs	r0, r0
 80011c2:	444f      	add	r7, r9
 80011c4:	46ba      	mov	sl, r7
 80011c6:	4240      	negs	r0, r0
 80011c8:	4482      	add	sl, r0
 80011ca:	e6d9      	b.n	8000f80 <__aeabi_dsub+0x494>
 80011cc:	4653      	mov	r3, sl
 80011ce:	4323      	orrs	r3, r4
 80011d0:	d100      	bne.n	80011d4 <__aeabi_dsub+0x6e8>
 80011d2:	e6cb      	b.n	8000f6c <__aeabi_dsub+0x480>
 80011d4:	e614      	b.n	8000e00 <__aeabi_dsub+0x314>
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	000007ff 	.word	0x000007ff
 80011dc:	ff7fffff 	.word	0xff7fffff
 80011e0:	000007fe 	.word	0x000007fe
 80011e4:	2300      	movs	r3, #0
 80011e6:	4a01      	ldr	r2, [pc, #4]	; (80011ec <__aeabi_dsub+0x700>)
 80011e8:	001c      	movs	r4, r3
 80011ea:	e529      	b.n	8000c40 <__aeabi_dsub+0x154>
 80011ec:	000007ff 	.word	0x000007ff

080011f0 <__aeabi_d2iz>:
 80011f0:	000a      	movs	r2, r1
 80011f2:	b530      	push	{r4, r5, lr}
 80011f4:	4c13      	ldr	r4, [pc, #76]	; (8001244 <__aeabi_d2iz+0x54>)
 80011f6:	0053      	lsls	r3, r2, #1
 80011f8:	0309      	lsls	r1, r1, #12
 80011fa:	0005      	movs	r5, r0
 80011fc:	0b09      	lsrs	r1, r1, #12
 80011fe:	2000      	movs	r0, #0
 8001200:	0d5b      	lsrs	r3, r3, #21
 8001202:	0fd2      	lsrs	r2, r2, #31
 8001204:	42a3      	cmp	r3, r4
 8001206:	dd04      	ble.n	8001212 <__aeabi_d2iz+0x22>
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <__aeabi_d2iz+0x58>)
 800120a:	4283      	cmp	r3, r0
 800120c:	dd02      	ble.n	8001214 <__aeabi_d2iz+0x24>
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <__aeabi_d2iz+0x5c>)
 8001210:	18d0      	adds	r0, r2, r3
 8001212:	bd30      	pop	{r4, r5, pc}
 8001214:	2080      	movs	r0, #128	; 0x80
 8001216:	0340      	lsls	r0, r0, #13
 8001218:	4301      	orrs	r1, r0
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <__aeabi_d2iz+0x60>)
 800121c:	1ac0      	subs	r0, r0, r3
 800121e:	281f      	cmp	r0, #31
 8001220:	dd08      	ble.n	8001234 <__aeabi_d2iz+0x44>
 8001222:	480c      	ldr	r0, [pc, #48]	; (8001254 <__aeabi_d2iz+0x64>)
 8001224:	1ac3      	subs	r3, r0, r3
 8001226:	40d9      	lsrs	r1, r3
 8001228:	000b      	movs	r3, r1
 800122a:	4258      	negs	r0, r3
 800122c:	2a00      	cmp	r2, #0
 800122e:	d1f0      	bne.n	8001212 <__aeabi_d2iz+0x22>
 8001230:	0018      	movs	r0, r3
 8001232:	e7ee      	b.n	8001212 <__aeabi_d2iz+0x22>
 8001234:	4c08      	ldr	r4, [pc, #32]	; (8001258 <__aeabi_d2iz+0x68>)
 8001236:	40c5      	lsrs	r5, r0
 8001238:	46a4      	mov	ip, r4
 800123a:	4463      	add	r3, ip
 800123c:	4099      	lsls	r1, r3
 800123e:	000b      	movs	r3, r1
 8001240:	432b      	orrs	r3, r5
 8001242:	e7f2      	b.n	800122a <__aeabi_d2iz+0x3a>
 8001244:	000003fe 	.word	0x000003fe
 8001248:	0000041d 	.word	0x0000041d
 800124c:	7fffffff 	.word	0x7fffffff
 8001250:	00000433 	.word	0x00000433
 8001254:	00000413 	.word	0x00000413
 8001258:	fffffbed 	.word	0xfffffbed

0800125c <__aeabi_i2d>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	2800      	cmp	r0, #0
 8001260:	d016      	beq.n	8001290 <__aeabi_i2d+0x34>
 8001262:	17c3      	asrs	r3, r0, #31
 8001264:	18c5      	adds	r5, r0, r3
 8001266:	405d      	eors	r5, r3
 8001268:	0fc4      	lsrs	r4, r0, #31
 800126a:	0028      	movs	r0, r5
 800126c:	f000 f864 	bl	8001338 <__clzsi2>
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <__aeabi_i2d+0x5c>)
 8001272:	1a1b      	subs	r3, r3, r0
 8001274:	280a      	cmp	r0, #10
 8001276:	dc16      	bgt.n	80012a6 <__aeabi_i2d+0x4a>
 8001278:	0002      	movs	r2, r0
 800127a:	002e      	movs	r6, r5
 800127c:	3215      	adds	r2, #21
 800127e:	4096      	lsls	r6, r2
 8001280:	220b      	movs	r2, #11
 8001282:	1a12      	subs	r2, r2, r0
 8001284:	40d5      	lsrs	r5, r2
 8001286:	055b      	lsls	r3, r3, #21
 8001288:	032d      	lsls	r5, r5, #12
 800128a:	0b2d      	lsrs	r5, r5, #12
 800128c:	0d5b      	lsrs	r3, r3, #21
 800128e:	e003      	b.n	8001298 <__aeabi_i2d+0x3c>
 8001290:	2400      	movs	r4, #0
 8001292:	2300      	movs	r3, #0
 8001294:	2500      	movs	r5, #0
 8001296:	2600      	movs	r6, #0
 8001298:	051b      	lsls	r3, r3, #20
 800129a:	432b      	orrs	r3, r5
 800129c:	07e4      	lsls	r4, r4, #31
 800129e:	4323      	orrs	r3, r4
 80012a0:	0030      	movs	r0, r6
 80012a2:	0019      	movs	r1, r3
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
 80012a6:	380b      	subs	r0, #11
 80012a8:	4085      	lsls	r5, r0
 80012aa:	055b      	lsls	r3, r3, #21
 80012ac:	032d      	lsls	r5, r5, #12
 80012ae:	2600      	movs	r6, #0
 80012b0:	0b2d      	lsrs	r5, r5, #12
 80012b2:	0d5b      	lsrs	r3, r3, #21
 80012b4:	e7f0      	b.n	8001298 <__aeabi_i2d+0x3c>
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	0000041e 	.word	0x0000041e

080012bc <__aeabi_cdrcmple>:
 80012bc:	4684      	mov	ip, r0
 80012be:	0010      	movs	r0, r2
 80012c0:	4662      	mov	r2, ip
 80012c2:	468c      	mov	ip, r1
 80012c4:	0019      	movs	r1, r3
 80012c6:	4663      	mov	r3, ip
 80012c8:	e000      	b.n	80012cc <__aeabi_cdcmpeq>
 80012ca:	46c0      	nop			; (mov r8, r8)

080012cc <__aeabi_cdcmpeq>:
 80012cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80012ce:	f000 f8f9 	bl	80014c4 <__ledf2>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d401      	bmi.n	80012da <__aeabi_cdcmpeq+0xe>
 80012d6:	2100      	movs	r1, #0
 80012d8:	42c8      	cmn	r0, r1
 80012da:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080012dc <__aeabi_dcmpeq>:
 80012dc:	b510      	push	{r4, lr}
 80012de:	f000 f849 	bl	8001374 <__eqdf2>
 80012e2:	4240      	negs	r0, r0
 80012e4:	3001      	adds	r0, #1
 80012e6:	bd10      	pop	{r4, pc}

080012e8 <__aeabi_dcmplt>:
 80012e8:	b510      	push	{r4, lr}
 80012ea:	f000 f8eb 	bl	80014c4 <__ledf2>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	db01      	blt.n	80012f6 <__aeabi_dcmplt+0xe>
 80012f2:	2000      	movs	r0, #0
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	2001      	movs	r0, #1
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)

080012fc <__aeabi_dcmple>:
 80012fc:	b510      	push	{r4, lr}
 80012fe:	f000 f8e1 	bl	80014c4 <__ledf2>
 8001302:	2800      	cmp	r0, #0
 8001304:	dd01      	ble.n	800130a <__aeabi_dcmple+0xe>
 8001306:	2000      	movs	r0, #0
 8001308:	bd10      	pop	{r4, pc}
 800130a:	2001      	movs	r0, #1
 800130c:	bd10      	pop	{r4, pc}
 800130e:	46c0      	nop			; (mov r8, r8)

08001310 <__aeabi_dcmpgt>:
 8001310:	b510      	push	{r4, lr}
 8001312:	f000 f871 	bl	80013f8 <__gedf2>
 8001316:	2800      	cmp	r0, #0
 8001318:	dc01      	bgt.n	800131e <__aeabi_dcmpgt+0xe>
 800131a:	2000      	movs	r0, #0
 800131c:	bd10      	pop	{r4, pc}
 800131e:	2001      	movs	r0, #1
 8001320:	bd10      	pop	{r4, pc}
 8001322:	46c0      	nop			; (mov r8, r8)

08001324 <__aeabi_dcmpge>:
 8001324:	b510      	push	{r4, lr}
 8001326:	f000 f867 	bl	80013f8 <__gedf2>
 800132a:	2800      	cmp	r0, #0
 800132c:	da01      	bge.n	8001332 <__aeabi_dcmpge+0xe>
 800132e:	2000      	movs	r0, #0
 8001330:	bd10      	pop	{r4, pc}
 8001332:	2001      	movs	r0, #1
 8001334:	bd10      	pop	{r4, pc}
 8001336:	46c0      	nop			; (mov r8, r8)

08001338 <__clzsi2>:
 8001338:	211c      	movs	r1, #28
 800133a:	2301      	movs	r3, #1
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	4298      	cmp	r0, r3
 8001340:	d301      	bcc.n	8001346 <__clzsi2+0xe>
 8001342:	0c00      	lsrs	r0, r0, #16
 8001344:	3910      	subs	r1, #16
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	4298      	cmp	r0, r3
 800134a:	d301      	bcc.n	8001350 <__clzsi2+0x18>
 800134c:	0a00      	lsrs	r0, r0, #8
 800134e:	3908      	subs	r1, #8
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	4298      	cmp	r0, r3
 8001354:	d301      	bcc.n	800135a <__clzsi2+0x22>
 8001356:	0900      	lsrs	r0, r0, #4
 8001358:	3904      	subs	r1, #4
 800135a:	a202      	add	r2, pc, #8	; (adr r2, 8001364 <__clzsi2+0x2c>)
 800135c:	5c10      	ldrb	r0, [r2, r0]
 800135e:	1840      	adds	r0, r0, r1
 8001360:	4770      	bx	lr
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	02020304 	.word	0x02020304
 8001368:	01010101 	.word	0x01010101
	...

08001374 <__eqdf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	464e      	mov	r6, r9
 8001378:	4645      	mov	r5, r8
 800137a:	46de      	mov	lr, fp
 800137c:	4657      	mov	r7, sl
 800137e:	4690      	mov	r8, r2
 8001380:	b5e0      	push	{r5, r6, r7, lr}
 8001382:	0017      	movs	r7, r2
 8001384:	031a      	lsls	r2, r3, #12
 8001386:	0b12      	lsrs	r2, r2, #12
 8001388:	0005      	movs	r5, r0
 800138a:	4684      	mov	ip, r0
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <__eqdf2+0x80>)
 800138e:	030e      	lsls	r6, r1, #12
 8001390:	004c      	lsls	r4, r1, #1
 8001392:	4691      	mov	r9, r2
 8001394:	005a      	lsls	r2, r3, #1
 8001396:	0fdb      	lsrs	r3, r3, #31
 8001398:	469b      	mov	fp, r3
 800139a:	0b36      	lsrs	r6, r6, #12
 800139c:	0d64      	lsrs	r4, r4, #21
 800139e:	0fc9      	lsrs	r1, r1, #31
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	4284      	cmp	r4, r0
 80013a4:	d019      	beq.n	80013da <__eqdf2+0x66>
 80013a6:	4282      	cmp	r2, r0
 80013a8:	d010      	beq.n	80013cc <__eqdf2+0x58>
 80013aa:	2001      	movs	r0, #1
 80013ac:	4294      	cmp	r4, r2
 80013ae:	d10e      	bne.n	80013ce <__eqdf2+0x5a>
 80013b0:	454e      	cmp	r6, r9
 80013b2:	d10c      	bne.n	80013ce <__eqdf2+0x5a>
 80013b4:	2001      	movs	r0, #1
 80013b6:	45c4      	cmp	ip, r8
 80013b8:	d109      	bne.n	80013ce <__eqdf2+0x5a>
 80013ba:	4559      	cmp	r1, fp
 80013bc:	d017      	beq.n	80013ee <__eqdf2+0x7a>
 80013be:	2c00      	cmp	r4, #0
 80013c0:	d105      	bne.n	80013ce <__eqdf2+0x5a>
 80013c2:	0030      	movs	r0, r6
 80013c4:	4328      	orrs	r0, r5
 80013c6:	1e43      	subs	r3, r0, #1
 80013c8:	4198      	sbcs	r0, r3
 80013ca:	e000      	b.n	80013ce <__eqdf2+0x5a>
 80013cc:	2001      	movs	r0, #1
 80013ce:	bcf0      	pop	{r4, r5, r6, r7}
 80013d0:	46bb      	mov	fp, r7
 80013d2:	46b2      	mov	sl, r6
 80013d4:	46a9      	mov	r9, r5
 80013d6:	46a0      	mov	r8, r4
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	0033      	movs	r3, r6
 80013dc:	2001      	movs	r0, #1
 80013de:	432b      	orrs	r3, r5
 80013e0:	d1f5      	bne.n	80013ce <__eqdf2+0x5a>
 80013e2:	42a2      	cmp	r2, r4
 80013e4:	d1f3      	bne.n	80013ce <__eqdf2+0x5a>
 80013e6:	464b      	mov	r3, r9
 80013e8:	433b      	orrs	r3, r7
 80013ea:	d1f0      	bne.n	80013ce <__eqdf2+0x5a>
 80013ec:	e7e2      	b.n	80013b4 <__eqdf2+0x40>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7ed      	b.n	80013ce <__eqdf2+0x5a>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	000007ff 	.word	0x000007ff

080013f8 <__gedf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	4647      	mov	r7, r8
 80013fc:	46ce      	mov	lr, r9
 80013fe:	0004      	movs	r4, r0
 8001400:	0018      	movs	r0, r3
 8001402:	0016      	movs	r6, r2
 8001404:	031b      	lsls	r3, r3, #12
 8001406:	0b1b      	lsrs	r3, r3, #12
 8001408:	4d2d      	ldr	r5, [pc, #180]	; (80014c0 <__gedf2+0xc8>)
 800140a:	004a      	lsls	r2, r1, #1
 800140c:	4699      	mov	r9, r3
 800140e:	b580      	push	{r7, lr}
 8001410:	0043      	lsls	r3, r0, #1
 8001412:	030f      	lsls	r7, r1, #12
 8001414:	46a4      	mov	ip, r4
 8001416:	46b0      	mov	r8, r6
 8001418:	0b3f      	lsrs	r7, r7, #12
 800141a:	0d52      	lsrs	r2, r2, #21
 800141c:	0fc9      	lsrs	r1, r1, #31
 800141e:	0d5b      	lsrs	r3, r3, #21
 8001420:	0fc0      	lsrs	r0, r0, #31
 8001422:	42aa      	cmp	r2, r5
 8001424:	d021      	beq.n	800146a <__gedf2+0x72>
 8001426:	42ab      	cmp	r3, r5
 8001428:	d013      	beq.n	8001452 <__gedf2+0x5a>
 800142a:	2a00      	cmp	r2, #0
 800142c:	d122      	bne.n	8001474 <__gedf2+0x7c>
 800142e:	433c      	orrs	r4, r7
 8001430:	2b00      	cmp	r3, #0
 8001432:	d102      	bne.n	800143a <__gedf2+0x42>
 8001434:	464d      	mov	r5, r9
 8001436:	432e      	orrs	r6, r5
 8001438:	d022      	beq.n	8001480 <__gedf2+0x88>
 800143a:	2c00      	cmp	r4, #0
 800143c:	d010      	beq.n	8001460 <__gedf2+0x68>
 800143e:	4281      	cmp	r1, r0
 8001440:	d022      	beq.n	8001488 <__gedf2+0x90>
 8001442:	2002      	movs	r0, #2
 8001444:	3901      	subs	r1, #1
 8001446:	4008      	ands	r0, r1
 8001448:	3801      	subs	r0, #1
 800144a:	bcc0      	pop	{r6, r7}
 800144c:	46b9      	mov	r9, r7
 800144e:	46b0      	mov	r8, r6
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001452:	464d      	mov	r5, r9
 8001454:	432e      	orrs	r6, r5
 8001456:	d129      	bne.n	80014ac <__gedf2+0xb4>
 8001458:	2a00      	cmp	r2, #0
 800145a:	d1f0      	bne.n	800143e <__gedf2+0x46>
 800145c:	433c      	orrs	r4, r7
 800145e:	d1ee      	bne.n	800143e <__gedf2+0x46>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1f2      	bne.n	800144a <__gedf2+0x52>
 8001464:	2001      	movs	r0, #1
 8001466:	4240      	negs	r0, r0
 8001468:	e7ef      	b.n	800144a <__gedf2+0x52>
 800146a:	003d      	movs	r5, r7
 800146c:	4325      	orrs	r5, r4
 800146e:	d11d      	bne.n	80014ac <__gedf2+0xb4>
 8001470:	4293      	cmp	r3, r2
 8001472:	d0ee      	beq.n	8001452 <__gedf2+0x5a>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e2      	bne.n	800143e <__gedf2+0x46>
 8001478:	464c      	mov	r4, r9
 800147a:	4326      	orrs	r6, r4
 800147c:	d1df      	bne.n	800143e <__gedf2+0x46>
 800147e:	e7e0      	b.n	8001442 <__gedf2+0x4a>
 8001480:	2000      	movs	r0, #0
 8001482:	2c00      	cmp	r4, #0
 8001484:	d0e1      	beq.n	800144a <__gedf2+0x52>
 8001486:	e7dc      	b.n	8001442 <__gedf2+0x4a>
 8001488:	429a      	cmp	r2, r3
 800148a:	dc0a      	bgt.n	80014a2 <__gedf2+0xaa>
 800148c:	dbe8      	blt.n	8001460 <__gedf2+0x68>
 800148e:	454f      	cmp	r7, r9
 8001490:	d8d7      	bhi.n	8001442 <__gedf2+0x4a>
 8001492:	d00e      	beq.n	80014b2 <__gedf2+0xba>
 8001494:	2000      	movs	r0, #0
 8001496:	454f      	cmp	r7, r9
 8001498:	d2d7      	bcs.n	800144a <__gedf2+0x52>
 800149a:	2900      	cmp	r1, #0
 800149c:	d0e2      	beq.n	8001464 <__gedf2+0x6c>
 800149e:	0008      	movs	r0, r1
 80014a0:	e7d3      	b.n	800144a <__gedf2+0x52>
 80014a2:	4243      	negs	r3, r0
 80014a4:	4158      	adcs	r0, r3
 80014a6:	0040      	lsls	r0, r0, #1
 80014a8:	3801      	subs	r0, #1
 80014aa:	e7ce      	b.n	800144a <__gedf2+0x52>
 80014ac:	2002      	movs	r0, #2
 80014ae:	4240      	negs	r0, r0
 80014b0:	e7cb      	b.n	800144a <__gedf2+0x52>
 80014b2:	45c4      	cmp	ip, r8
 80014b4:	d8c5      	bhi.n	8001442 <__gedf2+0x4a>
 80014b6:	2000      	movs	r0, #0
 80014b8:	45c4      	cmp	ip, r8
 80014ba:	d2c6      	bcs.n	800144a <__gedf2+0x52>
 80014bc:	e7ed      	b.n	800149a <__gedf2+0xa2>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	000007ff 	.word	0x000007ff

080014c4 <__ledf2>:
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	4647      	mov	r7, r8
 80014c8:	46ce      	mov	lr, r9
 80014ca:	0004      	movs	r4, r0
 80014cc:	0018      	movs	r0, r3
 80014ce:	0016      	movs	r6, r2
 80014d0:	031b      	lsls	r3, r3, #12
 80014d2:	0b1b      	lsrs	r3, r3, #12
 80014d4:	4d2c      	ldr	r5, [pc, #176]	; (8001588 <__ledf2+0xc4>)
 80014d6:	004a      	lsls	r2, r1, #1
 80014d8:	4699      	mov	r9, r3
 80014da:	b580      	push	{r7, lr}
 80014dc:	0043      	lsls	r3, r0, #1
 80014de:	030f      	lsls	r7, r1, #12
 80014e0:	46a4      	mov	ip, r4
 80014e2:	46b0      	mov	r8, r6
 80014e4:	0b3f      	lsrs	r7, r7, #12
 80014e6:	0d52      	lsrs	r2, r2, #21
 80014e8:	0fc9      	lsrs	r1, r1, #31
 80014ea:	0d5b      	lsrs	r3, r3, #21
 80014ec:	0fc0      	lsrs	r0, r0, #31
 80014ee:	42aa      	cmp	r2, r5
 80014f0:	d00d      	beq.n	800150e <__ledf2+0x4a>
 80014f2:	42ab      	cmp	r3, r5
 80014f4:	d010      	beq.n	8001518 <__ledf2+0x54>
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d127      	bne.n	800154a <__ledf2+0x86>
 80014fa:	433c      	orrs	r4, r7
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <__ledf2+0x60>
 8001500:	464d      	mov	r5, r9
 8001502:	432e      	orrs	r6, r5
 8001504:	d10e      	bne.n	8001524 <__ledf2+0x60>
 8001506:	2000      	movs	r0, #0
 8001508:	2c00      	cmp	r4, #0
 800150a:	d015      	beq.n	8001538 <__ledf2+0x74>
 800150c:	e00e      	b.n	800152c <__ledf2+0x68>
 800150e:	003d      	movs	r5, r7
 8001510:	4325      	orrs	r5, r4
 8001512:	d110      	bne.n	8001536 <__ledf2+0x72>
 8001514:	4293      	cmp	r3, r2
 8001516:	d118      	bne.n	800154a <__ledf2+0x86>
 8001518:	464d      	mov	r5, r9
 800151a:	432e      	orrs	r6, r5
 800151c:	d10b      	bne.n	8001536 <__ledf2+0x72>
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <__ledf2+0x64>
 8001522:	433c      	orrs	r4, r7
 8001524:	2c00      	cmp	r4, #0
 8001526:	d00b      	beq.n	8001540 <__ledf2+0x7c>
 8001528:	4281      	cmp	r1, r0
 800152a:	d014      	beq.n	8001556 <__ledf2+0x92>
 800152c:	2002      	movs	r0, #2
 800152e:	3901      	subs	r1, #1
 8001530:	4008      	ands	r0, r1
 8001532:	3801      	subs	r0, #1
 8001534:	e000      	b.n	8001538 <__ledf2+0x74>
 8001536:	2002      	movs	r0, #2
 8001538:	bcc0      	pop	{r6, r7}
 800153a:	46b9      	mov	r9, r7
 800153c:	46b0      	mov	r8, r6
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f9      	bne.n	8001538 <__ledf2+0x74>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7f6      	b.n	8001538 <__ledf2+0x74>
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ec      	bne.n	8001528 <__ledf2+0x64>
 800154e:	464c      	mov	r4, r9
 8001550:	4326      	orrs	r6, r4
 8001552:	d1e9      	bne.n	8001528 <__ledf2+0x64>
 8001554:	e7ea      	b.n	800152c <__ledf2+0x68>
 8001556:	429a      	cmp	r2, r3
 8001558:	dd04      	ble.n	8001564 <__ledf2+0xa0>
 800155a:	4243      	negs	r3, r0
 800155c:	4158      	adcs	r0, r3
 800155e:	0040      	lsls	r0, r0, #1
 8001560:	3801      	subs	r0, #1
 8001562:	e7e9      	b.n	8001538 <__ledf2+0x74>
 8001564:	429a      	cmp	r2, r3
 8001566:	dbeb      	blt.n	8001540 <__ledf2+0x7c>
 8001568:	454f      	cmp	r7, r9
 800156a:	d8df      	bhi.n	800152c <__ledf2+0x68>
 800156c:	d006      	beq.n	800157c <__ledf2+0xb8>
 800156e:	2000      	movs	r0, #0
 8001570:	454f      	cmp	r7, r9
 8001572:	d2e1      	bcs.n	8001538 <__ledf2+0x74>
 8001574:	2900      	cmp	r1, #0
 8001576:	d0e5      	beq.n	8001544 <__ledf2+0x80>
 8001578:	0008      	movs	r0, r1
 800157a:	e7dd      	b.n	8001538 <__ledf2+0x74>
 800157c:	45c4      	cmp	ip, r8
 800157e:	d8d5      	bhi.n	800152c <__ledf2+0x68>
 8001580:	2000      	movs	r0, #0
 8001582:	45c4      	cmp	ip, r8
 8001584:	d2d8      	bcs.n	8001538 <__ledf2+0x74>
 8001586:	e7f5      	b.n	8001574 <__ledf2+0xb0>
 8001588:	000007ff 	.word	0x000007ff

0800158c <read_IMU_temp>:
int16_t Gyro_Y_data = 0;
int16_t Gyro_Z_data = 0;


void read_IMU_temp()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_TEMP_H, 1, temp_H, 1, 1000);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <read_IMU_temp+0x98>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	4823      	ldr	r0, [pc, #140]	; (8001628 <read_IMU_temp+0x9c>)
 800159a:	23fa      	movs	r3, #250	; 0xfa
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2301      	movs	r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	9200      	str	r2, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	2241      	movs	r2, #65	; 0x41
 80015aa:	21d0      	movs	r1, #208	; 0xd0
 80015ac:	f001 f8ac 	bl	8002708 <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_TEMP_H, 1, temp_L, 1, 1000);
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <read_IMU_temp+0xa0>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	481c      	ldr	r0, [pc, #112]	; (8001628 <read_IMU_temp+0x9c>)
 80015b8:	23fa      	movs	r3, #250	; 0xfa
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	2301      	movs	r3, #1
 80015c0:	9301      	str	r3, [sp, #4]
 80015c2:	9200      	str	r2, [sp, #0]
 80015c4:	2301      	movs	r3, #1
 80015c6:	2241      	movs	r2, #65	; 0x41
 80015c8:	21d0      	movs	r1, #208	; 0xd0
 80015ca:	f001 f89d 	bl	8002708 <HAL_I2C_Mem_Read>

	temperature = ((temp_H << 8) + temp_L);
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <read_IMU_temp+0x98>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <read_IMU_temp+0xa0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	18d3      	adds	r3, r2, r3
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <read_IMU_temp+0xa4>)
 80015e6:	801a      	strh	r2, [r3, #0]
	temp_degree = ((temperature/340) + 36.53);
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <read_IMU_temp+0xa4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	5e9b      	ldrsh	r3, [r3, r2]
 80015ee:	22aa      	movs	r2, #170	; 0xaa
 80015f0:	0051      	lsls	r1, r2, #1
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7fe fe10 	bl	8000218 <__divsi3>
 80015f8:	0003      	movs	r3, r0
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff fe2d 	bl	800125c <__aeabi_i2d>
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <read_IMU_temp+0xa8>)
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <read_IMU_temp+0xac>)
 8001606:	f7fe ff11 	bl	800042c <__aeabi_dadd>
 800160a:	0002      	movs	r2, r0
 800160c:	000b      	movs	r3, r1
 800160e:	0010      	movs	r0, r2
 8001610:	0019      	movs	r1, r3
 8001612:	f7fe feed 	bl	80003f0 <__aeabi_d2uiz>
 8001616:	0003      	movs	r3, r0
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <read_IMU_temp+0xb0>)
 800161c:	801a      	strh	r2, [r3, #0]
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000029 	.word	0x20000029
 8001628:	2000003c 	.word	0x2000003c
 800162c:	2000002a 	.word	0x2000002a
 8001630:	2000002c 	.word	0x2000002c
 8001634:	0a3d70a4 	.word	0x0a3d70a4
 8001638:	404243d7 	.word	0x404243d7
 800163c:	2000002e 	.word	0x2000002e

08001640 <Read_IMU_Gyro>:


void Read_IMU_Gyro()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_GYRO_X_H ,1, Rx_gyro_values, 6, 1000);
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <Read_IMU_Gyro+0x68>)
 8001648:	23fa      	movs	r3, #250	; 0xfa
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2306      	movs	r3, #6
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <Read_IMU_Gyro+0x6c>)
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2301      	movs	r3, #1
 8001658:	2243      	movs	r2, #67	; 0x43
 800165a:	21d0      	movs	r1, #208	; 0xd0
 800165c:	f001 f854 	bl	8002708 <HAL_I2C_Mem_Read>
    Gyro_X_data = (int16_t)(Rx_gyro_values[0] << 8 | Rx_gyro_values [1]);
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <Read_IMU_Gyro+0x6c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <Read_IMU_Gyro+0x6c>)
 800166a:	785b      	ldrb	r3, [r3, #1]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21a      	sxth	r2, r3
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Read_IMU_Gyro+0x70>)
 8001674:	801a      	strh	r2, [r3, #0]
    Gyro_Y_data = (int16_t)(Rx_gyro_values[2] << 8 | Rx_gyro_values [3]);
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <Read_IMU_Gyro+0x6c>)
 8001678:	789b      	ldrb	r3, [r3, #2]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <Read_IMU_Gyro+0x6c>)
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <Read_IMU_Gyro+0x74>)
 800168a:	801a      	strh	r2, [r3, #0]
    Gyro_Z_data = (int16_t)(Rx_gyro_values[4] << 8 | Rx_gyro_values [5]);
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <Read_IMU_Gyro+0x6c>)
 800168e:	791b      	ldrb	r3, [r3, #4]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <Read_IMU_Gyro+0x6c>)
 8001696:	795b      	ldrb	r3, [r3, #5]
 8001698:	b21b      	sxth	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <Read_IMU_Gyro+0x78>)
 80016a0:	801a      	strh	r2, [r3, #0]
}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000003c 	.word	0x2000003c
 80016ac:	20000030 	.word	0x20000030
 80016b0:	20000036 	.word	0x20000036
 80016b4:	20000038 	.word	0x20000038
 80016b8:	2000003a 	.word	0x2000003a

080016bc <init_IMU_MPU6050>:


void init_IMU_MPU6050()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af04      	add	r7, sp, #16

	if	(HAL_I2C_IsDeviceReady(&hi2c2, IMU_addr_R, 1, 1000))
 80016c2:	23fa      	movs	r3, #250	; 0xfa
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4829      	ldr	r0, [pc, #164]	; (800176c <init_IMU_MPU6050+0xb0>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	21d0      	movs	r1, #208	; 0xd0
 80016cc:	f001 f950 	bl	8002970 <HAL_I2C_IsDeviceReady>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d047      	beq.n	8001764 <init_IMU_MPU6050+0xa8>

		{
			tx_buffer = 0x07;
 80016d4:	4b26      	ldr	r3, [pc, #152]	; (8001770 <init_IMU_MPU6050+0xb4>)
 80016d6:	2207      	movs	r2, #7
 80016d8:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_SMPLRT_DIV, 1, tx_buffer, 1, 1000);
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <init_IMU_MPU6050+0xb4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	001a      	movs	r2, r3
 80016e0:	4822      	ldr	r0, [pc, #136]	; (800176c <init_IMU_MPU6050+0xb0>)
 80016e2:	23fa      	movs	r3, #250	; 0xfa
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	2301      	movs	r3, #1
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9200      	str	r2, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	2219      	movs	r2, #25
 80016f2:	21d1      	movs	r1, #209	; 0xd1
 80016f4:	f000 feda 	bl	80024ac <HAL_I2C_Mem_Write>
			tx_buffer = 0xE0;
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <init_IMU_MPU6050+0xb4>)
 80016fa:	22e0      	movs	r2, #224	; 0xe0
 80016fc:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_GYRO_CONFIG, 1, tx_buffer, 1, 1000);
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <init_IMU_MPU6050+0xb4>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	001a      	movs	r2, r3
 8001704:	4819      	ldr	r0, [pc, #100]	; (800176c <init_IMU_MPU6050+0xb0>)
 8001706:	23fa      	movs	r3, #250	; 0xfa
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	221b      	movs	r2, #27
 8001716:	21d1      	movs	r1, #209	; 0xd1
 8001718:	f000 fec8 	bl	80024ac <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <init_IMU_MPU6050+0xb4>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_PWR_MNGMT, 1, tx_buffer, 1, 1000);
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <init_IMU_MPU6050+0xb4>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	001a      	movs	r2, r3
 8001728:	4810      	ldr	r0, [pc, #64]	; (800176c <init_IMU_MPU6050+0xb0>)
 800172a:	23fa      	movs	r3, #250	; 0xfa
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9200      	str	r2, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	226b      	movs	r2, #107	; 0x6b
 800173a:	21d1      	movs	r1, #209	; 0xd1
 800173c:	f000 feb6 	bl	80024ac <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <init_IMU_MPU6050+0xb4>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_ACCEL_CONFIG, 1, tx_buffer, 1, 1000);
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <init_IMU_MPU6050+0xb4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	001a      	movs	r2, r3
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <init_IMU_MPU6050+0xb0>)
 800174e:	23fa      	movs	r3, #250	; 0xfa
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	9200      	str	r2, [sp, #0]
 800175a:	2301      	movs	r3, #1
 800175c:	221c      	movs	r2, #28
 800175e:	21d1      	movs	r1, #209	; 0xd1
 8001760:	f000 fea4 	bl	80024ac <HAL_I2C_Mem_Write>
		}

}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	2000003c 	.word	0x2000003c
 8001770:	20000028 	.word	0x20000028

08001774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177a:	f000 fb11 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177e:	f000 f839 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001782:	f000 f93d 	bl	8001a00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001786:	f000 f8d3 	bl	8001930 <MX_TIM2_Init>
  MX_I2C2_Init();
 800178a:	f000 f891 	bl	80018b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  init_IMU_MPU6050();
 800178e:	f7ff ff95 	bl	80016bc <init_IMU_MPU6050>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 8001792:	1dbb      	adds	r3, r7, #6
 8001794:	2200      	movs	r2, #0
 8001796:	801a      	strh	r2, [r3, #0]
 8001798:	e00c      	b.n	80017b4 <main+0x40>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <main+0x7c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1dba      	adds	r2, r7, #6
 80017a0:	8812      	ldrh	r2, [r2, #0]
 80017a2:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f000 fb81 	bl	8001eac <HAL_Delay>
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 80017aa:	1dbb      	adds	r3, r7, #6
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	1dbb      	adds	r3, r7, #6
 80017b0:	3201      	adds	r2, #1
 80017b2:	801a      	strh	r2, [r3, #0]
 80017b4:	1dbb      	adds	r3, r7, #6
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	2bb3      	cmp	r3, #179	; 0xb3
 80017ba:	d9ee      	bls.n	800179a <main+0x26>
	  }


	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	22b4      	movs	r2, #180	; 0xb4
 80017c0:	801a      	strh	r2, [r3, #0]
 80017c2:	e00c      	b.n	80017de <main+0x6a>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <main+0x7c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1d3a      	adds	r2, r7, #4
 80017ca:	8812      	ldrh	r2, [r2, #0]
 80017cc:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f000 fb6c 	bl	8001eac <HAL_Delay>
	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	881a      	ldrh	r2, [r3, #0]
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	3a01      	subs	r2, #1
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1ee      	bne.n	80017c4 <main+0x50>
	  }

	  read_IMU_temp();
 80017e6:	f7ff fed1 	bl	800158c <read_IMU_temp>
	  Read_IMU_Gyro();
 80017ea:	f7ff ff29 	bl	8001640 <Read_IMU_Gyro>
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 80017ee:	e7d0      	b.n	8001792 <main+0x1e>
 80017f0:	20000090 	.word	0x20000090

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b093      	sub	sp, #76	; 0x4c
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	2410      	movs	r4, #16
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	0018      	movs	r0, r3
 8001800:	2338      	movs	r3, #56	; 0x38
 8001802:	001a      	movs	r2, r3
 8001804:	2100      	movs	r1, #0
 8001806:	f003 f85d 	bl	80048c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180a:	003b      	movs	r3, r7
 800180c:	0018      	movs	r0, r3
 800180e:	2310      	movs	r3, #16
 8001810:	001a      	movs	r2, r3
 8001812:	2100      	movs	r1, #0
 8001814:	f003 f856 	bl	80048c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	0018      	movs	r0, r3
 800181e:	f001 fd3f 	bl	80032a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001822:	193b      	adds	r3, r7, r4
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001828:	193b      	adds	r3, r7, r4
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	0052      	lsls	r2, r2, #1
 800182e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001830:	0021      	movs	r1, r4
 8001832:	187b      	adds	r3, r7, r1
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001838:	187b      	adds	r3, r7, r1
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183e:	187b      	adds	r3, r7, r1
 8001840:	2202      	movs	r2, #2
 8001842:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001844:	187b      	adds	r3, r7, r1
 8001846:	2202      	movs	r2, #2
 8001848:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	2208      	movs	r2, #8
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001856:	187b      	adds	r3, r7, r1
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	0292      	lsls	r2, r2, #10
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800185e:	187b      	adds	r3, r7, r1
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	0492      	lsls	r2, r2, #18
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2280      	movs	r2, #128	; 0x80
 800186a:	0592      	lsls	r2, r2, #22
 800186c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	187b      	adds	r3, r7, r1
 8001870:	0018      	movs	r0, r3
 8001872:	f001 fd55 	bl	8003320 <HAL_RCC_OscConfig>
 8001876:	1e03      	subs	r3, r0, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800187a:	f000 f97d 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	003b      	movs	r3, r7
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001884:	003b      	movs	r3, r7
 8001886:	2202      	movs	r2, #2
 8001888:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	003b      	movs	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001890:	003b      	movs	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001896:	003b      	movs	r3, r7
 8001898:	2102      	movs	r1, #2
 800189a:	0018      	movs	r0, r3
 800189c:	f002 f85a 	bl	8003954 <HAL_RCC_ClockConfig>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018a4:	f000 f968 	bl	8001b78 <Error_Handler>
  }
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b013      	add	sp, #76	; 0x4c
 80018ae:	bd90      	pop	{r4, r7, pc}

080018b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_I2C2_Init+0x74>)
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <MX_I2C2_Init+0x78>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x3040F0FF;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_I2C2_Init+0x74>)
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <MX_I2C2_Init+0x7c>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_I2C2_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MX_I2C2_Init+0x74>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018cc:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_I2C2_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <MX_I2C2_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_I2C2_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_I2C2_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_I2C2_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <MX_I2C2_Init+0x74>)
 80018ec:	0018      	movs	r0, r3
 80018ee:	f000 fd37 	bl	8002360 <HAL_I2C_Init>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d001      	beq.n	80018fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018f6:	f000 f93f 	bl	8001b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <MX_I2C2_Init+0x74>)
 80018fc:	2100      	movs	r1, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f001 fc36 	bl	8003170 <HAL_I2CEx_ConfigAnalogFilter>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d001      	beq.n	800190c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001908:	f000 f936 	bl	8001b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <MX_I2C2_Init+0x74>)
 800190e:	2100      	movs	r1, #0
 8001910:	0018      	movs	r0, r3
 8001912:	f001 fc79 	bl	8003208 <HAL_I2CEx_ConfigDigitalFilter>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800191a:	f000 f92d 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000003c 	.word	0x2000003c
 8001928:	40005800 	.word	0x40005800
 800192c:	3040f0ff 	.word	0x3040f0ff

08001930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001936:	231c      	movs	r3, #28
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	0018      	movs	r0, r3
 800193c:	230c      	movs	r3, #12
 800193e:	001a      	movs	r2, r3
 8001940:	2100      	movs	r1, #0
 8001942:	f002 ffbf 	bl	80048c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	003b      	movs	r3, r7
 8001948:	0018      	movs	r0, r3
 800194a:	231c      	movs	r3, #28
 800194c:	001a      	movs	r2, r3
 800194e:	2100      	movs	r1, #0
 8001950:	f002 ffb8 	bl	80048c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <MX_TIM2_Init+0xcc>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	05d2      	lsls	r2, r2, #23
 800195a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800195c:	4b27      	ldr	r3, [pc, #156]	; (80019fc <MX_TIM2_Init+0xcc>)
 800195e:	2200      	movs	r2, #0
 8001960:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <MX_TIM2_Init+0xcc>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <MX_TIM2_Init+0xcc>)
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <MX_TIM2_Init+0xcc>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b21      	ldr	r3, [pc, #132]	; (80019fc <MX_TIM2_Init+0xcc>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800197a:	4b20      	ldr	r3, [pc, #128]	; (80019fc <MX_TIM2_Init+0xcc>)
 800197c:	0018      	movs	r0, r3
 800197e:	f002 f9bf 	bl	8003d00 <HAL_TIM_PWM_Init>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001986:	f000 f8f7 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198a:	211c      	movs	r1, #28
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001998:	187a      	adds	r2, r7, r1
 800199a:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM2_Init+0xcc>)
 800199c:	0011      	movs	r1, r2
 800199e:	0018      	movs	r0, r3
 80019a0:	f002 ff28 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80019a8:	f000 f8e6 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	003b      	movs	r3, r7
 80019ae:	2260      	movs	r2, #96	; 0x60
 80019b0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 80019b2:	003b      	movs	r3, r7
 80019b4:	220f      	movs	r2, #15
 80019b6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b8:	003b      	movs	r3, r7
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	003b      	movs	r3, r7
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c4:	0039      	movs	r1, r7
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_TIM2_Init+0xcc>)
 80019c8:	2208      	movs	r2, #8
 80019ca:	0018      	movs	r0, r3
 80019cc:	f002 face 	bl	8003f6c <HAL_TIM_PWM_ConfigChannel>
 80019d0:	1e03      	subs	r3, r0, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80019d4:	f000 f8d0 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start(&htim2);
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_TIM2_Init+0xcc>)
 80019da:	0018      	movs	r0, r3
 80019dc:	f002 f944 	bl	8003c68 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_TIM2_Init+0xcc>)
 80019e2:	2108      	movs	r1, #8
 80019e4:	0018      	movs	r0, r3
 80019e6:	f002 f9e3 	bl	8003db0 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <MX_TIM2_Init+0xcc>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f955 	bl	8001c9c <HAL_TIM_MspPostInit>

}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b00a      	add	sp, #40	; 0x28
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	20000090 	.word	0x20000090

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	240c      	movs	r4, #12
 8001a08:	193b      	adds	r3, r7, r4
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	2314      	movs	r3, #20
 8001a0e:	001a      	movs	r2, r3
 8001a10:	2100      	movs	r1, #0
 8001a12:	f002 ff57 	bl	80048c4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1a:	4b55      	ldr	r3, [pc, #340]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	2204      	movs	r2, #4
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <MX_GPIO_Init+0x170>)
 8001a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a56:	2202      	movs	r2, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001a5e:	23a0      	movs	r3, #160	; 0xa0
 8001a60:	05db      	lsls	r3, r3, #23
 8001a62:	2200      	movs	r2, #0
 8001a64:	213a      	movs	r1, #58	; 0x3a
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 fc5c 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001a6c:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <MX_GPIO_Init+0x174>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2102      	movs	r1, #2
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 fc56 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	223a      	movs	r2, #58	; 0x3a
 8001a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2201      	movs	r2, #1
 8001a82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	193a      	adds	r2, r7, r4
 8001a92:	23a0      	movs	r3, #160	; 0xa0
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 fadf 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	22c0      	movs	r2, #192	; 0xc0
 8001aa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	193a      	adds	r2, r7, r4
 8001abe:	23a0      	movs	r3, #160	; 0xa0
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 fac9 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	2209      	movs	r2, #9
 8001ace:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	193b      	adds	r3, r7, r4
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001ae2:	193b      	adds	r3, r7, r4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae8:	193b      	adds	r3, r7, r4
 8001aea:	4a22      	ldr	r2, [pc, #136]	; (8001b74 <MX_GPIO_Init+0x174>)
 8001aec:	0019      	movs	r1, r3
 8001aee:	0010      	movs	r0, r2
 8001af0:	f000 fab4 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2202      	movs	r2, #2
 8001af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	2201      	movs	r2, #1
 8001afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <MX_GPIO_Init+0x174>)
 8001b10:	0019      	movs	r1, r3
 8001b12:	0010      	movs	r0, r2
 8001b14:	f000 faa2 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b18:	193b      	adds	r3, r7, r4
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	0212      	lsls	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b20:	193b      	adds	r3, r7, r4
 8001b22:	2203      	movs	r2, #3
 8001b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	193a      	adds	r2, r7, r4
 8001b2e:	23a0      	movs	r3, #160	; 0xa0
 8001b30:	05db      	lsls	r3, r3, #23
 8001b32:	0011      	movs	r1, r2
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 fa91 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3a:	0021      	movs	r1, r4
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	22c0      	movs	r2, #192	; 0xc0
 8001b40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2202      	movs	r2, #2
 8001b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2200      	movs	r2, #0
 8001b52:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <MX_GPIO_Init+0x174>)
 8001b5e:	0019      	movs	r1, r3
 8001b60:	0010      	movs	r0, r2
 8001b62:	f000 fa7b 	bl	800205c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b009      	add	sp, #36	; 0x24
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40021000 	.word	0x40021000
 8001b74:	50000400 	.word	0x50000400

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	430a      	orrs	r2, r1
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_MspInit+0x44>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_MspInit+0x44>)
 8001ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_MspInit+0x44>)
 8001ba8:	2180      	movs	r1, #128	; 0x80
 8001baa:	0549      	lsls	r1, r1, #21
 8001bac:	430a      	orrs	r2, r1
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_MspInit+0x44>)
 8001bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	055b      	lsls	r3, r3, #21
 8001bb8:	4013      	ands	r3, r2
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b002      	add	sp, #8
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b08b      	sub	sp, #44	; 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	2414      	movs	r4, #20
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	0018      	movs	r0, r3
 8001bda:	2314      	movs	r3, #20
 8001bdc:	001a      	movs	r2, r3
 8001bde:	2100      	movs	r1, #0
 8001be0:	f002 fe70 	bl	80048c4 <memset>
  if(hi2c->Instance==I2C2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1c      	ldr	r2, [pc, #112]	; (8001c5c <HAL_I2C_MspInit+0x90>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d131      	bne.n	8001c52 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c06:	193b      	adds	r3, r7, r4
 8001c08:	22c0      	movs	r2, #192	; 0xc0
 8001c0a:	0152      	lsls	r2, r2, #5
 8001c0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0e:	0021      	movs	r1, r4
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	2212      	movs	r2, #18
 8001c14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	187b      	adds	r3, r7, r1
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	2206      	movs	r2, #6
 8001c26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	187a      	adds	r2, r7, r1
 8001c2a:	23a0      	movs	r3, #160	; 0xa0
 8001c2c:	05db      	lsls	r3, r3, #23
 8001c2e:	0011      	movs	r1, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 fa13 	bl	800205c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	03c9      	lsls	r1, r1, #15
 8001c40:	430a      	orrs	r2, r1
 8001c42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_I2C_MspInit+0x94>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	03db      	lsls	r3, r3, #15
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b00b      	add	sp, #44	; 0x2c
 8001c58:	bd90      	pop	{r4, r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40005800 	.word	0x40005800
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	05db      	lsls	r3, r3, #23
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d10b      	bne.n	8001c90 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_TIM_PWM_MspInit+0x34>)
 8001c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_TIM_PWM_MspInit+0x34>)
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_TIM_PWM_MspInit+0x34>)
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000

08001c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	240c      	movs	r4, #12
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	2314      	movs	r3, #20
 8001cac:	001a      	movs	r2, r3
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f002 fe08 	bl	80048c4 <memset>
  if(htim->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	05db      	lsls	r3, r3, #23
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d122      	bne.n	8001d06 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_TIM_MspPostInit+0x74>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_TIM_MspPostInit+0x74>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_TIM_MspPostInit+0x74>)
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd8:	0021      	movs	r1, r4
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2204      	movs	r2, #4
 8001cde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	187a      	adds	r2, r7, r1
 8001cfa:	23a0      	movs	r3, #160	; 0xa0
 8001cfc:	05db      	lsls	r3, r3, #23
 8001cfe:	0011      	movs	r1, r2
 8001d00:	0018      	movs	r0, r3
 8001d02:	f000 f9ab 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b009      	add	sp, #36	; 0x24
 8001d0c:	bd90      	pop	{r4, r7, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d24:	46c0      	nop			; (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d38:	f000 f89c 	bl	8001e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f7ff fff7 	bl	8001d42 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d7a:	f002 fdab 	bl	80048d4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d7e:	f7ff fcf9 	bl	8001774 <main>

08001d82 <LoopForever>:

LoopForever:
  b LoopForever
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
  ldr   r0, =_estack
 8001d84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d90:	080049d0 	.word	0x080049d0
  ldr r2, =_sbss
 8001d94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d98:	200000e0 	.word	0x200000e0

08001d9c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_Init+0x3c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_Init+0x3c>)
 8001db2:	2180      	movs	r1, #128	; 0x80
 8001db4:	0049      	lsls	r1, r1, #1
 8001db6:	430a      	orrs	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f000 f810 	bl	8001de0 <HAL_InitTick>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff feda 	bl	8001b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	1dfb      	adds	r3, r7, #7
 8001dd2:	781b      	ldrb	r3, [r3, #0]
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <HAL_InitTick+0x88>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d02b      	beq.n	8001e50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_InitTick+0x8c>)
 8001dfa:	681c      	ldr	r4, [r3, #0]
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <HAL_InitTick+0x88>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	0019      	movs	r1, r3
 8001e02:	23fa      	movs	r3, #250	; 0xfa
 8001e04:	0098      	lsls	r0, r3, #2
 8001e06:	f7fe f97d 	bl	8000104 <__udivsi3>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	0020      	movs	r0, r4
 8001e10:	f7fe f978 	bl	8000104 <__udivsi3>
 8001e14:	0003      	movs	r3, r0
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 f913 	bl	8002042 <HAL_SYSTICK_Config>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d112      	bne.n	8001e46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d80a      	bhi.n	8001e3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f000 f8f2 	bl	8002018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_InitTick+0x90>)
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e00d      	b.n	8001e58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e008      	b.n	8001e58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e003      	b.n	8001e58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e50:	230f      	movs	r3, #15
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e58:	230f      	movs	r3, #15
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	781b      	ldrb	r3, [r3, #0]
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b005      	add	sp, #20
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_IncTick+0x1c>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <HAL_IncTick+0x20>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	18d2      	adds	r2, r2, r3
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_IncTick+0x20>)
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	46c0      	nop			; (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	20000008 	.word	0x20000008
 8001e94:	200000dc 	.word	0x200000dc

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <HAL_GetTick+0x10>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	200000dc 	.word	0x200000dc

08001eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fff0 	bl	8001e98 <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_Delay+0x44>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	001a      	movs	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	f7ff ffe0 	bl	8001e98 <HAL_GetTick>
 8001ed8:	0002      	movs	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8f7      	bhi.n	8001ed4 <HAL_Delay+0x28>
  {
  }
}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b004      	add	sp, #16
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	0002      	movs	r2, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b7f      	cmp	r3, #127	; 0x7f
 8001f08:	d828      	bhi.n	8001f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f0a:	4a2f      	ldr	r2, [pc, #188]	; (8001fc8 <__NVIC_SetPriority+0xd4>)
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	33c0      	adds	r3, #192	; 0xc0
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	589b      	ldr	r3, [r3, r2]
 8001f1a:	1dfa      	adds	r2, r7, #7
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	0011      	movs	r1, r2
 8001f20:	2203      	movs	r2, #3
 8001f22:	400a      	ands	r2, r1
 8001f24:	00d2      	lsls	r2, r2, #3
 8001f26:	21ff      	movs	r1, #255	; 0xff
 8001f28:	4091      	lsls	r1, r2
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	43d2      	mvns	r2, r2
 8001f2e:	401a      	ands	r2, r3
 8001f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	401a      	ands	r2, r3
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	2303      	movs	r3, #3
 8001f42:	4003      	ands	r3, r0
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f48:	481f      	ldr	r0, [pc, #124]	; (8001fc8 <__NVIC_SetPriority+0xd4>)
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	430a      	orrs	r2, r1
 8001f54:	33c0      	adds	r3, #192	; 0xc0
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f5a:	e031      	b.n	8001fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <__NVIC_SetPriority+0xd8>)
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	0019      	movs	r1, r3
 8001f64:	230f      	movs	r3, #15
 8001f66:	400b      	ands	r3, r1
 8001f68:	3b08      	subs	r3, #8
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3306      	adds	r3, #6
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	3304      	adds	r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1dfa      	adds	r2, r7, #7
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	400a      	ands	r2, r1
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	21ff      	movs	r1, #255	; 0xff
 8001f84:	4091      	lsls	r1, r2
 8001f86:	000a      	movs	r2, r1
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	22ff      	movs	r2, #255	; 0xff
 8001f94:	401a      	ands	r2, r3
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	4003      	ands	r3, r0
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa4:	4809      	ldr	r0, [pc, #36]	; (8001fcc <__NVIC_SetPriority+0xd8>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	001c      	movs	r4, r3
 8001fac:	230f      	movs	r3, #15
 8001fae:	4023      	ands	r3, r4
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	3306      	adds	r3, #6
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	18c3      	adds	r3, r0, r3
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	601a      	str	r2, [r3, #0]
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b003      	add	sp, #12
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	1e5a      	subs	r2, r3, #1
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	045b      	lsls	r3, r3, #17
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d301      	bcc.n	8001fe8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e010      	b.n	800200a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <SysTick_Config+0x44>)
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	3a01      	subs	r2, #1
 8001fee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	2103      	movs	r1, #3
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff ff7c 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x44>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x44>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	210f      	movs	r1, #15
 8002024:	187b      	adds	r3, r7, r1
 8002026:	1c02      	adds	r2, r0, #0
 8002028:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	187b      	adds	r3, r7, r1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b25b      	sxtb	r3, r3
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff ffbf 	bl	8001fd0 <SysTick_Config>
 8002052:	0003      	movs	r3, r0
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e147      	b.n	80022fc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4091      	lsls	r1, r2
 8002076:	000a      	movs	r2, r1
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d100      	bne.n	8002084 <HAL_GPIO_Init+0x28>
 8002082:	e138      	b.n	80022f6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	4013      	ands	r3, r2
 800208c:	2b01      	cmp	r3, #1
 800208e:	d005      	beq.n	800209c <HAL_GPIO_Init+0x40>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2203      	movs	r2, #3
 8002096:	4013      	ands	r3, r2
 8002098:	2b02      	cmp	r3, #2
 800209a:	d130      	bne.n	80020fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	409a      	lsls	r2, r3
 80020aa:	0013      	movs	r3, r2
 80020ac:	43da      	mvns	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	409a      	lsls	r2, r3
 80020be:	0013      	movs	r3, r2
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d2:	2201      	movs	r2, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	2201      	movs	r2, #1
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
 80020f0:	0013      	movs	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2203      	movs	r2, #3
 8002104:	4013      	ands	r3, r2
 8002106:	2b03      	cmp	r3, #3
 8002108:	d017      	beq.n	800213a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	409a      	lsls	r2, r3
 800212c:	0013      	movs	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2203      	movs	r2, #3
 8002140:	4013      	ands	r3, r2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d123      	bne.n	800218e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	58d3      	ldr	r3, [r2, r3]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2207      	movs	r2, #7
 8002158:	4013      	ands	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	409a      	lsls	r2, r3
 8002160:	0013      	movs	r3, r2
 8002162:	43da      	mvns	r2, r3
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2107      	movs	r1, #7
 8002172:	400b      	ands	r3, r1
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	409a      	lsls	r2, r3
 8002178:	0013      	movs	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	6939      	ldr	r1, [r7, #16]
 800218c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	43da      	mvns	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2203      	movs	r2, #3
 80021ac:	401a      	ands	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	23c0      	movs	r3, #192	; 0xc0
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d100      	bne.n	80021d0 <HAL_GPIO_Init+0x174>
 80021ce:	e092      	b.n	80022f6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80021d0:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3318      	adds	r3, #24
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	589b      	ldr	r3, [r3, r2]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4013      	ands	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	220f      	movs	r2, #15
 80021e8:	409a      	lsls	r2, r3
 80021ea:	0013      	movs	r3, r2
 80021ec:	43da      	mvns	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x1ca>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a45      	ldr	r2, [pc, #276]	; (8002318 <HAL_GPIO_Init+0x2bc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1c6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a44      	ldr	r2, [pc, #272]	; (800231c <HAL_GPIO_Init+0x2c0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1c2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a43      	ldr	r2, [pc, #268]	; (8002320 <HAL_GPIO_Init+0x2c4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1be>
 8002216:	2303      	movs	r3, #3
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x1cc>
 800221a:	2305      	movs	r3, #5
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x1cc>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x1cc>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x1cc>
 8002226:	2300      	movs	r3, #0
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	2103      	movs	r1, #3
 800222c:	400a      	ands	r2, r1
 800222e:	00d2      	lsls	r2, r2, #3
 8002230:	4093      	lsls	r3, r2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002238:	4936      	ldr	r1, [pc, #216]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3318      	adds	r3, #24
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43da      	mvns	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	035b      	lsls	r3, r3, #13
 800225e:	4013      	ands	r3, r2
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	43da      	mvns	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	039b      	lsls	r3, r3, #14
 8002288:	4013      	ands	r3, r2
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 800229c:	2384      	movs	r3, #132	; 0x84
 800229e:	58d3      	ldr	r3, [r2, r3]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43da      	mvns	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	029b      	lsls	r3, r3, #10
 80022b4:	4013      	ands	r3, r2
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c0:	4914      	ldr	r1, [pc, #80]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80022c2:	2284      	movs	r2, #132	; 0x84
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	58d3      	ldr	r3, [r2, r3]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43da      	mvns	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	025b      	lsls	r3, r3, #9
 80022e2:	4013      	ands	r3, r2
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ee:	4909      	ldr	r1, [pc, #36]	; (8002314 <HAL_GPIO_Init+0x2b8>)
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	40da      	lsrs	r2, r3
 8002304:	1e13      	subs	r3, r2, #0
 8002306:	d000      	beq.n	800230a <HAL_GPIO_Init+0x2ae>
 8002308:	e6b0      	b.n	800206c <HAL_GPIO_Init+0x10>
  }
}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	46c0      	nop			; (mov r8, r8)
 800230e:	46bd      	mov	sp, r7
 8002310:	b006      	add	sp, #24
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021800 	.word	0x40021800
 8002318:	50000400 	.word	0x50000400
 800231c:	50000800 	.word	0x50000800
 8002320:	50000c00 	.word	0x50000c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	0008      	movs	r0, r1
 800232e:	0011      	movs	r1, r2
 8002330:	1cbb      	adds	r3, r7, #2
 8002332:	1c02      	adds	r2, r0, #0
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	1c7b      	adds	r3, r7, #1
 8002338:	1c0a      	adds	r2, r1, #0
 800233a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800233c:	1c7b      	adds	r3, r7, #1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002344:	1cbb      	adds	r3, r7, #2
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800234e:	1cbb      	adds	r3, r7, #2
 8002350:	881a      	ldrh	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e08f      	b.n	8002492 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2241      	movs	r2, #65	; 0x41
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f7ff fc1f 	bl	8001bcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2241      	movs	r2, #65	; 0x41
 8002392:	2124      	movs	r1, #36	; 0x24
 8002394:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	438a      	bics	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	493b      	ldr	r1, [pc, #236]	; (800249c <HAL_I2C_Init+0x13c>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4938      	ldr	r1, [pc, #224]	; (80024a0 <HAL_I2C_Init+0x140>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d108      	bne.n	80023de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2180      	movs	r1, #128	; 0x80
 80023d6:	0209      	lsls	r1, r1, #8
 80023d8:	430a      	orrs	r2, r1
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e007      	b.n	80023ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2184      	movs	r1, #132	; 0x84
 80023e8:	0209      	lsls	r1, r1, #8
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d109      	bne.n	800240a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0109      	lsls	r1, r1, #4
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	e007      	b.n	800241a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4923      	ldr	r1, [pc, #140]	; (80024a4 <HAL_I2C_Init+0x144>)
 8002416:	400a      	ands	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4920      	ldr	r1, [pc, #128]	; (80024a8 <HAL_I2C_Init+0x148>)
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	491a      	ldr	r1, [pc, #104]	; (80024a0 <HAL_I2C_Init+0x140>)
 8002436:	400a      	ands	r2, r1
 8002438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69d9      	ldr	r1, [r3, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2101      	movs	r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2241      	movs	r2, #65	; 0x41
 800247e:	2120      	movs	r1, #32
 8002480:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2242      	movs	r2, #66	; 0x42
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b002      	add	sp, #8
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	f0ffffff 	.word	0xf0ffffff
 80024a0:	ffff7fff 	.word	0xffff7fff
 80024a4:	fffff7ff 	.word	0xfffff7ff
 80024a8:	02008000 	.word	0x02008000

080024ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	000c      	movs	r4, r1
 80024b6:	0010      	movs	r0, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	230a      	movs	r3, #10
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	1c22      	adds	r2, r4, #0
 80024c0:	801a      	strh	r2, [r3, #0]
 80024c2:	2308      	movs	r3, #8
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	1c02      	adds	r2, r0, #0
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	1c0a      	adds	r2, r1, #0
 80024ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2241      	movs	r2, #65	; 0x41
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d000      	beq.n	80024de <HAL_I2C_Mem_Write+0x32>
 80024dc:	e10c      	b.n	80026f8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_I2C_Mem_Write+0x42>
 80024e4:	232c      	movs	r3, #44	; 0x2c
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2280      	movs	r2, #128	; 0x80
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0ff      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Mem_Write+0x5c>
 8002504:	2302      	movs	r3, #2
 8002506:	e0f8      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	2101      	movs	r1, #1
 800250e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002510:	f7ff fcc2 	bl	8001e98 <HAL_GetTick>
 8002514:	0003      	movs	r3, r0
 8002516:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	0219      	lsls	r1, r3, #8
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	2319      	movs	r3, #25
 8002524:	2201      	movs	r2, #1
 8002526:	f000 fc07 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e3      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2241      	movs	r2, #65	; 0x41
 8002536:	2121      	movs	r1, #33	; 0x21
 8002538:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2242      	movs	r2, #66	; 0x42
 800253e:	2140      	movs	r1, #64	; 0x40
 8002540:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	222c      	movs	r2, #44	; 0x2c
 8002552:	18ba      	adds	r2, r7, r2
 8002554:	8812      	ldrh	r2, [r2, #0]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	881c      	ldrh	r4, [r3, #0]
 8002562:	2308      	movs	r3, #8
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	230a      	movs	r3, #10
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	8819      	ldrh	r1, [r3, #0]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	0023      	movs	r3, r4
 800257a:	f000 faf5 	bl	8002b68 <I2C_RequestMemoryWrite>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d005      	beq.n	800258e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2240      	movs	r2, #64	; 0x40
 8002586:	2100      	movs	r1, #0
 8002588:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e0b5      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2bff      	cmp	r3, #255	; 0xff
 8002596:	d911      	bls.n	80025bc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	22ff      	movs	r2, #255	; 0xff
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	045c      	lsls	r4, r3, #17
 80025a8:	230a      	movs	r3, #10
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	8819      	ldrh	r1, [r3, #0]
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	0023      	movs	r3, r4
 80025b6:	f000 fda1 	bl	80030fc <I2C_TransferConfig>
 80025ba:	e012      	b.n	80025e2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	049c      	lsls	r4, r3, #18
 80025d0:	230a      	movs	r3, #10
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	8819      	ldrh	r1, [r3, #0]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	0023      	movs	r3, r4
 80025de:	f000 fd8d 	bl	80030fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fbfd 	bl	8002de8 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e081      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d03a      	beq.n	80026a6 <HAL_I2C_Mem_Write+0x1fa>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	2b00      	cmp	r3, #0
 8002636:	d136      	bne.n	80026a6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	0013      	movs	r3, r2
 8002642:	2200      	movs	r2, #0
 8002644:	2180      	movs	r1, #128	; 0x80
 8002646:	f000 fb77 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 800264a:	1e03      	subs	r3, r0, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e053      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	2bff      	cmp	r3, #255	; 0xff
 800265a:	d911      	bls.n	8002680 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	b2da      	uxtb	r2, r3
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	045c      	lsls	r4, r3, #17
 800266c:	230a      	movs	r3, #10
 800266e:	18fb      	adds	r3, r7, r3
 8002670:	8819      	ldrh	r1, [r3, #0]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	2300      	movs	r3, #0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	0023      	movs	r3, r4
 800267a:	f000 fd3f 	bl	80030fc <I2C_TransferConfig>
 800267e:	e012      	b.n	80026a6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	049c      	lsls	r4, r3, #18
 8002694:	230a      	movs	r3, #10
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	8819      	ldrh	r1, [r3, #0]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	2300      	movs	r3, #0
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	0023      	movs	r3, r4
 80026a2:	f000 fd2b 	bl	80030fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d198      	bne.n	80025e2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 fbdc 	bl	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e01a      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2220      	movs	r2, #32
 80026ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	490b      	ldr	r1, [pc, #44]	; (8002704 <HAL_I2C_Mem_Write+0x258>)
 80026d8:	400a      	ands	r2, r1
 80026da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2241      	movs	r2, #65	; 0x41
 80026e0:	2120      	movs	r1, #32
 80026e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2242      	movs	r2, #66	; 0x42
 80026e8:	2100      	movs	r1, #0
 80026ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2240      	movs	r2, #64	; 0x40
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b007      	add	sp, #28
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	fe00e800 	.word	0xfe00e800

08002708 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	b089      	sub	sp, #36	; 0x24
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	000c      	movs	r4, r1
 8002712:	0010      	movs	r0, r2
 8002714:	0019      	movs	r1, r3
 8002716:	230a      	movs	r3, #10
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	1c22      	adds	r2, r4, #0
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	2308      	movs	r3, #8
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	1c02      	adds	r2, r0, #0
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	1dbb      	adds	r3, r7, #6
 8002728:	1c0a      	adds	r2, r1, #0
 800272a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2241      	movs	r2, #65	; 0x41
 8002730:	5c9b      	ldrb	r3, [r3, r2]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b20      	cmp	r3, #32
 8002736:	d000      	beq.n	800273a <HAL_I2C_Mem_Read+0x32>
 8002738:	e110      	b.n	800295c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_I2C_Mem_Read+0x42>
 8002740:	232c      	movs	r3, #44	; 0x2c
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e103      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	5c9b      	ldrb	r3, [r3, r2]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_I2C_Mem_Read+0x5c>
 8002760:	2302      	movs	r3, #2
 8002762:	e0fc      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	2101      	movs	r1, #1
 800276a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800276c:	f7ff fb94 	bl	8001e98 <HAL_GetTick>
 8002770:	0003      	movs	r3, r0
 8002772:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	0219      	lsls	r1, r3, #8
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2319      	movs	r3, #25
 8002780:	2201      	movs	r2, #1
 8002782:	f000 fad9 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0e7      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2241      	movs	r2, #65	; 0x41
 8002792:	2122      	movs	r1, #34	; 0x22
 8002794:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2242      	movs	r2, #66	; 0x42
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	222c      	movs	r2, #44	; 0x2c
 80027ae:	18ba      	adds	r2, r7, r2
 80027b0:	8812      	ldrh	r2, [r2, #0]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ba:	1dbb      	adds	r3, r7, #6
 80027bc:	881c      	ldrh	r4, [r3, #0]
 80027be:	2308      	movs	r3, #8
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	230a      	movs	r3, #10
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	8819      	ldrh	r1, [r3, #0]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	0023      	movs	r3, r4
 80027d6:	f000 fa2b 	bl	8002c30 <I2C_RequestMemoryRead>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d005      	beq.n	80027ea <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2240      	movs	r2, #64	; 0x40
 80027e2:	2100      	movs	r1, #0
 80027e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0b9      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2bff      	cmp	r3, #255	; 0xff
 80027f2:	d911      	bls.n	8002818 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	22ff      	movs	r2, #255	; 0xff
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	045c      	lsls	r4, r3, #17
 8002804:	230a      	movs	r3, #10
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	8819      	ldrh	r1, [r3, #0]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	4b56      	ldr	r3, [pc, #344]	; (8002968 <HAL_I2C_Mem_Read+0x260>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	0023      	movs	r3, r4
 8002812:	f000 fc73 	bl	80030fc <I2C_TransferConfig>
 8002816:	e012      	b.n	800283e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	049c      	lsls	r4, r3, #18
 800282c:	230a      	movs	r3, #10
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	8819      	ldrh	r1, [r3, #0]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_I2C_Mem_Read+0x260>)
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	0023      	movs	r3, r4
 800283a:	f000 fc5f 	bl	80030fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800283e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	0013      	movs	r3, r2
 8002848:	2200      	movs	r2, #0
 800284a:	2104      	movs	r1, #4
 800284c:	f000 fa74 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e082      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d03a      	beq.n	800290a <HAL_I2C_Mem_Read+0x202>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d136      	bne.n	800290a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800289c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	0013      	movs	r3, r2
 80028a6:	2200      	movs	r2, #0
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	f000 fa45 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e053      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2bff      	cmp	r3, #255	; 0xff
 80028be:	d911      	bls.n	80028e4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	22ff      	movs	r2, #255	; 0xff
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	045c      	lsls	r4, r3, #17
 80028d0:	230a      	movs	r3, #10
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	8819      	ldrh	r1, [r3, #0]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	2300      	movs	r3, #0
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	0023      	movs	r3, r4
 80028de:	f000 fc0d 	bl	80030fc <I2C_TransferConfig>
 80028e2:	e012      	b.n	800290a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	049c      	lsls	r4, r3, #18
 80028f8:	230a      	movs	r3, #10
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	8819      	ldrh	r1, [r3, #0]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	0023      	movs	r3, r4
 8002906:	f000 fbf9 	bl	80030fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d194      	bne.n	800283e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	0018      	movs	r0, r3
 800291c:	f000 faaa 	bl	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002920:	1e03      	subs	r3, r0, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01a      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2220      	movs	r2, #32
 800292e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	490c      	ldr	r1, [pc, #48]	; (800296c <HAL_I2C_Mem_Read+0x264>)
 800293c:	400a      	ands	r2, r1
 800293e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2241      	movs	r2, #65	; 0x41
 8002944:	2120      	movs	r1, #32
 8002946:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2242      	movs	r2, #66	; 0x42
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	2100      	movs	r1, #0
 8002956:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b007      	add	sp, #28
 8002964:	bd90      	pop	{r4, r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	80002400 	.word	0x80002400
 800296c:	fe00e800 	.word	0xfe00e800

08002970 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	230a      	movs	r3, #10
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	1c0a      	adds	r2, r1, #0
 8002982:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2241      	movs	r2, #65	; 0x41
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b20      	cmp	r3, #32
 8002992:	d000      	beq.n	8002996 <HAL_I2C_IsDeviceReady+0x26>
 8002994:	e0df      	b.n	8002b56 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	401a      	ands	r2, r3
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
 80029ac:	e0d4      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	5c9b      	ldrb	r3, [r3, r2]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <HAL_I2C_IsDeviceReady+0x4c>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e0cd      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	2101      	movs	r1, #1
 80029c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2241      	movs	r2, #65	; 0x41
 80029c8:	2124      	movs	r1, #36	; 0x24
 80029ca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_I2C_IsDeviceReady+0x7a>
 80029da:	230a      	movs	r3, #10
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	059b      	lsls	r3, r3, #22
 80029e2:	0d9b      	lsrs	r3, r3, #22
 80029e4:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_I2C_IsDeviceReady+0x1f0>)
 80029e6:	431a      	orrs	r2, r3
 80029e8:	e006      	b.n	80029f8 <HAL_I2C_IsDeviceReady+0x88>
 80029ea:	230a      	movs	r3, #10
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	059b      	lsls	r3, r3, #22
 80029f2:	0d9b      	lsrs	r3, r3, #22
 80029f4:	4a5b      	ldr	r2, [pc, #364]	; (8002b64 <HAL_I2C_IsDeviceReady+0x1f4>)
 80029f6:	431a      	orrs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80029fe:	f7ff fa4b 	bl	8001e98 <HAL_GetTick>
 8002a02:	0003      	movs	r3, r0
 8002a04:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	4013      	ands	r3, r2
 8002a10:	3b20      	subs	r3, #32
 8002a12:	425a      	negs	r2, r3
 8002a14:	4153      	adcs	r3, r2
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	231f      	movs	r3, #31
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2210      	movs	r2, #16
 8002a26:	4013      	ands	r3, r2
 8002a28:	3b10      	subs	r3, #16
 8002a2a:	425a      	negs	r2, r3
 8002a2c:	4153      	adcs	r3, r2
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	231e      	movs	r3, #30
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a36:	e035      	b.n	8002aa4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	d01a      	beq.n	8002a74 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a3e:	f7ff fa2b 	bl	8001e98 <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <HAL_I2C_IsDeviceReady+0xe4>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10f      	bne.n	8002a74 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2241      	movs	r2, #65	; 0x41
 8002a58:	2120      	movs	r1, #32
 8002a5a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	2220      	movs	r2, #32
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e071      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	3b20      	subs	r3, #32
 8002a80:	425a      	negs	r2, r3
 8002a82:	4153      	adcs	r3, r2
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	231f      	movs	r3, #31
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2210      	movs	r2, #16
 8002a94:	4013      	ands	r3, r2
 8002a96:	3b10      	subs	r3, #16
 8002a98:	425a      	negs	r2, r3
 8002a9a:	4153      	adcs	r3, r2
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	231e      	movs	r3, #30
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002aa4:	231f      	movs	r3, #31
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d104      	bne.n	8002ab8 <HAL_I2C_IsDeviceReady+0x148>
 8002aae:	231e      	movs	r3, #30
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0bf      	beq.n	8002a38 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2210      	movs	r2, #16
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d01a      	beq.n	8002afc <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	0013      	movs	r3, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2120      	movs	r1, #32
 8002ad4:	f000 f930 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e03b      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2241      	movs	r2, #65	; 0x41
 8002aec:	2120      	movs	r1, #32
 8002aee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	2100      	movs	r1, #0
 8002af6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e02d      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	0013      	movs	r3, r2
 8002b06:	2200      	movs	r2, #0
 8002b08:	2120      	movs	r1, #32
 8002b0a:	f000 f915 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e020      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2220      	movs	r2, #32
 8002b24:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d900      	bls.n	8002b36 <HAL_I2C_IsDeviceReady+0x1c6>
 8002b34:	e74d      	b.n	80029d2 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2241      	movs	r2, #65	; 0x41
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	2220      	movs	r2, #32
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
  }
}
 8002b58:	0018      	movs	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b008      	add	sp, #32
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	02002000 	.word	0x02002000
 8002b64:	02002800 	.word	0x02002800

08002b68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	000c      	movs	r4, r1
 8002b72:	0010      	movs	r0, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	250a      	movs	r5, #10
 8002b78:	197b      	adds	r3, r7, r5
 8002b7a:	1c22      	adds	r2, r4, #0
 8002b7c:	801a      	strh	r2, [r3, #0]
 8002b7e:	2308      	movs	r3, #8
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	1c02      	adds	r2, r0, #0
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	1dbb      	adds	r3, r7, #6
 8002b88:	1c0a      	adds	r2, r1, #0
 8002b8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b8c:	1dbb      	adds	r3, r7, #6
 8002b8e:	881b      	ldrh	r3, [r3, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	045c      	lsls	r4, r3, #17
 8002b96:	197b      	adds	r3, r7, r5
 8002b98:	8819      	ldrh	r1, [r3, #0]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <I2C_RequestMemoryWrite+0xc4>)
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	0023      	movs	r3, r4
 8002ba2:	f000 faab 	bl	80030fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	6a39      	ldr	r1, [r7, #32]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 f91b 	bl	8002de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e033      	b.n	8002c22 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bba:	1dbb      	adds	r3, r7, #6
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
 8002bd0:	e019      	b.n	8002c06 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	6a39      	ldr	r1, [r7, #32]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 f8fc 	bl	8002de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d001      	beq.n	8002bf8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e014      	b.n	8002c22 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	0013      	movs	r3, r2
 8002c10:	2200      	movs	r2, #0
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	f000 f890 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d001      	beq.n	8002c20 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b004      	add	sp, #16
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	80002000 	.word	0x80002000

08002c30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	000c      	movs	r4, r1
 8002c3a:	0010      	movs	r0, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	250a      	movs	r5, #10
 8002c40:	197b      	adds	r3, r7, r5
 8002c42:	1c22      	adds	r2, r4, #0
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	2308      	movs	r3, #8
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	1c02      	adds	r2, r0, #0
 8002c4c:	801a      	strh	r2, [r3, #0]
 8002c4e:	1dbb      	adds	r3, r7, #6
 8002c50:	1c0a      	adds	r2, r1, #0
 8002c52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c54:	1dbb      	adds	r3, r7, #6
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	197b      	adds	r3, r7, r5
 8002c5c:	8819      	ldrh	r1, [r3, #0]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <I2C_RequestMemoryRead+0xc0>)
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	f000 fa49 	bl	80030fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	6a39      	ldr	r1, [r7, #32]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 f8b9 	bl	8002de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e033      	b.n	8002ce6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c7e:	1dbb      	adds	r3, r7, #6
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c86:	2308      	movs	r3, #8
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
 8002c94:	e019      	b.n	8002cca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c96:	2308      	movs	r3, #8
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002caa:	6a39      	ldr	r1, [r7, #32]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f89a 	bl	8002de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d001      	beq.n	8002cbc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e014      	b.n	8002ce6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a3a      	ldr	r2, [r7, #32]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	f000 f82e 	bl	8002d38 <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b004      	add	sp, #16
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	80002000 	.word	0x80002000

08002cf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2202      	movs	r2, #2
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d103      	bne.n	8002d12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d007      	beq.n	8002d30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
  }
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	1dfb      	adds	r3, r7, #7
 8002d46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d48:	e03a      	b.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	6839      	ldr	r1, [r7, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 f8d3 	bl	8002efc <I2C_IsErrorOccurred>
 8002d56:	1e03      	subs	r3, r0, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e040      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	d02d      	beq.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d64:	f7ff f898 	bl	8001e98 <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d302      	bcc.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x42>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d122      	bne.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	425a      	negs	r2, r3
 8002d8a:	4153      	adcs	r3, r2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	001a      	movs	r2, r3
 8002d90:	1dfb      	adds	r3, r7, #7
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d113      	bne.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2241      	movs	r2, #65	; 0x41
 8002da8:	2120      	movs	r1, #32
 8002daa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2242      	movs	r2, #66	; 0x42
 8002db0:	2100      	movs	r1, #0
 8002db2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	2100      	movs	r1, #0
 8002dba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e00f      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	425a      	negs	r2, r3
 8002dd0:	4153      	adcs	r3, r2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d0b5      	beq.n	8002d4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002df4:	e032      	b.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 f87d 	bl	8002efc <I2C_IsErrorOccurred>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d001      	beq.n	8002e0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e030      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	d025      	beq.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e10:	f7ff f842 	bl	8001e98 <HAL_GetTick>
 8002e14:	0002      	movs	r2, r0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d302      	bcc.n	8002e26 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11a      	bne.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d013      	beq.n	8002e5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	2220      	movs	r2, #32
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2241      	movs	r2, #65	; 0x41
 8002e44:	2120      	movs	r1, #32
 8002e46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2242      	movs	r2, #66	; 0x42
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e007      	b.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	2202      	movs	r2, #2
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d1c5      	bne.n	8002df6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e80:	e02f      	b.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f000 f837 	bl	8002efc <I2C_IsErrorOccurred>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e02d      	b.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fe ffff 	bl	8001e98 <HAL_GetTick>
 8002e9a:	0002      	movs	r2, r0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11a      	bne.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d013      	beq.n	8002ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2241      	movs	r2, #65	; 0x41
 8002eca:	2120      	movs	r1, #32
 8002ecc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2242      	movs	r2, #66	; 0x42
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2240      	movs	r2, #64	; 0x40
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e007      	b.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d1c8      	bne.n	8002e82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b004      	add	sp, #16
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08b      	sub	sp, #44	; 0x2c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f08:	2327      	movs	r3, #39	; 0x27
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2210      	movs	r2, #16
 8002f24:	4013      	ands	r3, r2
 8002f26:	d100      	bne.n	8002f2a <I2C_IsErrorOccurred+0x2e>
 8002f28:	e082      	b.n	8003030 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f32:	e060      	b.n	8002ff6 <I2C_IsErrorOccurred+0xfa>
 8002f34:	2427      	movs	r4, #39	; 0x27
 8002f36:	193b      	adds	r3, r7, r4
 8002f38:	193a      	adds	r2, r7, r4
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	3301      	adds	r3, #1
 8002f42:	d058      	beq.n	8002ff6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f44:	f7fe ffa8 	bl	8001e98 <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d306      	bcc.n	8002f62 <I2C_IsErrorOccurred+0x66>
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	193a      	adds	r2, r7, r4
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	701a      	strb	r2, [r3, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d149      	bne.n	8002ff6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	01db      	lsls	r3, r3, #7
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f70:	2013      	movs	r0, #19
 8002f72:	183b      	adds	r3, r7, r0
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	2142      	movs	r1, #66	; 0x42
 8002f78:	5c52      	ldrb	r2, [r2, r1]
 8002f7a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	401a      	ands	r2, r3
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d126      	bne.n	8002fde <I2C_IsErrorOccurred+0xe2>
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d021      	beq.n	8002fde <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d01d      	beq.n	8002fde <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	01c9      	lsls	r1, r1, #7
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fb4:	f7fe ff70 	bl	8001e98 <HAL_GetTick>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fbc:	e00f      	b.n	8002fde <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fbe:	f7fe ff6b 	bl	8001e98 <HAL_GetTick>
 8002fc2:	0002      	movs	r2, r0
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b19      	cmp	r3, #25
 8002fca:	d908      	bls.n	8002fde <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fd4:	2327      	movs	r3, #39	; 0x27
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]

              break;
 8002fdc:	e00b      	b.n	8002ff6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2127      	movs	r1, #39	; 0x27
 8002fea:	187a      	adds	r2, r7, r1
 8002fec:	1879      	adds	r1, r7, r1
 8002fee:	7809      	ldrb	r1, [r1, #0]
 8002ff0:	7011      	strb	r1, [r2, #0]
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d1e3      	bne.n	8002fbe <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b20      	cmp	r3, #32
 8003002:	d004      	beq.n	800300e <I2C_IsErrorOccurred+0x112>
 8003004:	2327      	movs	r3, #39	; 0x27
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d092      	beq.n	8002f34 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800300e:	2327      	movs	r3, #39	; 0x27
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d103      	bne.n	8003020 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2220      	movs	r2, #32
 800301e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	2204      	movs	r2, #4
 8003024:	4313      	orrs	r3, r2
 8003026:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003028:	2327      	movs	r3, #39	; 0x27
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4013      	ands	r3, r2
 8003040:	d00c      	beq.n	800305c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2201      	movs	r2, #1
 8003046:	4313      	orrs	r3, r2
 8003048:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	0052      	lsls	r2, r2, #1
 8003052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003054:	2327      	movs	r3, #39	; 0x27
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4013      	ands	r3, r2
 8003064:	d00c      	beq.n	8003080 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2208      	movs	r2, #8
 800306a:	4313      	orrs	r3, r2
 800306c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	00d2      	lsls	r2, r2, #3
 8003076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003078:	2327      	movs	r3, #39	; 0x27
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d00c      	beq.n	80030a4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2202      	movs	r2, #2
 800308e:	4313      	orrs	r3, r2
 8003090:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309c:	2327      	movs	r3, #39	; 0x27
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80030a4:	2327      	movs	r3, #39	; 0x27
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01d      	beq.n	80030ea <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff fe1f 	bl	8002cf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	490d      	ldr	r1, [pc, #52]	; (80030f8 <I2C_IsErrorOccurred+0x1fc>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2241      	movs	r2, #65	; 0x41
 80030d6:	2120      	movs	r1, #32
 80030d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2242      	movs	r2, #66	; 0x42
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2240      	movs	r2, #64	; 0x40
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80030ea:	2327      	movs	r3, #39	; 0x27
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b00b      	add	sp, #44	; 0x2c
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	fe00e800 	.word	0xfe00e800

080030fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	0008      	movs	r0, r1
 8003106:	0011      	movs	r1, r2
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	240a      	movs	r4, #10
 800310c:	193b      	adds	r3, r7, r4
 800310e:	1c02      	adds	r2, r0, #0
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	2009      	movs	r0, #9
 8003114:	183b      	adds	r3, r7, r0
 8003116:	1c0a      	adds	r2, r1, #0
 8003118:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800311a:	193b      	adds	r3, r7, r4
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	059b      	lsls	r3, r3, #22
 8003120:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003122:	183b      	adds	r3, r7, r0
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	0419      	lsls	r1, r3, #16
 8003128:	23ff      	movs	r3, #255	; 0xff
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800312e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	4313      	orrs	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003146:	0d51      	lsrs	r1, r2, #21
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	00d2      	lsls	r2, r2, #3
 800314c:	400a      	ands	r2, r1
 800314e:	4907      	ldr	r1, [pc, #28]	; (800316c <I2C_TransferConfig+0x70>)
 8003150:	430a      	orrs	r2, r1
 8003152:	43d2      	mvns	r2, r2
 8003154:	401a      	ands	r2, r3
 8003156:	0011      	movs	r1, r2
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b007      	add	sp, #28
 8003168:	bd90      	pop	{r4, r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	03ff63ff 	.word	0x03ff63ff

08003170 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2241      	movs	r2, #65	; 0x41
 800317e:	5c9b      	ldrb	r3, [r3, r2]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	d138      	bne.n	80031f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	5c9b      	ldrb	r3, [r3, r2]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003190:	2302      	movs	r3, #2
 8003192:	e032      	b.n	80031fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	2101      	movs	r1, #1
 800319a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2241      	movs	r2, #65	; 0x41
 80031a0:	2124      	movs	r1, #36	; 0x24
 80031a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2101      	movs	r1, #1
 80031b0:	438a      	bics	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4911      	ldr	r1, [pc, #68]	; (8003204 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80031c0:	400a      	ands	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2241      	movs	r2, #65	; 0x41
 80031e8:	2120      	movs	r1, #32
 80031ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	e000      	b.n	80031fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031f8:	2302      	movs	r3, #2
  }
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b002      	add	sp, #8
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	ffffefff 	.word	0xffffefff

08003208 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2241      	movs	r2, #65	; 0x41
 8003216:	5c9b      	ldrb	r3, [r3, r2]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	d139      	bne.n	8003292 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2240      	movs	r2, #64	; 0x40
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003228:	2302      	movs	r3, #2
 800322a:	e033      	b.n	8003294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2240      	movs	r2, #64	; 0x40
 8003230:	2101      	movs	r1, #1
 8003232:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2241      	movs	r2, #65	; 0x41
 8003238:	2124      	movs	r1, #36	; 0x24
 800323a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2101      	movs	r1, #1
 8003248:	438a      	bics	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2241      	movs	r2, #65	; 0x41
 8003282:	2120      	movs	r1, #32
 8003284:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003292:	2302      	movs	r3, #2
  }
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b004      	add	sp, #16
 800329a:	bd80      	pop	{r7, pc}
 800329c:	fffff0ff 	.word	0xfffff0ff

080032a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d11f      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	0013      	movs	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4912      	ldr	r1, [pc, #72]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fc ff16 	bl	8000104 <__udivsi3>
 80032d8:	0003      	movs	r3, r0
 80032da:	3301      	adds	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032de:	e008      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e001      	b.n	80032f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e009      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032f2:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	401a      	ands	r2, r3
 80032fc:	2380      	movs	r3, #128	; 0x80
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	429a      	cmp	r2, r3
 8003302:	d0ed      	beq.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b004      	add	sp, #16
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40007000 	.word	0x40007000
 8003314:	fffff9ff 	.word	0xfffff9ff
 8003318:	20000000 	.word	0x20000000
 800331c:	000f4240 	.word	0x000f4240

08003320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e2fe      	b.n	8003930 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	4013      	ands	r3, r2
 800333a:	d100      	bne.n	800333e <HAL_RCC_OscConfig+0x1e>
 800333c:	e07c      	b.n	8003438 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800333e:	4bc3      	ldr	r3, [pc, #780]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2238      	movs	r2, #56	; 0x38
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003348:	4bc0      	ldr	r3, [pc, #768]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2203      	movs	r2, #3
 800334e:	4013      	ands	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b10      	cmp	r3, #16
 8003356:	d102      	bne.n	800335e <HAL_RCC_OscConfig+0x3e>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d002      	beq.n	8003364 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d10b      	bne.n	800337c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	4bb9      	ldr	r3, [pc, #740]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	4013      	ands	r3, r2
 800336e:	d062      	beq.n	8003436 <HAL_RCC_OscConfig+0x116>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d15e      	bne.n	8003436 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e2d9      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	025b      	lsls	r3, r3, #9
 8003384:	429a      	cmp	r2, r3
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x78>
 8003388:	4bb0      	ldr	r3, [pc, #704]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4baf      	ldr	r3, [pc, #700]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0249      	lsls	r1, r1, #9
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e020      	b.n	80033da <HAL_RCC_OscConfig+0xba>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d10e      	bne.n	80033c2 <HAL_RCC_OscConfig+0xa2>
 80033a4:	4ba9      	ldr	r3, [pc, #676]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4ba8      	ldr	r3, [pc, #672]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033aa:	2180      	movs	r1, #128	; 0x80
 80033ac:	02c9      	lsls	r1, r1, #11
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	4ba6      	ldr	r3, [pc, #664]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4ba5      	ldr	r3, [pc, #660]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0249      	lsls	r1, r1, #9
 80033bc:	430a      	orrs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e00b      	b.n	80033da <HAL_RCC_OscConfig+0xba>
 80033c2:	4ba2      	ldr	r3, [pc, #648]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4ba1      	ldr	r3, [pc, #644]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033c8:	49a1      	ldr	r1, [pc, #644]	; (8003650 <HAL_RCC_OscConfig+0x330>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	4b9f      	ldr	r3, [pc, #636]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b9e      	ldr	r3, [pc, #632]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80033d4:	499f      	ldr	r1, [pc, #636]	; (8003654 <HAL_RCC_OscConfig+0x334>)
 80033d6:	400a      	ands	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe fd59 	bl	8001e98 <HAL_GetTick>
 80033e6:	0003      	movs	r3, r0
 80033e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fd54 	bl	8001e98 <HAL_GetTick>
 80033f0:	0002      	movs	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e298      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	4b93      	ldr	r3, [pc, #588]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	4013      	ands	r3, r2
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xcc>
 800340a:	e015      	b.n	8003438 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe fd44 	bl	8001e98 <HAL_GetTick>
 8003410:	0003      	movs	r3, r0
 8003412:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003416:	f7fe fd3f 	bl	8001e98 <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b64      	cmp	r3, #100	; 0x64
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e283      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003428:	4b88      	ldr	r3, [pc, #544]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	029b      	lsls	r3, r3, #10
 8003430:	4013      	ands	r3, r2
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0xf6>
 8003434:	e000      	b.n	8003438 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003436:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d100      	bne.n	8003444 <HAL_RCC_OscConfig+0x124>
 8003442:	e099      	b.n	8003578 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003444:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2238      	movs	r2, #56	; 0x38
 800344a:	4013      	ands	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800344e:	4b7f      	ldr	r3, [pc, #508]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2203      	movs	r2, #3
 8003454:	4013      	ands	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b10      	cmp	r3, #16
 800345c:	d102      	bne.n	8003464 <HAL_RCC_OscConfig+0x144>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d002      	beq.n	800346a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d135      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800346a:	4b78      	ldr	r3, [pc, #480]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4013      	ands	r3, r2
 8003474:	d005      	beq.n	8003482 <HAL_RCC_OscConfig+0x162>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e256      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4a74      	ldr	r2, [pc, #464]	; (8003658 <HAL_RCC_OscConfig+0x338>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	021a      	lsls	r2, r3, #8
 8003492:	4b6e      	ldr	r3, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800349e:	4b6b      	ldr	r3, [pc, #428]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6e      	ldr	r2, [pc, #440]	; (800365c <HAL_RCC_OscConfig+0x33c>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	0019      	movs	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	4b67      	ldr	r3, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034ae:	430a      	orrs	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80034b2:	4b66      	ldr	r3, [pc, #408]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	0adb      	lsrs	r3, r3, #11
 80034b8:	2207      	movs	r2, #7
 80034ba:	4013      	ands	r3, r2
 80034bc:	4a68      	ldr	r2, [pc, #416]	; (8003660 <HAL_RCC_OscConfig+0x340>)
 80034be:	40da      	lsrs	r2, r3
 80034c0:	4b68      	ldr	r3, [pc, #416]	; (8003664 <HAL_RCC_OscConfig+0x344>)
 80034c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034c4:	4b68      	ldr	r3, [pc, #416]	; (8003668 <HAL_RCC_OscConfig+0x348>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7fe fc89 	bl	8001de0 <HAL_InitTick>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d051      	beq.n	8003576 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e22c      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d030      	beq.n	8003540 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034de:	4b5b      	ldr	r3, [pc, #364]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5e      	ldr	r2, [pc, #376]	; (800365c <HAL_RCC_OscConfig+0x33c>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	4b57      	ldr	r3, [pc, #348]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b55      	ldr	r3, [pc, #340]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	0049      	lsls	r1, r1, #1
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fcca 	bl	8001e98 <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe fcc5 	bl	8001e98 <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e209      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351c:	4b4b      	ldr	r3, [pc, #300]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4013      	ands	r3, r2
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b48      	ldr	r3, [pc, #288]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4a4a      	ldr	r2, [pc, #296]	; (8003658 <HAL_RCC_OscConfig+0x338>)
 800352e:	4013      	ands	r3, r2
 8003530:	0019      	movs	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	021a      	lsls	r2, r3, #8
 8003538:	4b44      	ldr	r3, [pc, #272]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	e01b      	b.n	8003578 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	4b41      	ldr	r3, [pc, #260]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003546:	4949      	ldr	r1, [pc, #292]	; (800366c <HAL_RCC_OscConfig+0x34c>)
 8003548:	400a      	ands	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fca4 	bl	8001e98 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7fe fc9f 	bl	8001e98 <HAL_GetTick>
 800355a:	0002      	movs	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e1e3      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003568:	4b38      	ldr	r3, [pc, #224]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4013      	ands	r3, r2
 8003572:	d1f0      	bne.n	8003556 <HAL_RCC_OscConfig+0x236>
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003576:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2208      	movs	r2, #8
 800357e:	4013      	ands	r3, r2
 8003580:	d047      	beq.n	8003612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003582:	4b32      	ldr	r3, [pc, #200]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2238      	movs	r2, #56	; 0x38
 8003588:	4013      	ands	r3, r2
 800358a:	2b18      	cmp	r3, #24
 800358c:	d10a      	bne.n	80035a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800358e:	4b2f      	ldr	r3, [pc, #188]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003592:	2202      	movs	r2, #2
 8003594:	4013      	ands	r3, r2
 8003596:	d03c      	beq.n	8003612 <HAL_RCC_OscConfig+0x2f2>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d138      	bne.n	8003612 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e1c5      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80035ac:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80035ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	430a      	orrs	r2, r1
 80035b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe fc6e 	bl	8001e98 <HAL_GetTick>
 80035bc:	0003      	movs	r3, r0
 80035be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c2:	f7fe fc69 	bl	8001e98 <HAL_GetTick>
 80035c6:	0002      	movs	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e1ad      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d4:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80035d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d8:	2202      	movs	r2, #2
 80035da:	4013      	ands	r3, r2
 80035dc:	d0f1      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2a2>
 80035de:	e018      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80035e0:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80035e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035e4:	4b19      	ldr	r3, [pc, #100]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	438a      	bics	r2, r1
 80035ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe fc54 	bl	8001e98 <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f6:	f7fe fc4f 	bl	8001e98 <HAL_GetTick>
 80035fa:	0002      	movs	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e193      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003608:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 800360a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800360c:	2202      	movs	r2, #2
 800360e:	4013      	ands	r3, r2
 8003610:	d1f1      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2204      	movs	r2, #4
 8003618:	4013      	ands	r3, r2
 800361a:	d100      	bne.n	800361e <HAL_RCC_OscConfig+0x2fe>
 800361c:	e0c6      	b.n	80037ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	231f      	movs	r3, #31
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2200      	movs	r2, #0
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2238      	movs	r2, #56	; 0x38
 800362c:	4013      	ands	r3, r2
 800362e:	2b20      	cmp	r3, #32
 8003630:	d11e      	bne.n	8003670 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x32c>)
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2202      	movs	r2, #2
 8003638:	4013      	ands	r3, r2
 800363a:	d100      	bne.n	800363e <HAL_RCC_OscConfig+0x31e>
 800363c:	e0b6      	b.n	80037ac <HAL_RCC_OscConfig+0x48c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d000      	beq.n	8003648 <HAL_RCC_OscConfig+0x328>
 8003646:	e0b1      	b.n	80037ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e171      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
 800364c:	40021000 	.word	0x40021000
 8003650:	fffeffff 	.word	0xfffeffff
 8003654:	fffbffff 	.word	0xfffbffff
 8003658:	ffff80ff 	.word	0xffff80ff
 800365c:	ffffc7ff 	.word	0xffffc7ff
 8003660:	00f42400 	.word	0x00f42400
 8003664:	20000000 	.word	0x20000000
 8003668:	20000004 	.word	0x20000004
 800366c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003670:	4bb1      	ldr	r3, [pc, #708]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	055b      	lsls	r3, r3, #21
 8003678:	4013      	ands	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_RCC_OscConfig+0x360>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x362>
 8003680:	2300      	movs	r3, #0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	4bac      	ldr	r3, [pc, #688]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368a:	4bab      	ldr	r3, [pc, #684]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800368c:	2180      	movs	r1, #128	; 0x80
 800368e:	0549      	lsls	r1, r1, #21
 8003690:	430a      	orrs	r2, r1
 8003692:	63da      	str	r2, [r3, #60]	; 0x3c
 8003694:	4ba8      	ldr	r3, [pc, #672]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	055b      	lsls	r3, r3, #21
 800369c:	4013      	ands	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80036a2:	231f      	movs	r3, #31
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036aa:	4ba4      	ldr	r3, [pc, #656]	; (800393c <HAL_RCC_OscConfig+0x61c>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4013      	ands	r3, r2
 80036b4:	d11a      	bne.n	80036ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b6:	4ba1      	ldr	r3, [pc, #644]	; (800393c <HAL_RCC_OscConfig+0x61c>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4ba0      	ldr	r3, [pc, #640]	; (800393c <HAL_RCC_OscConfig+0x61c>)
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	0049      	lsls	r1, r1, #1
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fbe8 	bl	8001e98 <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fe fbe3 	bl	8001e98 <HAL_GetTick>
 80036d2:	0002      	movs	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e127      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e0:	4b96      	ldr	r3, [pc, #600]	; (800393c <HAL_RCC_OscConfig+0x61c>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4013      	ands	r3, r2
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x3e2>
 80036f4:	4b90      	ldr	r3, [pc, #576]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80036f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036f8:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	430a      	orrs	r2, r1
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003700:	e01c      	b.n	800373c <HAL_RCC_OscConfig+0x41c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b05      	cmp	r3, #5
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x404>
 800370a:	4b8b      	ldr	r3, [pc, #556]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800370c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800370e:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003710:	2104      	movs	r1, #4
 8003712:	430a      	orrs	r2, r1
 8003714:	65da      	str	r2, [r3, #92]	; 0x5c
 8003716:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003718:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800371a:	4b87      	ldr	r3, [pc, #540]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800371c:	2101      	movs	r1, #1
 800371e:	430a      	orrs	r2, r1
 8003720:	65da      	str	r2, [r3, #92]	; 0x5c
 8003722:	e00b      	b.n	800373c <HAL_RCC_OscConfig+0x41c>
 8003724:	4b84      	ldr	r3, [pc, #528]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003728:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800372a:	2101      	movs	r1, #1
 800372c:	438a      	bics	r2, r1
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003730:	4b81      	ldr	r3, [pc, #516]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003734:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003736:	2104      	movs	r1, #4
 8003738:	438a      	bics	r2, r1
 800373a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d014      	beq.n	800376e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fba8 	bl	8001e98 <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374c:	e009      	b.n	8003762 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe fba3 	bl	8001e98 <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	4a79      	ldr	r2, [pc, #484]	; (8003940 <HAL_RCC_OscConfig+0x620>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0e6      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003762:	4b75      	ldr	r3, [pc, #468]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x42e>
 800376c:	e013      	b.n	8003796 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376e:	f7fe fb93 	bl	8001e98 <HAL_GetTick>
 8003772:	0003      	movs	r3, r0
 8003774:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003776:	e009      	b.n	800378c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003778:	f7fe fb8e 	bl	8001e98 <HAL_GetTick>
 800377c:	0002      	movs	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	4a6f      	ldr	r2, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x620>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e0d1      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800378c:	4b6a      	ldr	r3, [pc, #424]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	2202      	movs	r2, #2
 8003792:	4013      	ands	r3, r2
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003796:	231f      	movs	r3, #31
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d105      	bne.n	80037ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80037a0:	4b65      	ldr	r3, [pc, #404]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80037a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a4:	4b64      	ldr	r3, [pc, #400]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80037a6:	4967      	ldr	r1, [pc, #412]	; (8003944 <HAL_RCC_OscConfig+0x624>)
 80037a8:	400a      	ands	r2, r1
 80037aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d100      	bne.n	80037b6 <HAL_RCC_OscConfig+0x496>
 80037b4:	e0bb      	b.n	800392e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b6:	4b60      	ldr	r3, [pc, #384]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2238      	movs	r2, #56	; 0x38
 80037bc:	4013      	ands	r3, r2
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d100      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4a4>
 80037c2:	e07b      	b.n	80038bc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d156      	bne.n	800387a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80037d2:	495d      	ldr	r1, [pc, #372]	; (8003948 <HAL_RCC_OscConfig+0x628>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fb5e 	bl	8001e98 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fb59 	bl	8001e98 <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e09d      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	049b      	lsls	r3, r3, #18
 80037fc:	4013      	ands	r3, r2
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003800:	4b4d      	ldr	r3, [pc, #308]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a51      	ldr	r2, [pc, #324]	; (800394c <HAL_RCC_OscConfig+0x62c>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	021b      	lsls	r3, r3, #8
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	431a      	orrs	r2, r3
 800382e:	4b42      	ldr	r3, [pc, #264]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003834:	4b40      	ldr	r3, [pc, #256]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	0449      	lsls	r1, r1, #17
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	0549      	lsls	r1, r1, #21
 800384c:	430a      	orrs	r2, r1
 800384e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fe fb22 	bl	8001e98 <HAL_GetTick>
 8003854:	0003      	movs	r3, r0
 8003856:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fb1d 	bl	8001e98 <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e061      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386c:	4b32      	ldr	r3, [pc, #200]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	049b      	lsls	r3, r3, #18
 8003874:	4013      	ands	r3, r2
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x53a>
 8003878:	e059      	b.n	800392e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b2f      	ldr	r3, [pc, #188]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 8003880:	4931      	ldr	r1, [pc, #196]	; (8003948 <HAL_RCC_OscConfig+0x628>)
 8003882:	400a      	ands	r2, r1
 8003884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003886:	f7fe fb07 	bl	8001e98 <HAL_GetTick>
 800388a:	0003      	movs	r3, r0
 800388c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003890:	f7fe fb02 	bl	8001e98 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e046      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a2:	4b25      	ldr	r3, [pc, #148]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	049b      	lsls	r3, r3, #18
 80038aa:	4013      	ands	r3, r2
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	4b21      	ldr	r3, [pc, #132]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80038b4:	4926      	ldr	r1, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x630>)
 80038b6:	400a      	ands	r2, r1
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e038      	b.n	800392e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e033      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x618>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2203      	movs	r2, #3
 80038d2:	401a      	ands	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d126      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2270      	movs	r2, #112	; 0x70
 80038e0:	401a      	ands	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d11f      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	23fe      	movs	r3, #254	; 0xfe
 80038ee:	01db      	lsls	r3, r3, #7
 80038f0:	401a      	ands	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d116      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	23f8      	movs	r3, #248	; 0xf8
 8003900:	039b      	lsls	r3, r3, #14
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d10e      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	23e0      	movs	r3, #224	; 0xe0
 8003910:	051b      	lsls	r3, r3, #20
 8003912:	401a      	ands	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	0f5b      	lsrs	r3, r3, #29
 8003920:	075a      	lsls	r2, r3, #29
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b008      	add	sp, #32
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
 8003940:	00001388 	.word	0x00001388
 8003944:	efffffff 	.word	0xefffffff
 8003948:	feffffff 	.word	0xfeffffff
 800394c:	11c1808c 	.word	0x11c1808c
 8003950:	eefefffc 	.word	0xeefefffc

08003954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0e9      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003968:	4b76      	ldr	r3, [pc, #472]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2207      	movs	r2, #7
 800396e:	4013      	ands	r3, r2
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d91e      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b73      	ldr	r3, [pc, #460]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2207      	movs	r2, #7
 800397c:	4393      	bics	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	4b70      	ldr	r3, [pc, #448]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003988:	f7fe fa86 	bl	8001e98 <HAL_GetTick>
 800398c:	0003      	movs	r3, r0
 800398e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003990:	e009      	b.n	80039a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003992:	f7fe fa81 	bl	8001e98 <HAL_GetTick>
 8003996:	0002      	movs	r2, r0
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	4a6a      	ldr	r2, [pc, #424]	; (8003b48 <HAL_RCC_ClockConfig+0x1f4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0ca      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039a6:	4b67      	ldr	r3, [pc, #412]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2207      	movs	r2, #7
 80039ac:	4013      	ands	r3, r2
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d1ee      	bne.n	8003992 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d015      	beq.n	80039ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2204      	movs	r2, #4
 80039c4:	4013      	ands	r3, r2
 80039c6:	d006      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039c8:	4b60      	ldr	r3, [pc, #384]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	4b5f      	ldr	r3, [pc, #380]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 80039ce:	21e0      	movs	r1, #224	; 0xe0
 80039d0:	01c9      	lsls	r1, r1, #7
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d6:	4b5d      	ldr	r3, [pc, #372]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4a5d      	ldr	r2, [pc, #372]	; (8003b50 <HAL_RCC_ClockConfig+0x1fc>)
 80039dc:	4013      	ands	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d057      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d107      	bne.n	8003a0c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039fc:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	4013      	ands	r3, r2
 8003a06:	d12b      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e097      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a14:	4b4d      	ldr	r3, [pc, #308]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	049b      	lsls	r3, r3, #18
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d11f      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e08b      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a2c:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4013      	ands	r3, r2
 8003a36:	d113      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e07f      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a44:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	2202      	movs	r2, #2
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d108      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e074      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a52:	4b3e      	ldr	r3, [pc, #248]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2202      	movs	r2, #2
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e06d      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a60:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2207      	movs	r2, #7
 8003a66:	4393      	bics	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fe fa10 	bl	8001e98 <HAL_GetTick>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7c:	e009      	b.n	8003a92 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7e:	f7fe fa0b 	bl	8001e98 <HAL_GetTick>
 8003a82:	0002      	movs	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <HAL_RCC_ClockConfig+0x1f4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e054      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2238      	movs	r2, #56	; 0x38
 8003a98:	401a      	ands	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d1ec      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	4013      	ands	r3, r2
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d21e      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	4393      	bics	r3, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe f9e8 	bl	8001e98 <HAL_GetTick>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003acc:	e009      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ace:	f7fe f9e3 	bl	8001e98 <HAL_GetTick>
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	4a1b      	ldr	r2, [pc, #108]	; (8003b48 <HAL_RCC_ClockConfig+0x1f4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e02c      	b.n	8003b3c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	4013      	ands	r3, r2
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1ee      	bne.n	8003ace <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2204      	movs	r2, #4
 8003af6:	4013      	ands	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_RCC_ClockConfig+0x200>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	0019      	movs	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003b0e:	f000 f829 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b12:	0001      	movs	r1, r0
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_RCC_ClockConfig+0x1f8>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_RCC_ClockConfig+0x204>)
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	58d3      	ldr	r3, [r2, r3]
 8003b24:	221f      	movs	r2, #31
 8003b26:	4013      	ands	r3, r2
 8003b28:	000a      	movs	r2, r1
 8003b2a:	40da      	lsrs	r2, r3
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_ClockConfig+0x208>)
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_ClockConfig+0x20c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7fe f953 	bl	8001de0 <HAL_InitTick>
 8003b3a:	0003      	movs	r3, r0
}
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b004      	add	sp, #16
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40022000 	.word	0x40022000
 8003b48:	00001388 	.word	0x00001388
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	fffff0ff 	.word	0xfffff0ff
 8003b54:	ffff8fff 	.word	0xffff8fff
 8003b58:	08004934 	.word	0x08004934
 8003b5c:	20000000 	.word	0x20000000
 8003b60:	20000004 	.word	0x20000004

08003b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2238      	movs	r2, #56	; 0x38
 8003b70:	4013      	ands	r3, r2
 8003b72:	d10f      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	0adb      	lsrs	r3, r3, #11
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2201      	movs	r2, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	4835      	ldr	r0, [pc, #212]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b8a:	f7fc fabb 	bl	8000104 <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	e05d      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b94:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2238      	movs	r2, #56	; 0x38
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e054      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba6:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2238      	movs	r2, #56	; 0x38
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d138      	bne.n	8003c24 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d10d      	bne.n	8003bec <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd0:	68b9      	ldr	r1, [r7, #8]
 8003bd2:	4824      	ldr	r0, [pc, #144]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x100>)
 8003bd4:	f7fc fa96 	bl	8000104 <__udivsi3>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	0019      	movs	r1, r3
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	0a1b      	lsrs	r3, r3, #8
 8003be2:	227f      	movs	r2, #127	; 0x7f
 8003be4:	4013      	ands	r3, r2
 8003be6:	434b      	muls	r3, r1
 8003be8:	617b      	str	r3, [r7, #20]
        break;
 8003bea:	e00d      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	481c      	ldr	r0, [pc, #112]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bf0:	f7fc fa88 	bl	8000104 <__udivsi3>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	227f      	movs	r2, #127	; 0x7f
 8003c00:	4013      	ands	r3, r2
 8003c02:	434b      	muls	r3, r1
 8003c04:	617b      	str	r3, [r7, #20]
        break;
 8003c06:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0f5b      	lsrs	r3, r3, #29
 8003c0e:	2207      	movs	r2, #7
 8003c10:	4013      	ands	r3, r2
 8003c12:	3301      	adds	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	f7fc fa73 	bl	8000104 <__udivsi3>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e015      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2238      	movs	r2, #56	; 0x38
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d103      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	e00b      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2238      	movs	r2, #56	; 0x38
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b18      	cmp	r3, #24
 8003c42:	d103      	bne.n	8003c4c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c44:	23fa      	movs	r3, #250	; 0xfa
 8003c46:	01db      	lsls	r3, r3, #7
 8003c48:	613b      	str	r3, [r7, #16]
 8003c4a:	e001      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c50:	693b      	ldr	r3, [r7, #16]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b006      	add	sp, #24
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	007a1200 	.word	0x007a1200

08003c68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	223d      	movs	r2, #61	; 0x3d
 8003c74:	5c9b      	ldrb	r3, [r3, r2]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d001      	beq.n	8003c80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e035      	b.n	8003cec <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	223d      	movs	r2, #61	; 0x3d
 8003c84:	2102      	movs	r1, #2
 8003c86:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_TIM_Base_Start+0x8c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00a      	beq.n	8003ca8 <HAL_TIM_Base_Start+0x40>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	05db      	lsls	r3, r3, #23
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d004      	beq.n	8003ca8 <HAL_TIM_Base_Start+0x40>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <HAL_TIM_Base_Start+0x90>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d116      	bne.n	8003cd6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <HAL_TIM_Base_Start+0x94>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d016      	beq.n	8003ce8 <HAL_TIM_Base_Start+0x80>
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	025b      	lsls	r3, r3, #9
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d011      	beq.n	8003ce8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd4:	e008      	b.n	8003ce8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e000      	b.n	8003cea <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	00010007 	.word	0x00010007

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e04a      	b.n	8003da8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223d      	movs	r2, #61	; 0x3d
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	223c      	movs	r2, #60	; 0x3c
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fd ff9b 	bl	8001c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	223d      	movs	r2, #61	; 0x3d
 8003d32:	2102      	movs	r1, #2
 8003d34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	0019      	movs	r1, r3
 8003d40:	0010      	movs	r0, r2
 8003d42:	f000 fa13 	bl	800416c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2248      	movs	r2, #72	; 0x48
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223e      	movs	r2, #62	; 0x3e
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	; 0x41
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2242      	movs	r2, #66	; 0x42
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2243      	movs	r2, #67	; 0x43
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2244      	movs	r2, #68	; 0x44
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2245      	movs	r2, #69	; 0x45
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2246      	movs	r2, #70	; 0x46
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2247      	movs	r2, #71	; 0x47
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223d      	movs	r2, #61	; 0x3d
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d108      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x22>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	223e      	movs	r2, #62	; 0x3e
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	1e5a      	subs	r2, r3, #1
 8003dcc:	4193      	sbcs	r3, r2
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e037      	b.n	8003e42 <HAL_TIM_PWM_Start+0x92>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d108      	bne.n	8003dea <HAL_TIM_PWM_Start+0x3a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	223f      	movs	r2, #63	; 0x3f
 8003ddc:	5c9b      	ldrb	r3, [r3, r2]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	1e5a      	subs	r2, r3, #1
 8003de4:	4193      	sbcs	r3, r2
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e02b      	b.n	8003e42 <HAL_TIM_PWM_Start+0x92>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d108      	bne.n	8003e02 <HAL_TIM_PWM_Start+0x52>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2240      	movs	r2, #64	; 0x40
 8003df4:	5c9b      	ldrb	r3, [r3, r2]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	4193      	sbcs	r3, r2
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e01f      	b.n	8003e42 <HAL_TIM_PWM_Start+0x92>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	d108      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x6a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2241      	movs	r2, #65	; 0x41
 8003e0c:	5c9b      	ldrb	r3, [r3, r2]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	1e5a      	subs	r2, r3, #1
 8003e14:	4193      	sbcs	r3, r2
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e013      	b.n	8003e42 <HAL_TIM_PWM_Start+0x92>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d108      	bne.n	8003e32 <HAL_TIM_PWM_Start+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2242      	movs	r2, #66	; 0x42
 8003e24:	5c9b      	ldrb	r3, [r3, r2]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	1e5a      	subs	r2, r3, #1
 8003e2c:	4193      	sbcs	r3, r2
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e007      	b.n	8003e42 <HAL_TIM_PWM_Start+0x92>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2243      	movs	r2, #67	; 0x43
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	1e5a      	subs	r2, r3, #1
 8003e3e:	4193      	sbcs	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e081      	b.n	8003f4e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_PWM_Start+0xaa>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	223e      	movs	r2, #62	; 0x3e
 8003e54:	2102      	movs	r1, #2
 8003e56:	5499      	strb	r1, [r3, r2]
 8003e58:	e023      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xf2>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Start+0xba>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	223f      	movs	r2, #63	; 0x3f
 8003e64:	2102      	movs	r1, #2
 8003e66:	5499      	strb	r1, [r3, r2]
 8003e68:	e01b      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xf2>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0xca>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2240      	movs	r2, #64	; 0x40
 8003e74:	2102      	movs	r1, #2
 8003e76:	5499      	strb	r1, [r3, r2]
 8003e78:	e013      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xf2>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xda>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2241      	movs	r2, #65	; 0x41
 8003e84:	2102      	movs	r1, #2
 8003e86:	5499      	strb	r1, [r3, r2]
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xf2>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_PWM_Start+0xea>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2242      	movs	r2, #66	; 0x42
 8003e94:	2102      	movs	r1, #2
 8003e96:	5499      	strb	r1, [r3, r2]
 8003e98:	e003      	b.n	8003ea2 <HAL_TIM_PWM_Start+0xf2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2243      	movs	r2, #67	; 0x43
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6839      	ldr	r1, [r7, #0]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 fc7e 	bl	80047ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a28      	ldr	r2, [pc, #160]	; (8003f58 <HAL_TIM_PWM_Start+0x1a8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_PWM_Start+0x11e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a27      	ldr	r2, [pc, #156]	; (8003f5c <HAL_TIM_PWM_Start+0x1ac>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_PWM_Start+0x11e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <HAL_TIM_PWM_Start+0x1b0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0x122>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_TIM_PWM_Start+0x124>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2180      	movs	r1, #128	; 0x80
 8003ee4:	0209      	lsls	r1, r1, #8
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_TIM_PWM_Start+0x1a8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00a      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x15a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_PWM_Start+0x15a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_TIM_PWM_Start+0x1b4>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d116      	bne.n	8003f38 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a15      	ldr	r2, [pc, #84]	; (8003f68 <HAL_TIM_PWM_Start+0x1b8>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	d016      	beq.n	8003f4a <HAL_TIM_PWM_Start+0x19a>
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	025b      	lsls	r3, r3, #9
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d011      	beq.n	8003f4a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f36:	e008      	b.n	8003f4a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2101      	movs	r1, #1
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	e000      	b.n	8003f4c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b004      	add	sp, #16
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	40012c00 	.word	0x40012c00
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800
 8003f64:	40000400 	.word	0x40000400
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2317      	movs	r3, #23
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	223c      	movs	r2, #60	; 0x3c
 8003f84:	5c9b      	ldrb	r3, [r3, r2]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0e5      	b.n	800415a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	223c      	movs	r2, #60	; 0x3c
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b14      	cmp	r3, #20
 8003f9a:	d900      	bls.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f9c:	e0d1      	b.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	009a      	lsls	r2, r3, #2
 8003fa2:	4b70      	ldr	r3, [pc, #448]	; (8004164 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003fa4:	18d3      	adds	r3, r2, r3
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 f95e 	bl	8004274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2108      	movs	r1, #8
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2104      	movs	r1, #4
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	619a      	str	r2, [r3, #24]
      break;
 8003fea:	e0af      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 f9bd 	bl	8004374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699a      	ldr	r2, [r3, #24]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2180      	movs	r1, #128	; 0x80
 8004006:	0109      	lsls	r1, r1, #4
 8004008:	430a      	orrs	r2, r1
 800400a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4954      	ldr	r1, [pc, #336]	; (8004168 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004018:	400a      	ands	r2, r1
 800401a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6999      	ldr	r1, [r3, #24]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	619a      	str	r2, [r3, #24]
      break;
 8004030:	e08c      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f000 fa18 	bl	8004470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69da      	ldr	r2, [r3, #28]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2108      	movs	r1, #8
 800404c:	430a      	orrs	r2, r1
 800404e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2104      	movs	r1, #4
 800405c:	438a      	bics	r2, r1
 800405e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69d9      	ldr	r1, [r3, #28]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	61da      	str	r2, [r3, #28]
      break;
 8004072:	e06b      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	0011      	movs	r1, r2
 800407c:	0018      	movs	r0, r3
 800407e:	f000 fa79 	bl	8004574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	0109      	lsls	r1, r1, #4
 8004090:	430a      	orrs	r2, r1
 8004092:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4932      	ldr	r1, [pc, #200]	; (8004168 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69d9      	ldr	r1, [r3, #28]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	021a      	lsls	r2, r3, #8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	61da      	str	r2, [r3, #28]
      break;
 80040b8:	e048      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	0011      	movs	r1, r2
 80040c2:	0018      	movs	r0, r3
 80040c4:	f000 faba 	bl	800463c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2108      	movs	r1, #8
 80040d4:	430a      	orrs	r2, r1
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2104      	movs	r1, #4
 80040e4:	438a      	bics	r2, r1
 80040e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040fa:	e027      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f000 faf3 	bl	80046f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2180      	movs	r1, #128	; 0x80
 8004116:	0109      	lsls	r1, r1, #4
 8004118:	430a      	orrs	r2, r1
 800411a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4910      	ldr	r1, [pc, #64]	; (8004168 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004128:	400a      	ands	r2, r1
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	021a      	lsls	r2, r3, #8
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004140:	e004      	b.n	800414c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004142:	2317      	movs	r3, #23
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	223c      	movs	r2, #60	; 0x3c
 8004150:	2100      	movs	r1, #0
 8004152:	5499      	strb	r1, [r3, r2]

  return status;
 8004154:	2317      	movs	r3, #23
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	781b      	ldrb	r3, [r3, #0]
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b006      	add	sp, #24
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	08004974 	.word	0x08004974
 8004168:	fffffbff 	.word	0xfffffbff

0800416c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a37      	ldr	r2, [pc, #220]	; (800425c <TIM_Base_SetConfig+0xf0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d008      	beq.n	8004196 <TIM_Base_SetConfig+0x2a>
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	05db      	lsls	r3, r3, #23
 800418a:	429a      	cmp	r2, r3
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0x2a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a33      	ldr	r2, [pc, #204]	; (8004260 <TIM_Base_SetConfig+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2270      	movs	r2, #112	; 0x70
 800419a:	4393      	bics	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a2c      	ldr	r2, [pc, #176]	; (800425c <TIM_Base_SetConfig+0xf0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d014      	beq.n	80041da <TIM_Base_SetConfig+0x6e>
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	05db      	lsls	r3, r3, #23
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d00f      	beq.n	80041da <TIM_Base_SetConfig+0x6e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a28      	ldr	r2, [pc, #160]	; (8004260 <TIM_Base_SetConfig+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_Base_SetConfig+0x6e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a27      	ldr	r2, [pc, #156]	; (8004264 <TIM_Base_SetConfig+0xf8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d007      	beq.n	80041da <TIM_Base_SetConfig+0x6e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a26      	ldr	r2, [pc, #152]	; (8004268 <TIM_Base_SetConfig+0xfc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_Base_SetConfig+0x6e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a25      	ldr	r2, [pc, #148]	; (800426c <TIM_Base_SetConfig+0x100>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a24      	ldr	r2, [pc, #144]	; (8004270 <TIM_Base_SetConfig+0x104>)
 80041de:	4013      	ands	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2280      	movs	r2, #128	; 0x80
 80041f0:	4393      	bics	r3, r2
 80041f2:	001a      	movs	r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <TIM_Base_SetConfig+0xf0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d007      	beq.n	800422a <TIM_Base_SetConfig+0xbe>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <TIM_Base_SetConfig+0xfc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_Base_SetConfig+0xbe>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a11      	ldr	r2, [pc, #68]	; (800426c <TIM_Base_SetConfig+0x100>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d103      	bne.n	8004232 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2201      	movs	r2, #1
 800423e:	4013      	ands	r3, r2
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2201      	movs	r2, #1
 800424a:	4393      	bics	r3, r2
 800424c:	001a      	movs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]
  }
}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	40002000 	.word	0x40002000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800
 8004270:	fffffcff 	.word	0xfffffcff

08004274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	2201      	movs	r2, #1
 800428a:	4393      	bics	r3, r2
 800428c:	001a      	movs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4a2e      	ldr	r2, [pc, #184]	; (800435c <TIM_OC1_SetConfig+0xe8>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4393      	bics	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2202      	movs	r2, #2
 80042bc:	4393      	bics	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <TIM_OC1_SetConfig+0xec>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d007      	beq.n	80042e2 <TIM_OC1_SetConfig+0x6e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <TIM_OC1_SetConfig+0xf0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d003      	beq.n	80042e2 <TIM_OC1_SetConfig+0x6e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <TIM_OC1_SetConfig+0xf4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2208      	movs	r2, #8
 80042e6:	4393      	bics	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2204      	movs	r2, #4
 80042f8:	4393      	bics	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a18      	ldr	r2, [pc, #96]	; (8004360 <TIM_OC1_SetConfig+0xec>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d007      	beq.n	8004314 <TIM_OC1_SetConfig+0xa0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a17      	ldr	r2, [pc, #92]	; (8004364 <TIM_OC1_SetConfig+0xf0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC1_SetConfig+0xa0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <TIM_OC1_SetConfig+0xf4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d111      	bne.n	8004338 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <TIM_OC1_SetConfig+0xf8>)
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <TIM_OC1_SetConfig+0xfc>)
 8004320:	4013      	ands	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	621a      	str	r2, [r3, #32]
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b006      	add	sp, #24
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	fffeff8f 	.word	0xfffeff8f
 8004360:	40012c00 	.word	0x40012c00
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800
 800436c:	fffffeff 	.word	0xfffffeff
 8004370:	fffffdff 	.word	0xfffffdff

08004374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	2210      	movs	r2, #16
 800438a:	4393      	bics	r3, r2
 800438c:	001a      	movs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <TIM_OC2_SetConfig+0xe0>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <TIM_OC2_SetConfig+0xe4>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	021b      	lsls	r3, r3, #8
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2220      	movs	r2, #32
 80043be:	4393      	bics	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_OC2_SetConfig+0xe8>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10d      	bne.n	80043f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2280      	movs	r2, #128	; 0x80
 80043da:	4393      	bics	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2240      	movs	r2, #64	; 0x40
 80043ee:	4393      	bics	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a19      	ldr	r2, [pc, #100]	; (800445c <TIM_OC2_SetConfig+0xe8>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <TIM_OC2_SetConfig+0x96>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a18      	ldr	r2, [pc, #96]	; (8004460 <TIM_OC2_SetConfig+0xec>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC2_SetConfig+0x96>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a17      	ldr	r2, [pc, #92]	; (8004464 <TIM_OC2_SetConfig+0xf0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d113      	bne.n	8004432 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <TIM_OC2_SetConfig+0xf4>)
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <TIM_OC2_SetConfig+0xf8>)
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	621a      	str	r2, [r3, #32]
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b006      	add	sp, #24
 8004452:	bd80      	pop	{r7, pc}
 8004454:	feff8fff 	.word	0xfeff8fff
 8004458:	fffffcff 	.word	0xfffffcff
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40014400 	.word	0x40014400
 8004464:	40014800 	.word	0x40014800
 8004468:	fffffbff 	.word	0xfffffbff
 800446c:	fffff7ff 	.word	0xfffff7ff

08004470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4a31      	ldr	r2, [pc, #196]	; (800454c <TIM_OC3_SetConfig+0xdc>)
 8004486:	401a      	ands	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a2d      	ldr	r2, [pc, #180]	; (8004550 <TIM_OC3_SetConfig+0xe0>)
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2203      	movs	r2, #3
 80044a4:	4393      	bics	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <TIM_OC3_SetConfig+0xe4>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <TIM_OC3_SetConfig+0xe8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d10d      	bne.n	80044ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4a22      	ldr	r2, [pc, #136]	; (800455c <TIM_OC3_SetConfig+0xec>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <TIM_OC3_SetConfig+0xf0>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <TIM_OC3_SetConfig+0xe8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <TIM_OC3_SetConfig+0x92>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <TIM_OC3_SetConfig+0xf4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d003      	beq.n	8004502 <TIM_OC3_SetConfig+0x92>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <TIM_OC3_SetConfig+0xf8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d113      	bne.n	800452a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4a19      	ldr	r2, [pc, #100]	; (800456c <TIM_OC3_SetConfig+0xfc>)
 8004506:	4013      	ands	r3, r2
 8004508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4a18      	ldr	r2, [pc, #96]	; (8004570 <TIM_OC3_SetConfig+0x100>)
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	621a      	str	r2, [r3, #32]
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b006      	add	sp, #24
 800454a:	bd80      	pop	{r7, pc}
 800454c:	fffffeff 	.word	0xfffffeff
 8004550:	fffeff8f 	.word	0xfffeff8f
 8004554:	fffffdff 	.word	0xfffffdff
 8004558:	40012c00 	.word	0x40012c00
 800455c:	fffff7ff 	.word	0xfffff7ff
 8004560:	fffffbff 	.word	0xfffffbff
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800
 800456c:	ffffefff 	.word	0xffffefff
 8004570:	ffffdfff 	.word	0xffffdfff

08004574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <TIM_OC4_SetConfig+0xa8>)
 800458a:	401a      	ands	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a20      	ldr	r2, [pc, #128]	; (8004620 <TIM_OC4_SetConfig+0xac>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <TIM_OC4_SetConfig+0xb0>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4a1b      	ldr	r2, [pc, #108]	; (8004628 <TIM_OC4_SetConfig+0xb4>)
 80045bc:	4013      	ands	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a17      	ldr	r2, [pc, #92]	; (800462c <TIM_OC4_SetConfig+0xb8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d007      	beq.n	80045e4 <TIM_OC4_SetConfig+0x70>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <TIM_OC4_SetConfig+0xbc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_OC4_SetConfig+0x70>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <TIM_OC4_SetConfig+0xc0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d109      	bne.n	80045f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4a14      	ldr	r2, [pc, #80]	; (8004638 <TIM_OC4_SetConfig+0xc4>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	019b      	lsls	r3, r3, #6
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	621a      	str	r2, [r3, #32]
}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b006      	add	sp, #24
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	ffffefff 	.word	0xffffefff
 8004620:	feff8fff 	.word	0xfeff8fff
 8004624:	fffffcff 	.word	0xfffffcff
 8004628:	ffffdfff 	.word	0xffffdfff
 800462c:	40012c00 	.word	0x40012c00
 8004630:	40014400 	.word	0x40014400
 8004634:	40014800 	.word	0x40014800
 8004638:	ffffbfff 	.word	0xffffbfff

0800463c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <TIM_OC5_SetConfig+0x9c>)
 8004652:	401a      	ands	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <TIM_OC5_SetConfig+0xa0>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <TIM_OC5_SetConfig+0xa4>)
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <TIM_OC5_SetConfig+0xa8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <TIM_OC5_SetConfig+0x66>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <TIM_OC5_SetConfig+0xac>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_OC5_SetConfig+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a13      	ldr	r2, [pc, #76]	; (80046ec <TIM_OC5_SetConfig+0xb0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d109      	bne.n	80046b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <TIM_OC5_SetConfig+0x9c>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b006      	add	sp, #24
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	fffeffff 	.word	0xfffeffff
 80046dc:	fffeff8f 	.word	0xfffeff8f
 80046e0:	fffdffff 	.word	0xfffdffff
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800

080046f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	4a22      	ldr	r2, [pc, #136]	; (8004790 <TIM_OC6_SetConfig+0xa0>)
 8004706:	401a      	ands	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <TIM_OC6_SetConfig+0xa4>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <TIM_OC6_SetConfig+0xa8>)
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	051b      	lsls	r3, r3, #20
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <TIM_OC6_SetConfig+0xac>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <TIM_OC6_SetConfig+0x68>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <TIM_OC6_SetConfig+0xb0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_OC6_SetConfig+0x68>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <TIM_OC6_SetConfig+0xb4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d109      	bne.n	800476c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <TIM_OC6_SetConfig+0xb8>)
 800475c:	4013      	ands	r3, r2
 800475e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	46bd      	mov	sp, r7
 800478a:	b006      	add	sp, #24
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	ffefffff 	.word	0xffefffff
 8004794:	feff8fff 	.word	0xfeff8fff
 8004798:	ffdfffff 	.word	0xffdfffff
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800
 80047a8:	fffbffff 	.word	0xfffbffff

080047ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	221f      	movs	r2, #31
 80047bc:	4013      	ands	r3, r2
 80047be:	2201      	movs	r2, #1
 80047c0:	409a      	lsls	r2, r3
 80047c2:	0013      	movs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	43d2      	mvns	r2, r2
 80047ce:	401a      	ands	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	211f      	movs	r1, #31
 80047dc:	400b      	ands	r3, r1
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4099      	lsls	r1, r3
 80047e2:	000b      	movs	r3, r1
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	621a      	str	r2, [r3, #32]
}
 80047ea:	46c0      	nop			; (mov r8, r8)
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b006      	add	sp, #24
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	223c      	movs	r2, #60	; 0x3c
 8004802:	5c9b      	ldrb	r3, [r3, r2]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e050      	b.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	223c      	movs	r2, #60	; 0x3c
 8004810:	2101      	movs	r1, #1
 8004812:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	223d      	movs	r2, #61	; 0x3d
 8004818:	2102      	movs	r1, #2
 800481a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a20      	ldr	r2, [pc, #128]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800483a:	4013      	ands	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2270      	movs	r2, #112	; 0x70
 800484c:	4393      	bics	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00a      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	05db      	lsls	r3, r3, #23
 8004874:	429a      	cmp	r2, r3
 8004876:	d004      	beq.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10c      	bne.n	800489c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2280      	movs	r2, #128	; 0x80
 8004886:	4393      	bics	r3, r2
 8004888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	223d      	movs	r2, #61	; 0x3d
 80048a0:	2101      	movs	r1, #1
 80048a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	223c      	movs	r2, #60	; 0x3c
 80048a8:	2100      	movs	r1, #0
 80048aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b004      	add	sp, #16
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	ff0fffff 	.word	0xff0fffff
 80048c0:	40000400 	.word	0x40000400

080048c4 <memset>:
 80048c4:	0003      	movs	r3, r0
 80048c6:	1882      	adds	r2, r0, r2
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d100      	bne.n	80048ce <memset+0xa>
 80048cc:	4770      	bx	lr
 80048ce:	7019      	strb	r1, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	e7f9      	b.n	80048c8 <memset+0x4>

080048d4 <__libc_init_array>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	2600      	movs	r6, #0
 80048d8:	4c0c      	ldr	r4, [pc, #48]	; (800490c <__libc_init_array+0x38>)
 80048da:	4d0d      	ldr	r5, [pc, #52]	; (8004910 <__libc_init_array+0x3c>)
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	42a6      	cmp	r6, r4
 80048e2:	d109      	bne.n	80048f8 <__libc_init_array+0x24>
 80048e4:	2600      	movs	r6, #0
 80048e6:	f000 f819 	bl	800491c <_init>
 80048ea:	4c0a      	ldr	r4, [pc, #40]	; (8004914 <__libc_init_array+0x40>)
 80048ec:	4d0a      	ldr	r5, [pc, #40]	; (8004918 <__libc_init_array+0x44>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	42a6      	cmp	r6, r4
 80048f4:	d105      	bne.n	8004902 <__libc_init_array+0x2e>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	00b3      	lsls	r3, r6, #2
 80048fa:	58eb      	ldr	r3, [r5, r3]
 80048fc:	4798      	blx	r3
 80048fe:	3601      	adds	r6, #1
 8004900:	e7ee      	b.n	80048e0 <__libc_init_array+0xc>
 8004902:	00b3      	lsls	r3, r6, #2
 8004904:	58eb      	ldr	r3, [r5, r3]
 8004906:	4798      	blx	r3
 8004908:	3601      	adds	r6, #1
 800490a:	e7f2      	b.n	80048f2 <__libc_init_array+0x1e>
 800490c:	080049c8 	.word	0x080049c8
 8004910:	080049c8 	.word	0x080049c8
 8004914:	080049cc 	.word	0x080049cc
 8004918:	080049c8 	.word	0x080049c8

0800491c <_init>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr

08004928 <_fini>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr
