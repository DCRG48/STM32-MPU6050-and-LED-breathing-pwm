
Proto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000697c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b98  08006b98  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba0  08006ba0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000068  08006c10  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08006c10  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a31  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002975  00000000  00000000  00033b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e05  00000000  00000000  00037648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018389  00000000  00000000  0003844d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168ce  00000000  00000000  000507d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000980e2  00000000  00000000  000670a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049d4  00000000  00000000  000ff188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00103b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006a20 	.word	0x08006a20

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08006a20 	.word	0x08006a20

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f824 	bl	8000480 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_d2uiz>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	2200      	movs	r2, #0
 8000448:	4b0c      	ldr	r3, [pc, #48]	; (800047c <__aeabi_d2uiz+0x38>)
 800044a:	0004      	movs	r4, r0
 800044c:	000d      	movs	r5, r1
 800044e:	f000 ffed 	bl	800142c <__aeabi_dcmpge>
 8000452:	2800      	cmp	r0, #0
 8000454:	d104      	bne.n	8000460 <__aeabi_d2uiz+0x1c>
 8000456:	0020      	movs	r0, r4
 8000458:	0029      	movs	r1, r5
 800045a:	f000 ff4d 	bl	80012f8 <__aeabi_d2iz>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <__aeabi_d2uiz+0x38>)
 8000462:	2200      	movs	r2, #0
 8000464:	0020      	movs	r0, r4
 8000466:	0029      	movs	r1, r5
 8000468:	f000 fbc4 	bl	8000bf4 <__aeabi_dsub>
 800046c:	f000 ff44 	bl	80012f8 <__aeabi_d2iz>
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	061b      	lsls	r3, r3, #24
 8000474:	469c      	mov	ip, r3
 8000476:	4460      	add	r0, ip
 8000478:	e7f1      	b.n	800045e <__aeabi_d2uiz+0x1a>
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	41e00000 	.word	0x41e00000

08000480 <__udivmoddi4>:
 8000480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000482:	4657      	mov	r7, sl
 8000484:	464e      	mov	r6, r9
 8000486:	4645      	mov	r5, r8
 8000488:	46de      	mov	lr, fp
 800048a:	b5e0      	push	{r5, r6, r7, lr}
 800048c:	0004      	movs	r4, r0
 800048e:	000d      	movs	r5, r1
 8000490:	4692      	mov	sl, r2
 8000492:	4699      	mov	r9, r3
 8000494:	b083      	sub	sp, #12
 8000496:	428b      	cmp	r3, r1
 8000498:	d830      	bhi.n	80004fc <__udivmoddi4+0x7c>
 800049a:	d02d      	beq.n	80004f8 <__udivmoddi4+0x78>
 800049c:	4649      	mov	r1, r9
 800049e:	4650      	mov	r0, sl
 80004a0:	f000 ffec 	bl	800147c <__clzdi2>
 80004a4:	0029      	movs	r1, r5
 80004a6:	0006      	movs	r6, r0
 80004a8:	0020      	movs	r0, r4
 80004aa:	f000 ffe7 	bl	800147c <__clzdi2>
 80004ae:	1a33      	subs	r3, r6, r0
 80004b0:	4698      	mov	r8, r3
 80004b2:	3b20      	subs	r3, #32
 80004b4:	d434      	bmi.n	8000520 <__udivmoddi4+0xa0>
 80004b6:	469b      	mov	fp, r3
 80004b8:	4653      	mov	r3, sl
 80004ba:	465a      	mov	r2, fp
 80004bc:	4093      	lsls	r3, r2
 80004be:	4642      	mov	r2, r8
 80004c0:	001f      	movs	r7, r3
 80004c2:	4653      	mov	r3, sl
 80004c4:	4093      	lsls	r3, r2
 80004c6:	001e      	movs	r6, r3
 80004c8:	42af      	cmp	r7, r5
 80004ca:	d83b      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d100      	bne.n	80004d2 <__udivmoddi4+0x52>
 80004d0:	e079      	b.n	80005c6 <__udivmoddi4+0x146>
 80004d2:	465b      	mov	r3, fp
 80004d4:	1ba4      	subs	r4, r4, r6
 80004d6:	41bd      	sbcs	r5, r7
 80004d8:	2b00      	cmp	r3, #0
 80004da:	da00      	bge.n	80004de <__udivmoddi4+0x5e>
 80004dc:	e076      	b.n	80005cc <__udivmoddi4+0x14c>
 80004de:	2200      	movs	r2, #0
 80004e0:	2300      	movs	r3, #0
 80004e2:	9200      	str	r2, [sp, #0]
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	465a      	mov	r2, fp
 80004ea:	4093      	lsls	r3, r2
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	4642      	mov	r2, r8
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	e029      	b.n	800054c <__udivmoddi4+0xcc>
 80004f8:	4282      	cmp	r2, r0
 80004fa:	d9cf      	bls.n	800049c <__udivmoddi4+0x1c>
 80004fc:	2200      	movs	r2, #0
 80004fe:	2300      	movs	r3, #0
 8000500:	9200      	str	r2, [sp, #0]
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <__udivmoddi4+0x8e>
 800050a:	601c      	str	r4, [r3, #0]
 800050c:	605d      	str	r5, [r3, #4]
 800050e:	9800      	ldr	r0, [sp, #0]
 8000510:	9901      	ldr	r1, [sp, #4]
 8000512:	b003      	add	sp, #12
 8000514:	bcf0      	pop	{r4, r5, r6, r7}
 8000516:	46bb      	mov	fp, r7
 8000518:	46b2      	mov	sl, r6
 800051a:	46a9      	mov	r9, r5
 800051c:	46a0      	mov	r8, r4
 800051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000520:	4642      	mov	r2, r8
 8000522:	469b      	mov	fp, r3
 8000524:	2320      	movs	r3, #32
 8000526:	1a9b      	subs	r3, r3, r2
 8000528:	4652      	mov	r2, sl
 800052a:	40da      	lsrs	r2, r3
 800052c:	4641      	mov	r1, r8
 800052e:	0013      	movs	r3, r2
 8000530:	464a      	mov	r2, r9
 8000532:	408a      	lsls	r2, r1
 8000534:	0017      	movs	r7, r2
 8000536:	4642      	mov	r2, r8
 8000538:	431f      	orrs	r7, r3
 800053a:	4653      	mov	r3, sl
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d9c3      	bls.n	80004cc <__udivmoddi4+0x4c>
 8000544:	2200      	movs	r2, #0
 8000546:	2300      	movs	r3, #0
 8000548:	9200      	str	r2, [sp, #0]
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	4643      	mov	r3, r8
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0d8      	beq.n	8000504 <__udivmoddi4+0x84>
 8000552:	07fb      	lsls	r3, r7, #31
 8000554:	0872      	lsrs	r2, r6, #1
 8000556:	431a      	orrs	r2, r3
 8000558:	4646      	mov	r6, r8
 800055a:	087b      	lsrs	r3, r7, #1
 800055c:	e00e      	b.n	800057c <__udivmoddi4+0xfc>
 800055e:	42ab      	cmp	r3, r5
 8000560:	d101      	bne.n	8000566 <__udivmoddi4+0xe6>
 8000562:	42a2      	cmp	r2, r4
 8000564:	d80c      	bhi.n	8000580 <__udivmoddi4+0x100>
 8000566:	1aa4      	subs	r4, r4, r2
 8000568:	419d      	sbcs	r5, r3
 800056a:	2001      	movs	r0, #1
 800056c:	1924      	adds	r4, r4, r4
 800056e:	416d      	adcs	r5, r5
 8000570:	2100      	movs	r1, #0
 8000572:	3e01      	subs	r6, #1
 8000574:	1824      	adds	r4, r4, r0
 8000576:	414d      	adcs	r5, r1
 8000578:	2e00      	cmp	r6, #0
 800057a:	d006      	beq.n	800058a <__udivmoddi4+0x10a>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d9ee      	bls.n	800055e <__udivmoddi4+0xde>
 8000580:	3e01      	subs	r6, #1
 8000582:	1924      	adds	r4, r4, r4
 8000584:	416d      	adcs	r5, r5
 8000586:	2e00      	cmp	r6, #0
 8000588:	d1f8      	bne.n	800057c <__udivmoddi4+0xfc>
 800058a:	9800      	ldr	r0, [sp, #0]
 800058c:	9901      	ldr	r1, [sp, #4]
 800058e:	465b      	mov	r3, fp
 8000590:	1900      	adds	r0, r0, r4
 8000592:	4169      	adcs	r1, r5
 8000594:	2b00      	cmp	r3, #0
 8000596:	db24      	blt.n	80005e2 <__udivmoddi4+0x162>
 8000598:	002b      	movs	r3, r5
 800059a:	465a      	mov	r2, fp
 800059c:	4644      	mov	r4, r8
 800059e:	40d3      	lsrs	r3, r2
 80005a0:	002a      	movs	r2, r5
 80005a2:	40e2      	lsrs	r2, r4
 80005a4:	001c      	movs	r4, r3
 80005a6:	465b      	mov	r3, fp
 80005a8:	0015      	movs	r5, r2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db2a      	blt.n	8000604 <__udivmoddi4+0x184>
 80005ae:	0026      	movs	r6, r4
 80005b0:	409e      	lsls	r6, r3
 80005b2:	0033      	movs	r3, r6
 80005b4:	0026      	movs	r6, r4
 80005b6:	4647      	mov	r7, r8
 80005b8:	40be      	lsls	r6, r7
 80005ba:	0032      	movs	r2, r6
 80005bc:	1a80      	subs	r0, r0, r2
 80005be:	4199      	sbcs	r1, r3
 80005c0:	9000      	str	r0, [sp, #0]
 80005c2:	9101      	str	r1, [sp, #4]
 80005c4:	e79e      	b.n	8000504 <__udivmoddi4+0x84>
 80005c6:	42a3      	cmp	r3, r4
 80005c8:	d8bc      	bhi.n	8000544 <__udivmoddi4+0xc4>
 80005ca:	e782      	b.n	80004d2 <__udivmoddi4+0x52>
 80005cc:	4642      	mov	r2, r8
 80005ce:	2320      	movs	r3, #32
 80005d0:	2100      	movs	r1, #0
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	9201      	str	r2, [sp, #4]
 80005da:	2201      	movs	r2, #1
 80005dc:	40da      	lsrs	r2, r3
 80005de:	9201      	str	r2, [sp, #4]
 80005e0:	e785      	b.n	80004ee <__udivmoddi4+0x6e>
 80005e2:	4642      	mov	r2, r8
 80005e4:	2320      	movs	r3, #32
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	002a      	movs	r2, r5
 80005ea:	4646      	mov	r6, r8
 80005ec:	409a      	lsls	r2, r3
 80005ee:	0023      	movs	r3, r4
 80005f0:	40f3      	lsrs	r3, r6
 80005f2:	4644      	mov	r4, r8
 80005f4:	4313      	orrs	r3, r2
 80005f6:	002a      	movs	r2, r5
 80005f8:	40e2      	lsrs	r2, r4
 80005fa:	001c      	movs	r4, r3
 80005fc:	465b      	mov	r3, fp
 80005fe:	0015      	movs	r5, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	dad4      	bge.n	80005ae <__udivmoddi4+0x12e>
 8000604:	4642      	mov	r2, r8
 8000606:	002f      	movs	r7, r5
 8000608:	2320      	movs	r3, #32
 800060a:	0026      	movs	r6, r4
 800060c:	4097      	lsls	r7, r2
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	40de      	lsrs	r6, r3
 8000612:	003b      	movs	r3, r7
 8000614:	4333      	orrs	r3, r6
 8000616:	e7cd      	b.n	80005b4 <__udivmoddi4+0x134>

08000618 <__aeabi_ddiv>:
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	4657      	mov	r7, sl
 800061c:	464e      	mov	r6, r9
 800061e:	4645      	mov	r5, r8
 8000620:	46de      	mov	lr, fp
 8000622:	b5e0      	push	{r5, r6, r7, lr}
 8000624:	030c      	lsls	r4, r1, #12
 8000626:	001f      	movs	r7, r3
 8000628:	004b      	lsls	r3, r1, #1
 800062a:	4681      	mov	r9, r0
 800062c:	4692      	mov	sl, r2
 800062e:	0005      	movs	r5, r0
 8000630:	b085      	sub	sp, #20
 8000632:	0b24      	lsrs	r4, r4, #12
 8000634:	0d5b      	lsrs	r3, r3, #21
 8000636:	0fce      	lsrs	r6, r1, #31
 8000638:	2b00      	cmp	r3, #0
 800063a:	d100      	bne.n	800063e <__aeabi_ddiv+0x26>
 800063c:	e152      	b.n	80008e4 <__aeabi_ddiv+0x2cc>
 800063e:	4ad2      	ldr	r2, [pc, #840]	; (8000988 <__aeabi_ddiv+0x370>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d100      	bne.n	8000646 <__aeabi_ddiv+0x2e>
 8000644:	e16e      	b.n	8000924 <__aeabi_ddiv+0x30c>
 8000646:	0f42      	lsrs	r2, r0, #29
 8000648:	00e4      	lsls	r4, r4, #3
 800064a:	4314      	orrs	r4, r2
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	0412      	lsls	r2, r2, #16
 8000650:	4322      	orrs	r2, r4
 8000652:	4690      	mov	r8, r2
 8000654:	4acd      	ldr	r2, [pc, #820]	; (800098c <__aeabi_ddiv+0x374>)
 8000656:	00c5      	lsls	r5, r0, #3
 8000658:	4693      	mov	fp, r2
 800065a:	449b      	add	fp, r3
 800065c:	2300      	movs	r3, #0
 800065e:	4699      	mov	r9, r3
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	033c      	lsls	r4, r7, #12
 8000664:	007b      	lsls	r3, r7, #1
 8000666:	4650      	mov	r0, sl
 8000668:	0b24      	lsrs	r4, r4, #12
 800066a:	0d5b      	lsrs	r3, r3, #21
 800066c:	0fff      	lsrs	r7, r7, #31
 800066e:	2b00      	cmp	r3, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_ddiv+0x5c>
 8000672:	e11a      	b.n	80008aa <__aeabi_ddiv+0x292>
 8000674:	4ac4      	ldr	r2, [pc, #784]	; (8000988 <__aeabi_ddiv+0x370>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d100      	bne.n	800067c <__aeabi_ddiv+0x64>
 800067a:	e15e      	b.n	800093a <__aeabi_ddiv+0x322>
 800067c:	0f42      	lsrs	r2, r0, #29
 800067e:	00e4      	lsls	r4, r4, #3
 8000680:	4322      	orrs	r2, r4
 8000682:	2480      	movs	r4, #128	; 0x80
 8000684:	0424      	lsls	r4, r4, #16
 8000686:	4314      	orrs	r4, r2
 8000688:	4ac0      	ldr	r2, [pc, #768]	; (800098c <__aeabi_ddiv+0x374>)
 800068a:	00c1      	lsls	r1, r0, #3
 800068c:	4694      	mov	ip, r2
 800068e:	465a      	mov	r2, fp
 8000690:	4463      	add	r3, ip
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	469b      	mov	fp, r3
 8000696:	2000      	movs	r0, #0
 8000698:	0033      	movs	r3, r6
 800069a:	407b      	eors	r3, r7
 800069c:	469a      	mov	sl, r3
 800069e:	464b      	mov	r3, r9
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d827      	bhi.n	80006f4 <__aeabi_ddiv+0xdc>
 80006a4:	4aba      	ldr	r2, [pc, #744]	; (8000990 <__aeabi_ddiv+0x378>)
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	58d3      	ldr	r3, [r2, r3]
 80006aa:	469f      	mov	pc, r3
 80006ac:	46b2      	mov	sl, r6
 80006ae:	9b00      	ldr	r3, [sp, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d016      	beq.n	80006e2 <__aeabi_ddiv+0xca>
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	d100      	bne.n	80006ba <__aeabi_ddiv+0xa2>
 80006b8:	e287      	b.n	8000bca <__aeabi_ddiv+0x5b2>
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d000      	beq.n	80006c0 <__aeabi_ddiv+0xa8>
 80006be:	e0d5      	b.n	800086c <__aeabi_ddiv+0x254>
 80006c0:	2300      	movs	r3, #0
 80006c2:	2200      	movs	r2, #0
 80006c4:	2500      	movs	r5, #0
 80006c6:	051b      	lsls	r3, r3, #20
 80006c8:	4313      	orrs	r3, r2
 80006ca:	4652      	mov	r2, sl
 80006cc:	07d2      	lsls	r2, r2, #31
 80006ce:	4313      	orrs	r3, r2
 80006d0:	0028      	movs	r0, r5
 80006d2:	0019      	movs	r1, r3
 80006d4:	b005      	add	sp, #20
 80006d6:	bcf0      	pop	{r4, r5, r6, r7}
 80006d8:	46bb      	mov	fp, r7
 80006da:	46b2      	mov	sl, r6
 80006dc:	46a9      	mov	r9, r5
 80006de:	46a0      	mov	r8, r4
 80006e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e2:	2200      	movs	r2, #0
 80006e4:	2500      	movs	r5, #0
 80006e6:	4ba8      	ldr	r3, [pc, #672]	; (8000988 <__aeabi_ddiv+0x370>)
 80006e8:	e7ed      	b.n	80006c6 <__aeabi_ddiv+0xae>
 80006ea:	46ba      	mov	sl, r7
 80006ec:	46a0      	mov	r8, r4
 80006ee:	000d      	movs	r5, r1
 80006f0:	9000      	str	r0, [sp, #0]
 80006f2:	e7dc      	b.n	80006ae <__aeabi_ddiv+0x96>
 80006f4:	4544      	cmp	r4, r8
 80006f6:	d200      	bcs.n	80006fa <__aeabi_ddiv+0xe2>
 80006f8:	e1c4      	b.n	8000a84 <__aeabi_ddiv+0x46c>
 80006fa:	d100      	bne.n	80006fe <__aeabi_ddiv+0xe6>
 80006fc:	e1bf      	b.n	8000a7e <__aeabi_ddiv+0x466>
 80006fe:	2301      	movs	r3, #1
 8000700:	425b      	negs	r3, r3
 8000702:	469c      	mov	ip, r3
 8000704:	002e      	movs	r6, r5
 8000706:	4640      	mov	r0, r8
 8000708:	2500      	movs	r5, #0
 800070a:	44e3      	add	fp, ip
 800070c:	0223      	lsls	r3, r4, #8
 800070e:	0e0c      	lsrs	r4, r1, #24
 8000710:	431c      	orrs	r4, r3
 8000712:	0c1b      	lsrs	r3, r3, #16
 8000714:	4699      	mov	r9, r3
 8000716:	0423      	lsls	r3, r4, #16
 8000718:	020a      	lsls	r2, r1, #8
 800071a:	0c1f      	lsrs	r7, r3, #16
 800071c:	4649      	mov	r1, r9
 800071e:	9200      	str	r2, [sp, #0]
 8000720:	9701      	str	r7, [sp, #4]
 8000722:	f7ff fd7f 	bl	8000224 <__aeabi_uidivmod>
 8000726:	0002      	movs	r2, r0
 8000728:	437a      	muls	r2, r7
 800072a:	040b      	lsls	r3, r1, #16
 800072c:	0c31      	lsrs	r1, r6, #16
 800072e:	4680      	mov	r8, r0
 8000730:	4319      	orrs	r1, r3
 8000732:	428a      	cmp	r2, r1
 8000734:	d907      	bls.n	8000746 <__aeabi_ddiv+0x12e>
 8000736:	2301      	movs	r3, #1
 8000738:	425b      	negs	r3, r3
 800073a:	469c      	mov	ip, r3
 800073c:	1909      	adds	r1, r1, r4
 800073e:	44e0      	add	r8, ip
 8000740:	428c      	cmp	r4, r1
 8000742:	d800      	bhi.n	8000746 <__aeabi_ddiv+0x12e>
 8000744:	e201      	b.n	8000b4a <__aeabi_ddiv+0x532>
 8000746:	1a88      	subs	r0, r1, r2
 8000748:	4649      	mov	r1, r9
 800074a:	f7ff fd6b 	bl	8000224 <__aeabi_uidivmod>
 800074e:	9a01      	ldr	r2, [sp, #4]
 8000750:	0436      	lsls	r6, r6, #16
 8000752:	4342      	muls	r2, r0
 8000754:	0409      	lsls	r1, r1, #16
 8000756:	0c36      	lsrs	r6, r6, #16
 8000758:	0003      	movs	r3, r0
 800075a:	430e      	orrs	r6, r1
 800075c:	42b2      	cmp	r2, r6
 800075e:	d904      	bls.n	800076a <__aeabi_ddiv+0x152>
 8000760:	1936      	adds	r6, r6, r4
 8000762:	3b01      	subs	r3, #1
 8000764:	42b4      	cmp	r4, r6
 8000766:	d800      	bhi.n	800076a <__aeabi_ddiv+0x152>
 8000768:	e1e9      	b.n	8000b3e <__aeabi_ddiv+0x526>
 800076a:	1ab0      	subs	r0, r6, r2
 800076c:	4642      	mov	r2, r8
 800076e:	9e00      	ldr	r6, [sp, #0]
 8000770:	0412      	lsls	r2, r2, #16
 8000772:	431a      	orrs	r2, r3
 8000774:	0c33      	lsrs	r3, r6, #16
 8000776:	001f      	movs	r7, r3
 8000778:	0c11      	lsrs	r1, r2, #16
 800077a:	4690      	mov	r8, r2
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	0413      	lsls	r3, r2, #16
 8000780:	0432      	lsls	r2, r6, #16
 8000782:	0c16      	lsrs	r6, r2, #16
 8000784:	0032      	movs	r2, r6
 8000786:	0c1b      	lsrs	r3, r3, #16
 8000788:	435a      	muls	r2, r3
 800078a:	9603      	str	r6, [sp, #12]
 800078c:	437b      	muls	r3, r7
 800078e:	434e      	muls	r6, r1
 8000790:	4379      	muls	r1, r7
 8000792:	0c17      	lsrs	r7, r2, #16
 8000794:	46bc      	mov	ip, r7
 8000796:	199b      	adds	r3, r3, r6
 8000798:	4463      	add	r3, ip
 800079a:	429e      	cmp	r6, r3
 800079c:	d903      	bls.n	80007a6 <__aeabi_ddiv+0x18e>
 800079e:	2680      	movs	r6, #128	; 0x80
 80007a0:	0276      	lsls	r6, r6, #9
 80007a2:	46b4      	mov	ip, r6
 80007a4:	4461      	add	r1, ip
 80007a6:	0c1e      	lsrs	r6, r3, #16
 80007a8:	1871      	adds	r1, r6, r1
 80007aa:	0416      	lsls	r6, r2, #16
 80007ac:	041b      	lsls	r3, r3, #16
 80007ae:	0c36      	lsrs	r6, r6, #16
 80007b0:	199e      	adds	r6, r3, r6
 80007b2:	4288      	cmp	r0, r1
 80007b4:	d302      	bcc.n	80007bc <__aeabi_ddiv+0x1a4>
 80007b6:	d112      	bne.n	80007de <__aeabi_ddiv+0x1c6>
 80007b8:	42b5      	cmp	r5, r6
 80007ba:	d210      	bcs.n	80007de <__aeabi_ddiv+0x1c6>
 80007bc:	4643      	mov	r3, r8
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	9b00      	ldr	r3, [sp, #0]
 80007c2:	469c      	mov	ip, r3
 80007c4:	4465      	add	r5, ip
 80007c6:	001f      	movs	r7, r3
 80007c8:	429d      	cmp	r5, r3
 80007ca:	419b      	sbcs	r3, r3
 80007cc:	425b      	negs	r3, r3
 80007ce:	191b      	adds	r3, r3, r4
 80007d0:	18c0      	adds	r0, r0, r3
 80007d2:	4284      	cmp	r4, r0
 80007d4:	d200      	bcs.n	80007d8 <__aeabi_ddiv+0x1c0>
 80007d6:	e19e      	b.n	8000b16 <__aeabi_ddiv+0x4fe>
 80007d8:	d100      	bne.n	80007dc <__aeabi_ddiv+0x1c4>
 80007da:	e199      	b.n	8000b10 <__aeabi_ddiv+0x4f8>
 80007dc:	4690      	mov	r8, r2
 80007de:	1bae      	subs	r6, r5, r6
 80007e0:	42b5      	cmp	r5, r6
 80007e2:	41ad      	sbcs	r5, r5
 80007e4:	1a40      	subs	r0, r0, r1
 80007e6:	426d      	negs	r5, r5
 80007e8:	1b40      	subs	r0, r0, r5
 80007ea:	4284      	cmp	r4, r0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_ddiv+0x1d8>
 80007ee:	e1d2      	b.n	8000b96 <__aeabi_ddiv+0x57e>
 80007f0:	4649      	mov	r1, r9
 80007f2:	f7ff fd17 	bl	8000224 <__aeabi_uidivmod>
 80007f6:	9a01      	ldr	r2, [sp, #4]
 80007f8:	040b      	lsls	r3, r1, #16
 80007fa:	4342      	muls	r2, r0
 80007fc:	0c31      	lsrs	r1, r6, #16
 80007fe:	0005      	movs	r5, r0
 8000800:	4319      	orrs	r1, r3
 8000802:	428a      	cmp	r2, r1
 8000804:	d900      	bls.n	8000808 <__aeabi_ddiv+0x1f0>
 8000806:	e16c      	b.n	8000ae2 <__aeabi_ddiv+0x4ca>
 8000808:	1a88      	subs	r0, r1, r2
 800080a:	4649      	mov	r1, r9
 800080c:	f7ff fd0a 	bl	8000224 <__aeabi_uidivmod>
 8000810:	9a01      	ldr	r2, [sp, #4]
 8000812:	0436      	lsls	r6, r6, #16
 8000814:	4342      	muls	r2, r0
 8000816:	0409      	lsls	r1, r1, #16
 8000818:	0c36      	lsrs	r6, r6, #16
 800081a:	0003      	movs	r3, r0
 800081c:	430e      	orrs	r6, r1
 800081e:	42b2      	cmp	r2, r6
 8000820:	d900      	bls.n	8000824 <__aeabi_ddiv+0x20c>
 8000822:	e153      	b.n	8000acc <__aeabi_ddiv+0x4b4>
 8000824:	9803      	ldr	r0, [sp, #12]
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	0002      	movs	r2, r0
 800082a:	042d      	lsls	r5, r5, #16
 800082c:	431d      	orrs	r5, r3
 800082e:	9f02      	ldr	r7, [sp, #8]
 8000830:	042b      	lsls	r3, r5, #16
 8000832:	0c1b      	lsrs	r3, r3, #16
 8000834:	435a      	muls	r2, r3
 8000836:	437b      	muls	r3, r7
 8000838:	469c      	mov	ip, r3
 800083a:	0c29      	lsrs	r1, r5, #16
 800083c:	4348      	muls	r0, r1
 800083e:	0c13      	lsrs	r3, r2, #16
 8000840:	4484      	add	ip, r0
 8000842:	4463      	add	r3, ip
 8000844:	4379      	muls	r1, r7
 8000846:	4298      	cmp	r0, r3
 8000848:	d903      	bls.n	8000852 <__aeabi_ddiv+0x23a>
 800084a:	2080      	movs	r0, #128	; 0x80
 800084c:	0240      	lsls	r0, r0, #9
 800084e:	4684      	mov	ip, r0
 8000850:	4461      	add	r1, ip
 8000852:	0c18      	lsrs	r0, r3, #16
 8000854:	0412      	lsls	r2, r2, #16
 8000856:	041b      	lsls	r3, r3, #16
 8000858:	0c12      	lsrs	r2, r2, #16
 800085a:	1840      	adds	r0, r0, r1
 800085c:	189b      	adds	r3, r3, r2
 800085e:	4286      	cmp	r6, r0
 8000860:	d200      	bcs.n	8000864 <__aeabi_ddiv+0x24c>
 8000862:	e100      	b.n	8000a66 <__aeabi_ddiv+0x44e>
 8000864:	d100      	bne.n	8000868 <__aeabi_ddiv+0x250>
 8000866:	e0fb      	b.n	8000a60 <__aeabi_ddiv+0x448>
 8000868:	2301      	movs	r3, #1
 800086a:	431d      	orrs	r5, r3
 800086c:	4b49      	ldr	r3, [pc, #292]	; (8000994 <__aeabi_ddiv+0x37c>)
 800086e:	445b      	add	r3, fp
 8000870:	2b00      	cmp	r3, #0
 8000872:	dc00      	bgt.n	8000876 <__aeabi_ddiv+0x25e>
 8000874:	e0aa      	b.n	80009cc <__aeabi_ddiv+0x3b4>
 8000876:	076a      	lsls	r2, r5, #29
 8000878:	d000      	beq.n	800087c <__aeabi_ddiv+0x264>
 800087a:	e13d      	b.n	8000af8 <__aeabi_ddiv+0x4e0>
 800087c:	08e9      	lsrs	r1, r5, #3
 800087e:	4642      	mov	r2, r8
 8000880:	01d2      	lsls	r2, r2, #7
 8000882:	d506      	bpl.n	8000892 <__aeabi_ddiv+0x27a>
 8000884:	4642      	mov	r2, r8
 8000886:	4b44      	ldr	r3, [pc, #272]	; (8000998 <__aeabi_ddiv+0x380>)
 8000888:	401a      	ands	r2, r3
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	4690      	mov	r8, r2
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	445b      	add	r3, fp
 8000892:	4a42      	ldr	r2, [pc, #264]	; (800099c <__aeabi_ddiv+0x384>)
 8000894:	4293      	cmp	r3, r2
 8000896:	dd00      	ble.n	800089a <__aeabi_ddiv+0x282>
 8000898:	e723      	b.n	80006e2 <__aeabi_ddiv+0xca>
 800089a:	4642      	mov	r2, r8
 800089c:	055b      	lsls	r3, r3, #21
 800089e:	0755      	lsls	r5, r2, #29
 80008a0:	0252      	lsls	r2, r2, #9
 80008a2:	430d      	orrs	r5, r1
 80008a4:	0b12      	lsrs	r2, r2, #12
 80008a6:	0d5b      	lsrs	r3, r3, #21
 80008a8:	e70d      	b.n	80006c6 <__aeabi_ddiv+0xae>
 80008aa:	4651      	mov	r1, sl
 80008ac:	4321      	orrs	r1, r4
 80008ae:	d100      	bne.n	80008b2 <__aeabi_ddiv+0x29a>
 80008b0:	e07c      	b.n	80009ac <__aeabi_ddiv+0x394>
 80008b2:	2c00      	cmp	r4, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_ddiv+0x2a0>
 80008b6:	e0fb      	b.n	8000ab0 <__aeabi_ddiv+0x498>
 80008b8:	0020      	movs	r0, r4
 80008ba:	f000 fdc1 	bl	8001440 <__clzsi2>
 80008be:	0002      	movs	r2, r0
 80008c0:	3a0b      	subs	r2, #11
 80008c2:	231d      	movs	r3, #29
 80008c4:	1a9b      	subs	r3, r3, r2
 80008c6:	4652      	mov	r2, sl
 80008c8:	0001      	movs	r1, r0
 80008ca:	40da      	lsrs	r2, r3
 80008cc:	4653      	mov	r3, sl
 80008ce:	3908      	subs	r1, #8
 80008d0:	408b      	lsls	r3, r1
 80008d2:	408c      	lsls	r4, r1
 80008d4:	0019      	movs	r1, r3
 80008d6:	4314      	orrs	r4, r2
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <__aeabi_ddiv+0x388>)
 80008da:	4458      	add	r0, fp
 80008dc:	469b      	mov	fp, r3
 80008de:	4483      	add	fp, r0
 80008e0:	2000      	movs	r0, #0
 80008e2:	e6d9      	b.n	8000698 <__aeabi_ddiv+0x80>
 80008e4:	0003      	movs	r3, r0
 80008e6:	4323      	orrs	r3, r4
 80008e8:	4698      	mov	r8, r3
 80008ea:	d044      	beq.n	8000976 <__aeabi_ddiv+0x35e>
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_ddiv+0x2da>
 80008f0:	e0cf      	b.n	8000a92 <__aeabi_ddiv+0x47a>
 80008f2:	0020      	movs	r0, r4
 80008f4:	f000 fda4 	bl	8001440 <__clzsi2>
 80008f8:	0001      	movs	r1, r0
 80008fa:	0002      	movs	r2, r0
 80008fc:	390b      	subs	r1, #11
 80008fe:	231d      	movs	r3, #29
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	4649      	mov	r1, r9
 8000904:	0010      	movs	r0, r2
 8000906:	40d9      	lsrs	r1, r3
 8000908:	3808      	subs	r0, #8
 800090a:	4084      	lsls	r4, r0
 800090c:	000b      	movs	r3, r1
 800090e:	464d      	mov	r5, r9
 8000910:	4323      	orrs	r3, r4
 8000912:	4698      	mov	r8, r3
 8000914:	4085      	lsls	r5, r0
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <__aeabi_ddiv+0x38c>)
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	469b      	mov	fp, r3
 800091c:	2300      	movs	r3, #0
 800091e:	4699      	mov	r9, r3
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	e69e      	b.n	8000662 <__aeabi_ddiv+0x4a>
 8000924:	0002      	movs	r2, r0
 8000926:	4322      	orrs	r2, r4
 8000928:	4690      	mov	r8, r2
 800092a:	d11d      	bne.n	8000968 <__aeabi_ddiv+0x350>
 800092c:	2208      	movs	r2, #8
 800092e:	469b      	mov	fp, r3
 8000930:	2302      	movs	r3, #2
 8000932:	2500      	movs	r5, #0
 8000934:	4691      	mov	r9, r2
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	e693      	b.n	8000662 <__aeabi_ddiv+0x4a>
 800093a:	4651      	mov	r1, sl
 800093c:	4321      	orrs	r1, r4
 800093e:	d109      	bne.n	8000954 <__aeabi_ddiv+0x33c>
 8000940:	2302      	movs	r3, #2
 8000942:	464a      	mov	r2, r9
 8000944:	431a      	orrs	r2, r3
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <__aeabi_ddiv+0x390>)
 8000948:	4691      	mov	r9, r2
 800094a:	469c      	mov	ip, r3
 800094c:	2400      	movs	r4, #0
 800094e:	2002      	movs	r0, #2
 8000950:	44e3      	add	fp, ip
 8000952:	e6a1      	b.n	8000698 <__aeabi_ddiv+0x80>
 8000954:	2303      	movs	r3, #3
 8000956:	464a      	mov	r2, r9
 8000958:	431a      	orrs	r2, r3
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <__aeabi_ddiv+0x390>)
 800095c:	4691      	mov	r9, r2
 800095e:	469c      	mov	ip, r3
 8000960:	4651      	mov	r1, sl
 8000962:	2003      	movs	r0, #3
 8000964:	44e3      	add	fp, ip
 8000966:	e697      	b.n	8000698 <__aeabi_ddiv+0x80>
 8000968:	220c      	movs	r2, #12
 800096a:	469b      	mov	fp, r3
 800096c:	2303      	movs	r3, #3
 800096e:	46a0      	mov	r8, r4
 8000970:	4691      	mov	r9, r2
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	e675      	b.n	8000662 <__aeabi_ddiv+0x4a>
 8000976:	2304      	movs	r3, #4
 8000978:	4699      	mov	r9, r3
 800097a:	2300      	movs	r3, #0
 800097c:	469b      	mov	fp, r3
 800097e:	3301      	adds	r3, #1
 8000980:	2500      	movs	r5, #0
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	e66d      	b.n	8000662 <__aeabi_ddiv+0x4a>
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	000007ff 	.word	0x000007ff
 800098c:	fffffc01 	.word	0xfffffc01
 8000990:	08006a48 	.word	0x08006a48
 8000994:	000003ff 	.word	0x000003ff
 8000998:	feffffff 	.word	0xfeffffff
 800099c:	000007fe 	.word	0x000007fe
 80009a0:	000003f3 	.word	0x000003f3
 80009a4:	fffffc0d 	.word	0xfffffc0d
 80009a8:	fffff801 	.word	0xfffff801
 80009ac:	464a      	mov	r2, r9
 80009ae:	2301      	movs	r3, #1
 80009b0:	431a      	orrs	r2, r3
 80009b2:	4691      	mov	r9, r2
 80009b4:	2400      	movs	r4, #0
 80009b6:	2001      	movs	r0, #1
 80009b8:	e66e      	b.n	8000698 <__aeabi_ddiv+0x80>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	469a      	mov	sl, r3
 80009c0:	2500      	movs	r5, #0
 80009c2:	4b88      	ldr	r3, [pc, #544]	; (8000be4 <__aeabi_ddiv+0x5cc>)
 80009c4:	0312      	lsls	r2, r2, #12
 80009c6:	e67e      	b.n	80006c6 <__aeabi_ddiv+0xae>
 80009c8:	2501      	movs	r5, #1
 80009ca:	426d      	negs	r5, r5
 80009cc:	2201      	movs	r2, #1
 80009ce:	1ad2      	subs	r2, r2, r3
 80009d0:	2a38      	cmp	r2, #56	; 0x38
 80009d2:	dd00      	ble.n	80009d6 <__aeabi_ddiv+0x3be>
 80009d4:	e674      	b.n	80006c0 <__aeabi_ddiv+0xa8>
 80009d6:	2a1f      	cmp	r2, #31
 80009d8:	dc00      	bgt.n	80009dc <__aeabi_ddiv+0x3c4>
 80009da:	e0bd      	b.n	8000b58 <__aeabi_ddiv+0x540>
 80009dc:	211f      	movs	r1, #31
 80009de:	4249      	negs	r1, r1
 80009e0:	1acb      	subs	r3, r1, r3
 80009e2:	4641      	mov	r1, r8
 80009e4:	40d9      	lsrs	r1, r3
 80009e6:	000b      	movs	r3, r1
 80009e8:	2a20      	cmp	r2, #32
 80009ea:	d004      	beq.n	80009f6 <__aeabi_ddiv+0x3de>
 80009ec:	4641      	mov	r1, r8
 80009ee:	4a7e      	ldr	r2, [pc, #504]	; (8000be8 <__aeabi_ddiv+0x5d0>)
 80009f0:	445a      	add	r2, fp
 80009f2:	4091      	lsls	r1, r2
 80009f4:	430d      	orrs	r5, r1
 80009f6:	0029      	movs	r1, r5
 80009f8:	1e4a      	subs	r2, r1, #1
 80009fa:	4191      	sbcs	r1, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	2307      	movs	r3, #7
 8000a00:	001d      	movs	r5, r3
 8000a02:	2200      	movs	r2, #0
 8000a04:	400d      	ands	r5, r1
 8000a06:	420b      	tst	r3, r1
 8000a08:	d100      	bne.n	8000a0c <__aeabi_ddiv+0x3f4>
 8000a0a:	e0d0      	b.n	8000bae <__aeabi_ddiv+0x596>
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	2300      	movs	r3, #0
 8000a10:	400a      	ands	r2, r1
 8000a12:	2a04      	cmp	r2, #4
 8000a14:	d100      	bne.n	8000a18 <__aeabi_ddiv+0x400>
 8000a16:	e0c7      	b.n	8000ba8 <__aeabi_ddiv+0x590>
 8000a18:	1d0a      	adds	r2, r1, #4
 8000a1a:	428a      	cmp	r2, r1
 8000a1c:	4189      	sbcs	r1, r1
 8000a1e:	4249      	negs	r1, r1
 8000a20:	185b      	adds	r3, r3, r1
 8000a22:	0011      	movs	r1, r2
 8000a24:	021a      	lsls	r2, r3, #8
 8000a26:	d400      	bmi.n	8000a2a <__aeabi_ddiv+0x412>
 8000a28:	e0be      	b.n	8000ba8 <__aeabi_ddiv+0x590>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e649      	b.n	80006c6 <__aeabi_ddiv+0xae>
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	4643      	mov	r3, r8
 8000a36:	0312      	lsls	r2, r2, #12
 8000a38:	4213      	tst	r3, r2
 8000a3a:	d008      	beq.n	8000a4e <__aeabi_ddiv+0x436>
 8000a3c:	4214      	tst	r4, r2
 8000a3e:	d106      	bne.n	8000a4e <__aeabi_ddiv+0x436>
 8000a40:	4322      	orrs	r2, r4
 8000a42:	0312      	lsls	r2, r2, #12
 8000a44:	46ba      	mov	sl, r7
 8000a46:	000d      	movs	r5, r1
 8000a48:	4b66      	ldr	r3, [pc, #408]	; (8000be4 <__aeabi_ddiv+0x5cc>)
 8000a4a:	0b12      	lsrs	r2, r2, #12
 8000a4c:	e63b      	b.n	80006c6 <__aeabi_ddiv+0xae>
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	4643      	mov	r3, r8
 8000a52:	0312      	lsls	r2, r2, #12
 8000a54:	431a      	orrs	r2, r3
 8000a56:	0312      	lsls	r2, r2, #12
 8000a58:	46b2      	mov	sl, r6
 8000a5a:	4b62      	ldr	r3, [pc, #392]	; (8000be4 <__aeabi_ddiv+0x5cc>)
 8000a5c:	0b12      	lsrs	r2, r2, #12
 8000a5e:	e632      	b.n	80006c6 <__aeabi_ddiv+0xae>
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_ddiv+0x44e>
 8000a64:	e702      	b.n	800086c <__aeabi_ddiv+0x254>
 8000a66:	19a6      	adds	r6, r4, r6
 8000a68:	1e6a      	subs	r2, r5, #1
 8000a6a:	42a6      	cmp	r6, r4
 8000a6c:	d200      	bcs.n	8000a70 <__aeabi_ddiv+0x458>
 8000a6e:	e089      	b.n	8000b84 <__aeabi_ddiv+0x56c>
 8000a70:	4286      	cmp	r6, r0
 8000a72:	d200      	bcs.n	8000a76 <__aeabi_ddiv+0x45e>
 8000a74:	e09f      	b.n	8000bb6 <__aeabi_ddiv+0x59e>
 8000a76:	d100      	bne.n	8000a7a <__aeabi_ddiv+0x462>
 8000a78:	e0af      	b.n	8000bda <__aeabi_ddiv+0x5c2>
 8000a7a:	0015      	movs	r5, r2
 8000a7c:	e6f4      	b.n	8000868 <__aeabi_ddiv+0x250>
 8000a7e:	42a9      	cmp	r1, r5
 8000a80:	d900      	bls.n	8000a84 <__aeabi_ddiv+0x46c>
 8000a82:	e63c      	b.n	80006fe <__aeabi_ddiv+0xe6>
 8000a84:	4643      	mov	r3, r8
 8000a86:	07de      	lsls	r6, r3, #31
 8000a88:	0858      	lsrs	r0, r3, #1
 8000a8a:	086b      	lsrs	r3, r5, #1
 8000a8c:	431e      	orrs	r6, r3
 8000a8e:	07ed      	lsls	r5, r5, #31
 8000a90:	e63c      	b.n	800070c <__aeabi_ddiv+0xf4>
 8000a92:	f000 fcd5 	bl	8001440 <__clzsi2>
 8000a96:	0001      	movs	r1, r0
 8000a98:	0002      	movs	r2, r0
 8000a9a:	3115      	adds	r1, #21
 8000a9c:	3220      	adds	r2, #32
 8000a9e:	291c      	cmp	r1, #28
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_ddiv+0x48c>
 8000aa2:	e72c      	b.n	80008fe <__aeabi_ddiv+0x2e6>
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	3808      	subs	r0, #8
 8000aa8:	4083      	lsls	r3, r0
 8000aaa:	2500      	movs	r5, #0
 8000aac:	4698      	mov	r8, r3
 8000aae:	e732      	b.n	8000916 <__aeabi_ddiv+0x2fe>
 8000ab0:	f000 fcc6 	bl	8001440 <__clzsi2>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	3215      	adds	r2, #21
 8000aba:	3020      	adds	r0, #32
 8000abc:	2a1c      	cmp	r2, #28
 8000abe:	dc00      	bgt.n	8000ac2 <__aeabi_ddiv+0x4aa>
 8000ac0:	e6ff      	b.n	80008c2 <__aeabi_ddiv+0x2aa>
 8000ac2:	4654      	mov	r4, sl
 8000ac4:	3b08      	subs	r3, #8
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	e705      	b.n	80008d8 <__aeabi_ddiv+0x2c0>
 8000acc:	1936      	adds	r6, r6, r4
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	42b4      	cmp	r4, r6
 8000ad2:	d900      	bls.n	8000ad6 <__aeabi_ddiv+0x4be>
 8000ad4:	e6a6      	b.n	8000824 <__aeabi_ddiv+0x20c>
 8000ad6:	42b2      	cmp	r2, r6
 8000ad8:	d800      	bhi.n	8000adc <__aeabi_ddiv+0x4c4>
 8000ada:	e6a3      	b.n	8000824 <__aeabi_ddiv+0x20c>
 8000adc:	1e83      	subs	r3, r0, #2
 8000ade:	1936      	adds	r6, r6, r4
 8000ae0:	e6a0      	b.n	8000824 <__aeabi_ddiv+0x20c>
 8000ae2:	1909      	adds	r1, r1, r4
 8000ae4:	3d01      	subs	r5, #1
 8000ae6:	428c      	cmp	r4, r1
 8000ae8:	d900      	bls.n	8000aec <__aeabi_ddiv+0x4d4>
 8000aea:	e68d      	b.n	8000808 <__aeabi_ddiv+0x1f0>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	d800      	bhi.n	8000af2 <__aeabi_ddiv+0x4da>
 8000af0:	e68a      	b.n	8000808 <__aeabi_ddiv+0x1f0>
 8000af2:	1e85      	subs	r5, r0, #2
 8000af4:	1909      	adds	r1, r1, r4
 8000af6:	e687      	b.n	8000808 <__aeabi_ddiv+0x1f0>
 8000af8:	220f      	movs	r2, #15
 8000afa:	402a      	ands	r2, r5
 8000afc:	2a04      	cmp	r2, #4
 8000afe:	d100      	bne.n	8000b02 <__aeabi_ddiv+0x4ea>
 8000b00:	e6bc      	b.n	800087c <__aeabi_ddiv+0x264>
 8000b02:	1d29      	adds	r1, r5, #4
 8000b04:	42a9      	cmp	r1, r5
 8000b06:	41ad      	sbcs	r5, r5
 8000b08:	426d      	negs	r5, r5
 8000b0a:	08c9      	lsrs	r1, r1, #3
 8000b0c:	44a8      	add	r8, r5
 8000b0e:	e6b6      	b.n	800087e <__aeabi_ddiv+0x266>
 8000b10:	42af      	cmp	r7, r5
 8000b12:	d900      	bls.n	8000b16 <__aeabi_ddiv+0x4fe>
 8000b14:	e662      	b.n	80007dc <__aeabi_ddiv+0x1c4>
 8000b16:	4281      	cmp	r1, r0
 8000b18:	d804      	bhi.n	8000b24 <__aeabi_ddiv+0x50c>
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_ddiv+0x506>
 8000b1c:	e65e      	b.n	80007dc <__aeabi_ddiv+0x1c4>
 8000b1e:	42ae      	cmp	r6, r5
 8000b20:	d800      	bhi.n	8000b24 <__aeabi_ddiv+0x50c>
 8000b22:	e65b      	b.n	80007dc <__aeabi_ddiv+0x1c4>
 8000b24:	2302      	movs	r3, #2
 8000b26:	425b      	negs	r3, r3
 8000b28:	469c      	mov	ip, r3
 8000b2a:	9b00      	ldr	r3, [sp, #0]
 8000b2c:	44e0      	add	r8, ip
 8000b2e:	469c      	mov	ip, r3
 8000b30:	4465      	add	r5, ip
 8000b32:	429d      	cmp	r5, r3
 8000b34:	419b      	sbcs	r3, r3
 8000b36:	425b      	negs	r3, r3
 8000b38:	191b      	adds	r3, r3, r4
 8000b3a:	18c0      	adds	r0, r0, r3
 8000b3c:	e64f      	b.n	80007de <__aeabi_ddiv+0x1c6>
 8000b3e:	42b2      	cmp	r2, r6
 8000b40:	d800      	bhi.n	8000b44 <__aeabi_ddiv+0x52c>
 8000b42:	e612      	b.n	800076a <__aeabi_ddiv+0x152>
 8000b44:	1e83      	subs	r3, r0, #2
 8000b46:	1936      	adds	r6, r6, r4
 8000b48:	e60f      	b.n	800076a <__aeabi_ddiv+0x152>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	d800      	bhi.n	8000b50 <__aeabi_ddiv+0x538>
 8000b4e:	e5fa      	b.n	8000746 <__aeabi_ddiv+0x12e>
 8000b50:	1e83      	subs	r3, r0, #2
 8000b52:	4698      	mov	r8, r3
 8000b54:	1909      	adds	r1, r1, r4
 8000b56:	e5f6      	b.n	8000746 <__aeabi_ddiv+0x12e>
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <__aeabi_ddiv+0x5d4>)
 8000b5a:	0028      	movs	r0, r5
 8000b5c:	445b      	add	r3, fp
 8000b5e:	4641      	mov	r1, r8
 8000b60:	409d      	lsls	r5, r3
 8000b62:	4099      	lsls	r1, r3
 8000b64:	40d0      	lsrs	r0, r2
 8000b66:	1e6b      	subs	r3, r5, #1
 8000b68:	419d      	sbcs	r5, r3
 8000b6a:	4643      	mov	r3, r8
 8000b6c:	4301      	orrs	r1, r0
 8000b6e:	4329      	orrs	r1, r5
 8000b70:	40d3      	lsrs	r3, r2
 8000b72:	074a      	lsls	r2, r1, #29
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x560>
 8000b76:	e755      	b.n	8000a24 <__aeabi_ddiv+0x40c>
 8000b78:	220f      	movs	r2, #15
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	2a04      	cmp	r2, #4
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_ddiv+0x56a>
 8000b80:	e74a      	b.n	8000a18 <__aeabi_ddiv+0x400>
 8000b82:	e74f      	b.n	8000a24 <__aeabi_ddiv+0x40c>
 8000b84:	0015      	movs	r5, r2
 8000b86:	4286      	cmp	r6, r0
 8000b88:	d000      	beq.n	8000b8c <__aeabi_ddiv+0x574>
 8000b8a:	e66d      	b.n	8000868 <__aeabi_ddiv+0x250>
 8000b8c:	9a00      	ldr	r2, [sp, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d000      	beq.n	8000b94 <__aeabi_ddiv+0x57c>
 8000b92:	e669      	b.n	8000868 <__aeabi_ddiv+0x250>
 8000b94:	e66a      	b.n	800086c <__aeabi_ddiv+0x254>
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <__aeabi_ddiv+0x5d8>)
 8000b98:	445b      	add	r3, fp
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	dc00      	bgt.n	8000ba0 <__aeabi_ddiv+0x588>
 8000b9e:	e713      	b.n	80009c8 <__aeabi_ddiv+0x3b0>
 8000ba0:	2501      	movs	r5, #1
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	44a8      	add	r8, r5
 8000ba6:	e66a      	b.n	800087e <__aeabi_ddiv+0x266>
 8000ba8:	075d      	lsls	r5, r3, #29
 8000baa:	025b      	lsls	r3, r3, #9
 8000bac:	0b1a      	lsrs	r2, r3, #12
 8000bae:	08c9      	lsrs	r1, r1, #3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	430d      	orrs	r5, r1
 8000bb4:	e587      	b.n	80006c6 <__aeabi_ddiv+0xae>
 8000bb6:	9900      	ldr	r1, [sp, #0]
 8000bb8:	3d02      	subs	r5, #2
 8000bba:	004a      	lsls	r2, r1, #1
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	41bf      	sbcs	r7, r7
 8000bc0:	427f      	negs	r7, r7
 8000bc2:	193f      	adds	r7, r7, r4
 8000bc4:	19f6      	adds	r6, r6, r7
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	e7dd      	b.n	8000b86 <__aeabi_ddiv+0x56e>
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	4643      	mov	r3, r8
 8000bce:	0312      	lsls	r2, r2, #12
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	0312      	lsls	r2, r2, #12
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <__aeabi_ddiv+0x5cc>)
 8000bd6:	0b12      	lsrs	r2, r2, #12
 8000bd8:	e575      	b.n	80006c6 <__aeabi_ddiv+0xae>
 8000bda:	9900      	ldr	r1, [sp, #0]
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d3ea      	bcc.n	8000bb6 <__aeabi_ddiv+0x59e>
 8000be0:	0015      	movs	r5, r2
 8000be2:	e7d3      	b.n	8000b8c <__aeabi_ddiv+0x574>
 8000be4:	000007ff 	.word	0x000007ff
 8000be8:	0000043e 	.word	0x0000043e
 8000bec:	0000041e 	.word	0x0000041e
 8000bf0:	000003ff 	.word	0x000003ff

08000bf4 <__aeabi_dsub>:
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	4657      	mov	r7, sl
 8000bf8:	464e      	mov	r6, r9
 8000bfa:	4645      	mov	r5, r8
 8000bfc:	46de      	mov	lr, fp
 8000bfe:	b5e0      	push	{r5, r6, r7, lr}
 8000c00:	000d      	movs	r5, r1
 8000c02:	0004      	movs	r4, r0
 8000c04:	0019      	movs	r1, r3
 8000c06:	0010      	movs	r0, r2
 8000c08:	032b      	lsls	r3, r5, #12
 8000c0a:	0a5b      	lsrs	r3, r3, #9
 8000c0c:	0f62      	lsrs	r2, r4, #29
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	00e3      	lsls	r3, r4, #3
 8000c12:	030c      	lsls	r4, r1, #12
 8000c14:	0a64      	lsrs	r4, r4, #9
 8000c16:	0f47      	lsrs	r7, r0, #29
 8000c18:	4327      	orrs	r7, r4
 8000c1a:	4cd0      	ldr	r4, [pc, #832]	; (8000f5c <__aeabi_dsub+0x368>)
 8000c1c:	006e      	lsls	r6, r5, #1
 8000c1e:	4691      	mov	r9, r2
 8000c20:	b083      	sub	sp, #12
 8000c22:	004a      	lsls	r2, r1, #1
 8000c24:	00c0      	lsls	r0, r0, #3
 8000c26:	4698      	mov	r8, r3
 8000c28:	46a2      	mov	sl, r4
 8000c2a:	0d76      	lsrs	r6, r6, #21
 8000c2c:	0fed      	lsrs	r5, r5, #31
 8000c2e:	0d52      	lsrs	r2, r2, #21
 8000c30:	0fc9      	lsrs	r1, r1, #31
 8000c32:	9001      	str	r0, [sp, #4]
 8000c34:	42a2      	cmp	r2, r4
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dsub+0x46>
 8000c38:	e0b9      	b.n	8000dae <__aeabi_dsub+0x1ba>
 8000c3a:	2401      	movs	r4, #1
 8000c3c:	4061      	eors	r1, r4
 8000c3e:	468b      	mov	fp, r1
 8000c40:	428d      	cmp	r5, r1
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dsub+0x52>
 8000c44:	e08d      	b.n	8000d62 <__aeabi_dsub+0x16e>
 8000c46:	1ab4      	subs	r4, r6, r2
 8000c48:	46a4      	mov	ip, r4
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	dc00      	bgt.n	8000c50 <__aeabi_dsub+0x5c>
 8000c4e:	e0b7      	b.n	8000dc0 <__aeabi_dsub+0x1cc>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dsub+0x62>
 8000c54:	e0cb      	b.n	8000dee <__aeabi_dsub+0x1fa>
 8000c56:	4ac1      	ldr	r2, [pc, #772]	; (8000f5c <__aeabi_dsub+0x368>)
 8000c58:	4296      	cmp	r6, r2
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dsub+0x6a>
 8000c5c:	e186      	b.n	8000f6c <__aeabi_dsub+0x378>
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0412      	lsls	r2, r2, #16
 8000c62:	4317      	orrs	r7, r2
 8000c64:	4662      	mov	r2, ip
 8000c66:	2a38      	cmp	r2, #56	; 0x38
 8000c68:	dd00      	ble.n	8000c6c <__aeabi_dsub+0x78>
 8000c6a:	e1a4      	b.n	8000fb6 <__aeabi_dsub+0x3c2>
 8000c6c:	2a1f      	cmp	r2, #31
 8000c6e:	dd00      	ble.n	8000c72 <__aeabi_dsub+0x7e>
 8000c70:	e21d      	b.n	80010ae <__aeabi_dsub+0x4ba>
 8000c72:	4661      	mov	r1, ip
 8000c74:	2220      	movs	r2, #32
 8000c76:	003c      	movs	r4, r7
 8000c78:	1a52      	subs	r2, r2, r1
 8000c7a:	0001      	movs	r1, r0
 8000c7c:	4090      	lsls	r0, r2
 8000c7e:	4094      	lsls	r4, r2
 8000c80:	1e42      	subs	r2, r0, #1
 8000c82:	4190      	sbcs	r0, r2
 8000c84:	4662      	mov	r2, ip
 8000c86:	46a0      	mov	r8, r4
 8000c88:	4664      	mov	r4, ip
 8000c8a:	40d7      	lsrs	r7, r2
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	40e1      	lsrs	r1, r4
 8000c90:	4644      	mov	r4, r8
 8000c92:	1bd2      	subs	r2, r2, r7
 8000c94:	4691      	mov	r9, r2
 8000c96:	430c      	orrs	r4, r1
 8000c98:	4304      	orrs	r4, r0
 8000c9a:	1b1c      	subs	r4, r3, r4
 8000c9c:	42a3      	cmp	r3, r4
 8000c9e:	4192      	sbcs	r2, r2
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4252      	negs	r2, r2
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	4653      	mov	r3, sl
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_dsub+0xbc>
 8000cae:	e12b      	b.n	8000f08 <__aeabi_dsub+0x314>
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	025a      	lsls	r2, r3, #9
 8000cb4:	0a53      	lsrs	r3, r2, #9
 8000cb6:	469a      	mov	sl, r3
 8000cb8:	4653      	mov	r3, sl
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dsub+0xcc>
 8000cbe:	e166      	b.n	8000f8e <__aeabi_dsub+0x39a>
 8000cc0:	4650      	mov	r0, sl
 8000cc2:	f000 fbbd 	bl	8001440 <__clzsi2>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	2220      	movs	r2, #32
 8000ccc:	0020      	movs	r0, r4
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	4651      	mov	r1, sl
 8000cd2:	40d0      	lsrs	r0, r2
 8000cd4:	4099      	lsls	r1, r3
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	409c      	lsls	r4, r3
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	429e      	cmp	r6, r3
 8000cde:	dd00      	ble.n	8000ce2 <__aeabi_dsub+0xee>
 8000ce0:	e164      	b.n	8000fac <__aeabi_dsub+0x3b8>
 8000ce2:	1b9b      	subs	r3, r3, r6
 8000ce4:	1c59      	adds	r1, r3, #1
 8000ce6:	291f      	cmp	r1, #31
 8000ce8:	dd00      	ble.n	8000cec <__aeabi_dsub+0xf8>
 8000cea:	e0fe      	b.n	8000eea <__aeabi_dsub+0x2f6>
 8000cec:	2320      	movs	r3, #32
 8000cee:	0010      	movs	r0, r2
 8000cf0:	0026      	movs	r6, r4
 8000cf2:	1a5b      	subs	r3, r3, r1
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	4098      	lsls	r0, r3
 8000cf8:	40ce      	lsrs	r6, r1
 8000cfa:	40ca      	lsrs	r2, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	4330      	orrs	r0, r6
 8000d02:	4692      	mov	sl, r2
 8000d04:	2600      	movs	r6, #0
 8000d06:	4304      	orrs	r4, r0
 8000d08:	0763      	lsls	r3, r4, #29
 8000d0a:	d009      	beq.n	8000d20 <__aeabi_dsub+0x12c>
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	4023      	ands	r3, r4
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d005      	beq.n	8000d20 <__aeabi_dsub+0x12c>
 8000d14:	1d23      	adds	r3, r4, #4
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	41a4      	sbcs	r4, r4
 8000d1a:	4264      	negs	r4, r4
 8000d1c:	44a2      	add	sl, r4
 8000d1e:	001c      	movs	r4, r3
 8000d20:	4653      	mov	r3, sl
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	d400      	bmi.n	8000d28 <__aeabi_dsub+0x134>
 8000d26:	e0f2      	b.n	8000f0e <__aeabi_dsub+0x31a>
 8000d28:	4b8c      	ldr	r3, [pc, #560]	; (8000f5c <__aeabi_dsub+0x368>)
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	429e      	cmp	r6, r3
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dsub+0x13e>
 8000d30:	e10f      	b.n	8000f52 <__aeabi_dsub+0x35e>
 8000d32:	4653      	mov	r3, sl
 8000d34:	498a      	ldr	r1, [pc, #552]	; (8000f60 <__aeabi_dsub+0x36c>)
 8000d36:	08e4      	lsrs	r4, r4, #3
 8000d38:	400b      	ands	r3, r1
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	075b      	lsls	r3, r3, #29
 8000d3e:	4323      	orrs	r3, r4
 8000d40:	0572      	lsls	r2, r6, #21
 8000d42:	024c      	lsls	r4, r1, #9
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d52      	lsrs	r2, r2, #21
 8000d48:	0512      	lsls	r2, r2, #20
 8000d4a:	4322      	orrs	r2, r4
 8000d4c:	07ed      	lsls	r5, r5, #31
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	0018      	movs	r0, r3
 8000d52:	0011      	movs	r1, r2
 8000d54:	b003      	add	sp, #12
 8000d56:	bcf0      	pop	{r4, r5, r6, r7}
 8000d58:	46bb      	mov	fp, r7
 8000d5a:	46b2      	mov	sl, r6
 8000d5c:	46a9      	mov	r9, r5
 8000d5e:	46a0      	mov	r8, r4
 8000d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d62:	1ab4      	subs	r4, r6, r2
 8000d64:	46a4      	mov	ip, r4
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	dd59      	ble.n	8000e1e <__aeabi_dsub+0x22a>
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_dsub+0x17c>
 8000d6e:	e0b0      	b.n	8000ed2 <__aeabi_dsub+0x2de>
 8000d70:	4556      	cmp	r6, sl
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dsub+0x182>
 8000d74:	e0fa      	b.n	8000f6c <__aeabi_dsub+0x378>
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	0412      	lsls	r2, r2, #16
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	4662      	mov	r2, ip
 8000d7e:	2a38      	cmp	r2, #56	; 0x38
 8000d80:	dd00      	ble.n	8000d84 <__aeabi_dsub+0x190>
 8000d82:	e0d4      	b.n	8000f2e <__aeabi_dsub+0x33a>
 8000d84:	2a1f      	cmp	r2, #31
 8000d86:	dc00      	bgt.n	8000d8a <__aeabi_dsub+0x196>
 8000d88:	e1c0      	b.n	800110c <__aeabi_dsub+0x518>
 8000d8a:	0039      	movs	r1, r7
 8000d8c:	3a20      	subs	r2, #32
 8000d8e:	40d1      	lsrs	r1, r2
 8000d90:	4662      	mov	r2, ip
 8000d92:	2a20      	cmp	r2, #32
 8000d94:	d006      	beq.n	8000da4 <__aeabi_dsub+0x1b0>
 8000d96:	4664      	mov	r4, ip
 8000d98:	2240      	movs	r2, #64	; 0x40
 8000d9a:	1b12      	subs	r2, r2, r4
 8000d9c:	003c      	movs	r4, r7
 8000d9e:	4094      	lsls	r4, r2
 8000da0:	4304      	orrs	r4, r0
 8000da2:	9401      	str	r4, [sp, #4]
 8000da4:	9c01      	ldr	r4, [sp, #4]
 8000da6:	1e62      	subs	r2, r4, #1
 8000da8:	4194      	sbcs	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	e0c3      	b.n	8000f36 <__aeabi_dsub+0x342>
 8000dae:	003c      	movs	r4, r7
 8000db0:	4304      	orrs	r4, r0
 8000db2:	d02b      	beq.n	8000e0c <__aeabi_dsub+0x218>
 8000db4:	468b      	mov	fp, r1
 8000db6:	428d      	cmp	r5, r1
 8000db8:	d02e      	beq.n	8000e18 <__aeabi_dsub+0x224>
 8000dba:	4c6a      	ldr	r4, [pc, #424]	; (8000f64 <__aeabi_dsub+0x370>)
 8000dbc:	46a4      	mov	ip, r4
 8000dbe:	44b4      	add	ip, r6
 8000dc0:	4664      	mov	r4, ip
 8000dc2:	2c00      	cmp	r4, #0
 8000dc4:	d05f      	beq.n	8000e86 <__aeabi_dsub+0x292>
 8000dc6:	1b94      	subs	r4, r2, r6
 8000dc8:	46a4      	mov	ip, r4
 8000dca:	2e00      	cmp	r6, #0
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_dsub+0x1dc>
 8000dce:	e120      	b.n	8001012 <__aeabi_dsub+0x41e>
 8000dd0:	464c      	mov	r4, r9
 8000dd2:	431c      	orrs	r4, r3
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dsub+0x1e4>
 8000dd6:	e1c7      	b.n	8001168 <__aeabi_dsub+0x574>
 8000dd8:	4661      	mov	r1, ip
 8000dda:	1e4c      	subs	r4, r1, #1
 8000ddc:	2901      	cmp	r1, #1
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dsub+0x1ee>
 8000de0:	e223      	b.n	800122a <__aeabi_dsub+0x636>
 8000de2:	4d5e      	ldr	r5, [pc, #376]	; (8000f5c <__aeabi_dsub+0x368>)
 8000de4:	45ac      	cmp	ip, r5
 8000de6:	d100      	bne.n	8000dea <__aeabi_dsub+0x1f6>
 8000de8:	e1d8      	b.n	800119c <__aeabi_dsub+0x5a8>
 8000dea:	46a4      	mov	ip, r4
 8000dec:	e11a      	b.n	8001024 <__aeabi_dsub+0x430>
 8000dee:	003a      	movs	r2, r7
 8000df0:	4302      	orrs	r2, r0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dsub+0x202>
 8000df4:	e0e4      	b.n	8000fc0 <__aeabi_dsub+0x3cc>
 8000df6:	0022      	movs	r2, r4
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	2c01      	cmp	r4, #1
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dsub+0x20c>
 8000dfe:	e1c3      	b.n	8001188 <__aeabi_dsub+0x594>
 8000e00:	4956      	ldr	r1, [pc, #344]	; (8000f5c <__aeabi_dsub+0x368>)
 8000e02:	428c      	cmp	r4, r1
 8000e04:	d100      	bne.n	8000e08 <__aeabi_dsub+0x214>
 8000e06:	e0b1      	b.n	8000f6c <__aeabi_dsub+0x378>
 8000e08:	4694      	mov	ip, r2
 8000e0a:	e72b      	b.n	8000c64 <__aeabi_dsub+0x70>
 8000e0c:	2401      	movs	r4, #1
 8000e0e:	4061      	eors	r1, r4
 8000e10:	468b      	mov	fp, r1
 8000e12:	428d      	cmp	r5, r1
 8000e14:	d000      	beq.n	8000e18 <__aeabi_dsub+0x224>
 8000e16:	e716      	b.n	8000c46 <__aeabi_dsub+0x52>
 8000e18:	4952      	ldr	r1, [pc, #328]	; (8000f64 <__aeabi_dsub+0x370>)
 8000e1a:	468c      	mov	ip, r1
 8000e1c:	44b4      	add	ip, r6
 8000e1e:	4664      	mov	r4, ip
 8000e20:	2c00      	cmp	r4, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dsub+0x232>
 8000e24:	e0d3      	b.n	8000fce <__aeabi_dsub+0x3da>
 8000e26:	1b91      	subs	r1, r2, r6
 8000e28:	468c      	mov	ip, r1
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_dsub+0x23c>
 8000e2e:	e15e      	b.n	80010ee <__aeabi_dsub+0x4fa>
 8000e30:	494a      	ldr	r1, [pc, #296]	; (8000f5c <__aeabi_dsub+0x368>)
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d100      	bne.n	8000e38 <__aeabi_dsub+0x244>
 8000e36:	e1be      	b.n	80011b6 <__aeabi_dsub+0x5c2>
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	464c      	mov	r4, r9
 8000e3c:	0409      	lsls	r1, r1, #16
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	46a1      	mov	r9, r4
 8000e42:	4661      	mov	r1, ip
 8000e44:	2938      	cmp	r1, #56	; 0x38
 8000e46:	dd00      	ble.n	8000e4a <__aeabi_dsub+0x256>
 8000e48:	e1ba      	b.n	80011c0 <__aeabi_dsub+0x5cc>
 8000e4a:	291f      	cmp	r1, #31
 8000e4c:	dd00      	ble.n	8000e50 <__aeabi_dsub+0x25c>
 8000e4e:	e227      	b.n	80012a0 <__aeabi_dsub+0x6ac>
 8000e50:	2420      	movs	r4, #32
 8000e52:	1a64      	subs	r4, r4, r1
 8000e54:	4649      	mov	r1, r9
 8000e56:	40a1      	lsls	r1, r4
 8000e58:	001e      	movs	r6, r3
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	4661      	mov	r1, ip
 8000e5e:	40a3      	lsls	r3, r4
 8000e60:	40ce      	lsrs	r6, r1
 8000e62:	4641      	mov	r1, r8
 8000e64:	1e5c      	subs	r4, r3, #1
 8000e66:	41a3      	sbcs	r3, r4
 8000e68:	4331      	orrs	r1, r6
 8000e6a:	4319      	orrs	r1, r3
 8000e6c:	000c      	movs	r4, r1
 8000e6e:	4663      	mov	r3, ip
 8000e70:	4649      	mov	r1, r9
 8000e72:	40d9      	lsrs	r1, r3
 8000e74:	187f      	adds	r7, r7, r1
 8000e76:	1824      	adds	r4, r4, r0
 8000e78:	4284      	cmp	r4, r0
 8000e7a:	419b      	sbcs	r3, r3
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	469a      	mov	sl, r3
 8000e80:	0016      	movs	r6, r2
 8000e82:	44ba      	add	sl, r7
 8000e84:	e05d      	b.n	8000f42 <__aeabi_dsub+0x34e>
 8000e86:	4c38      	ldr	r4, [pc, #224]	; (8000f68 <__aeabi_dsub+0x374>)
 8000e88:	1c72      	adds	r2, r6, #1
 8000e8a:	4222      	tst	r2, r4
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_dsub+0x29c>
 8000e8e:	e0df      	b.n	8001050 <__aeabi_dsub+0x45c>
 8000e90:	464a      	mov	r2, r9
 8000e92:	431a      	orrs	r2, r3
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d000      	beq.n	8000e9a <__aeabi_dsub+0x2a6>
 8000e98:	e15c      	b.n	8001154 <__aeabi_dsub+0x560>
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_dsub+0x2ac>
 8000e9e:	e1cf      	b.n	8001240 <__aeabi_dsub+0x64c>
 8000ea0:	003a      	movs	r2, r7
 8000ea2:	4302      	orrs	r2, r0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_dsub+0x2b4>
 8000ea6:	e17f      	b.n	80011a8 <__aeabi_dsub+0x5b4>
 8000ea8:	1a1c      	subs	r4, r3, r0
 8000eaa:	464a      	mov	r2, r9
 8000eac:	42a3      	cmp	r3, r4
 8000eae:	4189      	sbcs	r1, r1
 8000eb0:	1bd2      	subs	r2, r2, r7
 8000eb2:	4249      	negs	r1, r1
 8000eb4:	1a52      	subs	r2, r2, r1
 8000eb6:	4692      	mov	sl, r2
 8000eb8:	0212      	lsls	r2, r2, #8
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_dsub+0x2ca>
 8000ebc:	e20a      	b.n	80012d4 <__aeabi_dsub+0x6e0>
 8000ebe:	1ac4      	subs	r4, r0, r3
 8000ec0:	42a0      	cmp	r0, r4
 8000ec2:	4180      	sbcs	r0, r0
 8000ec4:	464b      	mov	r3, r9
 8000ec6:	4240      	negs	r0, r0
 8000ec8:	1aff      	subs	r7, r7, r3
 8000eca:	1a3b      	subs	r3, r7, r0
 8000ecc:	469a      	mov	sl, r3
 8000ece:	465d      	mov	r5, fp
 8000ed0:	e71a      	b.n	8000d08 <__aeabi_dsub+0x114>
 8000ed2:	003a      	movs	r2, r7
 8000ed4:	4302      	orrs	r2, r0
 8000ed6:	d073      	beq.n	8000fc0 <__aeabi_dsub+0x3cc>
 8000ed8:	0022      	movs	r2, r4
 8000eda:	3a01      	subs	r2, #1
 8000edc:	2c01      	cmp	r4, #1
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dsub+0x2ee>
 8000ee0:	e0cb      	b.n	800107a <__aeabi_dsub+0x486>
 8000ee2:	4554      	cmp	r4, sl
 8000ee4:	d042      	beq.n	8000f6c <__aeabi_dsub+0x378>
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	e748      	b.n	8000d7c <__aeabi_dsub+0x188>
 8000eea:	0010      	movs	r0, r2
 8000eec:	3b1f      	subs	r3, #31
 8000eee:	40d8      	lsrs	r0, r3
 8000ef0:	2920      	cmp	r1, #32
 8000ef2:	d003      	beq.n	8000efc <__aeabi_dsub+0x308>
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	1a5b      	subs	r3, r3, r1
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	4314      	orrs	r4, r2
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	2300      	movs	r3, #0
 8000f02:	2600      	movs	r6, #0
 8000f04:	469a      	mov	sl, r3
 8000f06:	4304      	orrs	r4, r0
 8000f08:	0763      	lsls	r3, r4, #29
 8000f0a:	d000      	beq.n	8000f0e <__aeabi_dsub+0x31a>
 8000f0c:	e6fe      	b.n	8000d0c <__aeabi_dsub+0x118>
 8000f0e:	4652      	mov	r2, sl
 8000f10:	08e3      	lsrs	r3, r4, #3
 8000f12:	0752      	lsls	r2, r2, #29
 8000f14:	4313      	orrs	r3, r2
 8000f16:	4652      	mov	r2, sl
 8000f18:	46b4      	mov	ip, r6
 8000f1a:	08d2      	lsrs	r2, r2, #3
 8000f1c:	490f      	ldr	r1, [pc, #60]	; (8000f5c <__aeabi_dsub+0x368>)
 8000f1e:	458c      	cmp	ip, r1
 8000f20:	d02a      	beq.n	8000f78 <__aeabi_dsub+0x384>
 8000f22:	0312      	lsls	r2, r2, #12
 8000f24:	0b14      	lsrs	r4, r2, #12
 8000f26:	4662      	mov	r2, ip
 8000f28:	0552      	lsls	r2, r2, #21
 8000f2a:	0d52      	lsrs	r2, r2, #21
 8000f2c:	e70c      	b.n	8000d48 <__aeabi_dsub+0x154>
 8000f2e:	003c      	movs	r4, r7
 8000f30:	4304      	orrs	r4, r0
 8000f32:	1e62      	subs	r2, r4, #1
 8000f34:	4194      	sbcs	r4, r2
 8000f36:	18e4      	adds	r4, r4, r3
 8000f38:	429c      	cmp	r4, r3
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	444a      	add	r2, r9
 8000f40:	4692      	mov	sl, r2
 8000f42:	4653      	mov	r3, sl
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	d5df      	bpl.n	8000f08 <__aeabi_dsub+0x314>
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__aeabi_dsub+0x368>)
 8000f4a:	3601      	adds	r6, #1
 8000f4c:	429e      	cmp	r6, r3
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_dsub+0x35e>
 8000f50:	e0a0      	b.n	8001094 <__aeabi_dsub+0x4a0>
 8000f52:	0032      	movs	r2, r6
 8000f54:	2400      	movs	r4, #0
 8000f56:	2300      	movs	r3, #0
 8000f58:	e6f6      	b.n	8000d48 <__aeabi_dsub+0x154>
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	000007ff 	.word	0x000007ff
 8000f60:	ff7fffff 	.word	0xff7fffff
 8000f64:	fffff801 	.word	0xfffff801
 8000f68:	000007fe 	.word	0x000007fe
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	464a      	mov	r2, r9
 8000f70:	0752      	lsls	r2, r2, #29
 8000f72:	4313      	orrs	r3, r2
 8000f74:	464a      	mov	r2, r9
 8000f76:	08d2      	lsrs	r2, r2, #3
 8000f78:	0019      	movs	r1, r3
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dsub+0x38c>
 8000f7e:	e1b5      	b.n	80012ec <__aeabi_dsub+0x6f8>
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	0324      	lsls	r4, r4, #12
 8000f84:	4314      	orrs	r4, r2
 8000f86:	0324      	lsls	r4, r4, #12
 8000f88:	4ad5      	ldr	r2, [pc, #852]	; (80012e0 <__aeabi_dsub+0x6ec>)
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	e6dc      	b.n	8000d48 <__aeabi_dsub+0x154>
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f000 fa56 	bl	8001440 <__clzsi2>
 8000f94:	0003      	movs	r3, r0
 8000f96:	3318      	adds	r3, #24
 8000f98:	2b1f      	cmp	r3, #31
 8000f9a:	dc00      	bgt.n	8000f9e <__aeabi_dsub+0x3aa>
 8000f9c:	e695      	b.n	8000cca <__aeabi_dsub+0xd6>
 8000f9e:	0022      	movs	r2, r4
 8000fa0:	3808      	subs	r0, #8
 8000fa2:	4082      	lsls	r2, r0
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	429e      	cmp	r6, r3
 8000fa8:	dc00      	bgt.n	8000fac <__aeabi_dsub+0x3b8>
 8000faa:	e69a      	b.n	8000ce2 <__aeabi_dsub+0xee>
 8000fac:	1af6      	subs	r6, r6, r3
 8000fae:	4bcd      	ldr	r3, [pc, #820]	; (80012e4 <__aeabi_dsub+0x6f0>)
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	4692      	mov	sl, r2
 8000fb4:	e6a8      	b.n	8000d08 <__aeabi_dsub+0x114>
 8000fb6:	003c      	movs	r4, r7
 8000fb8:	4304      	orrs	r4, r0
 8000fba:	1e62      	subs	r2, r4, #1
 8000fbc:	4194      	sbcs	r4, r2
 8000fbe:	e66c      	b.n	8000c9a <__aeabi_dsub+0xa6>
 8000fc0:	464a      	mov	r2, r9
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	0752      	lsls	r2, r2, #29
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	464a      	mov	r2, r9
 8000fca:	08d2      	lsrs	r2, r2, #3
 8000fcc:	e7a6      	b.n	8000f1c <__aeabi_dsub+0x328>
 8000fce:	4cc6      	ldr	r4, [pc, #792]	; (80012e8 <__aeabi_dsub+0x6f4>)
 8000fd0:	1c72      	adds	r2, r6, #1
 8000fd2:	4222      	tst	r2, r4
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_dsub+0x3e4>
 8000fd6:	e0ac      	b.n	8001132 <__aeabi_dsub+0x53e>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	2e00      	cmp	r6, #0
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_dsub+0x3ee>
 8000fe0:	e105      	b.n	80011ee <__aeabi_dsub+0x5fa>
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dsub+0x3f4>
 8000fe6:	e156      	b.n	8001296 <__aeabi_dsub+0x6a2>
 8000fe8:	003a      	movs	r2, r7
 8000fea:	4302      	orrs	r2, r0
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dsub+0x3fc>
 8000fee:	e0db      	b.n	80011a8 <__aeabi_dsub+0x5b4>
 8000ff0:	181c      	adds	r4, r3, r0
 8000ff2:	429c      	cmp	r4, r3
 8000ff4:	419b      	sbcs	r3, r3
 8000ff6:	444f      	add	r7, r9
 8000ff8:	46ba      	mov	sl, r7
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	449a      	add	sl, r3
 8000ffe:	4653      	mov	r3, sl
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	d400      	bmi.n	8001006 <__aeabi_dsub+0x412>
 8001004:	e780      	b.n	8000f08 <__aeabi_dsub+0x314>
 8001006:	4652      	mov	r2, sl
 8001008:	4bb6      	ldr	r3, [pc, #728]	; (80012e4 <__aeabi_dsub+0x6f0>)
 800100a:	2601      	movs	r6, #1
 800100c:	401a      	ands	r2, r3
 800100e:	4692      	mov	sl, r2
 8001010:	e77a      	b.n	8000f08 <__aeabi_dsub+0x314>
 8001012:	4cb3      	ldr	r4, [pc, #716]	; (80012e0 <__aeabi_dsub+0x6ec>)
 8001014:	42a2      	cmp	r2, r4
 8001016:	d100      	bne.n	800101a <__aeabi_dsub+0x426>
 8001018:	e0c0      	b.n	800119c <__aeabi_dsub+0x5a8>
 800101a:	2480      	movs	r4, #128	; 0x80
 800101c:	464d      	mov	r5, r9
 800101e:	0424      	lsls	r4, r4, #16
 8001020:	4325      	orrs	r5, r4
 8001022:	46a9      	mov	r9, r5
 8001024:	4664      	mov	r4, ip
 8001026:	2c38      	cmp	r4, #56	; 0x38
 8001028:	dc53      	bgt.n	80010d2 <__aeabi_dsub+0x4de>
 800102a:	4661      	mov	r1, ip
 800102c:	2c1f      	cmp	r4, #31
 800102e:	dd00      	ble.n	8001032 <__aeabi_dsub+0x43e>
 8001030:	e0cd      	b.n	80011ce <__aeabi_dsub+0x5da>
 8001032:	2520      	movs	r5, #32
 8001034:	001e      	movs	r6, r3
 8001036:	1b2d      	subs	r5, r5, r4
 8001038:	464c      	mov	r4, r9
 800103a:	40ab      	lsls	r3, r5
 800103c:	40ac      	lsls	r4, r5
 800103e:	40ce      	lsrs	r6, r1
 8001040:	1e5d      	subs	r5, r3, #1
 8001042:	41ab      	sbcs	r3, r5
 8001044:	4334      	orrs	r4, r6
 8001046:	4323      	orrs	r3, r4
 8001048:	464c      	mov	r4, r9
 800104a:	40cc      	lsrs	r4, r1
 800104c:	1b3f      	subs	r7, r7, r4
 800104e:	e045      	b.n	80010dc <__aeabi_dsub+0x4e8>
 8001050:	464a      	mov	r2, r9
 8001052:	1a1c      	subs	r4, r3, r0
 8001054:	1bd1      	subs	r1, r2, r7
 8001056:	42a3      	cmp	r3, r4
 8001058:	4192      	sbcs	r2, r2
 800105a:	4252      	negs	r2, r2
 800105c:	4692      	mov	sl, r2
 800105e:	000a      	movs	r2, r1
 8001060:	4651      	mov	r1, sl
 8001062:	1a52      	subs	r2, r2, r1
 8001064:	4692      	mov	sl, r2
 8001066:	0212      	lsls	r2, r2, #8
 8001068:	d500      	bpl.n	800106c <__aeabi_dsub+0x478>
 800106a:	e083      	b.n	8001174 <__aeabi_dsub+0x580>
 800106c:	4653      	mov	r3, sl
 800106e:	4323      	orrs	r3, r4
 8001070:	d000      	beq.n	8001074 <__aeabi_dsub+0x480>
 8001072:	e621      	b.n	8000cb8 <__aeabi_dsub+0xc4>
 8001074:	2200      	movs	r2, #0
 8001076:	2500      	movs	r5, #0
 8001078:	e753      	b.n	8000f22 <__aeabi_dsub+0x32e>
 800107a:	181c      	adds	r4, r3, r0
 800107c:	429c      	cmp	r4, r3
 800107e:	419b      	sbcs	r3, r3
 8001080:	444f      	add	r7, r9
 8001082:	46ba      	mov	sl, r7
 8001084:	425b      	negs	r3, r3
 8001086:	449a      	add	sl, r3
 8001088:	4653      	mov	r3, sl
 800108a:	2601      	movs	r6, #1
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	d400      	bmi.n	8001092 <__aeabi_dsub+0x49e>
 8001090:	e73a      	b.n	8000f08 <__aeabi_dsub+0x314>
 8001092:	2602      	movs	r6, #2
 8001094:	4652      	mov	r2, sl
 8001096:	4b93      	ldr	r3, [pc, #588]	; (80012e4 <__aeabi_dsub+0x6f0>)
 8001098:	2101      	movs	r1, #1
 800109a:	401a      	ands	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	4021      	ands	r1, r4
 80010a0:	0862      	lsrs	r2, r4, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	07dc      	lsls	r4, r3, #31
 80010a6:	085b      	lsrs	r3, r3, #1
 80010a8:	469a      	mov	sl, r3
 80010aa:	4314      	orrs	r4, r2
 80010ac:	e62c      	b.n	8000d08 <__aeabi_dsub+0x114>
 80010ae:	0039      	movs	r1, r7
 80010b0:	3a20      	subs	r2, #32
 80010b2:	40d1      	lsrs	r1, r2
 80010b4:	4662      	mov	r2, ip
 80010b6:	2a20      	cmp	r2, #32
 80010b8:	d006      	beq.n	80010c8 <__aeabi_dsub+0x4d4>
 80010ba:	4664      	mov	r4, ip
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	1b12      	subs	r2, r2, r4
 80010c0:	003c      	movs	r4, r7
 80010c2:	4094      	lsls	r4, r2
 80010c4:	4304      	orrs	r4, r0
 80010c6:	9401      	str	r4, [sp, #4]
 80010c8:	9c01      	ldr	r4, [sp, #4]
 80010ca:	1e62      	subs	r2, r4, #1
 80010cc:	4194      	sbcs	r4, r2
 80010ce:	430c      	orrs	r4, r1
 80010d0:	e5e3      	b.n	8000c9a <__aeabi_dsub+0xa6>
 80010d2:	4649      	mov	r1, r9
 80010d4:	4319      	orrs	r1, r3
 80010d6:	000b      	movs	r3, r1
 80010d8:	1e5c      	subs	r4, r3, #1
 80010da:	41a3      	sbcs	r3, r4
 80010dc:	1ac4      	subs	r4, r0, r3
 80010de:	42a0      	cmp	r0, r4
 80010e0:	419b      	sbcs	r3, r3
 80010e2:	425b      	negs	r3, r3
 80010e4:	1afb      	subs	r3, r7, r3
 80010e6:	469a      	mov	sl, r3
 80010e8:	465d      	mov	r5, fp
 80010ea:	0016      	movs	r6, r2
 80010ec:	e5dc      	b.n	8000ca8 <__aeabi_dsub+0xb4>
 80010ee:	4649      	mov	r1, r9
 80010f0:	4319      	orrs	r1, r3
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dsub+0x502>
 80010f4:	e0ae      	b.n	8001254 <__aeabi_dsub+0x660>
 80010f6:	4661      	mov	r1, ip
 80010f8:	4664      	mov	r4, ip
 80010fa:	3901      	subs	r1, #1
 80010fc:	2c01      	cmp	r4, #1
 80010fe:	d100      	bne.n	8001102 <__aeabi_dsub+0x50e>
 8001100:	e0e0      	b.n	80012c4 <__aeabi_dsub+0x6d0>
 8001102:	4c77      	ldr	r4, [pc, #476]	; (80012e0 <__aeabi_dsub+0x6ec>)
 8001104:	45a4      	cmp	ip, r4
 8001106:	d056      	beq.n	80011b6 <__aeabi_dsub+0x5c2>
 8001108:	468c      	mov	ip, r1
 800110a:	e69a      	b.n	8000e42 <__aeabi_dsub+0x24e>
 800110c:	4661      	mov	r1, ip
 800110e:	2220      	movs	r2, #32
 8001110:	003c      	movs	r4, r7
 8001112:	1a52      	subs	r2, r2, r1
 8001114:	4094      	lsls	r4, r2
 8001116:	0001      	movs	r1, r0
 8001118:	4090      	lsls	r0, r2
 800111a:	46a0      	mov	r8, r4
 800111c:	4664      	mov	r4, ip
 800111e:	1e42      	subs	r2, r0, #1
 8001120:	4190      	sbcs	r0, r2
 8001122:	4662      	mov	r2, ip
 8001124:	40e1      	lsrs	r1, r4
 8001126:	4644      	mov	r4, r8
 8001128:	40d7      	lsrs	r7, r2
 800112a:	430c      	orrs	r4, r1
 800112c:	4304      	orrs	r4, r0
 800112e:	44b9      	add	r9, r7
 8001130:	e701      	b.n	8000f36 <__aeabi_dsub+0x342>
 8001132:	496b      	ldr	r1, [pc, #428]	; (80012e0 <__aeabi_dsub+0x6ec>)
 8001134:	428a      	cmp	r2, r1
 8001136:	d100      	bne.n	800113a <__aeabi_dsub+0x546>
 8001138:	e70c      	b.n	8000f54 <__aeabi_dsub+0x360>
 800113a:	1818      	adds	r0, r3, r0
 800113c:	4298      	cmp	r0, r3
 800113e:	419b      	sbcs	r3, r3
 8001140:	444f      	add	r7, r9
 8001142:	425b      	negs	r3, r3
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	07dc      	lsls	r4, r3, #31
 8001148:	0840      	lsrs	r0, r0, #1
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	469a      	mov	sl, r3
 800114e:	0016      	movs	r6, r2
 8001150:	4304      	orrs	r4, r0
 8001152:	e6d9      	b.n	8000f08 <__aeabi_dsub+0x314>
 8001154:	2a00      	cmp	r2, #0
 8001156:	d000      	beq.n	800115a <__aeabi_dsub+0x566>
 8001158:	e081      	b.n	800125e <__aeabi_dsub+0x66a>
 800115a:	003b      	movs	r3, r7
 800115c:	4303      	orrs	r3, r0
 800115e:	d11d      	bne.n	800119c <__aeabi_dsub+0x5a8>
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	2500      	movs	r5, #0
 8001164:	0312      	lsls	r2, r2, #12
 8001166:	e70b      	b.n	8000f80 <__aeabi_dsub+0x38c>
 8001168:	08c0      	lsrs	r0, r0, #3
 800116a:	077b      	lsls	r3, r7, #29
 800116c:	465d      	mov	r5, fp
 800116e:	4303      	orrs	r3, r0
 8001170:	08fa      	lsrs	r2, r7, #3
 8001172:	e6d3      	b.n	8000f1c <__aeabi_dsub+0x328>
 8001174:	1ac4      	subs	r4, r0, r3
 8001176:	42a0      	cmp	r0, r4
 8001178:	4180      	sbcs	r0, r0
 800117a:	464b      	mov	r3, r9
 800117c:	4240      	negs	r0, r0
 800117e:	1aff      	subs	r7, r7, r3
 8001180:	1a3b      	subs	r3, r7, r0
 8001182:	469a      	mov	sl, r3
 8001184:	465d      	mov	r5, fp
 8001186:	e597      	b.n	8000cb8 <__aeabi_dsub+0xc4>
 8001188:	1a1c      	subs	r4, r3, r0
 800118a:	464a      	mov	r2, r9
 800118c:	42a3      	cmp	r3, r4
 800118e:	419b      	sbcs	r3, r3
 8001190:	1bd7      	subs	r7, r2, r7
 8001192:	425b      	negs	r3, r3
 8001194:	1afb      	subs	r3, r7, r3
 8001196:	469a      	mov	sl, r3
 8001198:	2601      	movs	r6, #1
 800119a:	e585      	b.n	8000ca8 <__aeabi_dsub+0xb4>
 800119c:	08c0      	lsrs	r0, r0, #3
 800119e:	077b      	lsls	r3, r7, #29
 80011a0:	465d      	mov	r5, fp
 80011a2:	4303      	orrs	r3, r0
 80011a4:	08fa      	lsrs	r2, r7, #3
 80011a6:	e6e7      	b.n	8000f78 <__aeabi_dsub+0x384>
 80011a8:	464a      	mov	r2, r9
 80011aa:	08db      	lsrs	r3, r3, #3
 80011ac:	0752      	lsls	r2, r2, #29
 80011ae:	4313      	orrs	r3, r2
 80011b0:	464a      	mov	r2, r9
 80011b2:	08d2      	lsrs	r2, r2, #3
 80011b4:	e6b5      	b.n	8000f22 <__aeabi_dsub+0x32e>
 80011b6:	08c0      	lsrs	r0, r0, #3
 80011b8:	077b      	lsls	r3, r7, #29
 80011ba:	4303      	orrs	r3, r0
 80011bc:	08fa      	lsrs	r2, r7, #3
 80011be:	e6db      	b.n	8000f78 <__aeabi_dsub+0x384>
 80011c0:	4649      	mov	r1, r9
 80011c2:	4319      	orrs	r1, r3
 80011c4:	000b      	movs	r3, r1
 80011c6:	1e59      	subs	r1, r3, #1
 80011c8:	418b      	sbcs	r3, r1
 80011ca:	001c      	movs	r4, r3
 80011cc:	e653      	b.n	8000e76 <__aeabi_dsub+0x282>
 80011ce:	464d      	mov	r5, r9
 80011d0:	3c20      	subs	r4, #32
 80011d2:	40e5      	lsrs	r5, r4
 80011d4:	2920      	cmp	r1, #32
 80011d6:	d005      	beq.n	80011e4 <__aeabi_dsub+0x5f0>
 80011d8:	2440      	movs	r4, #64	; 0x40
 80011da:	1a64      	subs	r4, r4, r1
 80011dc:	4649      	mov	r1, r9
 80011de:	40a1      	lsls	r1, r4
 80011e0:	430b      	orrs	r3, r1
 80011e2:	4698      	mov	r8, r3
 80011e4:	4643      	mov	r3, r8
 80011e6:	1e5c      	subs	r4, r3, #1
 80011e8:	41a3      	sbcs	r3, r4
 80011ea:	432b      	orrs	r3, r5
 80011ec:	e776      	b.n	80010dc <__aeabi_dsub+0x4e8>
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	d0e1      	beq.n	80011b6 <__aeabi_dsub+0x5c2>
 80011f2:	003a      	movs	r2, r7
 80011f4:	08db      	lsrs	r3, r3, #3
 80011f6:	4302      	orrs	r2, r0
 80011f8:	d100      	bne.n	80011fc <__aeabi_dsub+0x608>
 80011fa:	e6b8      	b.n	8000f6e <__aeabi_dsub+0x37a>
 80011fc:	464a      	mov	r2, r9
 80011fe:	0752      	lsls	r2, r2, #29
 8001200:	2480      	movs	r4, #128	; 0x80
 8001202:	4313      	orrs	r3, r2
 8001204:	464a      	mov	r2, r9
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	08d2      	lsrs	r2, r2, #3
 800120a:	4222      	tst	r2, r4
 800120c:	d007      	beq.n	800121e <__aeabi_dsub+0x62a>
 800120e:	08fe      	lsrs	r6, r7, #3
 8001210:	4226      	tst	r6, r4
 8001212:	d104      	bne.n	800121e <__aeabi_dsub+0x62a>
 8001214:	465d      	mov	r5, fp
 8001216:	0032      	movs	r2, r6
 8001218:	08c3      	lsrs	r3, r0, #3
 800121a:	077f      	lsls	r7, r7, #29
 800121c:	433b      	orrs	r3, r7
 800121e:	0f59      	lsrs	r1, r3, #29
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	0749      	lsls	r1, r1, #29
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	430b      	orrs	r3, r1
 8001228:	e6a6      	b.n	8000f78 <__aeabi_dsub+0x384>
 800122a:	1ac4      	subs	r4, r0, r3
 800122c:	42a0      	cmp	r0, r4
 800122e:	4180      	sbcs	r0, r0
 8001230:	464b      	mov	r3, r9
 8001232:	4240      	negs	r0, r0
 8001234:	1aff      	subs	r7, r7, r3
 8001236:	1a3b      	subs	r3, r7, r0
 8001238:	469a      	mov	sl, r3
 800123a:	465d      	mov	r5, fp
 800123c:	2601      	movs	r6, #1
 800123e:	e533      	b.n	8000ca8 <__aeabi_dsub+0xb4>
 8001240:	003b      	movs	r3, r7
 8001242:	4303      	orrs	r3, r0
 8001244:	d100      	bne.n	8001248 <__aeabi_dsub+0x654>
 8001246:	e715      	b.n	8001074 <__aeabi_dsub+0x480>
 8001248:	08c0      	lsrs	r0, r0, #3
 800124a:	077b      	lsls	r3, r7, #29
 800124c:	465d      	mov	r5, fp
 800124e:	4303      	orrs	r3, r0
 8001250:	08fa      	lsrs	r2, r7, #3
 8001252:	e666      	b.n	8000f22 <__aeabi_dsub+0x32e>
 8001254:	08c0      	lsrs	r0, r0, #3
 8001256:	077b      	lsls	r3, r7, #29
 8001258:	4303      	orrs	r3, r0
 800125a:	08fa      	lsrs	r2, r7, #3
 800125c:	e65e      	b.n	8000f1c <__aeabi_dsub+0x328>
 800125e:	003a      	movs	r2, r7
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	4302      	orrs	r2, r0
 8001264:	d100      	bne.n	8001268 <__aeabi_dsub+0x674>
 8001266:	e682      	b.n	8000f6e <__aeabi_dsub+0x37a>
 8001268:	464a      	mov	r2, r9
 800126a:	0752      	lsls	r2, r2, #29
 800126c:	2480      	movs	r4, #128	; 0x80
 800126e:	4313      	orrs	r3, r2
 8001270:	464a      	mov	r2, r9
 8001272:	0324      	lsls	r4, r4, #12
 8001274:	08d2      	lsrs	r2, r2, #3
 8001276:	4222      	tst	r2, r4
 8001278:	d007      	beq.n	800128a <__aeabi_dsub+0x696>
 800127a:	08fe      	lsrs	r6, r7, #3
 800127c:	4226      	tst	r6, r4
 800127e:	d104      	bne.n	800128a <__aeabi_dsub+0x696>
 8001280:	465d      	mov	r5, fp
 8001282:	0032      	movs	r2, r6
 8001284:	08c3      	lsrs	r3, r0, #3
 8001286:	077f      	lsls	r7, r7, #29
 8001288:	433b      	orrs	r3, r7
 800128a:	0f59      	lsrs	r1, r3, #29
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	0749      	lsls	r1, r1, #29
 8001292:	430b      	orrs	r3, r1
 8001294:	e670      	b.n	8000f78 <__aeabi_dsub+0x384>
 8001296:	08c0      	lsrs	r0, r0, #3
 8001298:	077b      	lsls	r3, r7, #29
 800129a:	4303      	orrs	r3, r0
 800129c:	08fa      	lsrs	r2, r7, #3
 800129e:	e640      	b.n	8000f22 <__aeabi_dsub+0x32e>
 80012a0:	464c      	mov	r4, r9
 80012a2:	3920      	subs	r1, #32
 80012a4:	40cc      	lsrs	r4, r1
 80012a6:	4661      	mov	r1, ip
 80012a8:	2920      	cmp	r1, #32
 80012aa:	d006      	beq.n	80012ba <__aeabi_dsub+0x6c6>
 80012ac:	4666      	mov	r6, ip
 80012ae:	2140      	movs	r1, #64	; 0x40
 80012b0:	1b89      	subs	r1, r1, r6
 80012b2:	464e      	mov	r6, r9
 80012b4:	408e      	lsls	r6, r1
 80012b6:	4333      	orrs	r3, r6
 80012b8:	4698      	mov	r8, r3
 80012ba:	4643      	mov	r3, r8
 80012bc:	1e59      	subs	r1, r3, #1
 80012be:	418b      	sbcs	r3, r1
 80012c0:	431c      	orrs	r4, r3
 80012c2:	e5d8      	b.n	8000e76 <__aeabi_dsub+0x282>
 80012c4:	181c      	adds	r4, r3, r0
 80012c6:	4284      	cmp	r4, r0
 80012c8:	4180      	sbcs	r0, r0
 80012ca:	444f      	add	r7, r9
 80012cc:	46ba      	mov	sl, r7
 80012ce:	4240      	negs	r0, r0
 80012d0:	4482      	add	sl, r0
 80012d2:	e6d9      	b.n	8001088 <__aeabi_dsub+0x494>
 80012d4:	4653      	mov	r3, sl
 80012d6:	4323      	orrs	r3, r4
 80012d8:	d100      	bne.n	80012dc <__aeabi_dsub+0x6e8>
 80012da:	e6cb      	b.n	8001074 <__aeabi_dsub+0x480>
 80012dc:	e614      	b.n	8000f08 <__aeabi_dsub+0x314>
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	000007ff 	.word	0x000007ff
 80012e4:	ff7fffff 	.word	0xff7fffff
 80012e8:	000007fe 	.word	0x000007fe
 80012ec:	2300      	movs	r3, #0
 80012ee:	4a01      	ldr	r2, [pc, #4]	; (80012f4 <__aeabi_dsub+0x700>)
 80012f0:	001c      	movs	r4, r3
 80012f2:	e529      	b.n	8000d48 <__aeabi_dsub+0x154>
 80012f4:	000007ff 	.word	0x000007ff

080012f8 <__aeabi_d2iz>:
 80012f8:	000a      	movs	r2, r1
 80012fa:	b530      	push	{r4, r5, lr}
 80012fc:	4c13      	ldr	r4, [pc, #76]	; (800134c <__aeabi_d2iz+0x54>)
 80012fe:	0053      	lsls	r3, r2, #1
 8001300:	0309      	lsls	r1, r1, #12
 8001302:	0005      	movs	r5, r0
 8001304:	0b09      	lsrs	r1, r1, #12
 8001306:	2000      	movs	r0, #0
 8001308:	0d5b      	lsrs	r3, r3, #21
 800130a:	0fd2      	lsrs	r2, r2, #31
 800130c:	42a3      	cmp	r3, r4
 800130e:	dd04      	ble.n	800131a <__aeabi_d2iz+0x22>
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <__aeabi_d2iz+0x58>)
 8001312:	4283      	cmp	r3, r0
 8001314:	dd02      	ble.n	800131c <__aeabi_d2iz+0x24>
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <__aeabi_d2iz+0x5c>)
 8001318:	18d0      	adds	r0, r2, r3
 800131a:	bd30      	pop	{r4, r5, pc}
 800131c:	2080      	movs	r0, #128	; 0x80
 800131e:	0340      	lsls	r0, r0, #13
 8001320:	4301      	orrs	r1, r0
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <__aeabi_d2iz+0x60>)
 8001324:	1ac0      	subs	r0, r0, r3
 8001326:	281f      	cmp	r0, #31
 8001328:	dd08      	ble.n	800133c <__aeabi_d2iz+0x44>
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <__aeabi_d2iz+0x64>)
 800132c:	1ac3      	subs	r3, r0, r3
 800132e:	40d9      	lsrs	r1, r3
 8001330:	000b      	movs	r3, r1
 8001332:	4258      	negs	r0, r3
 8001334:	2a00      	cmp	r2, #0
 8001336:	d1f0      	bne.n	800131a <__aeabi_d2iz+0x22>
 8001338:	0018      	movs	r0, r3
 800133a:	e7ee      	b.n	800131a <__aeabi_d2iz+0x22>
 800133c:	4c08      	ldr	r4, [pc, #32]	; (8001360 <__aeabi_d2iz+0x68>)
 800133e:	40c5      	lsrs	r5, r0
 8001340:	46a4      	mov	ip, r4
 8001342:	4463      	add	r3, ip
 8001344:	4099      	lsls	r1, r3
 8001346:	000b      	movs	r3, r1
 8001348:	432b      	orrs	r3, r5
 800134a:	e7f2      	b.n	8001332 <__aeabi_d2iz+0x3a>
 800134c:	000003fe 	.word	0x000003fe
 8001350:	0000041d 	.word	0x0000041d
 8001354:	7fffffff 	.word	0x7fffffff
 8001358:	00000433 	.word	0x00000433
 800135c:	00000413 	.word	0x00000413
 8001360:	fffffbed 	.word	0xfffffbed

08001364 <__aeabi_i2d>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	2800      	cmp	r0, #0
 8001368:	d016      	beq.n	8001398 <__aeabi_i2d+0x34>
 800136a:	17c3      	asrs	r3, r0, #31
 800136c:	18c5      	adds	r5, r0, r3
 800136e:	405d      	eors	r5, r3
 8001370:	0fc4      	lsrs	r4, r0, #31
 8001372:	0028      	movs	r0, r5
 8001374:	f000 f864 	bl	8001440 <__clzsi2>
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <__aeabi_i2d+0x5c>)
 800137a:	1a1b      	subs	r3, r3, r0
 800137c:	280a      	cmp	r0, #10
 800137e:	dc16      	bgt.n	80013ae <__aeabi_i2d+0x4a>
 8001380:	0002      	movs	r2, r0
 8001382:	002e      	movs	r6, r5
 8001384:	3215      	adds	r2, #21
 8001386:	4096      	lsls	r6, r2
 8001388:	220b      	movs	r2, #11
 800138a:	1a12      	subs	r2, r2, r0
 800138c:	40d5      	lsrs	r5, r2
 800138e:	055b      	lsls	r3, r3, #21
 8001390:	032d      	lsls	r5, r5, #12
 8001392:	0b2d      	lsrs	r5, r5, #12
 8001394:	0d5b      	lsrs	r3, r3, #21
 8001396:	e003      	b.n	80013a0 <__aeabi_i2d+0x3c>
 8001398:	2400      	movs	r4, #0
 800139a:	2300      	movs	r3, #0
 800139c:	2500      	movs	r5, #0
 800139e:	2600      	movs	r6, #0
 80013a0:	051b      	lsls	r3, r3, #20
 80013a2:	432b      	orrs	r3, r5
 80013a4:	07e4      	lsls	r4, r4, #31
 80013a6:	4323      	orrs	r3, r4
 80013a8:	0030      	movs	r0, r6
 80013aa:	0019      	movs	r1, r3
 80013ac:	bd70      	pop	{r4, r5, r6, pc}
 80013ae:	380b      	subs	r0, #11
 80013b0:	4085      	lsls	r5, r0
 80013b2:	055b      	lsls	r3, r3, #21
 80013b4:	032d      	lsls	r5, r5, #12
 80013b6:	2600      	movs	r6, #0
 80013b8:	0b2d      	lsrs	r5, r5, #12
 80013ba:	0d5b      	lsrs	r3, r3, #21
 80013bc:	e7f0      	b.n	80013a0 <__aeabi_i2d+0x3c>
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	0000041e 	.word	0x0000041e

080013c4 <__aeabi_cdrcmple>:
 80013c4:	4684      	mov	ip, r0
 80013c6:	0010      	movs	r0, r2
 80013c8:	4662      	mov	r2, ip
 80013ca:	468c      	mov	ip, r1
 80013cc:	0019      	movs	r1, r3
 80013ce:	4663      	mov	r3, ip
 80013d0:	e000      	b.n	80013d4 <__aeabi_cdcmpeq>
 80013d2:	46c0      	nop			; (mov r8, r8)

080013d4 <__aeabi_cdcmpeq>:
 80013d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013d6:	f000 f905 	bl	80015e4 <__ledf2>
 80013da:	2800      	cmp	r0, #0
 80013dc:	d401      	bmi.n	80013e2 <__aeabi_cdcmpeq+0xe>
 80013de:	2100      	movs	r1, #0
 80013e0:	42c8      	cmn	r0, r1
 80013e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080013e4 <__aeabi_dcmpeq>:
 80013e4:	b510      	push	{r4, lr}
 80013e6:	f000 f855 	bl	8001494 <__eqdf2>
 80013ea:	4240      	negs	r0, r0
 80013ec:	3001      	adds	r0, #1
 80013ee:	bd10      	pop	{r4, pc}

080013f0 <__aeabi_dcmplt>:
 80013f0:	b510      	push	{r4, lr}
 80013f2:	f000 f8f7 	bl	80015e4 <__ledf2>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	db01      	blt.n	80013fe <__aeabi_dcmplt+0xe>
 80013fa:	2000      	movs	r0, #0
 80013fc:	bd10      	pop	{r4, pc}
 80013fe:	2001      	movs	r0, #1
 8001400:	bd10      	pop	{r4, pc}
 8001402:	46c0      	nop			; (mov r8, r8)

08001404 <__aeabi_dcmple>:
 8001404:	b510      	push	{r4, lr}
 8001406:	f000 f8ed 	bl	80015e4 <__ledf2>
 800140a:	2800      	cmp	r0, #0
 800140c:	dd01      	ble.n	8001412 <__aeabi_dcmple+0xe>
 800140e:	2000      	movs	r0, #0
 8001410:	bd10      	pop	{r4, pc}
 8001412:	2001      	movs	r0, #1
 8001414:	bd10      	pop	{r4, pc}
 8001416:	46c0      	nop			; (mov r8, r8)

08001418 <__aeabi_dcmpgt>:
 8001418:	b510      	push	{r4, lr}
 800141a:	f000 f87d 	bl	8001518 <__gedf2>
 800141e:	2800      	cmp	r0, #0
 8001420:	dc01      	bgt.n	8001426 <__aeabi_dcmpgt+0xe>
 8001422:	2000      	movs	r0, #0
 8001424:	bd10      	pop	{r4, pc}
 8001426:	2001      	movs	r0, #1
 8001428:	bd10      	pop	{r4, pc}
 800142a:	46c0      	nop			; (mov r8, r8)

0800142c <__aeabi_dcmpge>:
 800142c:	b510      	push	{r4, lr}
 800142e:	f000 f873 	bl	8001518 <__gedf2>
 8001432:	2800      	cmp	r0, #0
 8001434:	da01      	bge.n	800143a <__aeabi_dcmpge+0xe>
 8001436:	2000      	movs	r0, #0
 8001438:	bd10      	pop	{r4, pc}
 800143a:	2001      	movs	r0, #1
 800143c:	bd10      	pop	{r4, pc}
 800143e:	46c0      	nop			; (mov r8, r8)

08001440 <__clzsi2>:
 8001440:	211c      	movs	r1, #28
 8001442:	2301      	movs	r3, #1
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	4298      	cmp	r0, r3
 8001448:	d301      	bcc.n	800144e <__clzsi2+0xe>
 800144a:	0c00      	lsrs	r0, r0, #16
 800144c:	3910      	subs	r1, #16
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	4298      	cmp	r0, r3
 8001452:	d301      	bcc.n	8001458 <__clzsi2+0x18>
 8001454:	0a00      	lsrs	r0, r0, #8
 8001456:	3908      	subs	r1, #8
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	4298      	cmp	r0, r3
 800145c:	d301      	bcc.n	8001462 <__clzsi2+0x22>
 800145e:	0900      	lsrs	r0, r0, #4
 8001460:	3904      	subs	r1, #4
 8001462:	a202      	add	r2, pc, #8	; (adr r2, 800146c <__clzsi2+0x2c>)
 8001464:	5c10      	ldrb	r0, [r2, r0]
 8001466:	1840      	adds	r0, r0, r1
 8001468:	4770      	bx	lr
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	02020304 	.word	0x02020304
 8001470:	01010101 	.word	0x01010101
	...

0800147c <__clzdi2>:
 800147c:	b510      	push	{r4, lr}
 800147e:	2900      	cmp	r1, #0
 8001480:	d103      	bne.n	800148a <__clzdi2+0xe>
 8001482:	f7ff ffdd 	bl	8001440 <__clzsi2>
 8001486:	3020      	adds	r0, #32
 8001488:	e002      	b.n	8001490 <__clzdi2+0x14>
 800148a:	0008      	movs	r0, r1
 800148c:	f7ff ffd8 	bl	8001440 <__clzsi2>
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			; (mov r8, r8)

08001494 <__eqdf2>:
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	464e      	mov	r6, r9
 8001498:	4645      	mov	r5, r8
 800149a:	46de      	mov	lr, fp
 800149c:	4657      	mov	r7, sl
 800149e:	4690      	mov	r8, r2
 80014a0:	b5e0      	push	{r5, r6, r7, lr}
 80014a2:	0017      	movs	r7, r2
 80014a4:	031a      	lsls	r2, r3, #12
 80014a6:	0b12      	lsrs	r2, r2, #12
 80014a8:	0005      	movs	r5, r0
 80014aa:	4684      	mov	ip, r0
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <__eqdf2+0x80>)
 80014ae:	030e      	lsls	r6, r1, #12
 80014b0:	004c      	lsls	r4, r1, #1
 80014b2:	4691      	mov	r9, r2
 80014b4:	005a      	lsls	r2, r3, #1
 80014b6:	0fdb      	lsrs	r3, r3, #31
 80014b8:	469b      	mov	fp, r3
 80014ba:	0b36      	lsrs	r6, r6, #12
 80014bc:	0d64      	lsrs	r4, r4, #21
 80014be:	0fc9      	lsrs	r1, r1, #31
 80014c0:	0d52      	lsrs	r2, r2, #21
 80014c2:	4284      	cmp	r4, r0
 80014c4:	d019      	beq.n	80014fa <__eqdf2+0x66>
 80014c6:	4282      	cmp	r2, r0
 80014c8:	d010      	beq.n	80014ec <__eqdf2+0x58>
 80014ca:	2001      	movs	r0, #1
 80014cc:	4294      	cmp	r4, r2
 80014ce:	d10e      	bne.n	80014ee <__eqdf2+0x5a>
 80014d0:	454e      	cmp	r6, r9
 80014d2:	d10c      	bne.n	80014ee <__eqdf2+0x5a>
 80014d4:	2001      	movs	r0, #1
 80014d6:	45c4      	cmp	ip, r8
 80014d8:	d109      	bne.n	80014ee <__eqdf2+0x5a>
 80014da:	4559      	cmp	r1, fp
 80014dc:	d017      	beq.n	800150e <__eqdf2+0x7a>
 80014de:	2c00      	cmp	r4, #0
 80014e0:	d105      	bne.n	80014ee <__eqdf2+0x5a>
 80014e2:	0030      	movs	r0, r6
 80014e4:	4328      	orrs	r0, r5
 80014e6:	1e43      	subs	r3, r0, #1
 80014e8:	4198      	sbcs	r0, r3
 80014ea:	e000      	b.n	80014ee <__eqdf2+0x5a>
 80014ec:	2001      	movs	r0, #1
 80014ee:	bcf0      	pop	{r4, r5, r6, r7}
 80014f0:	46bb      	mov	fp, r7
 80014f2:	46b2      	mov	sl, r6
 80014f4:	46a9      	mov	r9, r5
 80014f6:	46a0      	mov	r8, r4
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fa:	0033      	movs	r3, r6
 80014fc:	2001      	movs	r0, #1
 80014fe:	432b      	orrs	r3, r5
 8001500:	d1f5      	bne.n	80014ee <__eqdf2+0x5a>
 8001502:	42a2      	cmp	r2, r4
 8001504:	d1f3      	bne.n	80014ee <__eqdf2+0x5a>
 8001506:	464b      	mov	r3, r9
 8001508:	433b      	orrs	r3, r7
 800150a:	d1f0      	bne.n	80014ee <__eqdf2+0x5a>
 800150c:	e7e2      	b.n	80014d4 <__eqdf2+0x40>
 800150e:	2000      	movs	r0, #0
 8001510:	e7ed      	b.n	80014ee <__eqdf2+0x5a>
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	000007ff 	.word	0x000007ff

08001518 <__gedf2>:
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	4647      	mov	r7, r8
 800151c:	46ce      	mov	lr, r9
 800151e:	0004      	movs	r4, r0
 8001520:	0018      	movs	r0, r3
 8001522:	0016      	movs	r6, r2
 8001524:	031b      	lsls	r3, r3, #12
 8001526:	0b1b      	lsrs	r3, r3, #12
 8001528:	4d2d      	ldr	r5, [pc, #180]	; (80015e0 <__gedf2+0xc8>)
 800152a:	004a      	lsls	r2, r1, #1
 800152c:	4699      	mov	r9, r3
 800152e:	b580      	push	{r7, lr}
 8001530:	0043      	lsls	r3, r0, #1
 8001532:	030f      	lsls	r7, r1, #12
 8001534:	46a4      	mov	ip, r4
 8001536:	46b0      	mov	r8, r6
 8001538:	0b3f      	lsrs	r7, r7, #12
 800153a:	0d52      	lsrs	r2, r2, #21
 800153c:	0fc9      	lsrs	r1, r1, #31
 800153e:	0d5b      	lsrs	r3, r3, #21
 8001540:	0fc0      	lsrs	r0, r0, #31
 8001542:	42aa      	cmp	r2, r5
 8001544:	d021      	beq.n	800158a <__gedf2+0x72>
 8001546:	42ab      	cmp	r3, r5
 8001548:	d013      	beq.n	8001572 <__gedf2+0x5a>
 800154a:	2a00      	cmp	r2, #0
 800154c:	d122      	bne.n	8001594 <__gedf2+0x7c>
 800154e:	433c      	orrs	r4, r7
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <__gedf2+0x42>
 8001554:	464d      	mov	r5, r9
 8001556:	432e      	orrs	r6, r5
 8001558:	d022      	beq.n	80015a0 <__gedf2+0x88>
 800155a:	2c00      	cmp	r4, #0
 800155c:	d010      	beq.n	8001580 <__gedf2+0x68>
 800155e:	4281      	cmp	r1, r0
 8001560:	d022      	beq.n	80015a8 <__gedf2+0x90>
 8001562:	2002      	movs	r0, #2
 8001564:	3901      	subs	r1, #1
 8001566:	4008      	ands	r0, r1
 8001568:	3801      	subs	r0, #1
 800156a:	bcc0      	pop	{r6, r7}
 800156c:	46b9      	mov	r9, r7
 800156e:	46b0      	mov	r8, r6
 8001570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001572:	464d      	mov	r5, r9
 8001574:	432e      	orrs	r6, r5
 8001576:	d129      	bne.n	80015cc <__gedf2+0xb4>
 8001578:	2a00      	cmp	r2, #0
 800157a:	d1f0      	bne.n	800155e <__gedf2+0x46>
 800157c:	433c      	orrs	r4, r7
 800157e:	d1ee      	bne.n	800155e <__gedf2+0x46>
 8001580:	2800      	cmp	r0, #0
 8001582:	d1f2      	bne.n	800156a <__gedf2+0x52>
 8001584:	2001      	movs	r0, #1
 8001586:	4240      	negs	r0, r0
 8001588:	e7ef      	b.n	800156a <__gedf2+0x52>
 800158a:	003d      	movs	r5, r7
 800158c:	4325      	orrs	r5, r4
 800158e:	d11d      	bne.n	80015cc <__gedf2+0xb4>
 8001590:	4293      	cmp	r3, r2
 8001592:	d0ee      	beq.n	8001572 <__gedf2+0x5a>
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1e2      	bne.n	800155e <__gedf2+0x46>
 8001598:	464c      	mov	r4, r9
 800159a:	4326      	orrs	r6, r4
 800159c:	d1df      	bne.n	800155e <__gedf2+0x46>
 800159e:	e7e0      	b.n	8001562 <__gedf2+0x4a>
 80015a0:	2000      	movs	r0, #0
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d0e1      	beq.n	800156a <__gedf2+0x52>
 80015a6:	e7dc      	b.n	8001562 <__gedf2+0x4a>
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dc0a      	bgt.n	80015c2 <__gedf2+0xaa>
 80015ac:	dbe8      	blt.n	8001580 <__gedf2+0x68>
 80015ae:	454f      	cmp	r7, r9
 80015b0:	d8d7      	bhi.n	8001562 <__gedf2+0x4a>
 80015b2:	d00e      	beq.n	80015d2 <__gedf2+0xba>
 80015b4:	2000      	movs	r0, #0
 80015b6:	454f      	cmp	r7, r9
 80015b8:	d2d7      	bcs.n	800156a <__gedf2+0x52>
 80015ba:	2900      	cmp	r1, #0
 80015bc:	d0e2      	beq.n	8001584 <__gedf2+0x6c>
 80015be:	0008      	movs	r0, r1
 80015c0:	e7d3      	b.n	800156a <__gedf2+0x52>
 80015c2:	4243      	negs	r3, r0
 80015c4:	4158      	adcs	r0, r3
 80015c6:	0040      	lsls	r0, r0, #1
 80015c8:	3801      	subs	r0, #1
 80015ca:	e7ce      	b.n	800156a <__gedf2+0x52>
 80015cc:	2002      	movs	r0, #2
 80015ce:	4240      	negs	r0, r0
 80015d0:	e7cb      	b.n	800156a <__gedf2+0x52>
 80015d2:	45c4      	cmp	ip, r8
 80015d4:	d8c5      	bhi.n	8001562 <__gedf2+0x4a>
 80015d6:	2000      	movs	r0, #0
 80015d8:	45c4      	cmp	ip, r8
 80015da:	d2c6      	bcs.n	800156a <__gedf2+0x52>
 80015dc:	e7ed      	b.n	80015ba <__gedf2+0xa2>
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	000007ff 	.word	0x000007ff

080015e4 <__ledf2>:
 80015e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e6:	4647      	mov	r7, r8
 80015e8:	46ce      	mov	lr, r9
 80015ea:	0004      	movs	r4, r0
 80015ec:	0018      	movs	r0, r3
 80015ee:	0016      	movs	r6, r2
 80015f0:	031b      	lsls	r3, r3, #12
 80015f2:	0b1b      	lsrs	r3, r3, #12
 80015f4:	4d2c      	ldr	r5, [pc, #176]	; (80016a8 <__ledf2+0xc4>)
 80015f6:	004a      	lsls	r2, r1, #1
 80015f8:	4699      	mov	r9, r3
 80015fa:	b580      	push	{r7, lr}
 80015fc:	0043      	lsls	r3, r0, #1
 80015fe:	030f      	lsls	r7, r1, #12
 8001600:	46a4      	mov	ip, r4
 8001602:	46b0      	mov	r8, r6
 8001604:	0b3f      	lsrs	r7, r7, #12
 8001606:	0d52      	lsrs	r2, r2, #21
 8001608:	0fc9      	lsrs	r1, r1, #31
 800160a:	0d5b      	lsrs	r3, r3, #21
 800160c:	0fc0      	lsrs	r0, r0, #31
 800160e:	42aa      	cmp	r2, r5
 8001610:	d00d      	beq.n	800162e <__ledf2+0x4a>
 8001612:	42ab      	cmp	r3, r5
 8001614:	d010      	beq.n	8001638 <__ledf2+0x54>
 8001616:	2a00      	cmp	r2, #0
 8001618:	d127      	bne.n	800166a <__ledf2+0x86>
 800161a:	433c      	orrs	r4, r7
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <__ledf2+0x60>
 8001620:	464d      	mov	r5, r9
 8001622:	432e      	orrs	r6, r5
 8001624:	d10e      	bne.n	8001644 <__ledf2+0x60>
 8001626:	2000      	movs	r0, #0
 8001628:	2c00      	cmp	r4, #0
 800162a:	d015      	beq.n	8001658 <__ledf2+0x74>
 800162c:	e00e      	b.n	800164c <__ledf2+0x68>
 800162e:	003d      	movs	r5, r7
 8001630:	4325      	orrs	r5, r4
 8001632:	d110      	bne.n	8001656 <__ledf2+0x72>
 8001634:	4293      	cmp	r3, r2
 8001636:	d118      	bne.n	800166a <__ledf2+0x86>
 8001638:	464d      	mov	r5, r9
 800163a:	432e      	orrs	r6, r5
 800163c:	d10b      	bne.n	8001656 <__ledf2+0x72>
 800163e:	2a00      	cmp	r2, #0
 8001640:	d102      	bne.n	8001648 <__ledf2+0x64>
 8001642:	433c      	orrs	r4, r7
 8001644:	2c00      	cmp	r4, #0
 8001646:	d00b      	beq.n	8001660 <__ledf2+0x7c>
 8001648:	4281      	cmp	r1, r0
 800164a:	d014      	beq.n	8001676 <__ledf2+0x92>
 800164c:	2002      	movs	r0, #2
 800164e:	3901      	subs	r1, #1
 8001650:	4008      	ands	r0, r1
 8001652:	3801      	subs	r0, #1
 8001654:	e000      	b.n	8001658 <__ledf2+0x74>
 8001656:	2002      	movs	r0, #2
 8001658:	bcc0      	pop	{r6, r7}
 800165a:	46b9      	mov	r9, r7
 800165c:	46b0      	mov	r8, r6
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001660:	2800      	cmp	r0, #0
 8001662:	d1f9      	bne.n	8001658 <__ledf2+0x74>
 8001664:	2001      	movs	r0, #1
 8001666:	4240      	negs	r0, r0
 8001668:	e7f6      	b.n	8001658 <__ledf2+0x74>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1ec      	bne.n	8001648 <__ledf2+0x64>
 800166e:	464c      	mov	r4, r9
 8001670:	4326      	orrs	r6, r4
 8001672:	d1e9      	bne.n	8001648 <__ledf2+0x64>
 8001674:	e7ea      	b.n	800164c <__ledf2+0x68>
 8001676:	429a      	cmp	r2, r3
 8001678:	dd04      	ble.n	8001684 <__ledf2+0xa0>
 800167a:	4243      	negs	r3, r0
 800167c:	4158      	adcs	r0, r3
 800167e:	0040      	lsls	r0, r0, #1
 8001680:	3801      	subs	r0, #1
 8001682:	e7e9      	b.n	8001658 <__ledf2+0x74>
 8001684:	429a      	cmp	r2, r3
 8001686:	dbeb      	blt.n	8001660 <__ledf2+0x7c>
 8001688:	454f      	cmp	r7, r9
 800168a:	d8df      	bhi.n	800164c <__ledf2+0x68>
 800168c:	d006      	beq.n	800169c <__ledf2+0xb8>
 800168e:	2000      	movs	r0, #0
 8001690:	454f      	cmp	r7, r9
 8001692:	d2e1      	bcs.n	8001658 <__ledf2+0x74>
 8001694:	2900      	cmp	r1, #0
 8001696:	d0e5      	beq.n	8001664 <__ledf2+0x80>
 8001698:	0008      	movs	r0, r1
 800169a:	e7dd      	b.n	8001658 <__ledf2+0x74>
 800169c:	45c4      	cmp	ip, r8
 800169e:	d8d5      	bhi.n	800164c <__ledf2+0x68>
 80016a0:	2000      	movs	r0, #0
 80016a2:	45c4      	cmp	ip, r8
 80016a4:	d2d8      	bcs.n	8001658 <__ledf2+0x74>
 80016a6:	e7f5      	b.n	8001694 <__ledf2+0xb0>
 80016a8:	000007ff 	.word	0x000007ff

080016ac <Read_IMU_Gyro>:
	temp_degree = ((temperature/340) + 36.53);
}


void Read_IMU_Gyro()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, IMU_GYRO_X_H ,1, Rx_gyro_values, 6, 1000);
 80016b2:	483b      	ldr	r0, [pc, #236]	; (80017a0 <Read_IMU_Gyro+0xf4>)
 80016b4:	23fa      	movs	r3, #250	; 0xfa
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2306      	movs	r3, #6
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	4b39      	ldr	r3, [pc, #228]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	2243      	movs	r2, #67	; 0x43
 80016c6:	21d0      	movs	r1, #208	; 0xd0
 80016c8:	f001 f9f8 	bl	8002abc <HAL_I2C_Mem_Read>
    Gyro_X_data = (int16_t)(Rx_gyro_values[0] << 8 | Rx_gyro_values [1]);
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <Read_IMU_Gyro+0xfc>)
 80016e0:	801a      	strh	r2, [r3, #0]
    Gyro_Y_data = (int16_t)(Rx_gyro_values[2] << 8 | Rx_gyro_values [3]);
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 80016ec:	78db      	ldrb	r3, [r3, #3]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b21a      	sxth	r2, r3
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <Read_IMU_Gyro+0x100>)
 80016f6:	801a      	strh	r2, [r3, #0]
    Gyro_Z_data = (int16_t)(Rx_gyro_values[4] << 8 | Rx_gyro_values [5]);
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 80016fa:	791b      	ldrb	r3, [r3, #4]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b21a      	sxth	r2, r3
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <Read_IMU_Gyro+0xf8>)
 8001702:	795b      	ldrb	r3, [r3, #5]
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <Read_IMU_Gyro+0x104>)
 800170c:	801a      	strh	r2, [r3, #0]

    Gx = Gyro_X_data / 131.0;
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <Read_IMU_Gyro+0xfc>)
 8001710:	2200      	movs	r2, #0
 8001712:	5e9b      	ldrsh	r3, [r3, r2]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fe25 	bl	8001364 <__aeabi_i2d>
 800171a:	2200      	movs	r2, #0
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <Read_IMU_Gyro+0x108>)
 800171e:	f7fe ff7b 	bl	8000618 <__aeabi_ddiv>
 8001722:	0002      	movs	r2, r0
 8001724:	000b      	movs	r3, r1
 8001726:	0010      	movs	r0, r2
 8001728:	0019      	movs	r1, r3
 800172a:	f7fe fe8b 	bl	8000444 <__aeabi_d2uiz>
 800172e:	0003      	movs	r3, r0
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <Read_IMU_Gyro+0x10c>)
 8001734:	701a      	strb	r2, [r3, #0]
    Gy = Gyro_Y_data / 131.0;
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <Read_IMU_Gyro+0x100>)
 8001738:	2200      	movs	r2, #0
 800173a:	5e9b      	ldrsh	r3, [r3, r2]
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff fe11 	bl	8001364 <__aeabi_i2d>
 8001742:	2200      	movs	r2, #0
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <Read_IMU_Gyro+0x108>)
 8001746:	f7fe ff67 	bl	8000618 <__aeabi_ddiv>
 800174a:	0002      	movs	r2, r0
 800174c:	000b      	movs	r3, r1
 800174e:	0010      	movs	r0, r2
 8001750:	0019      	movs	r1, r3
 8001752:	f7fe fe77 	bl	8000444 <__aeabi_d2uiz>
 8001756:	0003      	movs	r3, r0
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <Read_IMU_Gyro+0x110>)
 800175c:	701a      	strb	r2, [r3, #0]
    Gy = Gyro_X_data / 131.0;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <Read_IMU_Gyro+0xfc>)
 8001760:	2200      	movs	r2, #0
 8001762:	5e9b      	ldrsh	r3, [r3, r2]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff fdfd 	bl	8001364 <__aeabi_i2d>
 800176a:	2200      	movs	r2, #0
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <Read_IMU_Gyro+0x108>)
 800176e:	f7fe ff53 	bl	8000618 <__aeabi_ddiv>
 8001772:	0002      	movs	r2, r0
 8001774:	000b      	movs	r3, r1
 8001776:	0010      	movs	r0, r2
 8001778:	0019      	movs	r1, r3
 800177a:	f7fe fe63 	bl	8000444 <__aeabi_d2uiz>
 800177e:	0003      	movs	r3, r0
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <Read_IMU_Gyro+0x110>)
 8001784:	701a      	strb	r2, [r3, #0]

    if (Gx >= 5)
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <Read_IMU_Gyro+0x10c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d905      	bls.n	800179a <Read_IMU_Gyro+0xee>
    {
    	HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 800178e:	23a0      	movs	r3, #160	; 0xa0
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	2102      	movs	r1, #2
 8001794:	0018      	movs	r0, r3
 8001796:	f000 ffa2 	bl	80026de <HAL_GPIO_TogglePin>
	}
}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000098 	.word	0x20000098
 80017a4:	20000088 	.word	0x20000088
 80017a8:	2000008e 	.word	0x2000008e
 80017ac:	20000090 	.word	0x20000090
 80017b0:	20000092 	.word	0x20000092
 80017b4:	40606000 	.word	0x40606000
 80017b8:	20000094 	.word	0x20000094
 80017bc:	20000095 	.word	0x20000095

080017c0 <init_IMU_MPU6050>:


void init_IMU_MPU6050()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af04      	add	r7, sp, #16
uint8_t check;

	HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, 0x75, 1, &check, 1, 1000);
 80017c6:	482a      	ldr	r0, [pc, #168]	; (8001870 <init_IMU_MPU6050+0xb0>)
 80017c8:	23fa      	movs	r3, #250	; 0xfa
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2301      	movs	r3, #1
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	2275      	movs	r2, #117	; 0x75
 80017da:	21d0      	movs	r1, #208	; 0xd0
 80017dc:	f001 f96e 	bl	8002abc <HAL_I2C_Mem_Read>

	if	(check == 0x68)
 80017e0:	1dfb      	adds	r3, r7, #7
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b68      	cmp	r3, #104	; 0x68
 80017e6:	d13f      	bne.n	8001868 <init_IMU_MPU6050+0xa8>

		{
//			HAL_I2C_Mem_Read(&hi2c2, IMU_addr_R, 0x75, 1, &rx_buffer, 1, 1000);
			tx_buffer = 0x07;
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <init_IMU_MPU6050+0xb4>)
 80017ea:	2207      	movs	r2, #7
 80017ec:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_SMPLRT_DIV, 1, &tx_buffer, 1, 1000);
 80017ee:	4820      	ldr	r0, [pc, #128]	; (8001870 <init_IMU_MPU6050+0xb0>)
 80017f0:	23fa      	movs	r3, #250	; 0xfa
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2301      	movs	r3, #1
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <init_IMU_MPU6050+0xb4>)
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	2219      	movs	r2, #25
 8001802:	21d1      	movs	r1, #209	; 0xd1
 8001804:	f001 f82c 	bl	8002860 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <init_IMU_MPU6050+0xb4>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_GYRO_CONFIG, 1, &tx_buffer, 1, 1000);
 800180e:	4818      	ldr	r0, [pc, #96]	; (8001870 <init_IMU_MPU6050+0xb0>)
 8001810:	23fa      	movs	r3, #250	; 0xfa
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <init_IMU_MPU6050+0xb4>)
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	221b      	movs	r2, #27
 8001822:	21d1      	movs	r1, #209	; 0xd1
 8001824:	f001 f81c 	bl	8002860 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <init_IMU_MPU6050+0xb4>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_PWR_MNGMT, 1, &tx_buffer, 1, 1000);
 800182e:	4810      	ldr	r0, [pc, #64]	; (8001870 <init_IMU_MPU6050+0xb0>)
 8001830:	23fa      	movs	r3, #250	; 0xfa
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	9302      	str	r3, [sp, #8]
 8001836:	2301      	movs	r3, #1
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <init_IMU_MPU6050+0xb4>)
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	226b      	movs	r2, #107	; 0x6b
 8001842:	21d1      	movs	r1, #209	; 0xd1
 8001844:	f001 f80c 	bl	8002860 <HAL_I2C_Mem_Write>
			tx_buffer = 0x00;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <init_IMU_MPU6050+0xb4>)
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c2, IMU_addr_W, IMU_REG_ACCEL_CONFIG, 1, &tx_buffer, 1, 1000);
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <init_IMU_MPU6050+0xb0>)
 8001850:	23fa      	movs	r3, #250	; 0xfa
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <init_IMU_MPU6050+0xb4>)
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2301      	movs	r3, #1
 8001860:	221c      	movs	r2, #28
 8001862:	21d1      	movs	r1, #209	; 0xd1
 8001864:	f000 fffc 	bl	8002860 <HAL_I2C_Mem_Write>
		}


}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000098 	.word	0x20000098
 8001874:	20000084 	.word	0x20000084

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187c:	f000 fc50 	bl	8002120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001880:	f000 f82c 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001884:	f000 f97e 	bl	8001b84 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001888:	f000 f8c6 	bl	8001a18 <MX_TIM2_Init>
  MX_I2C2_Init();
 800188c:	f000 f884 	bl	8001998 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001890:	f000 f92a 	bl	8001ae8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_IMU_MPU6050();
 8001894:	f7ff ff94 	bl	80017c0 <init_IMU_MPU6050>
//	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
//	  {
//		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
//		  HAL_Delay(10);
//	  }
	  Read_IMU_Gyro();
 8001898:	f7ff ff08 	bl	80016ac <Read_IMU_Gyro>

	  printf("Hello World\n\r");
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <main+0x38>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f004 fa18 	bl	8005cd4 <iprintf>
	           HAL_Delay(1000);
 80018a4:	23fa      	movs	r3, #250	; 0xfa
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	0018      	movs	r0, r3
 80018aa:	f000 fcbf 	bl	800222c <HAL_Delay>
	  Read_IMU_Gyro();
 80018ae:	e7f3      	b.n	8001898 <main+0x20>
 80018b0:	08006a38 	.word	0x08006a38

080018b4 <__io_putchar>:
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
PUTCHAR_PROTOTYPE
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <__io_putchar+0x20>)
 80018be:	1d39      	adds	r1, r7, #4
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <__io_putchar+0x24>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	f003 fad8 	bl	8004e78 <HAL_UART_Transmit>

  return ch;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	0000ffff 	.word	0x0000ffff
 80018d8:	20000138 	.word	0x20000138

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b093      	sub	sp, #76	; 0x4c
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	2410      	movs	r4, #16
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	0018      	movs	r0, r3
 80018e8:	2338      	movs	r3, #56	; 0x38
 80018ea:	001a      	movs	r2, r3
 80018ec:	2100      	movs	r1, #0
 80018ee:	f004 fa4d 	bl	8005d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f2:	003b      	movs	r3, r7
 80018f4:	0018      	movs	r0, r3
 80018f6:	2310      	movs	r3, #16
 80018f8:	001a      	movs	r2, r3
 80018fa:	2100      	movs	r1, #0
 80018fc:	f004 fa46 	bl	8005d8c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	0018      	movs	r0, r3
 8001906:	f001 fda9 	bl	800345c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2202      	movs	r2, #2
 800190e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2280      	movs	r2, #128	; 0x80
 8001914:	0052      	lsls	r2, r2, #1
 8001916:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001918:	0021      	movs	r1, r4
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001926:	187b      	adds	r3, r7, r1
 8001928:	2202      	movs	r2, #2
 800192a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192c:	187b      	adds	r3, r7, r1
 800192e:	2202      	movs	r2, #2
 8001930:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001932:	187b      	adds	r3, r7, r1
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2208      	movs	r2, #8
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	0292      	lsls	r2, r2, #10
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	0492      	lsls	r2, r2, #18
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800194e:	187b      	adds	r3, r7, r1
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	0592      	lsls	r2, r2, #22
 8001954:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	187b      	adds	r3, r7, r1
 8001958:	0018      	movs	r0, r3
 800195a:	f001 fdcb 	bl	80034f4 <HAL_RCC_OscConfig>
 800195e:	1e03      	subs	r3, r0, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001962:	f000 f9b5 	bl	8001cd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001966:	003b      	movs	r3, r7
 8001968:	2207      	movs	r2, #7
 800196a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	003b      	movs	r3, r7
 800196e:	2202      	movs	r2, #2
 8001970:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001972:	003b      	movs	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001978:	003b      	movs	r3, r7
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197e:	003b      	movs	r3, r7
 8001980:	2102      	movs	r1, #2
 8001982:	0018      	movs	r0, r3
 8001984:	f002 f8d0 	bl	8003b28 <HAL_RCC_ClockConfig>
 8001988:	1e03      	subs	r3, r0, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800198c:	f000 f9a0 	bl	8001cd0 <Error_Handler>
  }
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b013      	add	sp, #76	; 0x4c
 8001996:	bd90      	pop	{r4, r7, pc}

08001998 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
//	RCC->APBENR1 |= (1<<22);  // enable I2C CLOCK
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <MX_I2C2_Init+0x74>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <MX_I2C2_Init+0x78>)
 80019a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10807DBB;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019a4:	4a1b      	ldr	r2, [pc, #108]	; (8001a14 <MX_I2C2_Init+0x7c>)
 80019a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 fe9d 	bl	8002714 <HAL_I2C_Init>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d001      	beq.n	80019e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019de:	f000 f977 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 fca0 	bl	800332c <HAL_I2CEx_ConfigAnalogFilter>
 80019ec:	1e03      	subs	r3, r0, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80019f0:	f000 f96e 	bl	8001cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <MX_I2C2_Init+0x74>)
 80019f6:	2100      	movs	r1, #0
 80019f8:	0018      	movs	r0, r3
 80019fa:	f001 fce3 	bl	80033c4 <HAL_I2CEx_ConfigDigitalFilter>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d001      	beq.n	8001a06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a02:	f000 f965 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000098 	.word	0x20000098
 8001a10:	40005800 	.word	0x40005800
 8001a14:	10807dbb 	.word	0x10807dbb

08001a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	231c      	movs	r3, #28
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	0018      	movs	r0, r3
 8001a24:	230c      	movs	r3, #12
 8001a26:	001a      	movs	r2, r3
 8001a28:	2100      	movs	r1, #0
 8001a2a:	f004 f9af 	bl	8005d8c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	003b      	movs	r3, r7
 8001a30:	0018      	movs	r0, r3
 8001a32:	231c      	movs	r3, #28
 8001a34:	001a      	movs	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	f004 f9a8 	bl	8005d8c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	05d2      	lsls	r2, r2, #23
 8001a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a52:	22ff      	movs	r2, #255	; 0xff
 8001a54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 fbcf 	bl	8004208 <HAL_TIM_PWM_Init>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a6e:	f000 f92f 	bl	8001cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	211c      	movs	r1, #28
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a80:	187a      	adds	r2, r7, r1
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001a84:	0011      	movs	r1, r2
 8001a86:	0018      	movs	r0, r3
 8001a88:	f003 f938 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001a90:	f000 f91e 	bl	8001cd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a94:	003b      	movs	r3, r7
 8001a96:	2260      	movs	r2, #96	; 0x60
 8001a98:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 8001a9a:	003b      	movs	r3, r7
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa0:	003b      	movs	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa6:	003b      	movs	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aac:	0039      	movs	r1, r7
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f002 fcde 	bl	8004474 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	1e03      	subs	r3, r0, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8001abc:	f000 f908 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start(&htim2);
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f002 fb54 	bl	8004170 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001aca:	2108      	movs	r1, #8
 8001acc:	0018      	movs	r0, r3
 8001ace:	f002 fbf3 	bl	80042b8 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <MX_TIM2_Init+0xcc>)
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 f98d 	bl	8001df4 <HAL_TIM_MspPostInit>

}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b00a      	add	sp, #40	; 0x28
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	200000ec 	.word	0x200000ec

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <MX_USART1_UART_Init+0x98>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001af4:	22e1      	movs	r2, #225	; 0xe1
 8001af6:	0252      	lsls	r2, r2, #9
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b34:	0018      	movs	r0, r3
 8001b36:	f003 f949 	bl	8004dcc <HAL_UART_Init>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b3e:	f000 f8c7 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	0018      	movs	r0, r3
 8001b48:	f003 ff20 	bl	800598c <HAL_UARTEx_SetTxFifoThreshold>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b50:	f000 f8be 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b56:	2100      	movs	r1, #0
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f003 ff57 	bl	8005a0c <HAL_UARTEx_SetRxFifoThreshold>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001b62:	f000 f8b5 	bl	8001cd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f003 fed5 	bl	8005918 <HAL_UARTEx_DisableFifoMode>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001b72:	f000 f8ad 	bl	8001cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000138 	.word	0x20000138
 8001b80:	40013800 	.word	0x40013800

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	240c      	movs	r4, #12
 8001b8c:	193b      	adds	r3, r7, r4
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2314      	movs	r3, #20
 8001b92:	001a      	movs	r2, r3
 8001b94:	2100      	movs	r1, #0
 8001b96:	f004 f8f9 	bl	8005d8c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b4b      	ldr	r3, [pc, #300]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba6:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	2204      	movs	r2, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb6:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bbe:	4b42      	ldr	r3, [pc, #264]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	; (8001cc8 <MX_GPIO_Init+0x144>)
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	2202      	movs	r2, #2
 8001bdc:	4013      	ands	r3, r2
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8001be2:	23a0      	movs	r3, #160	; 0xa0
 8001be4:	05db      	lsls	r3, r3, #23
 8001be6:	2200      	movs	r2, #0
 8001be8:	213a      	movs	r1, #58	; 0x3a
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 fd5a 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <MX_GPIO_Init+0x148>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 fd54 	bl	80026a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
 8001bfc:	193b      	adds	r3, r7, r4
 8001bfe:	223a      	movs	r2, #58	; 0x3a
 8001c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	2201      	movs	r2, #1
 8001c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	193b      	adds	r3, r7, r4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	193a      	adds	r2, r7, r4
 8001c16:	23a0      	movs	r3, #160	; 0xa0
 8001c18:	05db      	lsls	r3, r3, #23
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f000 fbdd 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	22c0      	movs	r2, #192	; 0xc0
 8001c26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	193b      	adds	r3, r7, r4
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	193b      	adds	r3, r7, r4
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	193b      	adds	r3, r7, r4
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	193a      	adds	r2, r7, r4
 8001c42:	23a0      	movs	r3, #160	; 0xa0
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	0011      	movs	r1, r2
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fbc7 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001c4e:	193b      	adds	r3, r7, r4
 8001c50:	2209      	movs	r2, #9
 8001c52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	193b      	adds	r3, r7, r4
 8001c56:	2202      	movs	r2, #2
 8001c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <MX_GPIO_Init+0x148>)
 8001c70:	0019      	movs	r1, r3
 8001c72:	0010      	movs	r0, r2
 8001c74:	f000 fbb2 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	2201      	movs	r2, #1
 8001c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <MX_GPIO_Init+0x148>)
 8001c94:	0019      	movs	r1, r3
 8001c96:	0010      	movs	r0, r2
 8001c98:	f000 fba0 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c9c:	0021      	movs	r1, r4
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0212      	lsls	r2, r2, #8
 8001ca4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	187a      	adds	r2, r7, r1
 8001cb4:	23a0      	movs	r3, #160	; 0xa0
 8001cb6:	05db      	lsls	r3, r3, #23
 8001cb8:	0011      	movs	r1, r2
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 fb8e 	bl	80023dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b009      	add	sp, #36	; 0x24
 8001cc6:	bd90      	pop	{r4, r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	50000400 	.word	0x50000400

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	430a      	orrs	r2, r1
 8001cec:	641a      	str	r2, [r3, #64]	; 0x40
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	0549      	lsls	r1, r1, #21
 8001d04:	430a      	orrs	r2, r1
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_MspInit+0x44>)
 8001d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	055b      	lsls	r3, r3, #21
 8001d10:	4013      	ands	r3, r2
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b002      	add	sp, #8
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	2414      	movs	r4, #20
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	0018      	movs	r0, r3
 8001d32:	2314      	movs	r3, #20
 8001d34:	001a      	movs	r2, r3
 8001d36:	2100      	movs	r1, #0
 8001d38:	f004 f828 	bl	8005d8c <memset>
  if(hi2c->Instance==I2C2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_I2C_MspInit+0x90>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d131      	bne.n	8001daa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_I2C_MspInit+0x94>)
 8001d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_I2C_MspInit+0x94>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_I2C_MspInit+0x94>)
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	2201      	movs	r2, #1
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d5e:	193b      	adds	r3, r7, r4
 8001d60:	22c0      	movs	r2, #192	; 0xc0
 8001d62:	0152      	lsls	r2, r2, #5
 8001d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d66:	0021      	movs	r1, r4
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2212      	movs	r2, #18
 8001d6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	2201      	movs	r2, #1
 8001d78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2206      	movs	r2, #6
 8001d7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	187a      	adds	r2, r7, r1
 8001d82:	23a0      	movs	r3, #160	; 0xa0
 8001d84:	05db      	lsls	r3, r3, #23
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 fb27 	bl	80023dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_I2C_MspInit+0x94>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_I2C_MspInit+0x94>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	03c9      	lsls	r1, r1, #15
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_I2C_MspInit+0x94>)
 8001d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	03db      	lsls	r3, r3, #15
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b00b      	add	sp, #44	; 0x2c
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40005800 	.word	0x40005800
 8001db8:	40021000 	.word	0x40021000

08001dbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d10b      	bne.n	8001de8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_TIM_PWM_MspInit+0x34>)
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	2201      	movs	r2, #1
 8001de2:	4013      	ands	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	240c      	movs	r4, #12
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	0018      	movs	r0, r3
 8001e02:	2314      	movs	r3, #20
 8001e04:	001a      	movs	r2, r3
 8001e06:	2100      	movs	r1, #0
 8001e08:	f003 ffc0 	bl	8005d8c <memset>
  if(htim->Instance==TIM2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	05db      	lsls	r3, r3, #23
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d122      	bne.n	8001e5e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_TIM_MspPostInit+0x74>)
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_TIM_MspPostInit+0x74>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_TIM_MspPostInit+0x74>)
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	0021      	movs	r1, r4
 8001e32:	187b      	adds	r3, r7, r1
 8001e34:	2204      	movs	r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	187a      	adds	r2, r7, r1
 8001e52:	23a0      	movs	r3, #160	; 0xa0
 8001e54:	05db      	lsls	r3, r3, #23
 8001e56:	0011      	movs	r1, r2
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f000 fabf 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b009      	add	sp, #36	; 0x24
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	40021000 	.word	0x40021000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b095      	sub	sp, #84	; 0x54
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	233c      	movs	r3, #60	; 0x3c
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	0018      	movs	r0, r3
 8001e7a:	2314      	movs	r3, #20
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	2100      	movs	r1, #0
 8001e80:	f003 ff84 	bl	8005d8c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e84:	2414      	movs	r4, #20
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	0018      	movs	r0, r3
 8001e8a:	2328      	movs	r3, #40	; 0x28
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	2100      	movs	r1, #0
 8001e90:	f003 ff7c 	bl	8005d8c <memset>
  if(huart->Instance==USART1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2d      	ldr	r2, [pc, #180]	; (8001f50 <HAL_UART_MspInit+0xe4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d153      	bne.n	8001f46 <HAL_UART_MspInit+0xda>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e9e:	193b      	adds	r3, r7, r4
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eaa:	193b      	adds	r3, r7, r4
 8001eac:	0018      	movs	r0, r3
 8001eae:	f001 ffe5 	bl	8003e7c <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001eb6:	f7ff ff0b 	bl	8001cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_UART_MspInit+0xe8>)
 8001ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_UART_MspInit+0xe8>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	01c9      	lsls	r1, r1, #7
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_UART_MspInit+0xe8>)
 8001eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	01db      	lsls	r3, r3, #7
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <HAL_UART_MspInit+0xe8>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_UART_MspInit+0xe8>)
 8001edc:	2102      	movs	r1, #2
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_UART_MspInit+0xe8>)
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB4     ------> USART1_CTS
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eee:	243c      	movs	r4, #60	; 0x3c
 8001ef0:	193b      	adds	r3, r7, r4
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	2202      	movs	r2, #2
 8001efa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	193b      	adds	r3, r7, r4
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_UART_MspInit+0xec>)
 8001f12:	0019      	movs	r1, r3
 8001f14:	0010      	movs	r0, r2
 8001f16:	f000 fa61 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f1a:	0021      	movs	r1, r4
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	22c0      	movs	r2, #192	; 0xc0
 8001f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	2202      	movs	r2, #2
 8001f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	187b      	adds	r3, r7, r1
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	187b      	adds	r3, r7, r1
 8001f30:	2200      	movs	r2, #0
 8001f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_UART_MspInit+0xec>)
 8001f3e:	0019      	movs	r1, r3
 8001f40:	0010      	movs	r0, r2
 8001f42:	f000 fa4b 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b015      	add	sp, #84	; 0x54
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40013800 	.word	0x40013800
 8001f54:	40021000 	.word	0x40021000
 8001f58:	50000400 	.word	0x50000400

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler+0x4>

08001f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f938 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e00a      	b.n	8001fb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f9c:	e000      	b.n	8001fa0 <_read+0x16>
 8001f9e:	bf00      	nop
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	60ba      	str	r2, [r7, #8]
 8001fa8:	b2ca      	uxtb	r2, r1
 8001faa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	dbf0      	blt.n	8001f9c <_read+0x12>
  }

  return len;
 8001fba:	687b      	ldr	r3, [r7, #4]
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e009      	b.n	8001fea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	60ba      	str	r2, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f7ff fc68 	bl	80018b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf1      	blt.n	8001fd6 <_write+0x12>
  }
  return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b006      	add	sp, #24
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_close>:

int _close(int file)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002004:	2301      	movs	r3, #1
 8002006:	425b      	negs	r3, r3
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	0192      	lsls	r2, r2, #6
 8002020:	605a      	str	r2, [r3, #4]
  return 0;
 8002022:	2300      	movs	r3, #0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <_isatty>:

int _isatty(int file)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002034:	2301      	movs	r3, #1
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}

0800203e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}

08002054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800205c:	4a14      	ldr	r2, [pc, #80]	; (80020b0 <_sbrk+0x5c>)
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <_sbrk+0x60>)
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <_sbrk+0x64>)
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <_sbrk+0x68>)
 8002074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	429a      	cmp	r2, r3
 8002082:	d207      	bcs.n	8002094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002084:	f003 fed8 	bl	8005e38 <__errno>
 8002088:	0003      	movs	r3, r0
 800208a:	220c      	movs	r2, #12
 800208c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208e:	2301      	movs	r3, #1
 8002090:	425b      	negs	r3, r3
 8002092:	e009      	b.n	80020a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	18d2      	adds	r2, r2, r3
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <_sbrk+0x64>)
 80020a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b006      	add	sp, #24
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20002000 	.word	0x20002000
 80020b4:	00000400 	.word	0x00000400
 80020b8:	200001cc 	.word	0x200001cc
 80020bc:	20000320 	.word	0x20000320

080020c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020d0:	f7ff fff6 	bl	80020c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d4:	480c      	ldr	r0, [pc, #48]	; (8002108 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d8:	4a0d      	ldr	r2, [pc, #52]	; (8002110 <LoopForever+0xe>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020dc:	e002      	b.n	80020e4 <LoopCopyDataInit>

080020de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e2:	3304      	adds	r3, #4

080020e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e8:	d3f9      	bcc.n	80020de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020ec:	4c0a      	ldr	r4, [pc, #40]	; (8002118 <LoopForever+0x16>)
  movs r3, #0
 80020ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f0:	e001      	b.n	80020f6 <LoopFillZerobss>

080020f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f4:	3204      	adds	r2, #4

080020f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f8:	d3fb      	bcc.n	80020f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020fa:	f003 fea3 	bl	8005e44 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020fe:	f7ff fbbb 	bl	8001878 <main>

08002102 <LoopForever>:

LoopForever:
  b LoopForever
 8002102:	e7fe      	b.n	8002102 <LoopForever>
  ldr   r0, =_estack
 8002104:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800210c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002110:	08006ba8 	.word	0x08006ba8
  ldr r2, =_sbss
 8002114:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002118:	20000320 	.word	0x20000320

0800211c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800211c:	e7fe      	b.n	800211c <ADC1_IRQHandler>
	...

08002120 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002126:	1dfb      	adds	r3, r7, #7
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <HAL_Init+0x3c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_Init+0x3c>)
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	0049      	lsls	r1, r1, #1
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213a:	2003      	movs	r0, #3
 800213c:	f000 f810 	bl	8002160 <HAL_InitTick>
 8002140:	1e03      	subs	r3, r0, #0
 8002142:	d003      	beq.n	800214c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e001      	b.n	8002150 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7ff fdc6 	bl	8001cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
}
 8002154:	0018      	movs	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	b002      	add	sp, #8
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40022000 	.word	0x40022000

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002168:	230f      	movs	r3, #15
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_InitTick+0x88>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d02b      	beq.n	80021d0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_InitTick+0x8c>)
 800217a:	681c      	ldr	r4, [r3, #0]
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_InitTick+0x88>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	0019      	movs	r1, r3
 8002182:	23fa      	movs	r3, #250	; 0xfa
 8002184:	0098      	lsls	r0, r3, #2
 8002186:	f7fd ffc7 	bl	8000118 <__udivsi3>
 800218a:	0003      	movs	r3, r0
 800218c:	0019      	movs	r1, r3
 800218e:	0020      	movs	r0, r4
 8002190:	f7fd ffc2 	bl	8000118 <__udivsi3>
 8002194:	0003      	movs	r3, r0
 8002196:	0018      	movs	r0, r3
 8002198:	f000 f913 	bl	80023c2 <HAL_SYSTICK_Config>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d112      	bne.n	80021c6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d80a      	bhi.n	80021bc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	2301      	movs	r3, #1
 80021aa:	425b      	negs	r3, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f8f2 	bl	8002398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_InitTick+0x90>)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e00d      	b.n	80021d8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e008      	b.n	80021d8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c6:	230f      	movs	r3, #15
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	e003      	b.n	80021d8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d0:	230f      	movs	r3, #15
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80021d8:	230f      	movs	r3, #15
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	781b      	ldrb	r3, [r3, #0]
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b005      	add	sp, #20
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000008 	.word	0x20000008
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_IncTick+0x1c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	001a      	movs	r2, r3
 80021fe:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_IncTick+0x20>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	18d2      	adds	r2, r2, r3
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_IncTick+0x20>)
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	20000008 	.word	0x20000008
 8002214:	200001d0 	.word	0x200001d0

08002218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_GetTick+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	200001d0 	.word	0x200001d0

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fff0 	bl	8002218 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3301      	adds	r3, #1
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	001a      	movs	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	189b      	adds	r3, r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	f7ff ffe0 	bl	8002218 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	b004      	add	sp, #16
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	20000008 	.word	0x20000008

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	0002      	movs	r2, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b7f      	cmp	r3, #127	; 0x7f
 8002288:	d828      	bhi.n	80022dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228a:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <__NVIC_SetPriority+0xd4>)
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b25b      	sxtb	r3, r3
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	33c0      	adds	r3, #192	; 0xc0
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	589b      	ldr	r3, [r3, r2]
 800229a:	1dfa      	adds	r2, r7, #7
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	0011      	movs	r1, r2
 80022a0:	2203      	movs	r2, #3
 80022a2:	400a      	ands	r2, r1
 80022a4:	00d2      	lsls	r2, r2, #3
 80022a6:	21ff      	movs	r1, #255	; 0xff
 80022a8:	4091      	lsls	r1, r2
 80022aa:	000a      	movs	r2, r1
 80022ac:	43d2      	mvns	r2, r2
 80022ae:	401a      	ands	r2, r3
 80022b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	019b      	lsls	r3, r3, #6
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	401a      	ands	r2, r3
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	0018      	movs	r0, r3
 80022c0:	2303      	movs	r3, #3
 80022c2:	4003      	ands	r3, r0
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <__NVIC_SetPriority+0xd4>)
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	430a      	orrs	r2, r1
 80022d4:	33c0      	adds	r3, #192	; 0xc0
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022da:	e031      	b.n	8002340 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <__NVIC_SetPriority+0xd8>)
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0019      	movs	r1, r3
 80022e4:	230f      	movs	r3, #15
 80022e6:	400b      	ands	r3, r1
 80022e8:	3b08      	subs	r3, #8
 80022ea:	089b      	lsrs	r3, r3, #2
 80022ec:	3306      	adds	r3, #6
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	18d3      	adds	r3, r2, r3
 80022f2:	3304      	adds	r3, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	1dfa      	adds	r2, r7, #7
 80022f8:	7812      	ldrb	r2, [r2, #0]
 80022fa:	0011      	movs	r1, r2
 80022fc:	2203      	movs	r2, #3
 80022fe:	400a      	ands	r2, r1
 8002300:	00d2      	lsls	r2, r2, #3
 8002302:	21ff      	movs	r1, #255	; 0xff
 8002304:	4091      	lsls	r1, r2
 8002306:	000a      	movs	r2, r1
 8002308:	43d2      	mvns	r2, r2
 800230a:	401a      	ands	r2, r3
 800230c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	019b      	lsls	r3, r3, #6
 8002312:	22ff      	movs	r2, #255	; 0xff
 8002314:	401a      	ands	r2, r3
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	0018      	movs	r0, r3
 800231c:	2303      	movs	r3, #3
 800231e:	4003      	ands	r3, r0
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002324:	4809      	ldr	r0, [pc, #36]	; (800234c <__NVIC_SetPriority+0xd8>)
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	001c      	movs	r4, r3
 800232c:	230f      	movs	r3, #15
 800232e:	4023      	ands	r3, r4
 8002330:	3b08      	subs	r3, #8
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	430a      	orrs	r2, r1
 8002336:	3306      	adds	r3, #6
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	18c3      	adds	r3, r0, r3
 800233c:	3304      	adds	r3, #4
 800233e:	601a      	str	r2, [r3, #0]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b003      	add	sp, #12
 8002346:	bd90      	pop	{r4, r7, pc}
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	045b      	lsls	r3, r3, #17
 8002360:	429a      	cmp	r2, r3
 8002362:	d301      	bcc.n	8002368 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002364:	2301      	movs	r3, #1
 8002366:	e010      	b.n	800238a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002368:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <SysTick_Config+0x44>)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	3a01      	subs	r2, #1
 800236e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002370:	2301      	movs	r3, #1
 8002372:	425b      	negs	r3, r3
 8002374:	2103      	movs	r1, #3
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ff7c 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <SysTick_Config+0x44>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <SysTick_Config+0x44>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	210f      	movs	r1, #15
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	1c02      	adds	r2, r0, #0
 80023a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f7ff ff5d 	bl	8002274 <__NVIC_SetPriority>
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff ffbf 	bl	8002350 <SysTick_Config>
 80023d2:	0003      	movs	r3, r0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e147      	b.n	800267c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4091      	lsls	r1, r2
 80023f6:	000a      	movs	r2, r1
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d100      	bne.n	8002404 <HAL_GPIO_Init+0x28>
 8002402:	e138      	b.n	8002676 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2203      	movs	r2, #3
 800240a:	4013      	ands	r3, r2
 800240c:	2b01      	cmp	r3, #1
 800240e:	d005      	beq.n	800241c <HAL_GPIO_Init+0x40>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
 8002418:	2b02      	cmp	r3, #2
 800241a:	d130      	bne.n	800247e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	409a      	lsls	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	43da      	mvns	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	409a      	lsls	r2, r3
 800243e:	0013      	movs	r3, r2
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002452:	2201      	movs	r2, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	2201      	movs	r2, #1
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
 8002470:	0013      	movs	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2203      	movs	r2, #3
 8002484:	4013      	ands	r3, r2
 8002486:	2b03      	cmp	r3, #3
 8002488:	d017      	beq.n	80024ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	409a      	lsls	r2, r3
 8002498:	0013      	movs	r3, r2
 800249a:	43da      	mvns	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	409a      	lsls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2203      	movs	r2, #3
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d123      	bne.n	800250e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	58d3      	ldr	r3, [r2, r3]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2207      	movs	r2, #7
 80024d8:	4013      	ands	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	409a      	lsls	r2, r3
 80024e0:	0013      	movs	r3, r2
 80024e2:	43da      	mvns	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2107      	movs	r1, #7
 80024f2:	400b      	ands	r3, r1
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	409a      	lsls	r2, r3
 80024f8:	0013      	movs	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	6939      	ldr	r1, [r7, #16]
 800250c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	409a      	lsls	r2, r3
 800251c:	0013      	movs	r3, r2
 800251e:	43da      	mvns	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2203      	movs	r2, #3
 800252c:	401a      	ands	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	23c0      	movs	r3, #192	; 0xc0
 8002548:	029b      	lsls	r3, r3, #10
 800254a:	4013      	ands	r3, r2
 800254c:	d100      	bne.n	8002550 <HAL_GPIO_Init+0x174>
 800254e:	e092      	b.n	8002676 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002550:	4a50      	ldr	r2, [pc, #320]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3318      	adds	r3, #24
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	589b      	ldr	r3, [r3, r2]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2203      	movs	r2, #3
 8002562:	4013      	ands	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	220f      	movs	r2, #15
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	23a0      	movs	r3, #160	; 0xa0
 8002578:	05db      	lsls	r3, r3, #23
 800257a:	429a      	cmp	r2, r3
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0x1ca>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a45      	ldr	r2, [pc, #276]	; (8002698 <HAL_GPIO_Init+0x2bc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00d      	beq.n	80025a2 <HAL_GPIO_Init+0x1c6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a44      	ldr	r2, [pc, #272]	; (800269c <HAL_GPIO_Init+0x2c0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <HAL_GPIO_Init+0x1c2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a43      	ldr	r2, [pc, #268]	; (80026a0 <HAL_GPIO_Init+0x2c4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_GPIO_Init+0x1be>
 8002596:	2303      	movs	r3, #3
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x1cc>
 800259a:	2305      	movs	r3, #5
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x1cc>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x1cc>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x1cc>
 80025a6:	2300      	movs	r3, #0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	2103      	movs	r1, #3
 80025ac:	400a      	ands	r2, r1
 80025ae:	00d2      	lsls	r2, r2, #3
 80025b0:	4093      	lsls	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025b8:	4936      	ldr	r1, [pc, #216]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3318      	adds	r3, #24
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c6:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43da      	mvns	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	035b      	lsls	r3, r3, #13
 80025de:	4013      	ands	r3, r2
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ea:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43da      	mvns	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	039b      	lsls	r3, r3, #14
 8002608:	4013      	ands	r3, r2
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002614:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261a:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 800261c:	2384      	movs	r3, #132	; 0x84
 800261e:	58d3      	ldr	r3, [r2, r3]
 8002620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43da      	mvns	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	029b      	lsls	r3, r3, #10
 8002634:	4013      	ands	r3, r2
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002640:	4914      	ldr	r1, [pc, #80]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 8002642:	2284      	movs	r2, #132	; 0x84
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002648:	4a12      	ldr	r2, [pc, #72]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	58d3      	ldr	r3, [r2, r3]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	43da      	mvns	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	025b      	lsls	r3, r3, #9
 8002662:	4013      	ands	r3, r2
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800266e:	4909      	ldr	r1, [pc, #36]	; (8002694 <HAL_GPIO_Init+0x2b8>)
 8002670:	2280      	movs	r2, #128	; 0x80
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	40da      	lsrs	r2, r3
 8002684:	1e13      	subs	r3, r2, #0
 8002686:	d000      	beq.n	800268a <HAL_GPIO_Init+0x2ae>
 8002688:	e6b0      	b.n	80023ec <HAL_GPIO_Init+0x10>
  }
}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b006      	add	sp, #24
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021800 	.word	0x40021800
 8002698:	50000400 	.word	0x50000400
 800269c:	50000800 	.word	0x50000800
 80026a0:	50000c00 	.word	0x50000c00

080026a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	0008      	movs	r0, r1
 80026ae:	0011      	movs	r1, r2
 80026b0:	1cbb      	adds	r3, r7, #2
 80026b2:	1c02      	adds	r2, r0, #0
 80026b4:	801a      	strh	r2, [r3, #0]
 80026b6:	1c7b      	adds	r3, r7, #1
 80026b8:	1c0a      	adds	r2, r1, #0
 80026ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026bc:	1c7b      	adds	r3, r7, #1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c4:	1cbb      	adds	r3, r7, #2
 80026c6:	881a      	ldrh	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ce:	1cbb      	adds	r3, r7, #2
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b002      	add	sp, #8
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	000a      	movs	r2, r1
 80026e8:	1cbb      	adds	r3, r7, #2
 80026ea:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f2:	1cbb      	adds	r3, r7, #2
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	041a      	lsls	r2, r3, #16
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	1cb9      	adds	r1, r7, #2
 8002702:	8809      	ldrh	r1, [r1, #0]
 8002704:	400b      	ands	r3, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b004      	add	sp, #16
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08f      	b.n	8002846 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2241      	movs	r2, #65	; 0x41
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d107      	bne.n	8002742 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff faf1 	bl	8001d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2241      	movs	r2, #65	; 0x41
 8002746:	2124      	movs	r1, #36	; 0x24
 8002748:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	438a      	bics	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	493b      	ldr	r1, [pc, #236]	; (8002850 <HAL_I2C_Init+0x13c>)
 8002764:	400a      	ands	r2, r1
 8002766:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4938      	ldr	r1, [pc, #224]	; (8002854 <HAL_I2C_Init+0x140>)
 8002774:	400a      	ands	r2, r1
 8002776:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0209      	lsls	r1, r1, #8
 800278c:	430a      	orrs	r2, r1
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e007      	b.n	80027a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2184      	movs	r1, #132	; 0x84
 800279c:	0209      	lsls	r1, r1, #8
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d109      	bne.n	80027be <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	0109      	lsls	r1, r1, #4
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	e007      	b.n	80027ce <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4923      	ldr	r1, [pc, #140]	; (8002858 <HAL_I2C_Init+0x144>)
 80027ca:	400a      	ands	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4920      	ldr	r1, [pc, #128]	; (800285c <HAL_I2C_Init+0x148>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	491a      	ldr	r1, [pc, #104]	; (8002854 <HAL_I2C_Init+0x140>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2241      	movs	r2, #65	; 0x41
 8002832:	2120      	movs	r1, #32
 8002834:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2242      	movs	r2, #66	; 0x42
 8002840:	2100      	movs	r1, #0
 8002842:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b002      	add	sp, #8
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	f0ffffff 	.word	0xf0ffffff
 8002854:	ffff7fff 	.word	0xffff7fff
 8002858:	fffff7ff 	.word	0xfffff7ff
 800285c:	02008000 	.word	0x02008000

08002860 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	000c      	movs	r4, r1
 800286a:	0010      	movs	r0, r2
 800286c:	0019      	movs	r1, r3
 800286e:	230a      	movs	r3, #10
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	1c22      	adds	r2, r4, #0
 8002874:	801a      	strh	r2, [r3, #0]
 8002876:	2308      	movs	r3, #8
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	1c02      	adds	r2, r0, #0
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	1dbb      	adds	r3, r7, #6
 8002880:	1c0a      	adds	r2, r1, #0
 8002882:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2241      	movs	r2, #65	; 0x41
 8002888:	5c9b      	ldrb	r3, [r3, r2]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	d000      	beq.n	8002892 <HAL_I2C_Mem_Write+0x32>
 8002890:	e10c      	b.n	8002aac <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_I2C_Mem_Write+0x42>
 8002898:	232c      	movs	r3, #44	; 0x2c
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d105      	bne.n	80028ae <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	0092      	lsls	r2, r2, #2
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0ff      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_I2C_Mem_Write+0x5c>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e0f8      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028c4:	f7ff fca8 	bl	8002218 <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	0219      	lsls	r1, r3, #8
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2319      	movs	r3, #25
 80028d8:	2201      	movs	r2, #1
 80028da:	f000 fb0b 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e0e3      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2241      	movs	r2, #65	; 0x41
 80028ea:	2121      	movs	r1, #33	; 0x21
 80028ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2242      	movs	r2, #66	; 0x42
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	222c      	movs	r2, #44	; 0x2c
 8002906:	18ba      	adds	r2, r7, r2
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002912:	1dbb      	adds	r3, r7, #6
 8002914:	881c      	ldrh	r4, [r3, #0]
 8002916:	2308      	movs	r3, #8
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	230a      	movs	r3, #10
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	8819      	ldrh	r1, [r3, #0]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	0023      	movs	r3, r4
 800292e:	f000 f9f9 	bl	8002d24 <I2C_RequestMemoryWrite>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d005      	beq.n	8002942 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2240      	movs	r2, #64	; 0x40
 800293a:	2100      	movs	r1, #0
 800293c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0b5      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	2bff      	cmp	r3, #255	; 0xff
 800294a:	d911      	bls.n	8002970 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	22ff      	movs	r2, #255	; 0xff
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	b2da      	uxtb	r2, r3
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	045c      	lsls	r4, r3, #17
 800295c:	230a      	movs	r3, #10
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	8819      	ldrh	r1, [r3, #0]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	2300      	movs	r3, #0
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	0023      	movs	r3, r4
 800296a:	f000 fca5 	bl	80032b8 <I2C_TransferConfig>
 800296e:	e012      	b.n	8002996 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	b2da      	uxtb	r2, r3
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	049c      	lsls	r4, r3, #18
 8002984:	230a      	movs	r3, #10
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	8819      	ldrh	r1, [r3, #0]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	2300      	movs	r3, #0
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	0023      	movs	r3, r4
 8002992:	f000 fc91 	bl	80032b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0018      	movs	r0, r3
 800299e:	f000 fb01 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e081      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03a      	beq.n	8002a5a <HAL_I2C_Mem_Write+0x1fa>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d136      	bne.n	8002a5a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	0013      	movs	r3, r2
 80029f6:	2200      	movs	r2, #0
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	f000 fa7b 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e053      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2bff      	cmp	r3, #255	; 0xff
 8002a0e:	d911      	bls.n	8002a34 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	22ff      	movs	r2, #255	; 0xff
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	045c      	lsls	r4, r3, #17
 8002a20:	230a      	movs	r3, #10
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	8819      	ldrh	r1, [r3, #0]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	0023      	movs	r3, r4
 8002a2e:	f000 fc43 	bl	80032b8 <I2C_TransferConfig>
 8002a32:	e012      	b.n	8002a5a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	049c      	lsls	r4, r3, #18
 8002a48:	230a      	movs	r3, #10
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	8819      	ldrh	r1, [r3, #0]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	2300      	movs	r3, #0
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0023      	movs	r3, r4
 8002a56:	f000 fc2f 	bl	80032b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d198      	bne.n	8002996 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f000 fae0 	bl	8003030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e01a      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	490b      	ldr	r1, [pc, #44]	; (8002ab8 <HAL_I2C_Mem_Write+0x258>)
 8002a8c:	400a      	ands	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2241      	movs	r2, #65	; 0x41
 8002a94:	2120      	movs	r1, #32
 8002a96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2242      	movs	r2, #66	; 0x42
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2240      	movs	r2, #64	; 0x40
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b007      	add	sp, #28
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	fe00e800 	.word	0xfe00e800

08002abc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	000c      	movs	r4, r1
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	230a      	movs	r3, #10
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	1c22      	adds	r2, r4, #0
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	1c02      	adds	r2, r0, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	1dbb      	adds	r3, r7, #6
 8002adc:	1c0a      	adds	r2, r1, #0
 8002ade:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2241      	movs	r2, #65	; 0x41
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d000      	beq.n	8002aee <HAL_I2C_Mem_Read+0x32>
 8002aec:	e110      	b.n	8002d10 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <HAL_I2C_Mem_Read+0x42>
 8002af4:	232c      	movs	r3, #44	; 0x2c
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0092      	lsls	r2, r2, #2
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e103      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_I2C_Mem_Read+0x5c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e0fc      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2240      	movs	r2, #64	; 0x40
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b20:	f7ff fb7a 	bl	8002218 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	0219      	lsls	r1, r3, #8
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2319      	movs	r3, #25
 8002b34:	2201      	movs	r2, #1
 8002b36:	f000 f9dd 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0e7      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2241      	movs	r2, #65	; 0x41
 8002b46:	2122      	movs	r1, #34	; 0x22
 8002b48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2242      	movs	r2, #66	; 0x42
 8002b4e:	2140      	movs	r1, #64	; 0x40
 8002b50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	222c      	movs	r2, #44	; 0x2c
 8002b62:	18ba      	adds	r2, r7, r2
 8002b64:	8812      	ldrh	r2, [r2, #0]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b6e:	1dbb      	adds	r3, r7, #6
 8002b70:	881c      	ldrh	r4, [r3, #0]
 8002b72:	2308      	movs	r3, #8
 8002b74:	18fb      	adds	r3, r7, r3
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	230a      	movs	r3, #10
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	8819      	ldrh	r1, [r3, #0]
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0023      	movs	r3, r4
 8002b8a:	f000 f92f 	bl	8002dec <I2C_RequestMemoryRead>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	2100      	movs	r1, #0
 8002b98:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0b9      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2bff      	cmp	r3, #255	; 0xff
 8002ba6:	d911      	bls.n	8002bcc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	22ff      	movs	r2, #255	; 0xff
 8002bac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	045c      	lsls	r4, r3, #17
 8002bb8:	230a      	movs	r3, #10
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	8819      	ldrh	r1, [r3, #0]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <HAL_I2C_Mem_Read+0x260>)
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	0023      	movs	r3, r4
 8002bc6:	f000 fb77 	bl	80032b8 <I2C_TransferConfig>
 8002bca:	e012      	b.n	8002bf2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	049c      	lsls	r4, r3, #18
 8002be0:	230a      	movs	r3, #10
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	8819      	ldrh	r1, [r3, #0]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <HAL_I2C_Mem_Read+0x260>)
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	0023      	movs	r3, r4
 8002bee:	f000 fb63 	bl	80032b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2104      	movs	r1, #4
 8002c00:	f000 f978 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e082      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03a      	beq.n	8002cbe <HAL_I2C_Mem_Read+0x202>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d136      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	0013      	movs	r3, r2
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2180      	movs	r1, #128	; 0x80
 8002c5e:	f000 f949 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e053      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2bff      	cmp	r3, #255	; 0xff
 8002c72:	d911      	bls.n	8002c98 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	045c      	lsls	r4, r3, #17
 8002c84:	230a      	movs	r3, #10
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	8819      	ldrh	r1, [r3, #0]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	0023      	movs	r3, r4
 8002c92:	f000 fb11 	bl	80032b8 <I2C_TransferConfig>
 8002c96:	e012      	b.n	8002cbe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	049c      	lsls	r4, r3, #18
 8002cac:	230a      	movs	r3, #10
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	8819      	ldrh	r1, [r3, #0]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	0023      	movs	r3, r4
 8002cba:	f000 fafd 	bl	80032b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d194      	bne.n	8002bf2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f9ae 	bl	8003030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e01a      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	490c      	ldr	r1, [pc, #48]	; (8002d20 <HAL_I2C_Mem_Read+0x264>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2241      	movs	r2, #65	; 0x41
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2242      	movs	r2, #66	; 0x42
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	2100      	movs	r1, #0
 8002d0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b007      	add	sp, #28
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	80002400 	.word	0x80002400
 8002d20:	fe00e800 	.word	0xfe00e800

08002d24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d24:	b5b0      	push	{r4, r5, r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	000c      	movs	r4, r1
 8002d2e:	0010      	movs	r0, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	250a      	movs	r5, #10
 8002d34:	197b      	adds	r3, r7, r5
 8002d36:	1c22      	adds	r2, r4, #0
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	1c02      	adds	r2, r0, #0
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	1dbb      	adds	r3, r7, #6
 8002d44:	1c0a      	adds	r2, r1, #0
 8002d46:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	045c      	lsls	r4, r3, #17
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	8819      	ldrh	r1, [r3, #0]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <I2C_RequestMemoryWrite+0xc4>)
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	0023      	movs	r3, r4
 8002d5e:	f000 faab 	bl	80032b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 f91b 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e033      	b.n	8002dde <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d76:	1dbb      	adds	r3, r7, #6
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d107      	bne.n	8002d8e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7e:	2308      	movs	r3, #8
 8002d80:	18fb      	adds	r3, r7, r3
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e019      	b.n	8002dc2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d8e:	2308      	movs	r3, #8
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da2:	6a39      	ldr	r1, [r7, #32]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 f8fc 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dac:	1e03      	subs	r3, r0, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e014      	b.n	8002dde <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002db4:	2308      	movs	r3, #8
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	0013      	movs	r3, r2
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	f000 f890 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002dd4:	1e03      	subs	r3, r0, #0
 8002dd6:	d001      	beq.n	8002ddc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b004      	add	sp, #16
 8002de4:	bdb0      	pop	{r4, r5, r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	80002000 	.word	0x80002000

08002dec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	000c      	movs	r4, r1
 8002df6:	0010      	movs	r0, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	250a      	movs	r5, #10
 8002dfc:	197b      	adds	r3, r7, r5
 8002dfe:	1c22      	adds	r2, r4, #0
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	2308      	movs	r3, #8
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	1c02      	adds	r2, r0, #0
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	1dbb      	adds	r3, r7, #6
 8002e0c:	1c0a      	adds	r2, r1, #0
 8002e0e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	197b      	adds	r3, r7, r5
 8002e18:	8819      	ldrh	r1, [r3, #0]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <I2C_RequestMemoryRead+0xc0>)
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2300      	movs	r3, #0
 8002e22:	f000 fa49 	bl	80032b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	6a39      	ldr	r1, [r7, #32]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f000 f8b9 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e033      	b.n	8002ea2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e3a:	1dbb      	adds	r3, r7, #6
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d107      	bne.n	8002e52 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e42:	2308      	movs	r3, #8
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e50:	e019      	b.n	8002e86 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e52:	2308      	movs	r3, #8
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e66:	6a39      	ldr	r1, [r7, #32]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f89a 	bl	8002fa4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d001      	beq.n	8002e78 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e014      	b.n	8002ea2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e78:	2308      	movs	r3, #8
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a3a      	ldr	r2, [r7, #32]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	0013      	movs	r3, r2
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	f000 f82e 	bl	8002ef4 <I2C_WaitOnFlagUntilTimeout>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d001      	beq.n	8002ea0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b004      	add	sp, #16
 8002ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	80002000 	.word	0x80002000

08002eb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d103      	bne.n	8002ece <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d007      	beq.n	8002eec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
  }
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f04:	e03a      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	6839      	ldr	r1, [r7, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 f8d3 	bl	80030b8 <I2C_IsErrorOccurred>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e040      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	d02d      	beq.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7ff f97a 	bl	8002218 <HAL_GetTick>
 8002f24:	0002      	movs	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d122      	bne.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	425a      	negs	r2, r3
 8002f46:	4153      	adcs	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d113      	bne.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	2220      	movs	r2, #32
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2241      	movs	r2, #65	; 0x41
 8002f64:	2120      	movs	r1, #32
 8002f66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2242      	movs	r2, #66	; 0x42
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2100      	movs	r1, #0
 8002f76:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e00f      	b.n	8002f9c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	425a      	negs	r2, r3
 8002f8c:	4153      	adcs	r3, r2
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	001a      	movs	r2, r3
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d0b5      	beq.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b004      	add	sp, #16
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fb0:	e032      	b.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f87d 	bl	80030b8 <I2C_IsErrorOccurred>
 8002fbe:	1e03      	subs	r3, r0, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e030      	b.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	d025      	beq.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7ff f924 	bl	8002218 <HAL_GetTick>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d302      	bcc.n	8002fe2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d11a      	bne.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d013      	beq.n	8003018 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2241      	movs	r2, #65	; 0x41
 8003000:	2120      	movs	r1, #32
 8003002:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2242      	movs	r2, #66	; 0x42
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2240      	movs	r2, #64	; 0x40
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2202      	movs	r2, #2
 8003020:	4013      	ands	r3, r2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d1c5      	bne.n	8002fb2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b004      	add	sp, #16
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800303c:	e02f      	b.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f837 	bl	80030b8 <I2C_IsErrorOccurred>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d001      	beq.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e02d      	b.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7ff f8e1 	bl	8002218 <HAL_GetTick>
 8003056:	0002      	movs	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11a      	bne.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2220      	movs	r2, #32
 8003070:	4013      	ands	r3, r2
 8003072:	2b20      	cmp	r3, #32
 8003074:	d013      	beq.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	2220      	movs	r2, #32
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2241      	movs	r2, #65	; 0x41
 8003086:	2120      	movs	r1, #32
 8003088:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2242      	movs	r2, #66	; 0x42
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2240      	movs	r2, #64	; 0x40
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e007      	b.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2220      	movs	r2, #32
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d1c8      	bne.n	800303e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	0018      	movs	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b08b      	sub	sp, #44	; 0x2c
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	2327      	movs	r3, #39	; 0x27
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2210      	movs	r2, #16
 80030e0:	4013      	ands	r3, r2
 80030e2:	d100      	bne.n	80030e6 <I2C_IsErrorOccurred+0x2e>
 80030e4:	e082      	b.n	80031ec <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2210      	movs	r2, #16
 80030ec:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ee:	e060      	b.n	80031b2 <I2C_IsErrorOccurred+0xfa>
 80030f0:	2427      	movs	r4, #39	; 0x27
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	193a      	adds	r2, r7, r4
 80030f6:	7812      	ldrb	r2, [r2, #0]
 80030f8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3301      	adds	r3, #1
 80030fe:	d058      	beq.n	80031b2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003100:	f7ff f88a 	bl	8002218 <HAL_GetTick>
 8003104:	0002      	movs	r2, r0
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d306      	bcc.n	800311e <I2C_IsErrorOccurred+0x66>
 8003110:	193b      	adds	r3, r7, r4
 8003112:	193a      	adds	r2, r7, r4
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d149      	bne.n	80031b2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	01db      	lsls	r3, r3, #7
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800312c:	2013      	movs	r0, #19
 800312e:	183b      	adds	r3, r7, r0
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	2142      	movs	r1, #66	; 0x42
 8003134:	5c52      	ldrb	r2, [r2, r1]
 8003136:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	401a      	ands	r2, r3
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	429a      	cmp	r2, r3
 800314a:	d126      	bne.n	800319a <I2C_IsErrorOccurred+0xe2>
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	01db      	lsls	r3, r3, #7
 8003152:	429a      	cmp	r2, r3
 8003154:	d021      	beq.n	800319a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003156:	183b      	adds	r3, r7, r0
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b20      	cmp	r3, #32
 800315c:	d01d      	beq.n	800319a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	01c9      	lsls	r1, r1, #7
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003170:	f7ff f852 	bl	8002218 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003178:	e00f      	b.n	800319a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800317a:	f7ff f84d 	bl	8002218 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b19      	cmp	r3, #25
 8003186:	d908      	bls.n	800319a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2220      	movs	r2, #32
 800318c:	4313      	orrs	r3, r2
 800318e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003190:	2327      	movs	r3, #39	; 0x27
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]

              break;
 8003198:	e00b      	b.n	80031b2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2220      	movs	r2, #32
 80031a2:	4013      	ands	r3, r2
 80031a4:	2127      	movs	r1, #39	; 0x27
 80031a6:	187a      	adds	r2, r7, r1
 80031a8:	1879      	adds	r1, r7, r1
 80031aa:	7809      	ldrb	r1, [r1, #0]
 80031ac:	7011      	strb	r1, [r2, #0]
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d1e3      	bne.n	800317a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d004      	beq.n	80031ca <I2C_IsErrorOccurred+0x112>
 80031c0:	2327      	movs	r3, #39	; 0x27
 80031c2:	18fb      	adds	r3, r7, r3
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d092      	beq.n	80030f0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031ca:	2327      	movs	r3, #39	; 0x27
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d103      	bne.n	80031dc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2220      	movs	r2, #32
 80031da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2204      	movs	r2, #4
 80031e0:	4313      	orrs	r3, r2
 80031e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80031e4:	2327      	movs	r3, #39	; 0x27
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4013      	ands	r3, r2
 80031fc:	d00c      	beq.n	8003218 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2201      	movs	r2, #1
 8003202:	4313      	orrs	r3, r2
 8003204:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	0052      	lsls	r2, r2, #1
 800320e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003210:	2327      	movs	r3, #39	; 0x27
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4013      	ands	r3, r2
 8003220:	d00c      	beq.n	800323c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	2208      	movs	r2, #8
 8003226:	4313      	orrs	r3, r2
 8003228:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	00d2      	lsls	r2, r2, #3
 8003232:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003234:	2327      	movs	r3, #39	; 0x27
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	2201      	movs	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4013      	ands	r3, r2
 8003244:	d00c      	beq.n	8003260 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2202      	movs	r2, #2
 800324a:	4313      	orrs	r3, r2
 800324c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0092      	lsls	r2, r2, #2
 8003256:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003258:	2327      	movs	r3, #39	; 0x27
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003260:	2327      	movs	r3, #39	; 0x27
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01d      	beq.n	80032a6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff fe1f 	bl	8002eb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	490d      	ldr	r1, [pc, #52]	; (80032b4 <I2C_IsErrorOccurred+0x1fc>)
 800327e:	400a      	ands	r2, r1
 8003280:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2241      	movs	r2, #65	; 0x41
 8003292:	2120      	movs	r1, #32
 8003294:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2242      	movs	r2, #66	; 0x42
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2240      	movs	r2, #64	; 0x40
 80032a2:	2100      	movs	r1, #0
 80032a4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80032a6:	2327      	movs	r3, #39	; 0x27
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	781b      	ldrb	r3, [r3, #0]
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b00b      	add	sp, #44	; 0x2c
 80032b2:	bd90      	pop	{r4, r7, pc}
 80032b4:	fe00e800 	.word	0xfe00e800

080032b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	0008      	movs	r0, r1
 80032c2:	0011      	movs	r1, r2
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	240a      	movs	r4, #10
 80032c8:	193b      	adds	r3, r7, r4
 80032ca:	1c02      	adds	r2, r0, #0
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	2009      	movs	r0, #9
 80032d0:	183b      	adds	r3, r7, r0
 80032d2:	1c0a      	adds	r2, r1, #0
 80032d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	059b      	lsls	r3, r3, #22
 80032dc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032de:	183b      	adds	r3, r7, r0
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	0419      	lsls	r1, r3, #16
 80032e4:	23ff      	movs	r3, #255	; 0xff
 80032e6:	041b      	lsls	r3, r3, #16
 80032e8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	4313      	orrs	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003302:	0d51      	lsrs	r1, r2, #21
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	00d2      	lsls	r2, r2, #3
 8003308:	400a      	ands	r2, r1
 800330a:	4907      	ldr	r1, [pc, #28]	; (8003328 <I2C_TransferConfig+0x70>)
 800330c:	430a      	orrs	r2, r1
 800330e:	43d2      	mvns	r2, r2
 8003310:	401a      	ands	r2, r3
 8003312:	0011      	movs	r1, r2
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b007      	add	sp, #28
 8003324:	bd90      	pop	{r4, r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	03ff63ff 	.word	0x03ff63ff

0800332c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2241      	movs	r2, #65	; 0x41
 800333a:	5c9b      	ldrb	r3, [r3, r2]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	d138      	bne.n	80033b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	5c9b      	ldrb	r3, [r3, r2]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800334c:	2302      	movs	r3, #2
 800334e:	e032      	b.n	80033b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2240      	movs	r2, #64	; 0x40
 8003354:	2101      	movs	r1, #1
 8003356:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2241      	movs	r2, #65	; 0x41
 800335c:	2124      	movs	r1, #36	; 0x24
 800335e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2101      	movs	r1, #1
 800336c:	438a      	bics	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4911      	ldr	r1, [pc, #68]	; (80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800337c:	400a      	ands	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6819      	ldr	r1, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2101      	movs	r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2241      	movs	r2, #65	; 0x41
 80033a4:	2120      	movs	r1, #32
 80033a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033b4:	2302      	movs	r3, #2
  }
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b002      	add	sp, #8
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	ffffefff 	.word	0xffffefff

080033c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2241      	movs	r2, #65	; 0x41
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d139      	bne.n	800344e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	5c9b      	ldrb	r3, [r3, r2]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e033      	b.n	8003450 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	2101      	movs	r1, #1
 80033ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2241      	movs	r2, #65	; 0x41
 80033f4:	2124      	movs	r1, #36	; 0x24
 80033f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2101      	movs	r1, #1
 8003404:	438a      	bics	r2, r1
 8003406:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003414:	4013      	ands	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2241      	movs	r2, #65	; 0x41
 800343e:	2120      	movs	r1, #32
 8003440:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
  }
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}
 8003458:	fffff0ff 	.word	0xfffff0ff

0800345c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800346a:	4013      	ands	r3, r2
 800346c:	0019      	movs	r1, r3
 800346e:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	429a      	cmp	r2, r3
 800347e:	d11f      	bne.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	0013      	movs	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	189b      	adds	r3, r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4912      	ldr	r1, [pc, #72]	; (80034d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800348e:	0018      	movs	r0, r3
 8003490:	f7fc fe42 	bl	8000118 <__udivsi3>
 8003494:	0003      	movs	r3, r0
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800349a:	e008      	b.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e001      	b.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e009      	b.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	401a      	ands	r2, r3
 80034b8:	2380      	movs	r3, #128	; 0x80
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	429a      	cmp	r2, r3
 80034be:	d0ed      	beq.n	800349c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	0018      	movs	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b004      	add	sp, #16
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	40007000 	.word	0x40007000
 80034d0:	fffff9ff 	.word	0xfffff9ff
 80034d4:	20000000 	.word	0x20000000
 80034d8:	000f4240 	.word	0x000f4240

080034dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	23e0      	movs	r3, #224	; 0xe0
 80034e6:	01db      	lsls	r3, r3, #7
 80034e8:	4013      	ands	r3, r2
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e2fe      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	4013      	ands	r3, r2
 800350e:	d100      	bne.n	8003512 <HAL_RCC_OscConfig+0x1e>
 8003510:	e07c      	b.n	800360c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003512:	4bc3      	ldr	r3, [pc, #780]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2238      	movs	r2, #56	; 0x38
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800351c:	4bc0      	ldr	r3, [pc, #768]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2203      	movs	r2, #3
 8003522:	4013      	ands	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b10      	cmp	r3, #16
 800352a:	d102      	bne.n	8003532 <HAL_RCC_OscConfig+0x3e>
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d002      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4bb9      	ldr	r3, [pc, #740]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2380      	movs	r3, #128	; 0x80
 800353e:	029b      	lsls	r3, r3, #10
 8003540:	4013      	ands	r3, r2
 8003542:	d062      	beq.n	800360a <HAL_RCC_OscConfig+0x116>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d15e      	bne.n	800360a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e2d9      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	025b      	lsls	r3, r3, #9
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x78>
 800355c:	4bb0      	ldr	r3, [pc, #704]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4baf      	ldr	r3, [pc, #700]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	0249      	lsls	r1, r1, #9
 8003566:	430a      	orrs	r2, r1
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e020      	b.n	80035ae <HAL_RCC_OscConfig+0xba>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	02db      	lsls	r3, r3, #11
 8003574:	429a      	cmp	r2, r3
 8003576:	d10e      	bne.n	8003596 <HAL_RCC_OscConfig+0xa2>
 8003578:	4ba9      	ldr	r3, [pc, #676]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4ba8      	ldr	r3, [pc, #672]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	02c9      	lsls	r1, r1, #11
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	4ba6      	ldr	r3, [pc, #664]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4ba5      	ldr	r3, [pc, #660]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	0249      	lsls	r1, r1, #9
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0xba>
 8003596:	4ba2      	ldr	r3, [pc, #648]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4ba1      	ldr	r3, [pc, #644]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800359c:	49a1      	ldr	r1, [pc, #644]	; (8003824 <HAL_RCC_OscConfig+0x330>)
 800359e:	400a      	ands	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	4b9f      	ldr	r3, [pc, #636]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b9e      	ldr	r3, [pc, #632]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	499f      	ldr	r1, [pc, #636]	; (8003828 <HAL_RCC_OscConfig+0x334>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d014      	beq.n	80035e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe fe2f 	bl	8002218 <HAL_GetTick>
 80035ba:	0003      	movs	r3, r0
 80035bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fe fe2a 	bl	8002218 <HAL_GetTick>
 80035c4:	0002      	movs	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e298      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	4b93      	ldr	r3, [pc, #588]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	2380      	movs	r3, #128	; 0x80
 80035d8:	029b      	lsls	r3, r3, #10
 80035da:	4013      	ands	r3, r2
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0xcc>
 80035de:	e015      	b.n	800360c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe fe1a 	bl	8002218 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ea:	f7fe fe15 	bl	8002218 <HAL_GetTick>
 80035ee:	0002      	movs	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b64      	cmp	r3, #100	; 0x64
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e283      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fc:	4b88      	ldr	r3, [pc, #544]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	029b      	lsls	r3, r3, #10
 8003604:	4013      	ands	r3, r2
 8003606:	d1f0      	bne.n	80035ea <HAL_RCC_OscConfig+0xf6>
 8003608:	e000      	b.n	800360c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d100      	bne.n	8003618 <HAL_RCC_OscConfig+0x124>
 8003616:	e099      	b.n	800374c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003618:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2238      	movs	r2, #56	; 0x38
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003622:	4b7f      	ldr	r3, [pc, #508]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2203      	movs	r2, #3
 8003628:	4013      	ands	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b10      	cmp	r3, #16
 8003630:	d102      	bne.n	8003638 <HAL_RCC_OscConfig+0x144>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d002      	beq.n	800363e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d135      	bne.n	80036aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363e:	4b78      	ldr	r3, [pc, #480]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	2380      	movs	r3, #128	; 0x80
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4013      	ands	r3, r2
 8003648:	d005      	beq.n	8003656 <HAL_RCC_OscConfig+0x162>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e256      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003656:	4b72      	ldr	r3, [pc, #456]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	4a74      	ldr	r2, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x338>)
 800365c:	4013      	ands	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d112      	bne.n	8003698 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003672:	4b6b      	ldr	r3, [pc, #428]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6e      	ldr	r2, [pc, #440]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003678:	4013      	ands	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	4b67      	ldr	r3, [pc, #412]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003682:	430a      	orrs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003686:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	2207      	movs	r2, #7
 800368e:	4013      	ands	r3, r2
 8003690:	4a68      	ldr	r2, [pc, #416]	; (8003834 <HAL_RCC_OscConfig+0x340>)
 8003692:	40da      	lsrs	r2, r3
 8003694:	4b68      	ldr	r3, [pc, #416]	; (8003838 <HAL_RCC_OscConfig+0x344>)
 8003696:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_OscConfig+0x348>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	0018      	movs	r0, r3
 800369e:	f7fe fd5f 	bl	8002160 <HAL_InitTick>
 80036a2:	1e03      	subs	r3, r0, #0
 80036a4:	d051      	beq.n	800374a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e22c      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d030      	beq.n	8003714 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a5e      	ldr	r2, [pc, #376]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	4b57      	ldr	r3, [pc, #348]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	430a      	orrs	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80036c6:	4b56      	ldr	r3, [pc, #344]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	4b55      	ldr	r3, [pc, #340]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0049      	lsls	r1, r1, #1
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fe fda0 	bl	8002218 <HAL_GetTick>
 80036d8:	0003      	movs	r3, r0
 80036da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036de:	f7fe fd9b 	bl	8002218 <HAL_GetTick>
 80036e2:	0002      	movs	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e209      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f0:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4013      	ands	r3, r2
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036fc:	4b48      	ldr	r3, [pc, #288]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a4a      	ldr	r2, [pc, #296]	; (800382c <HAL_RCC_OscConfig+0x338>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	021a      	lsls	r2, r3, #8
 800370c:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003714:	4b42      	ldr	r3, [pc, #264]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800371a:	4949      	ldr	r1, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x34c>)
 800371c:	400a      	ands	r2, r1
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe fd7a 	bl	8002218 <HAL_GetTick>
 8003724:	0003      	movs	r3, r0
 8003726:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7fe fd75 	bl	8002218 <HAL_GetTick>
 800372e:	0002      	movs	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e1e3      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800373c:	4b38      	ldr	r3, [pc, #224]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4013      	ands	r3, r2
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x236>
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800374a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2208      	movs	r2, #8
 8003752:	4013      	ands	r3, r2
 8003754:	d047      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003756:	4b32      	ldr	r3, [pc, #200]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	2238      	movs	r2, #56	; 0x38
 800375c:	4013      	ands	r3, r2
 800375e:	2b18      	cmp	r3, #24
 8003760:	d10a      	bne.n	8003778 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003762:	4b2f      	ldr	r3, [pc, #188]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x2f2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d138      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e1c5      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d019      	beq.n	80037b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003782:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003786:	2101      	movs	r1, #1
 8003788:	430a      	orrs	r2, r1
 800378a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fd44 	bl	8002218 <HAL_GetTick>
 8003790:	0003      	movs	r3, r0
 8003792:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe fd3f 	bl	8002218 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1ad      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a8:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d0f1      	beq.n	8003796 <HAL_RCC_OscConfig+0x2a2>
 80037b2:	e018      	b.n	80037e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80037b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe fd2a 	bl	8002218 <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe fd25 	bl	8002218 <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e193      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	2202      	movs	r2, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d1f1      	bne.n	80037ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d100      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2fe>
 80037f0:	e0c6      	b.n	8003980 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037f2:	231f      	movs	r3, #31
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2238      	movs	r2, #56	; 0x38
 8003800:	4013      	ands	r3, r2
 8003802:	2b20      	cmp	r3, #32
 8003804:	d11e      	bne.n	8003844 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003806:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_RCC_OscConfig+0x32c>)
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2202      	movs	r2, #2
 800380c:	4013      	ands	r3, r2
 800380e:	d100      	bne.n	8003812 <HAL_RCC_OscConfig+0x31e>
 8003810:	e0b6      	b.n	8003980 <HAL_RCC_OscConfig+0x48c>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d000      	beq.n	800381c <HAL_RCC_OscConfig+0x328>
 800381a:	e0b1      	b.n	8003980 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e171      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
 8003820:	40021000 	.word	0x40021000
 8003824:	fffeffff 	.word	0xfffeffff
 8003828:	fffbffff 	.word	0xfffbffff
 800382c:	ffff80ff 	.word	0xffff80ff
 8003830:	ffffc7ff 	.word	0xffffc7ff
 8003834:	00f42400 	.word	0x00f42400
 8003838:	20000000 	.word	0x20000000
 800383c:	20000004 	.word	0x20000004
 8003840:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003844:	4bb1      	ldr	r3, [pc, #708]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003848:	2380      	movs	r3, #128	; 0x80
 800384a:	055b      	lsls	r3, r3, #21
 800384c:	4013      	ands	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_RCC_OscConfig+0x360>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x362>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	4bac      	ldr	r3, [pc, #688]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 800385c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800385e:	4bab      	ldr	r3, [pc, #684]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	0549      	lsls	r1, r1, #21
 8003864:	430a      	orrs	r2, r1
 8003866:	63da      	str	r2, [r3, #60]	; 0x3c
 8003868:	4ba8      	ldr	r3, [pc, #672]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 800386a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	055b      	lsls	r3, r3, #21
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003876:	231f      	movs	r3, #31
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800387e:	4ba4      	ldr	r3, [pc, #656]	; (8003b10 <HAL_RCC_OscConfig+0x61c>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	2380      	movs	r3, #128	; 0x80
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4013      	ands	r3, r2
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388a:	4ba1      	ldr	r3, [pc, #644]	; (8003b10 <HAL_RCC_OscConfig+0x61c>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4ba0      	ldr	r3, [pc, #640]	; (8003b10 <HAL_RCC_OscConfig+0x61c>)
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	0049      	lsls	r1, r1, #1
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003898:	f7fe fcbe 	bl	8002218 <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a2:	f7fe fcb9 	bl	8002218 <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e127      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b4:	4b96      	ldr	r3, [pc, #600]	; (8003b10 <HAL_RCC_OscConfig+0x61c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4013      	ands	r3, r2
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3e2>
 80038c8:	4b90      	ldr	r3, [pc, #576]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038cc:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	430a      	orrs	r2, r1
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80038d4:	e01c      	b.n	8003910 <HAL_RCC_OscConfig+0x41c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x404>
 80038de:	4b8b      	ldr	r3, [pc, #556]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e2:	4b8a      	ldr	r3, [pc, #552]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038e4:	2104      	movs	r1, #4
 80038e6:	430a      	orrs	r2, r1
 80038e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80038ea:	4b88      	ldr	r3, [pc, #544]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ee:	4b87      	ldr	r3, [pc, #540]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038f0:	2101      	movs	r1, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80038f6:	e00b      	b.n	8003910 <HAL_RCC_OscConfig+0x41c>
 80038f8:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038fc:	4b83      	ldr	r3, [pc, #524]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	65da      	str	r2, [r3, #92]	; 0x5c
 8003904:	4b81      	ldr	r3, [pc, #516]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003908:	4b80      	ldr	r3, [pc, #512]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 800390a:	2104      	movs	r1, #4
 800390c:	438a      	bics	r2, r1
 800390e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d014      	beq.n	8003942 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fc7e 	bl	8002218 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003920:	e009      	b.n	8003936 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe fc79 	bl	8002218 <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	4a79      	ldr	r2, [pc, #484]	; (8003b14 <HAL_RCC_OscConfig+0x620>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0e6      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	4b75      	ldr	r3, [pc, #468]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x42e>
 8003940:	e013      	b.n	800396a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7fe fc69 	bl	8002218 <HAL_GetTick>
 8003946:	0003      	movs	r3, r0
 8003948:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800394a:	e009      	b.n	8003960 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fe fc64 	bl	8002218 <HAL_GetTick>
 8003950:	0002      	movs	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	4a6f      	ldr	r2, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x620>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0d1      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800396a:	231f      	movs	r3, #31
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003974:	4b65      	ldr	r3, [pc, #404]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003978:	4b64      	ldr	r3, [pc, #400]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 800397a:	4967      	ldr	r1, [pc, #412]	; (8003b18 <HAL_RCC_OscConfig+0x624>)
 800397c:	400a      	ands	r2, r1
 800397e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d100      	bne.n	800398a <HAL_RCC_OscConfig+0x496>
 8003988:	e0bb      	b.n	8003b02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398a:	4b60      	ldr	r3, [pc, #384]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2238      	movs	r2, #56	; 0x38
 8003990:	4013      	ands	r3, r2
 8003992:	2b10      	cmp	r3, #16
 8003994:	d100      	bne.n	8003998 <HAL_RCC_OscConfig+0x4a4>
 8003996:	e07b      	b.n	8003a90 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d156      	bne.n	8003a4e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b5a      	ldr	r3, [pc, #360]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b59      	ldr	r3, [pc, #356]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80039a6:	495d      	ldr	r1, [pc, #372]	; (8003b1c <HAL_RCC_OscConfig+0x628>)
 80039a8:	400a      	ands	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe fc34 	bl	8002218 <HAL_GetTick>
 80039b0:	0003      	movs	r3, r0
 80039b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fe fc2f 	bl	8002218 <HAL_GetTick>
 80039ba:	0002      	movs	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e09d      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c8:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	049b      	lsls	r3, r3, #18
 80039d0:	4013      	ands	r3, r2
 80039d2:	d1f0      	bne.n	80039b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d4:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a51      	ldr	r2, [pc, #324]	; (8003b20 <HAL_RCC_OscConfig+0x62c>)
 80039da:	4013      	ands	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	431a      	orrs	r2, r3
 8003a02:	4b42      	ldr	r3, [pc, #264]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a08:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a0e:	2180      	movs	r1, #128	; 0x80
 8003a10:	0449      	lsls	r1, r1, #17
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	0549      	lsls	r1, r1, #21
 8003a20:	430a      	orrs	r2, r1
 8003a22:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fbf8 	bl	8002218 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe fbf3 	bl	8002218 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e061      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a40:	4b32      	ldr	r3, [pc, #200]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	049b      	lsls	r3, r3, #18
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x53a>
 8003a4c:	e059      	b.n	8003b02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	4b2e      	ldr	r3, [pc, #184]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a54:	4931      	ldr	r1, [pc, #196]	; (8003b1c <HAL_RCC_OscConfig+0x628>)
 8003a56:	400a      	ands	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fe fbdd 	bl	8002218 <HAL_GetTick>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fbd8 	bl	8002218 <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e046      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	049b      	lsls	r3, r3, #18
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003a82:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a88:	4926      	ldr	r1, [pc, #152]	; (8003b24 <HAL_RCC_OscConfig+0x630>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	e038      	b.n	8003b02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e033      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x618>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d126      	bne.n	8003afe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2270      	movs	r2, #112	; 0x70
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d11f      	bne.n	8003afe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	23fe      	movs	r3, #254	; 0xfe
 8003ac2:	01db      	lsls	r3, r3, #7
 8003ac4:	401a      	ands	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d116      	bne.n	8003afe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	23f8      	movs	r3, #248	; 0xf8
 8003ad4:	039b      	lsls	r3, r3, #14
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d10e      	bne.n	8003afe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	23e0      	movs	r3, #224	; 0xe0
 8003ae4:	051b      	lsls	r3, r3, #20
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	0f5b      	lsrs	r3, r3, #29
 8003af4:	075a      	lsls	r2, r3, #29
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	0018      	movs	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b008      	add	sp, #32
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40007000 	.word	0x40007000
 8003b14:	00001388 	.word	0x00001388
 8003b18:	efffffff 	.word	0xefffffff
 8003b1c:	feffffff 	.word	0xfeffffff
 8003b20:	11c1808c 	.word	0x11c1808c
 8003b24:	eefefffc 	.word	0xeefefffc

08003b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0e9      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2207      	movs	r2, #7
 8003b42:	4013      	ands	r3, r2
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d91e      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2207      	movs	r2, #7
 8003b50:	4393      	bics	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	4b70      	ldr	r3, [pc, #448]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b5c:	f7fe fb5c 	bl	8002218 <HAL_GetTick>
 8003b60:	0003      	movs	r3, r0
 8003b62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b64:	e009      	b.n	8003b7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b66:	f7fe fb57 	bl	8002218 <HAL_GetTick>
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_RCC_ClockConfig+0x1f4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0ca      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2207      	movs	r2, #7
 8003b80:	4013      	ands	r3, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d1ee      	bne.n	8003b66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d015      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2204      	movs	r2, #4
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d006      	beq.n	8003baa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b9c:	4b60      	ldr	r3, [pc, #384]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	4b5f      	ldr	r3, [pc, #380]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003ba2:	21e0      	movs	r1, #224	; 0xe0
 8003ba4:	01c9      	lsls	r1, r1, #7
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003baa:	4b5d      	ldr	r3, [pc, #372]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4a5d      	ldr	r2, [pc, #372]	; (8003d24 <HAL_RCC_ClockConfig+0x1fc>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d057      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd0:	4b53      	ldr	r3, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d12b      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e097      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	049b      	lsls	r3, r3, #18
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d11f      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e08b      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c00:	4b47      	ldr	r3, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d113      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e07f      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c18:	4b41      	ldr	r3, [pc, #260]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d108      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e074      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e06d      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c34:	4b3a      	ldr	r3, [pc, #232]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2207      	movs	r2, #7
 8003c3a:	4393      	bics	r3, r2
 8003c3c:	0019      	movs	r1, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	4b37      	ldr	r3, [pc, #220]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fe fae6 	bl	8002218 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c50:	e009      	b.n	8003c66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c52:	f7fe fae1 	bl	8002218 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	4a2f      	ldr	r2, [pc, #188]	; (8003d1c <HAL_RCC_ClockConfig+0x1f4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e054      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2238      	movs	r2, #56	; 0x38
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d1ec      	bne.n	8003c52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c78:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	4013      	ands	r3, r2
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d21e      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	4393      	bics	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c98:	f7fe fabe 	bl	8002218 <HAL_GetTick>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ca0:	e009      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca2:	f7fe fab9 	bl	8002218 <HAL_GetTick>
 8003ca6:	0002      	movs	r2, r0
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	4a1b      	ldr	r2, [pc, #108]	; (8003d1c <HAL_RCC_ClockConfig+0x1f4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e02c      	b.n	8003d10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2207      	movs	r2, #7
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1ee      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <HAL_RCC_ClockConfig+0x200>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ce2:	f000 f829 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003ce6:	0001      	movs	r1, r0
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <HAL_RCC_ClockConfig+0x1f8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	220f      	movs	r2, #15
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_RCC_ClockConfig+0x204>)
 8003cf4:	0092      	lsls	r2, r2, #2
 8003cf6:	58d3      	ldr	r3, [r2, r3]
 8003cf8:	221f      	movs	r2, #31
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	000a      	movs	r2, r1
 8003cfe:	40da      	lsrs	r2, r3
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x208>)
 8003d02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_ClockConfig+0x20c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fe fa29 	bl	8002160 <HAL_InitTick>
 8003d0e:	0003      	movs	r3, r0
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b004      	add	sp, #16
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	00001388 	.word	0x00001388
 8003d20:	40021000 	.word	0x40021000
 8003d24:	fffff0ff 	.word	0xfffff0ff
 8003d28:	ffff8fff 	.word	0xffff8fff
 8003d2c:	08006a88 	.word	0x08006a88
 8003d30:	20000000 	.word	0x20000000
 8003d34:	20000004 	.word	0x20000004

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3e:	4b3c      	ldr	r3, [pc, #240]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2238      	movs	r2, #56	; 0x38
 8003d44:	4013      	ands	r3, r2
 8003d46:	d10f      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d48:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0adb      	lsrs	r3, r3, #11
 8003d4e:	2207      	movs	r2, #7
 8003d50:	4013      	ands	r3, r2
 8003d52:	2201      	movs	r2, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	0013      	movs	r3, r2
 8003d58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	4835      	ldr	r0, [pc, #212]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d5e:	f7fc f9db 	bl	8000118 <__udivsi3>
 8003d62:	0003      	movs	r3, r0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e05d      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d68:	4b31      	ldr	r3, [pc, #196]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2238      	movs	r2, #56	; 0x38
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	e054      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2238      	movs	r2, #56	; 0x38
 8003d80:	4013      	ands	r3, r2
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d138      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d86:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	2207      	movs	r2, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d10d      	bne.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	4824      	ldr	r0, [pc, #144]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x100>)
 8003da8:	f7fc f9b6 	bl	8000118 <__udivsi3>
 8003dac:	0003      	movs	r3, r0
 8003dae:	0019      	movs	r1, r3
 8003db0:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	227f      	movs	r2, #127	; 0x7f
 8003db8:	4013      	ands	r3, r2
 8003dba:	434b      	muls	r3, r1
 8003dbc:	617b      	str	r3, [r7, #20]
        break;
 8003dbe:	e00d      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	481c      	ldr	r0, [pc, #112]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003dc4:	f7fc f9a8 	bl	8000118 <__udivsi3>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	0019      	movs	r1, r3
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	0a1b      	lsrs	r3, r3, #8
 8003dd2:	227f      	movs	r2, #127	; 0x7f
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	434b      	muls	r3, r1
 8003dd8:	617b      	str	r3, [r7, #20]
        break;
 8003dda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0f5b      	lsrs	r3, r3, #29
 8003de2:	2207      	movs	r2, #7
 8003de4:	4013      	ands	r3, r2
 8003de6:	3301      	adds	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6978      	ldr	r0, [r7, #20]
 8003dee:	f7fc f993 	bl	8000118 <__udivsi3>
 8003df2:	0003      	movs	r3, r0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	e015      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003df8:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2238      	movs	r2, #56	; 0x38
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d103      	bne.n	8003e0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2238      	movs	r2, #56	; 0x38
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b18      	cmp	r3, #24
 8003e16:	d103      	bne.n	8003e20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003e18:	23fa      	movs	r3, #250	; 0xfa
 8003e1a:	01db      	lsls	r3, r3, #7
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e001      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e24:	693b      	ldr	r3, [r7, #16]
}
 8003e26:	0018      	movs	r0, r3
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b006      	add	sp, #24
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	40021000 	.word	0x40021000
 8003e34:	00f42400 	.word	0x00f42400
 8003e38:	007a1200 	.word	0x007a1200

08003e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	20000000 	.word	0x20000000

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e54:	f7ff fff2 	bl	8003e3c <HAL_RCC_GetHCLKFreq>
 8003e58:	0004      	movs	r4, r0
 8003e5a:	f7ff fb3f 	bl	80034dc <LL_RCC_GetAPB1Prescaler>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	0b1a      	lsrs	r2, r3, #12
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	58d3      	ldr	r3, [r2, r3]
 8003e68:	221f      	movs	r2, #31
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	40dc      	lsrs	r4, r3
 8003e6e:	0023      	movs	r3, r4
}
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bdb0      	pop	{r4, r5, r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	08006ac8 	.word	0x08006ac8

08003e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e84:	2313      	movs	r3, #19
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e8c:	2312      	movs	r3, #18
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d100      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ea0:	e0a3      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea2:	2011      	movs	r0, #17
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eaa:	4ba5      	ldr	r3, [pc, #660]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	055b      	lsls	r3, r3, #21
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d110      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4ba2      	ldr	r3, [pc, #648]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eba:	4ba1      	ldr	r3, [pc, #644]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	0549      	lsls	r1, r1, #21
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ec4:	4b9e      	ldr	r3, [pc, #632]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec8:	2380      	movs	r3, #128	; 0x80
 8003eca:	055b      	lsls	r3, r3, #21
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed2:	183b      	adds	r3, r7, r0
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed8:	4b9a      	ldr	r3, [pc, #616]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b99      	ldr	r3, [pc, #612]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003ede:	2180      	movs	r1, #128	; 0x80
 8003ee0:	0049      	lsls	r1, r1, #1
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ee6:	f7fe f997 	bl	8002218 <HAL_GetTick>
 8003eea:	0003      	movs	r3, r0
 8003eec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eee:	e00b      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef0:	f7fe f992 	bl	8002218 <HAL_GetTick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d904      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003efe:	2313      	movs	r3, #19
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2203      	movs	r2, #3
 8003f04:	701a      	strb	r2, [r3, #0]
        break;
 8003f06:	e005      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f08:	4b8e      	ldr	r3, [pc, #568]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4013      	ands	r3, r2
 8003f12:	d0ed      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003f14:	2313      	movs	r3, #19
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d154      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f1e:	4b88      	ldr	r3, [pc, #544]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f22:	23c0      	movs	r3, #192	; 0xc0
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4013      	ands	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d019      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d014      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f3a:	4b81      	ldr	r3, [pc, #516]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	4a82      	ldr	r2, [pc, #520]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f44:	4b7e      	ldr	r3, [pc, #504]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f48:	4b7d      	ldr	r3, [pc, #500]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	0249      	lsls	r1, r1, #9
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f52:	4b7b      	ldr	r3, [pc, #492]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f56:	4b7a      	ldr	r3, [pc, #488]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f58:	497c      	ldr	r1, [pc, #496]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f5e:	4b78      	ldr	r3, [pc, #480]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d016      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe f954 	bl	8002218 <HAL_GetTick>
 8003f70:	0003      	movs	r3, r0
 8003f72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	e00c      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe f94f 	bl	8002218 <HAL_GetTick>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	4a73      	ldr	r2, [pc, #460]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d904      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f86:	2313      	movs	r3, #19
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
            break;
 8003f8e:	e004      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f90:	4b6b      	ldr	r3, [pc, #428]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	2202      	movs	r2, #2
 8003f96:	4013      	ands	r3, r2
 8003f98:	d0ed      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003f9a:	2313      	movs	r3, #19
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10a      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa4:	4b66      	ldr	r3, [pc, #408]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa8:	4a67      	ldr	r2, [pc, #412]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fb8:	e00c      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fba:	2312      	movs	r3, #18
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	2213      	movs	r2, #19
 8003fc0:	18ba      	adds	r2, r7, r2
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e005      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	2312      	movs	r3, #18
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2213      	movs	r2, #19
 8003fce:	18ba      	adds	r2, r7, r2
 8003fd0:	7812      	ldrb	r2, [r2, #0]
 8003fd2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd4:	2311      	movs	r3, #17
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d105      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fde:	4b58      	ldr	r3, [pc, #352]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe2:	4b57      	ldr	r3, [pc, #348]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe4:	495b      	ldr	r1, [pc, #364]	; (8004154 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ff4:	4b52      	ldr	r3, [pc, #328]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4b4f      	ldr	r3, [pc, #316]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004004:	430a      	orrs	r2, r1
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	4013      	ands	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004012:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	4a50      	ldr	r2, [pc, #320]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004022:	430a      	orrs	r2, r1
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4013      	ands	r3, r2
 8004030:	d009      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004032:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	4a49      	ldr	r2, [pc, #292]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004038:	4013      	ands	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004042:	430a      	orrs	r2, r1
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	4013      	ands	r3, r2
 8004050:	d009      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004056:	4a42      	ldr	r2, [pc, #264]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004058:	4013      	ands	r3, r2
 800405a:	0019      	movs	r1, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	4b37      	ldr	r3, [pc, #220]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004062:	430a      	orrs	r2, r1
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2220      	movs	r2, #32
 800406c:	4013      	ands	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004070:	4b33      	ldr	r3, [pc, #204]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004074:	4a3b      	ldr	r2, [pc, #236]	; (8004164 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004076:	4013      	ands	r3, r2
 8004078:	0019      	movs	r1, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004080:	430a      	orrs	r2, r1
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	01db      	lsls	r3, r3, #7
 800408c:	4013      	ands	r3, r2
 800408e:	d015      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	0899      	lsrs	r1, r3, #2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	4b28      	ldr	r3, [pc, #160]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	05db      	lsls	r3, r3, #23
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d106      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	4b23      	ldr	r3, [pc, #140]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0249      	lsls	r1, r1, #9
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	039b      	lsls	r3, r3, #14
 80040c4:	4013      	ands	r3, r2
 80040c6:	d016      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040c8:	4b1d      	ldr	r3, [pc, #116]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	0019      	movs	r1, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040d8:	430a      	orrs	r2, r1
 80040da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	2380      	movs	r3, #128	; 0x80
 80040e2:	03db      	lsls	r3, r3, #15
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d106      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	4b14      	ldr	r3, [pc, #80]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	0449      	lsls	r1, r1, #17
 80040f2:	430a      	orrs	r2, r1
 80040f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	d016      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004112:	430a      	orrs	r2, r1
 8004114:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691a      	ldr	r2, [r3, #16]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	01db      	lsls	r3, r3, #7
 800411e:	429a      	cmp	r2, r3
 8004120:	d106      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	0249      	lsls	r1, r1, #9
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004130:	2312      	movs	r3, #18
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	781b      	ldrb	r3, [r3, #0]
}
 8004136:	0018      	movs	r0, r3
 8004138:	46bd      	mov	sp, r7
 800413a:	b006      	add	sp, #24
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	40021000 	.word	0x40021000
 8004144:	40007000 	.word	0x40007000
 8004148:	fffffcff 	.word	0xfffffcff
 800414c:	fffeffff 	.word	0xfffeffff
 8004150:	00001388 	.word	0x00001388
 8004154:	efffffff 	.word	0xefffffff
 8004158:	fffff3ff 	.word	0xfffff3ff
 800415c:	fff3ffff 	.word	0xfff3ffff
 8004160:	ffcfffff 	.word	0xffcfffff
 8004164:	ffffcfff 	.word	0xffffcfff
 8004168:	ffbfffff 	.word	0xffbfffff
 800416c:	ffff3fff 	.word	0xffff3fff

08004170 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	223d      	movs	r2, #61	; 0x3d
 800417c:	5c9b      	ldrb	r3, [r3, r2]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e035      	b.n	80041f4 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	223d      	movs	r2, #61	; 0x3d
 800418c:	2102      	movs	r1, #2
 800418e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_TIM_Base_Start+0x8c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00a      	beq.n	80041b0 <HAL_TIM_Base_Start+0x40>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	05db      	lsls	r3, r3, #23
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d004      	beq.n	80041b0 <HAL_TIM_Base_Start+0x40>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_TIM_Base_Start+0x90>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d116      	bne.n	80041de <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4a13      	ldr	r2, [pc, #76]	; (8004204 <HAL_TIM_Base_Start+0x94>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d016      	beq.n	80041f0 <HAL_TIM_Base_Start+0x80>
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	025b      	lsls	r3, r3, #9
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d011      	beq.n	80041f0 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041dc:	e008      	b.n	80041f0 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2101      	movs	r1, #1
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	e000      	b.n	80041f2 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041f0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b004      	add	sp, #16
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40000400 	.word	0x40000400
 8004204:	00010007 	.word	0x00010007

08004208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e04a      	b.n	80042b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	223d      	movs	r2, #61	; 0x3d
 800421e:	5c9b      	ldrb	r3, [r3, r2]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	223c      	movs	r2, #60	; 0x3c
 800422a:	2100      	movs	r1, #0
 800422c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0018      	movs	r0, r3
 8004232:	f7fd fdc3 	bl	8001dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	223d      	movs	r2, #61	; 0x3d
 800423a:	2102      	movs	r1, #2
 800423c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	0019      	movs	r1, r3
 8004248:	0010      	movs	r0, r2
 800424a:	f000 fa13 	bl	8004674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2248      	movs	r2, #72	; 0x48
 8004252:	2101      	movs	r1, #1
 8004254:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	223e      	movs	r2, #62	; 0x3e
 800425a:	2101      	movs	r1, #1
 800425c:	5499      	strb	r1, [r3, r2]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	2101      	movs	r1, #1
 8004264:	5499      	strb	r1, [r3, r2]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2240      	movs	r2, #64	; 0x40
 800426a:	2101      	movs	r1, #1
 800426c:	5499      	strb	r1, [r3, r2]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2241      	movs	r2, #65	; 0x41
 8004272:	2101      	movs	r1, #1
 8004274:	5499      	strb	r1, [r3, r2]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2242      	movs	r2, #66	; 0x42
 800427a:	2101      	movs	r1, #1
 800427c:	5499      	strb	r1, [r3, r2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2243      	movs	r2, #67	; 0x43
 8004282:	2101      	movs	r1, #1
 8004284:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2244      	movs	r2, #68	; 0x44
 800428a:	2101      	movs	r1, #1
 800428c:	5499      	strb	r1, [r3, r2]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2245      	movs	r2, #69	; 0x45
 8004292:	2101      	movs	r1, #1
 8004294:	5499      	strb	r1, [r3, r2]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2246      	movs	r2, #70	; 0x46
 800429a:	2101      	movs	r1, #1
 800429c:	5499      	strb	r1, [r3, r2]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2247      	movs	r2, #71	; 0x47
 80042a2:	2101      	movs	r1, #1
 80042a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	223d      	movs	r2, #61	; 0x3d
 80042aa:	2101      	movs	r1, #1
 80042ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b002      	add	sp, #8
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <HAL_TIM_PWM_Start+0x22>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	223e      	movs	r2, #62	; 0x3e
 80042cc:	5c9b      	ldrb	r3, [r3, r2]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	1e5a      	subs	r2, r3, #1
 80042d4:	4193      	sbcs	r3, r2
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	e037      	b.n	800434a <HAL_TIM_PWM_Start+0x92>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d108      	bne.n	80042f2 <HAL_TIM_PWM_Start+0x3a>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	223f      	movs	r2, #63	; 0x3f
 80042e4:	5c9b      	ldrb	r3, [r3, r2]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	4193      	sbcs	r3, r2
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	e02b      	b.n	800434a <HAL_TIM_PWM_Start+0x92>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d108      	bne.n	800430a <HAL_TIM_PWM_Start+0x52>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2240      	movs	r2, #64	; 0x40
 80042fc:	5c9b      	ldrb	r3, [r3, r2]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	1e5a      	subs	r2, r3, #1
 8004304:	4193      	sbcs	r3, r2
 8004306:	b2db      	uxtb	r3, r3
 8004308:	e01f      	b.n	800434a <HAL_TIM_PWM_Start+0x92>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d108      	bne.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2241      	movs	r2, #65	; 0x41
 8004314:	5c9b      	ldrb	r3, [r3, r2]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	4193      	sbcs	r3, r2
 800431e:	b2db      	uxtb	r3, r3
 8004320:	e013      	b.n	800434a <HAL_TIM_PWM_Start+0x92>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b10      	cmp	r3, #16
 8004326:	d108      	bne.n	800433a <HAL_TIM_PWM_Start+0x82>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2242      	movs	r2, #66	; 0x42
 800432c:	5c9b      	ldrb	r3, [r3, r2]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	4193      	sbcs	r3, r2
 8004336:	b2db      	uxtb	r3, r3
 8004338:	e007      	b.n	800434a <HAL_TIM_PWM_Start+0x92>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2243      	movs	r2, #67	; 0x43
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	4193      	sbcs	r3, r2
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e081      	b.n	8004456 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	223e      	movs	r2, #62	; 0x3e
 800435c:	2102      	movs	r1, #2
 800435e:	5499      	strb	r1, [r3, r2]
 8004360:	e023      	b.n	80043aa <HAL_TIM_PWM_Start+0xf2>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d104      	bne.n	8004372 <HAL_TIM_PWM_Start+0xba>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	223f      	movs	r2, #63	; 0x3f
 800436c:	2102      	movs	r1, #2
 800436e:	5499      	strb	r1, [r3, r2]
 8004370:	e01b      	b.n	80043aa <HAL_TIM_PWM_Start+0xf2>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d104      	bne.n	8004382 <HAL_TIM_PWM_Start+0xca>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2240      	movs	r2, #64	; 0x40
 800437c:	2102      	movs	r1, #2
 800437e:	5499      	strb	r1, [r3, r2]
 8004380:	e013      	b.n	80043aa <HAL_TIM_PWM_Start+0xf2>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d104      	bne.n	8004392 <HAL_TIM_PWM_Start+0xda>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2241      	movs	r2, #65	; 0x41
 800438c:	2102      	movs	r1, #2
 800438e:	5499      	strb	r1, [r3, r2]
 8004390:	e00b      	b.n	80043aa <HAL_TIM_PWM_Start+0xf2>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b10      	cmp	r3, #16
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Start+0xea>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2242      	movs	r2, #66	; 0x42
 800439c:	2102      	movs	r1, #2
 800439e:	5499      	strb	r1, [r3, r2]
 80043a0:	e003      	b.n	80043aa <HAL_TIM_PWM_Start+0xf2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2243      	movs	r2, #67	; 0x43
 80043a6:	2102      	movs	r1, #2
 80043a8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6839      	ldr	r1, [r7, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 fc7e 	bl	8004cb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a28      	ldr	r2, [pc, #160]	; (8004460 <HAL_TIM_PWM_Start+0x1a8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x11e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a27      	ldr	r2, [pc, #156]	; (8004464 <HAL_TIM_PWM_Start+0x1ac>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_TIM_PWM_Start+0x11e>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_TIM_PWM_Start+0x1b0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_Start+0x122>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_TIM_PWM_Start+0x124>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2180      	movs	r1, #128	; 0x80
 80043ec:	0209      	lsls	r1, r1, #8
 80043ee:	430a      	orrs	r2, r1
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_TIM_PWM_Start+0x1a8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00a      	beq.n	8004412 <HAL_TIM_PWM_Start+0x15a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	05db      	lsls	r3, r3, #23
 8004404:	429a      	cmp	r2, r3
 8004406:	d004      	beq.n	8004412 <HAL_TIM_PWM_Start+0x15a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIM_PWM_Start+0x1b4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d116      	bne.n	8004440 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_TIM_PWM_Start+0x1b8>)
 800441a:	4013      	ands	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b06      	cmp	r3, #6
 8004422:	d016      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19a>
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	025b      	lsls	r3, r3, #9
 800442a:	429a      	cmp	r2, r3
 800442c:	d011      	beq.n	8004452 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	430a      	orrs	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	e008      	b.n	8004452 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2101      	movs	r1, #1
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e000      	b.n	8004454 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004452:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800
 800446c:	40000400 	.word	0x40000400
 8004470:	00010007 	.word	0x00010007

08004474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2317      	movs	r3, #23
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	223c      	movs	r2, #60	; 0x3c
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004492:	2302      	movs	r3, #2
 8004494:	e0e5      	b.n	8004662 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	223c      	movs	r2, #60	; 0x3c
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b14      	cmp	r3, #20
 80044a2:	d900      	bls.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80044a4:	e0d1      	b.n	800464a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	009a      	lsls	r2, r3, #2
 80044aa:	4b70      	ldr	r3, [pc, #448]	; (800466c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	0011      	movs	r1, r2
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 f95e 	bl	800477c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2108      	movs	r1, #8
 80044cc:	430a      	orrs	r2, r1
 80044ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2104      	movs	r1, #4
 80044dc:	438a      	bics	r2, r1
 80044de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6999      	ldr	r1, [r3, #24]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
      break;
 80044f2:	e0af      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	0011      	movs	r1, r2
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 f9bd 	bl	800487c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	0109      	lsls	r1, r1, #4
 8004510:	430a      	orrs	r2, r1
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4954      	ldr	r1, [pc, #336]	; (8004670 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004520:	400a      	ands	r2, r1
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	021a      	lsls	r2, r3, #8
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]
      break;
 8004538:	e08c      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	0011      	movs	r1, r2
 8004542:	0018      	movs	r0, r3
 8004544:	f000 fa18 	bl	8004978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2108      	movs	r1, #8
 8004554:	430a      	orrs	r2, r1
 8004556:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69da      	ldr	r2, [r3, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2104      	movs	r1, #4
 8004564:	438a      	bics	r2, r1
 8004566:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69d9      	ldr	r1, [r3, #28]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	61da      	str	r2, [r3, #28]
      break;
 800457a:	e06b      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f000 fa79 	bl	8004a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	0109      	lsls	r1, r1, #4
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4932      	ldr	r1, [pc, #200]	; (8004670 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69d9      	ldr	r1, [r3, #28]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	61da      	str	r2, [r3, #28]
      break;
 80045c0:	e048      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 faba 	bl	8004b44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2108      	movs	r1, #8
 80045dc:	430a      	orrs	r2, r1
 80045de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2104      	movs	r1, #4
 80045ec:	438a      	bics	r2, r1
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004602:	e027      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f000 faf3 	bl	8004bf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2180      	movs	r1, #128	; 0x80
 800461e:	0109      	lsls	r1, r1, #4
 8004620:	430a      	orrs	r2, r1
 8004622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4910      	ldr	r1, [pc, #64]	; (8004670 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004630:	400a      	ands	r2, r1
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	021a      	lsls	r2, r3, #8
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004648:	e004      	b.n	8004654 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800464a:	2317      	movs	r3, #23
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2201      	movs	r2, #1
 8004650:	701a      	strb	r2, [r3, #0]
      break;
 8004652:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	223c      	movs	r2, #60	; 0x3c
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

  return status;
 800465c:	2317      	movs	r3, #23
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b006      	add	sp, #24
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	08006ae8 	.word	0x08006ae8
 8004670:	fffffbff 	.word	0xfffffbff

08004674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a37      	ldr	r2, [pc, #220]	; (8004764 <TIM_Base_SetConfig+0xf0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d008      	beq.n	800469e <TIM_Base_SetConfig+0x2a>
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	05db      	lsls	r3, r3, #23
 8004692:	429a      	cmp	r2, r3
 8004694:	d003      	beq.n	800469e <TIM_Base_SetConfig+0x2a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a33      	ldr	r2, [pc, #204]	; (8004768 <TIM_Base_SetConfig+0xf4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d108      	bne.n	80046b0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2270      	movs	r2, #112	; 0x70
 80046a2:	4393      	bics	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <TIM_Base_SetConfig+0xf0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d014      	beq.n	80046e2 <TIM_Base_SetConfig+0x6e>
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	2380      	movs	r3, #128	; 0x80
 80046bc:	05db      	lsls	r3, r3, #23
 80046be:	429a      	cmp	r2, r3
 80046c0:	d00f      	beq.n	80046e2 <TIM_Base_SetConfig+0x6e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a28      	ldr	r2, [pc, #160]	; (8004768 <TIM_Base_SetConfig+0xf4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00b      	beq.n	80046e2 <TIM_Base_SetConfig+0x6e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a27      	ldr	r2, [pc, #156]	; (800476c <TIM_Base_SetConfig+0xf8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <TIM_Base_SetConfig+0x6e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a26      	ldr	r2, [pc, #152]	; (8004770 <TIM_Base_SetConfig+0xfc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_Base_SetConfig+0x6e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a25      	ldr	r2, [pc, #148]	; (8004774 <TIM_Base_SetConfig+0x100>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4a24      	ldr	r2, [pc, #144]	; (8004778 <TIM_Base_SetConfig+0x104>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	4393      	bics	r3, r2
 80046fa:	001a      	movs	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a11      	ldr	r2, [pc, #68]	; (8004764 <TIM_Base_SetConfig+0xf0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0xbe>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a12      	ldr	r2, [pc, #72]	; (8004770 <TIM_Base_SetConfig+0xfc>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0xbe>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a11      	ldr	r2, [pc, #68]	; (8004774 <TIM_Base_SetConfig+0x100>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d103      	bne.n	800473a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2201      	movs	r2, #1
 8004746:	4013      	ands	r3, r2
 8004748:	2b01      	cmp	r3, #1
 800474a:	d106      	bne.n	800475a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2201      	movs	r2, #1
 8004752:	4393      	bics	r3, r2
 8004754:	001a      	movs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	611a      	str	r2, [r3, #16]
  }
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b004      	add	sp, #16
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	40012c00 	.word	0x40012c00
 8004768:	40000400 	.word	0x40000400
 800476c:	40002000 	.word	0x40002000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800
 8004778:	fffffcff 	.word	0xfffffcff

0800477c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	2201      	movs	r2, #1
 8004792:	4393      	bics	r3, r2
 8004794:	001a      	movs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a2e      	ldr	r2, [pc, #184]	; (8004864 <TIM_OC1_SetConfig+0xe8>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2203      	movs	r2, #3
 80047b2:	4393      	bics	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2202      	movs	r2, #2
 80047c4:	4393      	bics	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a24      	ldr	r2, [pc, #144]	; (8004868 <TIM_OC1_SetConfig+0xec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_OC1_SetConfig+0x6e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a23      	ldr	r2, [pc, #140]	; (800486c <TIM_OC1_SetConfig+0xf0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_OC1_SetConfig+0x6e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a22      	ldr	r2, [pc, #136]	; (8004870 <TIM_OC1_SetConfig+0xf4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10c      	bne.n	8004804 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2208      	movs	r2, #8
 80047ee:	4393      	bics	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2204      	movs	r2, #4
 8004800:	4393      	bics	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <TIM_OC1_SetConfig+0xec>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_OC1_SetConfig+0xa0>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a17      	ldr	r2, [pc, #92]	; (800486c <TIM_OC1_SetConfig+0xf0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_OC1_SetConfig+0xa0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a16      	ldr	r2, [pc, #88]	; (8004870 <TIM_OC1_SetConfig+0xf4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d111      	bne.n	8004840 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4a15      	ldr	r2, [pc, #84]	; (8004874 <TIM_OC1_SetConfig+0xf8>)
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4a14      	ldr	r2, [pc, #80]	; (8004878 <TIM_OC1_SetConfig+0xfc>)
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b006      	add	sp, #24
 8004860:	bd80      	pop	{r7, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	fffeff8f 	.word	0xfffeff8f
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800
 8004874:	fffffeff 	.word	0xfffffeff
 8004878:	fffffdff 	.word	0xfffffdff

0800487c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	2210      	movs	r2, #16
 8004892:	4393      	bics	r3, r2
 8004894:	001a      	movs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a2c      	ldr	r2, [pc, #176]	; (800495c <TIM_OC2_SetConfig+0xe0>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4a2b      	ldr	r2, [pc, #172]	; (8004960 <TIM_OC2_SetConfig+0xe4>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2220      	movs	r2, #32
 80048c6:	4393      	bics	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <TIM_OC2_SetConfig+0xe8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10d      	bne.n	80048fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	4393      	bics	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2240      	movs	r2, #64	; 0x40
 80048f6:	4393      	bics	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a19      	ldr	r2, [pc, #100]	; (8004964 <TIM_OC2_SetConfig+0xe8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <TIM_OC2_SetConfig+0x96>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a18      	ldr	r2, [pc, #96]	; (8004968 <TIM_OC2_SetConfig+0xec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_OC2_SetConfig+0x96>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a17      	ldr	r2, [pc, #92]	; (800496c <TIM_OC2_SetConfig+0xf0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d113      	bne.n	800493a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4a16      	ldr	r2, [pc, #88]	; (8004970 <TIM_OC2_SetConfig+0xf4>)
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <TIM_OC2_SetConfig+0xf8>)
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	46c0      	nop			; (mov r8, r8)
 8004956:	46bd      	mov	sp, r7
 8004958:	b006      	add	sp, #24
 800495a:	bd80      	pop	{r7, pc}
 800495c:	feff8fff 	.word	0xfeff8fff
 8004960:	fffffcff 	.word	0xfffffcff
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800
 8004970:	fffffbff 	.word	0xfffffbff
 8004974:	fffff7ff 	.word	0xfffff7ff

08004978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	4a31      	ldr	r2, [pc, #196]	; (8004a54 <TIM_OC3_SetConfig+0xdc>)
 800498e:	401a      	ands	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a2d      	ldr	r2, [pc, #180]	; (8004a58 <TIM_OC3_SetConfig+0xe0>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2203      	movs	r2, #3
 80049ac:	4393      	bics	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <TIM_OC3_SetConfig+0xe4>)
 80049be:	4013      	ands	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	021b      	lsls	r3, r3, #8
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <TIM_OC3_SetConfig+0xe8>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10d      	bne.n	80049f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <TIM_OC3_SetConfig+0xec>)
 80049da:	4013      	ands	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4a1e      	ldr	r2, [pc, #120]	; (8004a68 <TIM_OC3_SetConfig+0xf0>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <TIM_OC3_SetConfig+0xe8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_OC3_SetConfig+0x92>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <TIM_OC3_SetConfig+0xf4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_OC3_SetConfig+0x92>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <TIM_OC3_SetConfig+0xf8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d113      	bne.n	8004a32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <TIM_OC3_SetConfig+0xfc>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <TIM_OC3_SetConfig+0x100>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	621a      	str	r2, [r3, #32]
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b006      	add	sp, #24
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	fffffeff 	.word	0xfffffeff
 8004a58:	fffeff8f 	.word	0xfffeff8f
 8004a5c:	fffffdff 	.word	0xfffffdff
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	fffff7ff 	.word	0xfffff7ff
 8004a68:	fffffbff 	.word	0xfffffbff
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800
 8004a74:	ffffefff 	.word	0xffffefff
 8004a78:	ffffdfff 	.word	0xffffdfff

08004a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <TIM_OC4_SetConfig+0xa8>)
 8004a92:	401a      	ands	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a20      	ldr	r2, [pc, #128]	; (8004b28 <TIM_OC4_SetConfig+0xac>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <TIM_OC4_SetConfig+0xb0>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <TIM_OC4_SetConfig+0xb4>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	031b      	lsls	r3, r3, #12
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <TIM_OC4_SetConfig+0xb8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_OC4_SetConfig+0x70>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <TIM_OC4_SetConfig+0xbc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_OC4_SetConfig+0x70>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <TIM_OC4_SetConfig+0xc0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d109      	bne.n	8004b00 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <TIM_OC4_SetConfig+0xc4>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b006      	add	sp, #24
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	ffffefff 	.word	0xffffefff
 8004b28:	feff8fff 	.word	0xfeff8fff
 8004b2c:	fffffcff 	.word	0xfffffcff
 8004b30:	ffffdfff 	.word	0xffffdfff
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800
 8004b40:	ffffbfff 	.word	0xffffbfff

08004b44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4a21      	ldr	r2, [pc, #132]	; (8004be0 <TIM_OC5_SetConfig+0x9c>)
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <TIM_OC5_SetConfig+0xa0>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <TIM_OC5_SetConfig+0xa4>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <TIM_OC5_SetConfig+0xa8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d007      	beq.n	8004baa <TIM_OC5_SetConfig+0x66>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <TIM_OC5_SetConfig+0xac>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d003      	beq.n	8004baa <TIM_OC5_SetConfig+0x66>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a13      	ldr	r2, [pc, #76]	; (8004bf4 <TIM_OC5_SetConfig+0xb0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d109      	bne.n	8004bbe <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <TIM_OC5_SetConfig+0x9c>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	621a      	str	r2, [r3, #32]
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b006      	add	sp, #24
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	fffeffff 	.word	0xfffeffff
 8004be4:	fffeff8f 	.word	0xfffeff8f
 8004be8:	fffdffff 	.word	0xfffdffff
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40014400 	.word	0x40014400
 8004bf4:	40014800 	.word	0x40014800

08004bf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <TIM_OC6_SetConfig+0xa0>)
 8004c0e:	401a      	ands	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <TIM_OC6_SetConfig+0xa4>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <TIM_OC6_SetConfig+0xa8>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	051b      	lsls	r3, r3, #20
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <TIM_OC6_SetConfig+0xac>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_OC6_SetConfig+0x68>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <TIM_OC6_SetConfig+0xb0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_OC6_SetConfig+0x68>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a14      	ldr	r2, [pc, #80]	; (8004cac <TIM_OC6_SetConfig+0xb4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d109      	bne.n	8004c74 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <TIM_OC6_SetConfig+0xb8>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	029b      	lsls	r3, r3, #10
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b006      	add	sp, #24
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	ffefffff 	.word	0xffefffff
 8004c9c:	feff8fff 	.word	0xfeff8fff
 8004ca0:	ffdfffff 	.word	0xffdfffff
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800
 8004cb0:	fffbffff 	.word	0xfffbffff

08004cb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	221f      	movs	r2, #31
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	0013      	movs	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	43d2      	mvns	r2, r2
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	211f      	movs	r1, #31
 8004ce4:	400b      	ands	r3, r1
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4099      	lsls	r1, r3
 8004cea:	000b      	movs	r3, r1
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b006      	add	sp, #24
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	223c      	movs	r2, #60	; 0x3c
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e050      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	223c      	movs	r2, #60	; 0x3c
 8004d18:	2101      	movs	r1, #1
 8004d1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223d      	movs	r2, #61	; 0x3d
 8004d20:	2102      	movs	r1, #2
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2270      	movs	r2, #112	; 0x70
 8004d54:	4393      	bics	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00a      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	05db      	lsls	r3, r3, #23
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2280      	movs	r2, #128	; 0x80
 8004d8e:	4393      	bics	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	223d      	movs	r2, #61	; 0x3d
 8004da8:	2101      	movs	r1, #1
 8004daa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	223c      	movs	r2, #60	; 0x3c
 8004db0:	2100      	movs	r1, #0
 8004db2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	ff0fffff 	.word	0xff0fffff
 8004dc8:	40000400 	.word	0x40000400

08004dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e046      	b.n	8004e6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2288      	movs	r2, #136	; 0x88
 8004de2:	589b      	ldr	r3, [r3, r2]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2284      	movs	r2, #132	; 0x84
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	0018      	movs	r0, r3
 8004df4:	f7fd f83a 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2288      	movs	r2, #136	; 0x88
 8004dfc:	2124      	movs	r1, #36	; 0x24
 8004dfe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 fb48 	bl	80054b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 f8cc 	bl	8004fc0 <UART_SetConfig>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e01c      	b.n	8004e6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	490d      	ldr	r1, [pc, #52]	; (8004e74 <HAL_UART_Init+0xa8>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	212a      	movs	r1, #42	; 0x2a
 8004e4e:	438a      	bics	r2, r1
 8004e50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fbd7 	bl	8005618 <UART_CheckIdleState>
 8004e6a:	0003      	movs	r3, r0
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	ffffb7ff 	.word	0xffffb7ff

08004e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	; 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	1dbb      	adds	r3, r7, #6
 8004e86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2288      	movs	r2, #136	; 0x88
 8004e8c:	589b      	ldr	r3, [r3, r2]
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d000      	beq.n	8004e94 <HAL_UART_Transmit+0x1c>
 8004e92:	e090      	b.n	8004fb6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_Transmit+0x2a>
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e088      	b.n	8004fb8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	2380      	movs	r3, #128	; 0x80
 8004eac:	015b      	lsls	r3, r3, #5
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d109      	bne.n	8004ec6 <HAL_UART_Transmit+0x4e>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d001      	beq.n	8004ec6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e078      	b.n	8004fb8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2290      	movs	r2, #144	; 0x90
 8004eca:	2100      	movs	r1, #0
 8004ecc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2288      	movs	r2, #136	; 0x88
 8004ed2:	2121      	movs	r1, #33	; 0x21
 8004ed4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed6:	f7fd f99f 	bl	8002218 <HAL_GetTick>
 8004eda:	0003      	movs	r3, r0
 8004edc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1dba      	adds	r2, r7, #6
 8004ee2:	2154      	movs	r1, #84	; 0x54
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	1dba      	adds	r2, r7, #6
 8004eec:	2156      	movs	r1, #86	; 0x56
 8004eee:	8812      	ldrh	r2, [r2, #0]
 8004ef0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	2380      	movs	r3, #128	; 0x80
 8004ef8:	015b      	lsls	r3, r3, #5
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d108      	bne.n	8004f10 <HAL_UART_Transmit+0x98>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	e003      	b.n	8004f18 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f18:	e030      	b.n	8004f7c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	0013      	movs	r3, r2
 8004f24:	2200      	movs	r2, #0
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	f000 fc20 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 8004f2c:	1e03      	subs	r3, r0, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2288      	movs	r2, #136	; 0x88
 8004f34:	2120      	movs	r1, #32
 8004f36:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e03d      	b.n	8004fb8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	001a      	movs	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	05d2      	lsls	r2, r2, #23
 8004f4e:	0dd2      	lsrs	r2, r2, #23
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	3302      	adds	r3, #2
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	e007      	b.n	8004f6a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3301      	adds	r3, #1
 8004f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2256      	movs	r2, #86	; 0x56
 8004f6e:	5a9b      	ldrh	r3, [r3, r2]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b299      	uxth	r1, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2256      	movs	r2, #86	; 0x56
 8004f7a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2256      	movs	r2, #86	; 0x56
 8004f80:	5a9b      	ldrh	r3, [r3, r2]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1c8      	bne.n	8004f1a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	0013      	movs	r3, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	2140      	movs	r1, #64	; 0x40
 8004f96:	f000 fbe9 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 8004f9a:	1e03      	subs	r3, r0, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2288      	movs	r2, #136	; 0x88
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e006      	b.n	8004fb8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2288      	movs	r2, #136	; 0x88
 8004fae:	2120      	movs	r1, #32
 8004fb0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
  }
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b008      	add	sp, #32
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b5b0      	push	{r4, r5, r7, lr}
 8004fc2:	b090      	sub	sp, #64	; 0x40
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc8:	231a      	movs	r3, #26
 8004fca:	2220      	movs	r2, #32
 8004fcc:	189b      	adds	r3, r3, r2
 8004fce:	19db      	adds	r3, r3, r7
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4ac4      	ldr	r2, [pc, #784]	; (8005304 <UART_SetConfig+0x344>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	430b      	orrs	r3, r1
 8005000:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	4abf      	ldr	r2, [pc, #764]	; (8005308 <UART_SetConfig+0x348>)
 800500a:	4013      	ands	r3, r2
 800500c:	0018      	movs	r0, r3
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	68d9      	ldr	r1, [r3, #12]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	0003      	movs	r3, r0
 8005018:	430b      	orrs	r3, r1
 800501a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4ab9      	ldr	r2, [pc, #740]	; (800530c <UART_SetConfig+0x34c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005032:	4313      	orrs	r3, r2
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	4ab4      	ldr	r2, [pc, #720]	; (8005310 <UART_SetConfig+0x350>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	430b      	orrs	r3, r1
 800504a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	220f      	movs	r2, #15
 8005054:	4393      	bics	r3, r2
 8005056:	0018      	movs	r0, r3
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	0003      	movs	r3, r0
 8005062:	430b      	orrs	r3, r1
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4aaa      	ldr	r2, [pc, #680]	; (8005314 <UART_SetConfig+0x354>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d131      	bne.n	80050d4 <UART_SetConfig+0x114>
 8005070:	4ba9      	ldr	r3, [pc, #676]	; (8005318 <UART_SetConfig+0x358>)
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	2203      	movs	r2, #3
 8005076:	4013      	ands	r3, r2
 8005078:	2b03      	cmp	r3, #3
 800507a:	d01d      	beq.n	80050b8 <UART_SetConfig+0xf8>
 800507c:	d823      	bhi.n	80050c6 <UART_SetConfig+0x106>
 800507e:	2b02      	cmp	r3, #2
 8005080:	d00c      	beq.n	800509c <UART_SetConfig+0xdc>
 8005082:	d820      	bhi.n	80050c6 <UART_SetConfig+0x106>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <UART_SetConfig+0xce>
 8005088:	2b01      	cmp	r3, #1
 800508a:	d00e      	beq.n	80050aa <UART_SetConfig+0xea>
 800508c:	e01b      	b.n	80050c6 <UART_SetConfig+0x106>
 800508e:	231b      	movs	r3, #27
 8005090:	2220      	movs	r2, #32
 8005092:	189b      	adds	r3, r3, r2
 8005094:	19db      	adds	r3, r3, r7
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e071      	b.n	8005180 <UART_SetConfig+0x1c0>
 800509c:	231b      	movs	r3, #27
 800509e:	2220      	movs	r2, #32
 80050a0:	189b      	adds	r3, r3, r2
 80050a2:	19db      	adds	r3, r3, r7
 80050a4:	2202      	movs	r2, #2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e06a      	b.n	8005180 <UART_SetConfig+0x1c0>
 80050aa:	231b      	movs	r3, #27
 80050ac:	2220      	movs	r2, #32
 80050ae:	189b      	adds	r3, r3, r2
 80050b0:	19db      	adds	r3, r3, r7
 80050b2:	2204      	movs	r2, #4
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	e063      	b.n	8005180 <UART_SetConfig+0x1c0>
 80050b8:	231b      	movs	r3, #27
 80050ba:	2220      	movs	r2, #32
 80050bc:	189b      	adds	r3, r3, r2
 80050be:	19db      	adds	r3, r3, r7
 80050c0:	2208      	movs	r2, #8
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e05c      	b.n	8005180 <UART_SetConfig+0x1c0>
 80050c6:	231b      	movs	r3, #27
 80050c8:	2220      	movs	r2, #32
 80050ca:	189b      	adds	r3, r3, r2
 80050cc:	19db      	adds	r3, r3, r7
 80050ce:	2210      	movs	r2, #16
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	e055      	b.n	8005180 <UART_SetConfig+0x1c0>
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a90      	ldr	r2, [pc, #576]	; (800531c <UART_SetConfig+0x35c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d106      	bne.n	80050ec <UART_SetConfig+0x12c>
 80050de:	231b      	movs	r3, #27
 80050e0:	2220      	movs	r2, #32
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	19db      	adds	r3, r3, r7
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e049      	b.n	8005180 <UART_SetConfig+0x1c0>
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a86      	ldr	r2, [pc, #536]	; (800530c <UART_SetConfig+0x34c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d13e      	bne.n	8005174 <UART_SetConfig+0x1b4>
 80050f6:	4b88      	ldr	r3, [pc, #544]	; (8005318 <UART_SetConfig+0x358>)
 80050f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fa:	23c0      	movs	r3, #192	; 0xc0
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	4013      	ands	r3, r2
 8005100:	22c0      	movs	r2, #192	; 0xc0
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	4293      	cmp	r3, r2
 8005106:	d027      	beq.n	8005158 <UART_SetConfig+0x198>
 8005108:	22c0      	movs	r2, #192	; 0xc0
 800510a:	0112      	lsls	r2, r2, #4
 800510c:	4293      	cmp	r3, r2
 800510e:	d82a      	bhi.n	8005166 <UART_SetConfig+0x1a6>
 8005110:	2280      	movs	r2, #128	; 0x80
 8005112:	0112      	lsls	r2, r2, #4
 8005114:	4293      	cmp	r3, r2
 8005116:	d011      	beq.n	800513c <UART_SetConfig+0x17c>
 8005118:	2280      	movs	r2, #128	; 0x80
 800511a:	0112      	lsls	r2, r2, #4
 800511c:	4293      	cmp	r3, r2
 800511e:	d822      	bhi.n	8005166 <UART_SetConfig+0x1a6>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <UART_SetConfig+0x16e>
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	00d2      	lsls	r2, r2, #3
 8005128:	4293      	cmp	r3, r2
 800512a:	d00e      	beq.n	800514a <UART_SetConfig+0x18a>
 800512c:	e01b      	b.n	8005166 <UART_SetConfig+0x1a6>
 800512e:	231b      	movs	r3, #27
 8005130:	2220      	movs	r2, #32
 8005132:	189b      	adds	r3, r3, r2
 8005134:	19db      	adds	r3, r3, r7
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e021      	b.n	8005180 <UART_SetConfig+0x1c0>
 800513c:	231b      	movs	r3, #27
 800513e:	2220      	movs	r2, #32
 8005140:	189b      	adds	r3, r3, r2
 8005142:	19db      	adds	r3, r3, r7
 8005144:	2202      	movs	r2, #2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	e01a      	b.n	8005180 <UART_SetConfig+0x1c0>
 800514a:	231b      	movs	r3, #27
 800514c:	2220      	movs	r2, #32
 800514e:	189b      	adds	r3, r3, r2
 8005150:	19db      	adds	r3, r3, r7
 8005152:	2204      	movs	r2, #4
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e013      	b.n	8005180 <UART_SetConfig+0x1c0>
 8005158:	231b      	movs	r3, #27
 800515a:	2220      	movs	r2, #32
 800515c:	189b      	adds	r3, r3, r2
 800515e:	19db      	adds	r3, r3, r7
 8005160:	2208      	movs	r2, #8
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e00c      	b.n	8005180 <UART_SetConfig+0x1c0>
 8005166:	231b      	movs	r3, #27
 8005168:	2220      	movs	r2, #32
 800516a:	189b      	adds	r3, r3, r2
 800516c:	19db      	adds	r3, r3, r7
 800516e:	2210      	movs	r2, #16
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e005      	b.n	8005180 <UART_SetConfig+0x1c0>
 8005174:	231b      	movs	r3, #27
 8005176:	2220      	movs	r2, #32
 8005178:	189b      	adds	r3, r3, r2
 800517a:	19db      	adds	r3, r3, r7
 800517c:	2210      	movs	r2, #16
 800517e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a61      	ldr	r2, [pc, #388]	; (800530c <UART_SetConfig+0x34c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d000      	beq.n	800518c <UART_SetConfig+0x1cc>
 800518a:	e092      	b.n	80052b2 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800518c:	231b      	movs	r3, #27
 800518e:	2220      	movs	r2, #32
 8005190:	189b      	adds	r3, r3, r2
 8005192:	19db      	adds	r3, r3, r7
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b08      	cmp	r3, #8
 8005198:	d015      	beq.n	80051c6 <UART_SetConfig+0x206>
 800519a:	dc18      	bgt.n	80051ce <UART_SetConfig+0x20e>
 800519c:	2b04      	cmp	r3, #4
 800519e:	d00d      	beq.n	80051bc <UART_SetConfig+0x1fc>
 80051a0:	dc15      	bgt.n	80051ce <UART_SetConfig+0x20e>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <UART_SetConfig+0x1ec>
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d005      	beq.n	80051b6 <UART_SetConfig+0x1f6>
 80051aa:	e010      	b.n	80051ce <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ac:	f7fe fe50 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80051b0:	0003      	movs	r3, r0
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051b4:	e014      	b.n	80051e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b6:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <UART_SetConfig+0x360>)
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051ba:	e011      	b.n	80051e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051bc:	f7fe fdbc 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 80051c0:	0003      	movs	r3, r0
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051c4:	e00c      	b.n	80051e0 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	2380      	movs	r3, #128	; 0x80
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051cc:	e008      	b.n	80051e0 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80051d2:	231a      	movs	r3, #26
 80051d4:	2220      	movs	r2, #32
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	19db      	adds	r3, r3, r7
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
        break;
 80051de:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d100      	bne.n	80051e8 <UART_SetConfig+0x228>
 80051e6:	e147      	b.n	8005478 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ec:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <UART_SetConfig+0x364>)
 80051ee:	0052      	lsls	r2, r2, #1
 80051f0:	5ad3      	ldrh	r3, [r2, r3]
 80051f2:	0019      	movs	r1, r3
 80051f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051f6:	f7fa ff8f 	bl	8000118 <__udivsi3>
 80051fa:	0003      	movs	r3, r0
 80051fc:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	0013      	movs	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	189b      	adds	r3, r3, r2
 8005208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800520a:	429a      	cmp	r2, r3
 800520c:	d305      	bcc.n	800521a <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005216:	429a      	cmp	r2, r3
 8005218:	d906      	bls.n	8005228 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800521a:	231a      	movs	r3, #26
 800521c:	2220      	movs	r2, #32
 800521e:	189b      	adds	r3, r3, r2
 8005220:	19db      	adds	r3, r3, r7
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e127      	b.n	8005478 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005234:	4b3b      	ldr	r3, [pc, #236]	; (8005324 <UART_SetConfig+0x364>)
 8005236:	0052      	lsls	r2, r2, #1
 8005238:	5ad3      	ldrh	r3, [r2, r3]
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	69b8      	ldr	r0, [r7, #24]
 8005246:	69f9      	ldr	r1, [r7, #28]
 8005248:	f7fb f8dc 	bl	8000404 <__aeabi_uldivmod>
 800524c:	0002      	movs	r2, r0
 800524e:	000b      	movs	r3, r1
 8005250:	0e11      	lsrs	r1, r2, #24
 8005252:	021d      	lsls	r5, r3, #8
 8005254:	430d      	orrs	r5, r1
 8005256:	0214      	lsls	r4, r2, #8
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68b8      	ldr	r0, [r7, #8]
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	1900      	adds	r0, r0, r4
 800526a:	4169      	adcs	r1, r5
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f7fb f8c3 	bl	8000404 <__aeabi_uldivmod>
 800527e:	0002      	movs	r2, r0
 8005280:	000b      	movs	r3, r1
 8005282:	0013      	movs	r3, r2
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	23c0      	movs	r3, #192	; 0xc0
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d309      	bcc.n	80052a4 <UART_SetConfig+0x2e4>
 8005290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005292:	2380      	movs	r3, #128	; 0x80
 8005294:	035b      	lsls	r3, r3, #13
 8005296:	429a      	cmp	r2, r3
 8005298:	d204      	bcs.n	80052a4 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	e0e9      	b.n	8005478 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80052a4:	231a      	movs	r3, #26
 80052a6:	2220      	movs	r2, #32
 80052a8:	189b      	adds	r3, r3, r2
 80052aa:	19db      	adds	r3, r3, r7
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	e0e2      	b.n	8005478 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d000      	beq.n	80052c0 <UART_SetConfig+0x300>
 80052be:	e083      	b.n	80053c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80052c0:	231b      	movs	r3, #27
 80052c2:	2220      	movs	r2, #32
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	19db      	adds	r3, r3, r7
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d015      	beq.n	80052fa <UART_SetConfig+0x33a>
 80052ce:	dc2b      	bgt.n	8005328 <UART_SetConfig+0x368>
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d00d      	beq.n	80052f0 <UART_SetConfig+0x330>
 80052d4:	dc28      	bgt.n	8005328 <UART_SetConfig+0x368>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <UART_SetConfig+0x320>
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d005      	beq.n	80052ea <UART_SetConfig+0x32a>
 80052de:	e023      	b.n	8005328 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe fdb6 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80052e4:	0003      	movs	r3, r0
 80052e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052e8:	e027      	b.n	800533a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <UART_SetConfig+0x360>)
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ee:	e024      	b.n	800533a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f0:	f7fe fd22 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 80052f4:	0003      	movs	r3, r0
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f8:	e01f      	b.n	800533a <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005300:	e01b      	b.n	800533a <UART_SetConfig+0x37a>
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	cfff69f3 	.word	0xcfff69f3
 8005308:	ffffcfff 	.word	0xffffcfff
 800530c:	40008000 	.word	0x40008000
 8005310:	11fff4ff 	.word	0x11fff4ff
 8005314:	40013800 	.word	0x40013800
 8005318:	40021000 	.word	0x40021000
 800531c:	40004400 	.word	0x40004400
 8005320:	00f42400 	.word	0x00f42400
 8005324:	08006b3c 	.word	0x08006b3c
      default:
        pclk = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800532c:	231a      	movs	r3, #26
 800532e:	2220      	movs	r2, #32
 8005330:	189b      	adds	r3, r3, r2
 8005332:	19db      	adds	r3, r3, r7
 8005334:	2201      	movs	r2, #1
 8005336:	701a      	strb	r2, [r3, #0]
        break;
 8005338:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533c:	2b00      	cmp	r3, #0
 800533e:	d100      	bne.n	8005342 <UART_SetConfig+0x382>
 8005340:	e09a      	b.n	8005478 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005346:	4b58      	ldr	r3, [pc, #352]	; (80054a8 <UART_SetConfig+0x4e8>)
 8005348:	0052      	lsls	r2, r2, #1
 800534a:	5ad3      	ldrh	r3, [r2, r3]
 800534c:	0019      	movs	r1, r3
 800534e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005350:	f7fa fee2 	bl	8000118 <__udivsi3>
 8005354:	0003      	movs	r3, r0
 8005356:	005a      	lsls	r2, r3, #1
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	18d2      	adds	r2, r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	0019      	movs	r1, r3
 8005366:	0010      	movs	r0, r2
 8005368:	f7fa fed6 	bl	8000118 <__udivsi3>
 800536c:	0003      	movs	r3, r0
 800536e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d921      	bls.n	80053ba <UART_SetConfig+0x3fa>
 8005376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	025b      	lsls	r3, r3, #9
 800537c:	429a      	cmp	r2, r3
 800537e:	d21c      	bcs.n	80053ba <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	b29a      	uxth	r2, r3
 8005384:	200e      	movs	r0, #14
 8005386:	2420      	movs	r4, #32
 8005388:	1903      	adds	r3, r0, r4
 800538a:	19db      	adds	r3, r3, r7
 800538c:	210f      	movs	r1, #15
 800538e:	438a      	bics	r2, r1
 8005390:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	2207      	movs	r2, #7
 800539a:	4013      	ands	r3, r2
 800539c:	b299      	uxth	r1, r3
 800539e:	1903      	adds	r3, r0, r4
 80053a0:	19db      	adds	r3, r3, r7
 80053a2:	1902      	adds	r2, r0, r4
 80053a4:	19d2      	adds	r2, r2, r7
 80053a6:	8812      	ldrh	r2, [r2, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	1902      	adds	r2, r0, r4
 80053b2:	19d2      	adds	r2, r2, r7
 80053b4:	8812      	ldrh	r2, [r2, #0]
 80053b6:	60da      	str	r2, [r3, #12]
 80053b8:	e05e      	b.n	8005478 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80053ba:	231a      	movs	r3, #26
 80053bc:	2220      	movs	r2, #32
 80053be:	189b      	adds	r3, r3, r2
 80053c0:	19db      	adds	r3, r3, r7
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e057      	b.n	8005478 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053c8:	231b      	movs	r3, #27
 80053ca:	2220      	movs	r2, #32
 80053cc:	189b      	adds	r3, r3, r2
 80053ce:	19db      	adds	r3, r3, r7
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d015      	beq.n	8005402 <UART_SetConfig+0x442>
 80053d6:	dc18      	bgt.n	800540a <UART_SetConfig+0x44a>
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d00d      	beq.n	80053f8 <UART_SetConfig+0x438>
 80053dc:	dc15      	bgt.n	800540a <UART_SetConfig+0x44a>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <UART_SetConfig+0x428>
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d005      	beq.n	80053f2 <UART_SetConfig+0x432>
 80053e6:	e010      	b.n	800540a <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053e8:	f7fe fd32 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80053ec:	0003      	movs	r3, r0
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053f0:	e014      	b.n	800541c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <UART_SetConfig+0x4ec>)
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053f6:	e011      	b.n	800541c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f8:	f7fe fc9e 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 80053fc:	0003      	movs	r3, r0
 80053fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005400:	e00c      	b.n	800541c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005408:	e008      	b.n	800541c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800540e:	231a      	movs	r3, #26
 8005410:	2220      	movs	r2, #32
 8005412:	189b      	adds	r3, r3, r2
 8005414:	19db      	adds	r3, r3, r7
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
        break;
 800541a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02a      	beq.n	8005478 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <UART_SetConfig+0x4e8>)
 8005428:	0052      	lsls	r2, r2, #1
 800542a:	5ad3      	ldrh	r3, [r2, r3]
 800542c:	0019      	movs	r1, r3
 800542e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005430:	f7fa fe72 	bl	8000118 <__udivsi3>
 8005434:	0003      	movs	r3, r0
 8005436:	001a      	movs	r2, r3
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	18d2      	adds	r2, r2, r3
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	0019      	movs	r1, r3
 8005446:	0010      	movs	r0, r2
 8005448:	f7fa fe66 	bl	8000118 <__udivsi3>
 800544c:	0003      	movs	r3, r0
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d90a      	bls.n	800546c <UART_SetConfig+0x4ac>
 8005456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	025b      	lsls	r3, r3, #9
 800545c:	429a      	cmp	r2, r3
 800545e:	d205      	bcs.n	800546c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	b29a      	uxth	r2, r3
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e005      	b.n	8005478 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	231a      	movs	r3, #26
 800546e:	2220      	movs	r2, #32
 8005470:	189b      	adds	r3, r3, r2
 8005472:	19db      	adds	r3, r3, r7
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	226a      	movs	r2, #106	; 0x6a
 800547c:	2101      	movs	r1, #1
 800547e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	2268      	movs	r2, #104	; 0x68
 8005484:	2101      	movs	r1, #1
 8005486:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	2200      	movs	r2, #0
 800548c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	2200      	movs	r2, #0
 8005492:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005494:	231a      	movs	r3, #26
 8005496:	2220      	movs	r2, #32
 8005498:	189b      	adds	r3, r3, r2
 800549a:	19db      	adds	r3, r3, r7
 800549c:	781b      	ldrb	r3, [r3, #0]
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b010      	add	sp, #64	; 0x40
 80054a4:	bdb0      	pop	{r4, r5, r7, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	08006b3c 	.word	0x08006b3c
 80054ac:	00f42400 	.word	0x00f42400

080054b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	2208      	movs	r2, #8
 80054be:	4013      	ands	r3, r2
 80054c0:	d00b      	beq.n	80054da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a4a      	ldr	r2, [pc, #296]	; (80055f4 <UART_AdvFeatureConfig+0x144>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	2201      	movs	r2, #1
 80054e0:	4013      	ands	r3, r2
 80054e2:	d00b      	beq.n	80054fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4a43      	ldr	r2, [pc, #268]	; (80055f8 <UART_AdvFeatureConfig+0x148>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	0019      	movs	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	2202      	movs	r2, #2
 8005502:	4013      	ands	r3, r2
 8005504:	d00b      	beq.n	800551e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	4a3b      	ldr	r2, [pc, #236]	; (80055fc <UART_AdvFeatureConfig+0x14c>)
 800550e:	4013      	ands	r3, r2
 8005510:	0019      	movs	r1, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005522:	2204      	movs	r2, #4
 8005524:	4013      	ands	r3, r2
 8005526:	d00b      	beq.n	8005540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4a34      	ldr	r2, [pc, #208]	; (8005600 <UART_AdvFeatureConfig+0x150>)
 8005530:	4013      	ands	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	2210      	movs	r2, #16
 8005546:	4013      	ands	r3, r2
 8005548:	d00b      	beq.n	8005562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4a2c      	ldr	r2, [pc, #176]	; (8005604 <UART_AdvFeatureConfig+0x154>)
 8005552:	4013      	ands	r3, r2
 8005554:	0019      	movs	r1, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	2220      	movs	r2, #32
 8005568:	4013      	ands	r3, r2
 800556a:	d00b      	beq.n	8005584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4a25      	ldr	r2, [pc, #148]	; (8005608 <UART_AdvFeatureConfig+0x158>)
 8005574:	4013      	ands	r3, r2
 8005576:	0019      	movs	r1, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005588:	2240      	movs	r2, #64	; 0x40
 800558a:	4013      	ands	r3, r2
 800558c:	d01d      	beq.n	80055ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <UART_AdvFeatureConfig+0x15c>)
 8005596:	4013      	ands	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	035b      	lsls	r3, r3, #13
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d10b      	bne.n	80055ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <UART_AdvFeatureConfig+0x160>)
 80055ba:	4013      	ands	r3, r2
 80055bc:	0019      	movs	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	4013      	ands	r3, r2
 80055d2:	d00b      	beq.n	80055ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <UART_AdvFeatureConfig+0x164>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	ffff7fff 	.word	0xffff7fff
 80055f8:	fffdffff 	.word	0xfffdffff
 80055fc:	fffeffff 	.word	0xfffeffff
 8005600:	fffbffff 	.word	0xfffbffff
 8005604:	ffffefff 	.word	0xffffefff
 8005608:	ffffdfff 	.word	0xffffdfff
 800560c:	ffefffff 	.word	0xffefffff
 8005610:	ff9fffff 	.word	0xff9fffff
 8005614:	fff7ffff 	.word	0xfff7ffff

08005618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b092      	sub	sp, #72	; 0x48
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2290      	movs	r2, #144	; 0x90
 8005624:	2100      	movs	r1, #0
 8005626:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005628:	f7fc fdf6 	bl	8002218 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2208      	movs	r2, #8
 8005638:	4013      	ands	r3, r2
 800563a:	2b08      	cmp	r3, #8
 800563c:	d12d      	bne.n	800569a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	2280      	movs	r2, #128	; 0x80
 8005642:	0391      	lsls	r1, r2, #14
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4a47      	ldr	r2, [pc, #284]	; (8005764 <UART_CheckIdleState+0x14c>)
 8005648:	9200      	str	r2, [sp, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	f000 f88e 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d022      	beq.n	800569a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005654:	f3ef 8310 	mrs	r3, PRIMASK
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800565c:	63bb      	str	r3, [r7, #56]	; 0x38
 800565e:	2301      	movs	r3, #1
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	f383 8810 	msr	PRIMASK, r3
}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	438a      	bics	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	f383 8810 	msr	PRIMASK, r3
}
 8005684:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2288      	movs	r2, #136	; 0x88
 800568a:	2120      	movs	r1, #32
 800568c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2284      	movs	r2, #132	; 0x84
 8005692:	2100      	movs	r1, #0
 8005694:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e060      	b.n	800575c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2204      	movs	r2, #4
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d146      	bne.n	8005736 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	03d1      	lsls	r1, r2, #15
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4a2c      	ldr	r2, [pc, #176]	; (8005764 <UART_CheckIdleState+0x14c>)
 80056b2:	9200      	str	r2, [sp, #0]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f000 f859 	bl	800576c <UART_WaitOnFlagUntilTimeout>
 80056ba:	1e03      	subs	r3, r0, #0
 80056bc:	d03b      	beq.n	8005736 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056be:	f3ef 8310 	mrs	r3, PRIMASK
 80056c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80056c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056c6:	637b      	str	r3, [r7, #52]	; 0x34
 80056c8:	2301      	movs	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4922      	ldr	r1, [pc, #136]	; (8005768 <UART_CheckIdleState+0x150>)
 80056e0:	400a      	ands	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f0:	f3ef 8310 	mrs	r3, PRIMASK
 80056f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80056f6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
 80056fa:	2301      	movs	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f383 8810 	msr	PRIMASK, r3
}
 8005704:	46c0      	nop			; (mov r8, r8)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2101      	movs	r1, #1
 8005712:	438a      	bics	r2, r1
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	f383 8810 	msr	PRIMASK, r3
}
 8005720:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	228c      	movs	r2, #140	; 0x8c
 8005726:	2120      	movs	r1, #32
 8005728:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2284      	movs	r2, #132	; 0x84
 800572e:	2100      	movs	r1, #0
 8005730:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e012      	b.n	800575c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2288      	movs	r2, #136	; 0x88
 800573a:	2120      	movs	r1, #32
 800573c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	228c      	movs	r2, #140	; 0x8c
 8005742:	2120      	movs	r1, #32
 8005744:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2284      	movs	r2, #132	; 0x84
 8005756:	2100      	movs	r1, #0
 8005758:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b010      	add	sp, #64	; 0x40
 8005762:	bd80      	pop	{r7, pc}
 8005764:	01ffffff 	.word	0x01ffffff
 8005768:	fffffedf 	.word	0xfffffedf

0800576c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	1dfb      	adds	r3, r7, #7
 800577a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577c:	e051      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	3301      	adds	r3, #1
 8005782:	d04e      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005784:	f7fc fd48 	bl	8002218 <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	d302      	bcc.n	800579a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e051      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2204      	movs	r2, #4
 80057a6:	4013      	ands	r3, r2
 80057a8:	d03b      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb6>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d038      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb6>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d035      	beq.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69db      	ldr	r3, [r3, #28]
 80057bc:	2208      	movs	r2, #8
 80057be:	4013      	ands	r3, r2
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d111      	bne.n	80057e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2208      	movs	r2, #8
 80057ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f000 f83c 	bl	800584c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2290      	movs	r2, #144	; 0x90
 80057d8:	2108      	movs	r1, #8
 80057da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2284      	movs	r2, #132	; 0x84
 80057e0:	2100      	movs	r1, #0
 80057e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e02c      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69da      	ldr	r2, [r3, #28]
 80057ee:	2380      	movs	r3, #128	; 0x80
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	401a      	ands	r2, r3
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d112      	bne.n	8005822 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2280      	movs	r2, #128	; 0x80
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 f81f 	bl	800584c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2290      	movs	r2, #144	; 0x90
 8005812:	2120      	movs	r1, #32
 8005814:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2284      	movs	r2, #132	; 0x84
 800581a:	2100      	movs	r1, #0
 800581c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e00f      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	4013      	ands	r3, r2
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	425a      	negs	r2, r3
 8005832:	4153      	adcs	r3, r2
 8005834:	b2db      	uxtb	r3, r3
 8005836:	001a      	movs	r2, r3
 8005838:	1dfb      	adds	r3, r7, #7
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d09e      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005854:	f3ef 8310 	mrs	r3, PRIMASK
 8005858:	617b      	str	r3, [r7, #20]
  return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
 800585e:	2301      	movs	r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	f383 8810 	msr	PRIMASK, r3
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4926      	ldr	r1, [pc, #152]	; (8005910 <UART_EndRxTransfer+0xc4>)
 8005876:	400a      	ands	r2, r1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f383 8810 	msr	PRIMASK, r3
}
 8005884:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005886:	f3ef 8310 	mrs	r3, PRIMASK
 800588a:	623b      	str	r3, [r7, #32]
  return(result);
 800588c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800588e:	633b      	str	r3, [r7, #48]	; 0x30
 8005890:	2301      	movs	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689a      	ldr	r2, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	491b      	ldr	r1, [pc, #108]	; (8005914 <UART_EndRxTransfer+0xc8>)
 80058a8:	400a      	ands	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d118      	bne.n	80058f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c0:	f3ef 8310 	mrs	r3, PRIMASK
 80058c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80058c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ca:	2301      	movs	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f383 8810 	msr	PRIMASK, r3
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2110      	movs	r1, #16
 80058e2:	438a      	bics	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	228c      	movs	r2, #140	; 0x8c
 80058f6:	2120      	movs	r1, #32
 80058f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b00e      	add	sp, #56	; 0x38
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			; (mov r8, r8)
 8005910:	fffffedf 	.word	0xfffffedf
 8005914:	effffffe 	.word	0xeffffffe

08005918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2284      	movs	r2, #132	; 0x84
 8005924:	5c9b      	ldrb	r3, [r3, r2]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_UARTEx_DisableFifoMode+0x16>
 800592a:	2302      	movs	r3, #2
 800592c:	e027      	b.n	800597e <HAL_UARTEx_DisableFifoMode+0x66>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2284      	movs	r2, #132	; 0x84
 8005932:	2101      	movs	r1, #1
 8005934:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2288      	movs	r2, #136	; 0x88
 800593a:	2124      	movs	r1, #36	; 0x24
 800593c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2101      	movs	r1, #1
 8005952:	438a      	bics	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <HAL_UARTEx_DisableFifoMode+0x70>)
 800595a:	4013      	ands	r3, r2
 800595c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2288      	movs	r2, #136	; 0x88
 8005970:	2120      	movs	r1, #32
 8005972:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2284      	movs	r2, #132	; 0x84
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	0018      	movs	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	b004      	add	sp, #16
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	dfffffff 	.word	0xdfffffff

0800598c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2284      	movs	r2, #132	; 0x84
 800599a:	5c9b      	ldrb	r3, [r3, r2]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e02e      	b.n	8005a02 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2284      	movs	r2, #132	; 0x84
 80059a8:	2101      	movs	r1, #1
 80059aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2288      	movs	r2, #136	; 0x88
 80059b0:	2124      	movs	r1, #36	; 0x24
 80059b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2101      	movs	r1, #1
 80059c8:	438a      	bics	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	08d9      	lsrs	r1, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	0018      	movs	r0, r3
 80059e4:	f000 f854 	bl	8005a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2288      	movs	r2, #136	; 0x88
 80059f4:	2120      	movs	r1, #32
 80059f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2284      	movs	r2, #132	; 0x84
 80059fc:	2100      	movs	r1, #0
 80059fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b004      	add	sp, #16
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2284      	movs	r2, #132	; 0x84
 8005a1a:	5c9b      	ldrb	r3, [r3, r2]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e02f      	b.n	8005a84 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2284      	movs	r2, #132	; 0x84
 8005a28:	2101      	movs	r1, #1
 8005a2a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2288      	movs	r2, #136	; 0x88
 8005a30:	2124      	movs	r1, #36	; 0x24
 8005a32:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2101      	movs	r1, #1
 8005a48:	438a      	bics	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	0019      	movs	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0018      	movs	r0, r3
 8005a66:	f000 f813 	bl	8005a90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2288      	movs	r2, #136	; 0x88
 8005a76:	2120      	movs	r1, #32
 8005a78:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2284      	movs	r2, #132	; 0x84
 8005a7e:	2100      	movs	r1, #0
 8005a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	0018      	movs	r0, r3
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b004      	add	sp, #16
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	f1ffffff 	.word	0xf1ffffff

08005a90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d108      	bne.n	8005ab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	226a      	movs	r2, #106	; 0x6a
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2268      	movs	r2, #104	; 0x68
 8005aac:	2101      	movs	r1, #1
 8005aae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ab0:	e043      	b.n	8005b3a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ab2:	260f      	movs	r6, #15
 8005ab4:	19bb      	adds	r3, r7, r6
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005aba:	200e      	movs	r0, #14
 8005abc:	183b      	adds	r3, r7, r0
 8005abe:	2208      	movs	r2, #8
 8005ac0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	0e5b      	lsrs	r3, r3, #25
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	240d      	movs	r4, #13
 8005ace:	193b      	adds	r3, r7, r4
 8005ad0:	2107      	movs	r1, #7
 8005ad2:	400a      	ands	r2, r1
 8005ad4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	0f5b      	lsrs	r3, r3, #29
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	250c      	movs	r5, #12
 8005ae2:	197b      	adds	r3, r7, r5
 8005ae4:	2107      	movs	r1, #7
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aea:	183b      	adds	r3, r7, r0
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	197a      	adds	r2, r7, r5
 8005af0:	7812      	ldrb	r2, [r2, #0]
 8005af2:	4914      	ldr	r1, [pc, #80]	; (8005b44 <UARTEx_SetNbDataToProcess+0xb4>)
 8005af4:	5c8a      	ldrb	r2, [r1, r2]
 8005af6:	435a      	muls	r2, r3
 8005af8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005afa:	197b      	adds	r3, r7, r5
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <UARTEx_SetNbDataToProcess+0xb8>)
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b02:	0019      	movs	r1, r3
 8005b04:	f7fa fb92 	bl	800022c <__divsi3>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	b299      	uxth	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	226a      	movs	r2, #106	; 0x6a
 8005b10:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b12:	19bb      	adds	r3, r7, r6
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	193a      	adds	r2, r7, r4
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	490a      	ldr	r1, [pc, #40]	; (8005b44 <UARTEx_SetNbDataToProcess+0xb4>)
 8005b1c:	5c8a      	ldrb	r2, [r1, r2]
 8005b1e:	435a      	muls	r2, r3
 8005b20:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b22:	193b      	adds	r3, r7, r4
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4a08      	ldr	r2, [pc, #32]	; (8005b48 <UARTEx_SetNbDataToProcess+0xb8>)
 8005b28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	f7fa fb7e 	bl	800022c <__divsi3>
 8005b30:	0003      	movs	r3, r0
 8005b32:	b299      	uxth	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2268      	movs	r2, #104	; 0x68
 8005b38:	5299      	strh	r1, [r3, r2]
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b005      	add	sp, #20
 8005b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	08006b54 	.word	0x08006b54
 8005b48:	08006b5c 	.word	0x08006b5c

08005b4c <std>:
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	b510      	push	{r4, lr}
 8005b50:	0004      	movs	r4, r0
 8005b52:	6003      	str	r3, [r0, #0]
 8005b54:	6043      	str	r3, [r0, #4]
 8005b56:	6083      	str	r3, [r0, #8]
 8005b58:	8181      	strh	r1, [r0, #12]
 8005b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b5c:	81c2      	strh	r2, [r0, #14]
 8005b5e:	6103      	str	r3, [r0, #16]
 8005b60:	6143      	str	r3, [r0, #20]
 8005b62:	6183      	str	r3, [r0, #24]
 8005b64:	0019      	movs	r1, r3
 8005b66:	2208      	movs	r2, #8
 8005b68:	305c      	adds	r0, #92	; 0x5c
 8005b6a:	f000 f90f 	bl	8005d8c <memset>
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <std+0x50>)
 8005b70:	6224      	str	r4, [r4, #32]
 8005b72:	6263      	str	r3, [r4, #36]	; 0x24
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <std+0x54>)
 8005b76:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <std+0x58>)
 8005b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <std+0x5c>)
 8005b7e:	6323      	str	r3, [r4, #48]	; 0x30
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <std+0x60>)
 8005b82:	429c      	cmp	r4, r3
 8005b84:	d005      	beq.n	8005b92 <std+0x46>
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <std+0x64>)
 8005b88:	429c      	cmp	r4, r3
 8005b8a:	d002      	beq.n	8005b92 <std+0x46>
 8005b8c:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <std+0x68>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	d103      	bne.n	8005b9a <std+0x4e>
 8005b92:	0020      	movs	r0, r4
 8005b94:	3058      	adds	r0, #88	; 0x58
 8005b96:	f000 f979 	bl	8005e8c <__retarget_lock_init_recursive>
 8005b9a:	bd10      	pop	{r4, pc}
 8005b9c:	08005cf5 	.word	0x08005cf5
 8005ba0:	08005d1d 	.word	0x08005d1d
 8005ba4:	08005d55 	.word	0x08005d55
 8005ba8:	08005d81 	.word	0x08005d81
 8005bac:	200001d4 	.word	0x200001d4
 8005bb0:	2000023c 	.word	0x2000023c
 8005bb4:	200002a4 	.word	0x200002a4

08005bb8 <stdio_exit_handler>:
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <stdio_exit_handler+0x10>)
 8005bbc:	4903      	ldr	r1, [pc, #12]	; (8005bcc <stdio_exit_handler+0x14>)
 8005bbe:	4804      	ldr	r0, [pc, #16]	; (8005bd0 <stdio_exit_handler+0x18>)
 8005bc0:	f000 f86c 	bl	8005c9c <_fwalk_sglue>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	0800672d 	.word	0x0800672d
 8005bd0:	20000018 	.word	0x20000018

08005bd4 <cleanup_stdio>:
 8005bd4:	6841      	ldr	r1, [r0, #4]
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <cleanup_stdio+0x30>)
 8005bd8:	b510      	push	{r4, lr}
 8005bda:	0004      	movs	r4, r0
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d001      	beq.n	8005be4 <cleanup_stdio+0x10>
 8005be0:	f000 fda4 	bl	800672c <_fflush_r>
 8005be4:	68a1      	ldr	r1, [r4, #8]
 8005be6:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <cleanup_stdio+0x34>)
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d002      	beq.n	8005bf2 <cleanup_stdio+0x1e>
 8005bec:	0020      	movs	r0, r4
 8005bee:	f000 fd9d 	bl	800672c <_fflush_r>
 8005bf2:	68e1      	ldr	r1, [r4, #12]
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <cleanup_stdio+0x38>)
 8005bf6:	4299      	cmp	r1, r3
 8005bf8:	d002      	beq.n	8005c00 <cleanup_stdio+0x2c>
 8005bfa:	0020      	movs	r0, r4
 8005bfc:	f000 fd96 	bl	800672c <_fflush_r>
 8005c00:	bd10      	pop	{r4, pc}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	200001d4 	.word	0x200001d4
 8005c08:	2000023c 	.word	0x2000023c
 8005c0c:	200002a4 	.word	0x200002a4

08005c10 <global_stdio_init.part.0>:
 8005c10:	b510      	push	{r4, lr}
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <global_stdio_init.part.0+0x28>)
 8005c14:	4a09      	ldr	r2, [pc, #36]	; (8005c3c <global_stdio_init.part.0+0x2c>)
 8005c16:	2104      	movs	r1, #4
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	4809      	ldr	r0, [pc, #36]	; (8005c40 <global_stdio_init.part.0+0x30>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f7ff ff95 	bl	8005b4c <std>
 8005c22:	2201      	movs	r2, #1
 8005c24:	2109      	movs	r1, #9
 8005c26:	4807      	ldr	r0, [pc, #28]	; (8005c44 <global_stdio_init.part.0+0x34>)
 8005c28:	f7ff ff90 	bl	8005b4c <std>
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	2112      	movs	r1, #18
 8005c30:	4805      	ldr	r0, [pc, #20]	; (8005c48 <global_stdio_init.part.0+0x38>)
 8005c32:	f7ff ff8b 	bl	8005b4c <std>
 8005c36:	bd10      	pop	{r4, pc}
 8005c38:	2000030c 	.word	0x2000030c
 8005c3c:	08005bb9 	.word	0x08005bb9
 8005c40:	200001d4 	.word	0x200001d4
 8005c44:	2000023c 	.word	0x2000023c
 8005c48:	200002a4 	.word	0x200002a4

08005c4c <__sfp_lock_acquire>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	4802      	ldr	r0, [pc, #8]	; (8005c58 <__sfp_lock_acquire+0xc>)
 8005c50:	f000 f91d 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	20000315 	.word	0x20000315

08005c5c <__sfp_lock_release>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	4802      	ldr	r0, [pc, #8]	; (8005c68 <__sfp_lock_release+0xc>)
 8005c60:	f000 f916 	bl	8005e90 <__retarget_lock_release_recursive>
 8005c64:	bd10      	pop	{r4, pc}
 8005c66:	46c0      	nop			; (mov r8, r8)
 8005c68:	20000315 	.word	0x20000315

08005c6c <__sinit>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	0004      	movs	r4, r0
 8005c70:	f7ff ffec 	bl	8005c4c <__sfp_lock_acquire>
 8005c74:	6a23      	ldr	r3, [r4, #32]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <__sinit+0x14>
 8005c7a:	f7ff ffef 	bl	8005c5c <__sfp_lock_release>
 8005c7e:	bd10      	pop	{r4, pc}
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <__sinit+0x28>)
 8005c82:	6223      	str	r3, [r4, #32]
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <__sinit+0x2c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1f6      	bne.n	8005c7a <__sinit+0xe>
 8005c8c:	f7ff ffc0 	bl	8005c10 <global_stdio_init.part.0>
 8005c90:	e7f3      	b.n	8005c7a <__sinit+0xe>
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	08005bd5 	.word	0x08005bd5
 8005c98:	2000030c 	.word	0x2000030c

08005c9c <_fwalk_sglue>:
 8005c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c9e:	0014      	movs	r4, r2
 8005ca0:	2600      	movs	r6, #0
 8005ca2:	9000      	str	r0, [sp, #0]
 8005ca4:	9101      	str	r1, [sp, #4]
 8005ca6:	68a5      	ldr	r5, [r4, #8]
 8005ca8:	6867      	ldr	r7, [r4, #4]
 8005caa:	3f01      	subs	r7, #1
 8005cac:	d504      	bpl.n	8005cb8 <_fwalk_sglue+0x1c>
 8005cae:	6824      	ldr	r4, [r4, #0]
 8005cb0:	2c00      	cmp	r4, #0
 8005cb2:	d1f8      	bne.n	8005ca6 <_fwalk_sglue+0xa>
 8005cb4:	0030      	movs	r0, r6
 8005cb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005cb8:	89ab      	ldrh	r3, [r5, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d908      	bls.n	8005cd0 <_fwalk_sglue+0x34>
 8005cbe:	220e      	movs	r2, #14
 8005cc0:	5eab      	ldrsh	r3, [r5, r2]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	d004      	beq.n	8005cd0 <_fwalk_sglue+0x34>
 8005cc6:	0029      	movs	r1, r5
 8005cc8:	9800      	ldr	r0, [sp, #0]
 8005cca:	9b01      	ldr	r3, [sp, #4]
 8005ccc:	4798      	blx	r3
 8005cce:	4306      	orrs	r6, r0
 8005cd0:	3568      	adds	r5, #104	; 0x68
 8005cd2:	e7ea      	b.n	8005caa <_fwalk_sglue+0xe>

08005cd4 <iprintf>:
 8005cd4:	b40f      	push	{r0, r1, r2, r3}
 8005cd6:	b507      	push	{r0, r1, r2, lr}
 8005cd8:	4905      	ldr	r1, [pc, #20]	; (8005cf0 <iprintf+0x1c>)
 8005cda:	ab04      	add	r3, sp, #16
 8005cdc:	6808      	ldr	r0, [r1, #0]
 8005cde:	cb04      	ldmia	r3!, {r2}
 8005ce0:	6881      	ldr	r1, [r0, #8]
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	f000 f9fc 	bl	80060e0 <_vfiprintf_r>
 8005ce8:	b003      	add	sp, #12
 8005cea:	bc08      	pop	{r3}
 8005cec:	b004      	add	sp, #16
 8005cee:	4718      	bx	r3
 8005cf0:	20000064 	.word	0x20000064

08005cf4 <__sread>:
 8005cf4:	b570      	push	{r4, r5, r6, lr}
 8005cf6:	000c      	movs	r4, r1
 8005cf8:	250e      	movs	r5, #14
 8005cfa:	5f49      	ldrsh	r1, [r1, r5]
 8005cfc:	f000 f874 	bl	8005de8 <_read_r>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	db03      	blt.n	8005d0c <__sread+0x18>
 8005d04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005d06:	181b      	adds	r3, r3, r0
 8005d08:	6563      	str	r3, [r4, #84]	; 0x54
 8005d0a:	bd70      	pop	{r4, r5, r6, pc}
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	4a02      	ldr	r2, [pc, #8]	; (8005d18 <__sread+0x24>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	e7f9      	b.n	8005d0a <__sread+0x16>
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	ffffefff 	.word	0xffffefff

08005d1c <__swrite>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	001f      	movs	r7, r3
 8005d20:	898b      	ldrh	r3, [r1, #12]
 8005d22:	0005      	movs	r5, r0
 8005d24:	000c      	movs	r4, r1
 8005d26:	0016      	movs	r6, r2
 8005d28:	05db      	lsls	r3, r3, #23
 8005d2a:	d505      	bpl.n	8005d38 <__swrite+0x1c>
 8005d2c:	230e      	movs	r3, #14
 8005d2e:	5ec9      	ldrsh	r1, [r1, r3]
 8005d30:	2200      	movs	r2, #0
 8005d32:	2302      	movs	r3, #2
 8005d34:	f000 f844 	bl	8005dc0 <_lseek_r>
 8005d38:	89a3      	ldrh	r3, [r4, #12]
 8005d3a:	4a05      	ldr	r2, [pc, #20]	; (8005d50 <__swrite+0x34>)
 8005d3c:	0028      	movs	r0, r5
 8005d3e:	4013      	ands	r3, r2
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	0032      	movs	r2, r6
 8005d44:	230e      	movs	r3, #14
 8005d46:	5ee1      	ldrsh	r1, [r4, r3]
 8005d48:	003b      	movs	r3, r7
 8005d4a:	f000 f861 	bl	8005e10 <_write_r>
 8005d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d50:	ffffefff 	.word	0xffffefff

08005d54 <__sseek>:
 8005d54:	b570      	push	{r4, r5, r6, lr}
 8005d56:	000c      	movs	r4, r1
 8005d58:	250e      	movs	r5, #14
 8005d5a:	5f49      	ldrsh	r1, [r1, r5]
 8005d5c:	f000 f830 	bl	8005dc0 <_lseek_r>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	1c42      	adds	r2, r0, #1
 8005d64:	d103      	bne.n	8005d6e <__sseek+0x1a>
 8005d66:	4a05      	ldr	r2, [pc, #20]	; (8005d7c <__sseek+0x28>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	bd70      	pop	{r4, r5, r6, pc}
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	0152      	lsls	r2, r2, #5
 8005d72:	4313      	orrs	r3, r2
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	6560      	str	r0, [r4, #84]	; 0x54
 8005d78:	e7f8      	b.n	8005d6c <__sseek+0x18>
 8005d7a:	46c0      	nop			; (mov r8, r8)
 8005d7c:	ffffefff 	.word	0xffffefff

08005d80 <__sclose>:
 8005d80:	b510      	push	{r4, lr}
 8005d82:	230e      	movs	r3, #14
 8005d84:	5ec9      	ldrsh	r1, [r1, r3]
 8005d86:	f000 f809 	bl	8005d9c <_close_r>
 8005d8a:	bd10      	pop	{r4, pc}

08005d8c <memset>:
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	1882      	adds	r2, r0, r2
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d100      	bne.n	8005d96 <memset+0xa>
 8005d94:	4770      	bx	lr
 8005d96:	7019      	strb	r1, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	e7f9      	b.n	8005d90 <memset+0x4>

08005d9c <_close_r>:
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	b570      	push	{r4, r5, r6, lr}
 8005da0:	4d06      	ldr	r5, [pc, #24]	; (8005dbc <_close_r+0x20>)
 8005da2:	0004      	movs	r4, r0
 8005da4:	0008      	movs	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fc f928 	bl	8001ffc <_close>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d103      	bne.n	8005db8 <_close_r+0x1c>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d000      	beq.n	8005db8 <_close_r+0x1c>
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
 8005dba:	46c0      	nop			; (mov r8, r8)
 8005dbc:	20000310 	.word	0x20000310

08005dc0 <_lseek_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	0004      	movs	r4, r0
 8005dc4:	0008      	movs	r0, r1
 8005dc6:	0011      	movs	r1, r2
 8005dc8:	001a      	movs	r2, r3
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4d05      	ldr	r5, [pc, #20]	; (8005de4 <_lseek_r+0x24>)
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fc f935 	bl	800203e <_lseek>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d103      	bne.n	8005de0 <_lseek_r+0x20>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d000      	beq.n	8005de0 <_lseek_r+0x20>
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	20000310 	.word	0x20000310

08005de8 <_read_r>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	0004      	movs	r4, r0
 8005dec:	0008      	movs	r0, r1
 8005dee:	0011      	movs	r1, r2
 8005df0:	001a      	movs	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	4d05      	ldr	r5, [pc, #20]	; (8005e0c <_read_r+0x24>)
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fc f8c7 	bl	8001f8a <_read>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_read_r+0x20>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d000      	beq.n	8005e08 <_read_r+0x20>
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	46c0      	nop			; (mov r8, r8)
 8005e0c:	20000310 	.word	0x20000310

08005e10 <_write_r>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	0004      	movs	r4, r0
 8005e14:	0008      	movs	r0, r1
 8005e16:	0011      	movs	r1, r2
 8005e18:	001a      	movs	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	4d05      	ldr	r5, [pc, #20]	; (8005e34 <_write_r+0x24>)
 8005e1e:	602b      	str	r3, [r5, #0]
 8005e20:	f7fc f8d0 	bl	8001fc4 <_write>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d103      	bne.n	8005e30 <_write_r+0x20>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d000      	beq.n	8005e30 <_write_r+0x20>
 8005e2e:	6023      	str	r3, [r4, #0]
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	20000310 	.word	0x20000310

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	; (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	20000064 	.word	0x20000064

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	2600      	movs	r6, #0
 8005e48:	4c0c      	ldr	r4, [pc, #48]	; (8005e7c <__libc_init_array+0x38>)
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4c:	1b64      	subs	r4, r4, r5
 8005e4e:	10a4      	asrs	r4, r4, #2
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	2600      	movs	r6, #0
 8005e56:	f000 fde3 	bl	8006a20 <_init>
 8005e5a:	4c0a      	ldr	r4, [pc, #40]	; (8005e84 <__libc_init_array+0x40>)
 8005e5c:	4d0a      	ldr	r5, [pc, #40]	; (8005e88 <__libc_init_array+0x44>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	00b3      	lsls	r3, r6, #2
 8005e6a:	58eb      	ldr	r3, [r5, r3]
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	00b3      	lsls	r3, r6, #2
 8005e74:	58eb      	ldr	r3, [r5, r3]
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08006ba0 	.word	0x08006ba0
 8005e80:	08006ba0 	.word	0x08006ba0
 8005e84:	08006ba4 	.word	0x08006ba4
 8005e88:	08006ba0 	.word	0x08006ba0

08005e8c <__retarget_lock_init_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_acquire_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <__retarget_lock_release_recursive>:
 8005e90:	4770      	bx	lr
	...

08005e94 <_free_r>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	0005      	movs	r5, r0
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	d010      	beq.n	8005ebe <_free_r+0x2a>
 8005e9c:	1f0c      	subs	r4, r1, #4
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	da00      	bge.n	8005ea6 <_free_r+0x12>
 8005ea4:	18e4      	adds	r4, r4, r3
 8005ea6:	0028      	movs	r0, r5
 8005ea8:	f000 f8e2 	bl	8006070 <__malloc_lock>
 8005eac:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <_free_r+0x90>)
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d105      	bne.n	8005ec0 <_free_r+0x2c>
 8005eb4:	6063      	str	r3, [r4, #4]
 8005eb6:	6014      	str	r4, [r2, #0]
 8005eb8:	0028      	movs	r0, r5
 8005eba:	f000 f8e1 	bl	8006080 <__malloc_unlock>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d908      	bls.n	8005ed6 <_free_r+0x42>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	1821      	adds	r1, r4, r0
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d1f3      	bne.n	8005eb4 <_free_r+0x20>
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	1809      	adds	r1, r1, r0
 8005ed2:	6021      	str	r1, [r4, #0]
 8005ed4:	e7ee      	b.n	8005eb4 <_free_r+0x20>
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <_free_r+0x4e>
 8005ede:	42a3      	cmp	r3, r4
 8005ee0:	d9f9      	bls.n	8005ed6 <_free_r+0x42>
 8005ee2:	6811      	ldr	r1, [r2, #0]
 8005ee4:	1850      	adds	r0, r2, r1
 8005ee6:	42a0      	cmp	r0, r4
 8005ee8:	d10b      	bne.n	8005f02 <_free_r+0x6e>
 8005eea:	6820      	ldr	r0, [r4, #0]
 8005eec:	1809      	adds	r1, r1, r0
 8005eee:	1850      	adds	r0, r2, r1
 8005ef0:	6011      	str	r1, [r2, #0]
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	d1e0      	bne.n	8005eb8 <_free_r+0x24>
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	1841      	adds	r1, r0, r1
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	6053      	str	r3, [r2, #4]
 8005f00:	e7da      	b.n	8005eb8 <_free_r+0x24>
 8005f02:	42a0      	cmp	r0, r4
 8005f04:	d902      	bls.n	8005f0c <_free_r+0x78>
 8005f06:	230c      	movs	r3, #12
 8005f08:	602b      	str	r3, [r5, #0]
 8005f0a:	e7d5      	b.n	8005eb8 <_free_r+0x24>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	1821      	adds	r1, r4, r0
 8005f10:	428b      	cmp	r3, r1
 8005f12:	d103      	bne.n	8005f1c <_free_r+0x88>
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	1809      	adds	r1, r1, r0
 8005f1a:	6021      	str	r1, [r4, #0]
 8005f1c:	6063      	str	r3, [r4, #4]
 8005f1e:	6054      	str	r4, [r2, #4]
 8005f20:	e7ca      	b.n	8005eb8 <_free_r+0x24>
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	20000318 	.word	0x20000318

08005f28 <sbrk_aligned>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0f      	ldr	r6, [pc, #60]	; (8005f68 <sbrk_aligned+0x40>)
 8005f2c:	000d      	movs	r5, r1
 8005f2e:	6831      	ldr	r1, [r6, #0]
 8005f30:	0004      	movs	r4, r0
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d102      	bne.n	8005f3c <sbrk_aligned+0x14>
 8005f36:	f000 fccb 	bl	80068d0 <_sbrk_r>
 8005f3a:	6030      	str	r0, [r6, #0]
 8005f3c:	0029      	movs	r1, r5
 8005f3e:	0020      	movs	r0, r4
 8005f40:	f000 fcc6 	bl	80068d0 <_sbrk_r>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d00a      	beq.n	8005f5e <sbrk_aligned+0x36>
 8005f48:	2303      	movs	r3, #3
 8005f4a:	1cc5      	adds	r5, r0, #3
 8005f4c:	439d      	bics	r5, r3
 8005f4e:	42a8      	cmp	r0, r5
 8005f50:	d007      	beq.n	8005f62 <sbrk_aligned+0x3a>
 8005f52:	1a29      	subs	r1, r5, r0
 8005f54:	0020      	movs	r0, r4
 8005f56:	f000 fcbb 	bl	80068d0 <_sbrk_r>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d101      	bne.n	8005f62 <sbrk_aligned+0x3a>
 8005f5e:	2501      	movs	r5, #1
 8005f60:	426d      	negs	r5, r5
 8005f62:	0028      	movs	r0, r5
 8005f64:	bd70      	pop	{r4, r5, r6, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	2000031c 	.word	0x2000031c

08005f6c <_malloc_r>:
 8005f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f6e:	2203      	movs	r2, #3
 8005f70:	1ccb      	adds	r3, r1, #3
 8005f72:	4393      	bics	r3, r2
 8005f74:	3308      	adds	r3, #8
 8005f76:	0006      	movs	r6, r0
 8005f78:	001f      	movs	r7, r3
 8005f7a:	2b0c      	cmp	r3, #12
 8005f7c:	d238      	bcs.n	8005ff0 <_malloc_r+0x84>
 8005f7e:	270c      	movs	r7, #12
 8005f80:	42b9      	cmp	r1, r7
 8005f82:	d837      	bhi.n	8005ff4 <_malloc_r+0x88>
 8005f84:	0030      	movs	r0, r6
 8005f86:	f000 f873 	bl	8006070 <__malloc_lock>
 8005f8a:	4b38      	ldr	r3, [pc, #224]	; (800606c <_malloc_r+0x100>)
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	001c      	movs	r4, r3
 8005f92:	2c00      	cmp	r4, #0
 8005f94:	d133      	bne.n	8005ffe <_malloc_r+0x92>
 8005f96:	0039      	movs	r1, r7
 8005f98:	0030      	movs	r0, r6
 8005f9a:	f7ff ffc5 	bl	8005f28 <sbrk_aligned>
 8005f9e:	0004      	movs	r4, r0
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d15e      	bne.n	8006062 <_malloc_r+0xf6>
 8005fa4:	9b00      	ldr	r3, [sp, #0]
 8005fa6:	681c      	ldr	r4, [r3, #0]
 8005fa8:	0025      	movs	r5, r4
 8005faa:	2d00      	cmp	r5, #0
 8005fac:	d14e      	bne.n	800604c <_malloc_r+0xe0>
 8005fae:	2c00      	cmp	r4, #0
 8005fb0:	d051      	beq.n	8006056 <_malloc_r+0xea>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	0029      	movs	r1, r5
 8005fb6:	18e3      	adds	r3, r4, r3
 8005fb8:	0030      	movs	r0, r6
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	f000 fc88 	bl	80068d0 <_sbrk_r>
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	4283      	cmp	r3, r0
 8005fc4:	d147      	bne.n	8006056 <_malloc_r+0xea>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	0030      	movs	r0, r6
 8005fca:	1aff      	subs	r7, r7, r3
 8005fcc:	0039      	movs	r1, r7
 8005fce:	f7ff ffab 	bl	8005f28 <sbrk_aligned>
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d03f      	beq.n	8006056 <_malloc_r+0xea>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	19db      	adds	r3, r3, r7
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	9b00      	ldr	r3, [sp, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d040      	beq.n	8006066 <_malloc_r+0xfa>
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	42a2      	cmp	r2, r4
 8005fe8:	d133      	bne.n	8006052 <_malloc_r+0xe6>
 8005fea:	2200      	movs	r2, #0
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	e014      	b.n	800601a <_malloc_r+0xae>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dac5      	bge.n	8005f80 <_malloc_r+0x14>
 8005ff4:	230c      	movs	r3, #12
 8005ff6:	2500      	movs	r5, #0
 8005ff8:	6033      	str	r3, [r6, #0]
 8005ffa:	0028      	movs	r0, r5
 8005ffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ffe:	6821      	ldr	r1, [r4, #0]
 8006000:	1bc9      	subs	r1, r1, r7
 8006002:	d420      	bmi.n	8006046 <_malloc_r+0xda>
 8006004:	290b      	cmp	r1, #11
 8006006:	d918      	bls.n	800603a <_malloc_r+0xce>
 8006008:	19e2      	adds	r2, r4, r7
 800600a:	6027      	str	r7, [r4, #0]
 800600c:	42a3      	cmp	r3, r4
 800600e:	d112      	bne.n	8006036 <_malloc_r+0xca>
 8006010:	9b00      	ldr	r3, [sp, #0]
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	6863      	ldr	r3, [r4, #4]
 8006016:	6011      	str	r1, [r2, #0]
 8006018:	6053      	str	r3, [r2, #4]
 800601a:	0030      	movs	r0, r6
 800601c:	0025      	movs	r5, r4
 800601e:	f000 f82f 	bl	8006080 <__malloc_unlock>
 8006022:	2207      	movs	r2, #7
 8006024:	350b      	adds	r5, #11
 8006026:	1d23      	adds	r3, r4, #4
 8006028:	4395      	bics	r5, r2
 800602a:	1aea      	subs	r2, r5, r3
 800602c:	429d      	cmp	r5, r3
 800602e:	d0e4      	beq.n	8005ffa <_malloc_r+0x8e>
 8006030:	1b5b      	subs	r3, r3, r5
 8006032:	50a3      	str	r3, [r4, r2]
 8006034:	e7e1      	b.n	8005ffa <_malloc_r+0x8e>
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	e7ec      	b.n	8006014 <_malloc_r+0xa8>
 800603a:	6862      	ldr	r2, [r4, #4]
 800603c:	42a3      	cmp	r3, r4
 800603e:	d1d5      	bne.n	8005fec <_malloc_r+0x80>
 8006040:	9b00      	ldr	r3, [sp, #0]
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e7e9      	b.n	800601a <_malloc_r+0xae>
 8006046:	0023      	movs	r3, r4
 8006048:	6864      	ldr	r4, [r4, #4]
 800604a:	e7a2      	b.n	8005f92 <_malloc_r+0x26>
 800604c:	002c      	movs	r4, r5
 800604e:	686d      	ldr	r5, [r5, #4]
 8006050:	e7ab      	b.n	8005faa <_malloc_r+0x3e>
 8006052:	0013      	movs	r3, r2
 8006054:	e7c4      	b.n	8005fe0 <_malloc_r+0x74>
 8006056:	230c      	movs	r3, #12
 8006058:	0030      	movs	r0, r6
 800605a:	6033      	str	r3, [r6, #0]
 800605c:	f000 f810 	bl	8006080 <__malloc_unlock>
 8006060:	e7cb      	b.n	8005ffa <_malloc_r+0x8e>
 8006062:	6027      	str	r7, [r4, #0]
 8006064:	e7d9      	b.n	800601a <_malloc_r+0xae>
 8006066:	605b      	str	r3, [r3, #4]
 8006068:	deff      	udf	#255	; 0xff
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	20000318 	.word	0x20000318

08006070 <__malloc_lock>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4802      	ldr	r0, [pc, #8]	; (800607c <__malloc_lock+0xc>)
 8006074:	f7ff ff0b 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	20000314 	.word	0x20000314

08006080 <__malloc_unlock>:
 8006080:	b510      	push	{r4, lr}
 8006082:	4802      	ldr	r0, [pc, #8]	; (800608c <__malloc_unlock+0xc>)
 8006084:	f7ff ff04 	bl	8005e90 <__retarget_lock_release_recursive>
 8006088:	bd10      	pop	{r4, pc}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	20000314 	.word	0x20000314

08006090 <__sfputc_r>:
 8006090:	6893      	ldr	r3, [r2, #8]
 8006092:	b510      	push	{r4, lr}
 8006094:	3b01      	subs	r3, #1
 8006096:	6093      	str	r3, [r2, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da04      	bge.n	80060a6 <__sfputc_r+0x16>
 800609c:	6994      	ldr	r4, [r2, #24]
 800609e:	42a3      	cmp	r3, r4
 80060a0:	db07      	blt.n	80060b2 <__sfputc_r+0x22>
 80060a2:	290a      	cmp	r1, #10
 80060a4:	d005      	beq.n	80060b2 <__sfputc_r+0x22>
 80060a6:	6813      	ldr	r3, [r2, #0]
 80060a8:	1c58      	adds	r0, r3, #1
 80060aa:	6010      	str	r0, [r2, #0]
 80060ac:	7019      	strb	r1, [r3, #0]
 80060ae:	0008      	movs	r0, r1
 80060b0:	bd10      	pop	{r4, pc}
 80060b2:	f000 fb66 	bl	8006782 <__swbuf_r>
 80060b6:	0001      	movs	r1, r0
 80060b8:	e7f9      	b.n	80060ae <__sfputc_r+0x1e>

080060ba <__sfputs_r>:
 80060ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060bc:	0006      	movs	r6, r0
 80060be:	000f      	movs	r7, r1
 80060c0:	0014      	movs	r4, r2
 80060c2:	18d5      	adds	r5, r2, r3
 80060c4:	42ac      	cmp	r4, r5
 80060c6:	d101      	bne.n	80060cc <__sfputs_r+0x12>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e007      	b.n	80060dc <__sfputs_r+0x22>
 80060cc:	7821      	ldrb	r1, [r4, #0]
 80060ce:	003a      	movs	r2, r7
 80060d0:	0030      	movs	r0, r6
 80060d2:	f7ff ffdd 	bl	8006090 <__sfputc_r>
 80060d6:	3401      	adds	r4, #1
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d1f3      	bne.n	80060c4 <__sfputs_r+0xa>
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060e0 <_vfiprintf_r>:
 80060e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060e2:	b0a1      	sub	sp, #132	; 0x84
 80060e4:	000f      	movs	r7, r1
 80060e6:	0015      	movs	r5, r2
 80060e8:	001e      	movs	r6, r3
 80060ea:	9003      	str	r0, [sp, #12]
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d004      	beq.n	80060fa <_vfiprintf_r+0x1a>
 80060f0:	6a03      	ldr	r3, [r0, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <_vfiprintf_r+0x1a>
 80060f6:	f7ff fdb9 	bl	8005c6c <__sinit>
 80060fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060fc:	07db      	lsls	r3, r3, #31
 80060fe:	d405      	bmi.n	800610c <_vfiprintf_r+0x2c>
 8006100:	89bb      	ldrh	r3, [r7, #12]
 8006102:	059b      	lsls	r3, r3, #22
 8006104:	d402      	bmi.n	800610c <_vfiprintf_r+0x2c>
 8006106:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006108:	f7ff fec1 	bl	8005e8e <__retarget_lock_acquire_recursive>
 800610c:	89bb      	ldrh	r3, [r7, #12]
 800610e:	071b      	lsls	r3, r3, #28
 8006110:	d502      	bpl.n	8006118 <_vfiprintf_r+0x38>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d113      	bne.n	8006140 <_vfiprintf_r+0x60>
 8006118:	0039      	movs	r1, r7
 800611a:	9803      	ldr	r0, [sp, #12]
 800611c:	f000 fb74 	bl	8006808 <__swsetup_r>
 8006120:	2800      	cmp	r0, #0
 8006122:	d00d      	beq.n	8006140 <_vfiprintf_r+0x60>
 8006124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d503      	bpl.n	8006132 <_vfiprintf_r+0x52>
 800612a:	2001      	movs	r0, #1
 800612c:	4240      	negs	r0, r0
 800612e:	b021      	add	sp, #132	; 0x84
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	89bb      	ldrh	r3, [r7, #12]
 8006134:	059b      	lsls	r3, r3, #22
 8006136:	d4f8      	bmi.n	800612a <_vfiprintf_r+0x4a>
 8006138:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800613a:	f7ff fea9 	bl	8005e90 <__retarget_lock_release_recursive>
 800613e:	e7f4      	b.n	800612a <_vfiprintf_r+0x4a>
 8006140:	2300      	movs	r3, #0
 8006142:	ac08      	add	r4, sp, #32
 8006144:	6163      	str	r3, [r4, #20]
 8006146:	3320      	adds	r3, #32
 8006148:	7663      	strb	r3, [r4, #25]
 800614a:	3310      	adds	r3, #16
 800614c:	76a3      	strb	r3, [r4, #26]
 800614e:	9607      	str	r6, [sp, #28]
 8006150:	002e      	movs	r6, r5
 8006152:	7833      	ldrb	r3, [r6, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <_vfiprintf_r+0x7c>
 8006158:	2b25      	cmp	r3, #37	; 0x25
 800615a:	d148      	bne.n	80061ee <_vfiprintf_r+0x10e>
 800615c:	1b73      	subs	r3, r6, r5
 800615e:	9305      	str	r3, [sp, #20]
 8006160:	42ae      	cmp	r6, r5
 8006162:	d00b      	beq.n	800617c <_vfiprintf_r+0x9c>
 8006164:	002a      	movs	r2, r5
 8006166:	0039      	movs	r1, r7
 8006168:	9803      	ldr	r0, [sp, #12]
 800616a:	f7ff ffa6 	bl	80060ba <__sfputs_r>
 800616e:	3001      	adds	r0, #1
 8006170:	d100      	bne.n	8006174 <_vfiprintf_r+0x94>
 8006172:	e0af      	b.n	80062d4 <_vfiprintf_r+0x1f4>
 8006174:	6963      	ldr	r3, [r4, #20]
 8006176:	9a05      	ldr	r2, [sp, #20]
 8006178:	189b      	adds	r3, r3, r2
 800617a:	6163      	str	r3, [r4, #20]
 800617c:	7833      	ldrb	r3, [r6, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d100      	bne.n	8006184 <_vfiprintf_r+0xa4>
 8006182:	e0a7      	b.n	80062d4 <_vfiprintf_r+0x1f4>
 8006184:	2201      	movs	r2, #1
 8006186:	2300      	movs	r3, #0
 8006188:	4252      	negs	r2, r2
 800618a:	6062      	str	r2, [r4, #4]
 800618c:	a904      	add	r1, sp, #16
 800618e:	3254      	adds	r2, #84	; 0x54
 8006190:	1852      	adds	r2, r2, r1
 8006192:	1c75      	adds	r5, r6, #1
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	60e3      	str	r3, [r4, #12]
 8006198:	60a3      	str	r3, [r4, #8]
 800619a:	7013      	strb	r3, [r2, #0]
 800619c:	65a3      	str	r3, [r4, #88]	; 0x58
 800619e:	4b59      	ldr	r3, [pc, #356]	; (8006304 <_vfiprintf_r+0x224>)
 80061a0:	2205      	movs	r2, #5
 80061a2:	0018      	movs	r0, r3
 80061a4:	7829      	ldrb	r1, [r5, #0]
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	f000 fba4 	bl	80068f4 <memchr>
 80061ac:	1c6e      	adds	r6, r5, #1
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d11f      	bne.n	80061f2 <_vfiprintf_r+0x112>
 80061b2:	6822      	ldr	r2, [r4, #0]
 80061b4:	06d3      	lsls	r3, r2, #27
 80061b6:	d504      	bpl.n	80061c2 <_vfiprintf_r+0xe2>
 80061b8:	2353      	movs	r3, #83	; 0x53
 80061ba:	a904      	add	r1, sp, #16
 80061bc:	185b      	adds	r3, r3, r1
 80061be:	2120      	movs	r1, #32
 80061c0:	7019      	strb	r1, [r3, #0]
 80061c2:	0713      	lsls	r3, r2, #28
 80061c4:	d504      	bpl.n	80061d0 <_vfiprintf_r+0xf0>
 80061c6:	2353      	movs	r3, #83	; 0x53
 80061c8:	a904      	add	r1, sp, #16
 80061ca:	185b      	adds	r3, r3, r1
 80061cc:	212b      	movs	r1, #43	; 0x2b
 80061ce:	7019      	strb	r1, [r3, #0]
 80061d0:	782b      	ldrb	r3, [r5, #0]
 80061d2:	2b2a      	cmp	r3, #42	; 0x2a
 80061d4:	d016      	beq.n	8006204 <_vfiprintf_r+0x124>
 80061d6:	002e      	movs	r6, r5
 80061d8:	2100      	movs	r1, #0
 80061da:	200a      	movs	r0, #10
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	7832      	ldrb	r2, [r6, #0]
 80061e0:	1c75      	adds	r5, r6, #1
 80061e2:	3a30      	subs	r2, #48	; 0x30
 80061e4:	2a09      	cmp	r2, #9
 80061e6:	d94e      	bls.n	8006286 <_vfiprintf_r+0x1a6>
 80061e8:	2900      	cmp	r1, #0
 80061ea:	d111      	bne.n	8006210 <_vfiprintf_r+0x130>
 80061ec:	e017      	b.n	800621e <_vfiprintf_r+0x13e>
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7af      	b.n	8006152 <_vfiprintf_r+0x72>
 80061f2:	9b05      	ldr	r3, [sp, #20]
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	1ac0      	subs	r0, r0, r3
 80061f8:	2301      	movs	r3, #1
 80061fa:	4083      	lsls	r3, r0
 80061fc:	4313      	orrs	r3, r2
 80061fe:	0035      	movs	r5, r6
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	e7cc      	b.n	800619e <_vfiprintf_r+0xbe>
 8006204:	9b07      	ldr	r3, [sp, #28]
 8006206:	1d19      	adds	r1, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	9107      	str	r1, [sp, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	db01      	blt.n	8006214 <_vfiprintf_r+0x134>
 8006210:	930b      	str	r3, [sp, #44]	; 0x2c
 8006212:	e004      	b.n	800621e <_vfiprintf_r+0x13e>
 8006214:	425b      	negs	r3, r3
 8006216:	60e3      	str	r3, [r4, #12]
 8006218:	2302      	movs	r3, #2
 800621a:	4313      	orrs	r3, r2
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	7833      	ldrb	r3, [r6, #0]
 8006220:	2b2e      	cmp	r3, #46	; 0x2e
 8006222:	d10a      	bne.n	800623a <_vfiprintf_r+0x15a>
 8006224:	7873      	ldrb	r3, [r6, #1]
 8006226:	2b2a      	cmp	r3, #42	; 0x2a
 8006228:	d135      	bne.n	8006296 <_vfiprintf_r+0x1b6>
 800622a:	9b07      	ldr	r3, [sp, #28]
 800622c:	3602      	adds	r6, #2
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	9207      	str	r2, [sp, #28]
 8006234:	2b00      	cmp	r3, #0
 8006236:	db2b      	blt.n	8006290 <_vfiprintf_r+0x1b0>
 8006238:	9309      	str	r3, [sp, #36]	; 0x24
 800623a:	4d33      	ldr	r5, [pc, #204]	; (8006308 <_vfiprintf_r+0x228>)
 800623c:	2203      	movs	r2, #3
 800623e:	0028      	movs	r0, r5
 8006240:	7831      	ldrb	r1, [r6, #0]
 8006242:	f000 fb57 	bl	80068f4 <memchr>
 8006246:	2800      	cmp	r0, #0
 8006248:	d006      	beq.n	8006258 <_vfiprintf_r+0x178>
 800624a:	2340      	movs	r3, #64	; 0x40
 800624c:	1b40      	subs	r0, r0, r5
 800624e:	4083      	lsls	r3, r0
 8006250:	6822      	ldr	r2, [r4, #0]
 8006252:	3601      	adds	r6, #1
 8006254:	4313      	orrs	r3, r2
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	7831      	ldrb	r1, [r6, #0]
 800625a:	2206      	movs	r2, #6
 800625c:	482b      	ldr	r0, [pc, #172]	; (800630c <_vfiprintf_r+0x22c>)
 800625e:	1c75      	adds	r5, r6, #1
 8006260:	7621      	strb	r1, [r4, #24]
 8006262:	f000 fb47 	bl	80068f4 <memchr>
 8006266:	2800      	cmp	r0, #0
 8006268:	d043      	beq.n	80062f2 <_vfiprintf_r+0x212>
 800626a:	4b29      	ldr	r3, [pc, #164]	; (8006310 <_vfiprintf_r+0x230>)
 800626c:	2b00      	cmp	r3, #0
 800626e:	d125      	bne.n	80062bc <_vfiprintf_r+0x1dc>
 8006270:	2207      	movs	r2, #7
 8006272:	9b07      	ldr	r3, [sp, #28]
 8006274:	3307      	adds	r3, #7
 8006276:	4393      	bics	r3, r2
 8006278:	3308      	adds	r3, #8
 800627a:	9307      	str	r3, [sp, #28]
 800627c:	6963      	ldr	r3, [r4, #20]
 800627e:	9a04      	ldr	r2, [sp, #16]
 8006280:	189b      	adds	r3, r3, r2
 8006282:	6163      	str	r3, [r4, #20]
 8006284:	e764      	b.n	8006150 <_vfiprintf_r+0x70>
 8006286:	4343      	muls	r3, r0
 8006288:	002e      	movs	r6, r5
 800628a:	2101      	movs	r1, #1
 800628c:	189b      	adds	r3, r3, r2
 800628e:	e7a6      	b.n	80061de <_vfiprintf_r+0xfe>
 8006290:	2301      	movs	r3, #1
 8006292:	425b      	negs	r3, r3
 8006294:	e7d0      	b.n	8006238 <_vfiprintf_r+0x158>
 8006296:	2300      	movs	r3, #0
 8006298:	200a      	movs	r0, #10
 800629a:	001a      	movs	r2, r3
 800629c:	3601      	adds	r6, #1
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	7831      	ldrb	r1, [r6, #0]
 80062a2:	1c75      	adds	r5, r6, #1
 80062a4:	3930      	subs	r1, #48	; 0x30
 80062a6:	2909      	cmp	r1, #9
 80062a8:	d903      	bls.n	80062b2 <_vfiprintf_r+0x1d2>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0c5      	beq.n	800623a <_vfiprintf_r+0x15a>
 80062ae:	9209      	str	r2, [sp, #36]	; 0x24
 80062b0:	e7c3      	b.n	800623a <_vfiprintf_r+0x15a>
 80062b2:	4342      	muls	r2, r0
 80062b4:	002e      	movs	r6, r5
 80062b6:	2301      	movs	r3, #1
 80062b8:	1852      	adds	r2, r2, r1
 80062ba:	e7f1      	b.n	80062a0 <_vfiprintf_r+0x1c0>
 80062bc:	aa07      	add	r2, sp, #28
 80062be:	9200      	str	r2, [sp, #0]
 80062c0:	0021      	movs	r1, r4
 80062c2:	003a      	movs	r2, r7
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <_vfiprintf_r+0x234>)
 80062c6:	9803      	ldr	r0, [sp, #12]
 80062c8:	e000      	b.n	80062cc <_vfiprintf_r+0x1ec>
 80062ca:	bf00      	nop
 80062cc:	9004      	str	r0, [sp, #16]
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	3301      	adds	r3, #1
 80062d2:	d1d3      	bne.n	800627c <_vfiprintf_r+0x19c>
 80062d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062d6:	07db      	lsls	r3, r3, #31
 80062d8:	d405      	bmi.n	80062e6 <_vfiprintf_r+0x206>
 80062da:	89bb      	ldrh	r3, [r7, #12]
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_vfiprintf_r+0x206>
 80062e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80062e2:	f7ff fdd5 	bl	8005e90 <__retarget_lock_release_recursive>
 80062e6:	89bb      	ldrh	r3, [r7, #12]
 80062e8:	065b      	lsls	r3, r3, #25
 80062ea:	d500      	bpl.n	80062ee <_vfiprintf_r+0x20e>
 80062ec:	e71d      	b.n	800612a <_vfiprintf_r+0x4a>
 80062ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80062f0:	e71d      	b.n	800612e <_vfiprintf_r+0x4e>
 80062f2:	aa07      	add	r2, sp, #28
 80062f4:	9200      	str	r2, [sp, #0]
 80062f6:	0021      	movs	r1, r4
 80062f8:	003a      	movs	r2, r7
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <_vfiprintf_r+0x234>)
 80062fc:	9803      	ldr	r0, [sp, #12]
 80062fe:	f000 f87b 	bl	80063f8 <_printf_i>
 8006302:	e7e3      	b.n	80062cc <_vfiprintf_r+0x1ec>
 8006304:	08006b64 	.word	0x08006b64
 8006308:	08006b6a 	.word	0x08006b6a
 800630c:	08006b6e 	.word	0x08006b6e
 8006310:	00000000 	.word	0x00000000
 8006314:	080060bb 	.word	0x080060bb

08006318 <_printf_common>:
 8006318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800631a:	0016      	movs	r6, r2
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	688a      	ldr	r2, [r1, #8]
 8006320:	690b      	ldr	r3, [r1, #16]
 8006322:	000c      	movs	r4, r1
 8006324:	9000      	str	r0, [sp, #0]
 8006326:	4293      	cmp	r3, r2
 8006328:	da00      	bge.n	800632c <_printf_common+0x14>
 800632a:	0013      	movs	r3, r2
 800632c:	0022      	movs	r2, r4
 800632e:	6033      	str	r3, [r6, #0]
 8006330:	3243      	adds	r2, #67	; 0x43
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	2a00      	cmp	r2, #0
 8006336:	d001      	beq.n	800633c <_printf_common+0x24>
 8006338:	3301      	adds	r3, #1
 800633a:	6033      	str	r3, [r6, #0]
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	069b      	lsls	r3, r3, #26
 8006340:	d502      	bpl.n	8006348 <_printf_common+0x30>
 8006342:	6833      	ldr	r3, [r6, #0]
 8006344:	3302      	adds	r3, #2
 8006346:	6033      	str	r3, [r6, #0]
 8006348:	6822      	ldr	r2, [r4, #0]
 800634a:	2306      	movs	r3, #6
 800634c:	0015      	movs	r5, r2
 800634e:	401d      	ands	r5, r3
 8006350:	421a      	tst	r2, r3
 8006352:	d027      	beq.n	80063a4 <_printf_common+0x8c>
 8006354:	0023      	movs	r3, r4
 8006356:	3343      	adds	r3, #67	; 0x43
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	1e5a      	subs	r2, r3, #1
 800635c:	4193      	sbcs	r3, r2
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	0692      	lsls	r2, r2, #26
 8006362:	d430      	bmi.n	80063c6 <_printf_common+0xae>
 8006364:	0022      	movs	r2, r4
 8006366:	9901      	ldr	r1, [sp, #4]
 8006368:	9800      	ldr	r0, [sp, #0]
 800636a:	9d08      	ldr	r5, [sp, #32]
 800636c:	3243      	adds	r2, #67	; 0x43
 800636e:	47a8      	blx	r5
 8006370:	3001      	adds	r0, #1
 8006372:	d025      	beq.n	80063c0 <_printf_common+0xa8>
 8006374:	2206      	movs	r2, #6
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	2500      	movs	r5, #0
 800637a:	4013      	ands	r3, r2
 800637c:	2b04      	cmp	r3, #4
 800637e:	d105      	bne.n	800638c <_printf_common+0x74>
 8006380:	6833      	ldr	r3, [r6, #0]
 8006382:	68e5      	ldr	r5, [r4, #12]
 8006384:	1aed      	subs	r5, r5, r3
 8006386:	43eb      	mvns	r3, r5
 8006388:	17db      	asrs	r3, r3, #31
 800638a:	401d      	ands	r5, r3
 800638c:	68a3      	ldr	r3, [r4, #8]
 800638e:	6922      	ldr	r2, [r4, #16]
 8006390:	4293      	cmp	r3, r2
 8006392:	dd01      	ble.n	8006398 <_printf_common+0x80>
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	18ed      	adds	r5, r5, r3
 8006398:	2600      	movs	r6, #0
 800639a:	42b5      	cmp	r5, r6
 800639c:	d120      	bne.n	80063e0 <_printf_common+0xc8>
 800639e:	2000      	movs	r0, #0
 80063a0:	e010      	b.n	80063c4 <_printf_common+0xac>
 80063a2:	3501      	adds	r5, #1
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	6832      	ldr	r2, [r6, #0]
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	ddd2      	ble.n	8006354 <_printf_common+0x3c>
 80063ae:	0022      	movs	r2, r4
 80063b0:	2301      	movs	r3, #1
 80063b2:	9901      	ldr	r1, [sp, #4]
 80063b4:	9800      	ldr	r0, [sp, #0]
 80063b6:	9f08      	ldr	r7, [sp, #32]
 80063b8:	3219      	adds	r2, #25
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	d1f0      	bne.n	80063a2 <_printf_common+0x8a>
 80063c0:	2001      	movs	r0, #1
 80063c2:	4240      	negs	r0, r0
 80063c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063c6:	2030      	movs	r0, #48	; 0x30
 80063c8:	18e1      	adds	r1, r4, r3
 80063ca:	3143      	adds	r1, #67	; 0x43
 80063cc:	7008      	strb	r0, [r1, #0]
 80063ce:	0021      	movs	r1, r4
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	3145      	adds	r1, #69	; 0x45
 80063d4:	7809      	ldrb	r1, [r1, #0]
 80063d6:	18a2      	adds	r2, r4, r2
 80063d8:	3243      	adds	r2, #67	; 0x43
 80063da:	3302      	adds	r3, #2
 80063dc:	7011      	strb	r1, [r2, #0]
 80063de:	e7c1      	b.n	8006364 <_printf_common+0x4c>
 80063e0:	0022      	movs	r2, r4
 80063e2:	2301      	movs	r3, #1
 80063e4:	9901      	ldr	r1, [sp, #4]
 80063e6:	9800      	ldr	r0, [sp, #0]
 80063e8:	9f08      	ldr	r7, [sp, #32]
 80063ea:	321a      	adds	r2, #26
 80063ec:	47b8      	blx	r7
 80063ee:	3001      	adds	r0, #1
 80063f0:	d0e6      	beq.n	80063c0 <_printf_common+0xa8>
 80063f2:	3601      	adds	r6, #1
 80063f4:	e7d1      	b.n	800639a <_printf_common+0x82>
	...

080063f8 <_printf_i>:
 80063f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fa:	b08b      	sub	sp, #44	; 0x2c
 80063fc:	9206      	str	r2, [sp, #24]
 80063fe:	000a      	movs	r2, r1
 8006400:	3243      	adds	r2, #67	; 0x43
 8006402:	9307      	str	r3, [sp, #28]
 8006404:	9005      	str	r0, [sp, #20]
 8006406:	9204      	str	r2, [sp, #16]
 8006408:	7e0a      	ldrb	r2, [r1, #24]
 800640a:	000c      	movs	r4, r1
 800640c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800640e:	2a78      	cmp	r2, #120	; 0x78
 8006410:	d809      	bhi.n	8006426 <_printf_i+0x2e>
 8006412:	2a62      	cmp	r2, #98	; 0x62
 8006414:	d80b      	bhi.n	800642e <_printf_i+0x36>
 8006416:	2a00      	cmp	r2, #0
 8006418:	d100      	bne.n	800641c <_printf_i+0x24>
 800641a:	e0be      	b.n	800659a <_printf_i+0x1a2>
 800641c:	497c      	ldr	r1, [pc, #496]	; (8006610 <_printf_i+0x218>)
 800641e:	9103      	str	r1, [sp, #12]
 8006420:	2a58      	cmp	r2, #88	; 0x58
 8006422:	d100      	bne.n	8006426 <_printf_i+0x2e>
 8006424:	e093      	b.n	800654e <_printf_i+0x156>
 8006426:	0026      	movs	r6, r4
 8006428:	3642      	adds	r6, #66	; 0x42
 800642a:	7032      	strb	r2, [r6, #0]
 800642c:	e022      	b.n	8006474 <_printf_i+0x7c>
 800642e:	0010      	movs	r0, r2
 8006430:	3863      	subs	r0, #99	; 0x63
 8006432:	2815      	cmp	r0, #21
 8006434:	d8f7      	bhi.n	8006426 <_printf_i+0x2e>
 8006436:	f7f9 fe65 	bl	8000104 <__gnu_thumb1_case_shi>
 800643a:	0016      	.short	0x0016
 800643c:	fff6001f 	.word	0xfff6001f
 8006440:	fff6fff6 	.word	0xfff6fff6
 8006444:	001ffff6 	.word	0x001ffff6
 8006448:	fff6fff6 	.word	0xfff6fff6
 800644c:	fff6fff6 	.word	0xfff6fff6
 8006450:	003600a3 	.word	0x003600a3
 8006454:	fff60083 	.word	0xfff60083
 8006458:	00b4fff6 	.word	0x00b4fff6
 800645c:	0036fff6 	.word	0x0036fff6
 8006460:	fff6fff6 	.word	0xfff6fff6
 8006464:	0087      	.short	0x0087
 8006466:	0026      	movs	r6, r4
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	3642      	adds	r6, #66	; 0x42
 800646c:	1d11      	adds	r1, r2, #4
 800646e:	6019      	str	r1, [r3, #0]
 8006470:	6813      	ldr	r3, [r2, #0]
 8006472:	7033      	strb	r3, [r6, #0]
 8006474:	2301      	movs	r3, #1
 8006476:	e0a2      	b.n	80065be <_printf_i+0x1c6>
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	6809      	ldr	r1, [r1, #0]
 800647c:	1d02      	adds	r2, r0, #4
 800647e:	060d      	lsls	r5, r1, #24
 8006480:	d50b      	bpl.n	800649a <_printf_i+0xa2>
 8006482:	6805      	ldr	r5, [r0, #0]
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	2d00      	cmp	r5, #0
 8006488:	da03      	bge.n	8006492 <_printf_i+0x9a>
 800648a:	232d      	movs	r3, #45	; 0x2d
 800648c:	9a04      	ldr	r2, [sp, #16]
 800648e:	426d      	negs	r5, r5
 8006490:	7013      	strb	r3, [r2, #0]
 8006492:	4b5f      	ldr	r3, [pc, #380]	; (8006610 <_printf_i+0x218>)
 8006494:	270a      	movs	r7, #10
 8006496:	9303      	str	r3, [sp, #12]
 8006498:	e01b      	b.n	80064d2 <_printf_i+0xda>
 800649a:	6805      	ldr	r5, [r0, #0]
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	0649      	lsls	r1, r1, #25
 80064a0:	d5f1      	bpl.n	8006486 <_printf_i+0x8e>
 80064a2:	b22d      	sxth	r5, r5
 80064a4:	e7ef      	b.n	8006486 <_printf_i+0x8e>
 80064a6:	680d      	ldr	r5, [r1, #0]
 80064a8:	6819      	ldr	r1, [r3, #0]
 80064aa:	1d08      	adds	r0, r1, #4
 80064ac:	6018      	str	r0, [r3, #0]
 80064ae:	062e      	lsls	r6, r5, #24
 80064b0:	d501      	bpl.n	80064b6 <_printf_i+0xbe>
 80064b2:	680d      	ldr	r5, [r1, #0]
 80064b4:	e003      	b.n	80064be <_printf_i+0xc6>
 80064b6:	066d      	lsls	r5, r5, #25
 80064b8:	d5fb      	bpl.n	80064b2 <_printf_i+0xba>
 80064ba:	680d      	ldr	r5, [r1, #0]
 80064bc:	b2ad      	uxth	r5, r5
 80064be:	4b54      	ldr	r3, [pc, #336]	; (8006610 <_printf_i+0x218>)
 80064c0:	2708      	movs	r7, #8
 80064c2:	9303      	str	r3, [sp, #12]
 80064c4:	2a6f      	cmp	r2, #111	; 0x6f
 80064c6:	d000      	beq.n	80064ca <_printf_i+0xd2>
 80064c8:	3702      	adds	r7, #2
 80064ca:	0023      	movs	r3, r4
 80064cc:	2200      	movs	r2, #0
 80064ce:	3343      	adds	r3, #67	; 0x43
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	6863      	ldr	r3, [r4, #4]
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	db03      	blt.n	80064e2 <_printf_i+0xea>
 80064da:	2104      	movs	r1, #4
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	438a      	bics	r2, r1
 80064e0:	6022      	str	r2, [r4, #0]
 80064e2:	2d00      	cmp	r5, #0
 80064e4:	d102      	bne.n	80064ec <_printf_i+0xf4>
 80064e6:	9e04      	ldr	r6, [sp, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00c      	beq.n	8006506 <_printf_i+0x10e>
 80064ec:	9e04      	ldr	r6, [sp, #16]
 80064ee:	0028      	movs	r0, r5
 80064f0:	0039      	movs	r1, r7
 80064f2:	f7f9 fe97 	bl	8000224 <__aeabi_uidivmod>
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	3e01      	subs	r6, #1
 80064fa:	5c5b      	ldrb	r3, [r3, r1]
 80064fc:	7033      	strb	r3, [r6, #0]
 80064fe:	002b      	movs	r3, r5
 8006500:	0005      	movs	r5, r0
 8006502:	429f      	cmp	r7, r3
 8006504:	d9f3      	bls.n	80064ee <_printf_i+0xf6>
 8006506:	2f08      	cmp	r7, #8
 8006508:	d109      	bne.n	800651e <_printf_i+0x126>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	07db      	lsls	r3, r3, #31
 800650e:	d506      	bpl.n	800651e <_printf_i+0x126>
 8006510:	6862      	ldr	r2, [r4, #4]
 8006512:	6923      	ldr	r3, [r4, #16]
 8006514:	429a      	cmp	r2, r3
 8006516:	dc02      	bgt.n	800651e <_printf_i+0x126>
 8006518:	2330      	movs	r3, #48	; 0x30
 800651a:	3e01      	subs	r6, #1
 800651c:	7033      	strb	r3, [r6, #0]
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	1b9b      	subs	r3, r3, r6
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	9b07      	ldr	r3, [sp, #28]
 8006526:	0021      	movs	r1, r4
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	9805      	ldr	r0, [sp, #20]
 800652c:	9b06      	ldr	r3, [sp, #24]
 800652e:	aa09      	add	r2, sp, #36	; 0x24
 8006530:	f7ff fef2 	bl	8006318 <_printf_common>
 8006534:	3001      	adds	r0, #1
 8006536:	d147      	bne.n	80065c8 <_printf_i+0x1d0>
 8006538:	2001      	movs	r0, #1
 800653a:	4240      	negs	r0, r0
 800653c:	b00b      	add	sp, #44	; 0x2c
 800653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006540:	2220      	movs	r2, #32
 8006542:	6809      	ldr	r1, [r1, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	6022      	str	r2, [r4, #0]
 8006548:	2278      	movs	r2, #120	; 0x78
 800654a:	4932      	ldr	r1, [pc, #200]	; (8006614 <_printf_i+0x21c>)
 800654c:	9103      	str	r1, [sp, #12]
 800654e:	0021      	movs	r1, r4
 8006550:	3145      	adds	r1, #69	; 0x45
 8006552:	700a      	strb	r2, [r1, #0]
 8006554:	6819      	ldr	r1, [r3, #0]
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	c920      	ldmia	r1!, {r5}
 800655a:	0610      	lsls	r0, r2, #24
 800655c:	d402      	bmi.n	8006564 <_printf_i+0x16c>
 800655e:	0650      	lsls	r0, r2, #25
 8006560:	d500      	bpl.n	8006564 <_printf_i+0x16c>
 8006562:	b2ad      	uxth	r5, r5
 8006564:	6019      	str	r1, [r3, #0]
 8006566:	07d3      	lsls	r3, r2, #31
 8006568:	d502      	bpl.n	8006570 <_printf_i+0x178>
 800656a:	2320      	movs	r3, #32
 800656c:	4313      	orrs	r3, r2
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	2710      	movs	r7, #16
 8006572:	2d00      	cmp	r5, #0
 8006574:	d1a9      	bne.n	80064ca <_printf_i+0xd2>
 8006576:	2220      	movs	r2, #32
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	4393      	bics	r3, r2
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	e7a4      	b.n	80064ca <_printf_i+0xd2>
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	680d      	ldr	r5, [r1, #0]
 8006584:	1d10      	adds	r0, r2, #4
 8006586:	6949      	ldr	r1, [r1, #20]
 8006588:	6018      	str	r0, [r3, #0]
 800658a:	6813      	ldr	r3, [r2, #0]
 800658c:	062e      	lsls	r6, r5, #24
 800658e:	d501      	bpl.n	8006594 <_printf_i+0x19c>
 8006590:	6019      	str	r1, [r3, #0]
 8006592:	e002      	b.n	800659a <_printf_i+0x1a2>
 8006594:	066d      	lsls	r5, r5, #25
 8006596:	d5fb      	bpl.n	8006590 <_printf_i+0x198>
 8006598:	8019      	strh	r1, [r3, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	9e04      	ldr	r6, [sp, #16]
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	e7c0      	b.n	8006524 <_printf_i+0x12c>
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	1d11      	adds	r1, r2, #4
 80065a6:	6019      	str	r1, [r3, #0]
 80065a8:	6816      	ldr	r6, [r2, #0]
 80065aa:	2100      	movs	r1, #0
 80065ac:	0030      	movs	r0, r6
 80065ae:	6862      	ldr	r2, [r4, #4]
 80065b0:	f000 f9a0 	bl	80068f4 <memchr>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d001      	beq.n	80065bc <_printf_i+0x1c4>
 80065b8:	1b80      	subs	r0, r0, r6
 80065ba:	6060      	str	r0, [r4, #4]
 80065bc:	6863      	ldr	r3, [r4, #4]
 80065be:	6123      	str	r3, [r4, #16]
 80065c0:	2300      	movs	r3, #0
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	7013      	strb	r3, [r2, #0]
 80065c6:	e7ad      	b.n	8006524 <_printf_i+0x12c>
 80065c8:	0032      	movs	r2, r6
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	9906      	ldr	r1, [sp, #24]
 80065ce:	9805      	ldr	r0, [sp, #20]
 80065d0:	9d07      	ldr	r5, [sp, #28]
 80065d2:	47a8      	blx	r5
 80065d4:	3001      	adds	r0, #1
 80065d6:	d0af      	beq.n	8006538 <_printf_i+0x140>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	079b      	lsls	r3, r3, #30
 80065dc:	d415      	bmi.n	800660a <_printf_i+0x212>
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	68e0      	ldr	r0, [r4, #12]
 80065e2:	4298      	cmp	r0, r3
 80065e4:	daaa      	bge.n	800653c <_printf_i+0x144>
 80065e6:	0018      	movs	r0, r3
 80065e8:	e7a8      	b.n	800653c <_printf_i+0x144>
 80065ea:	0022      	movs	r2, r4
 80065ec:	2301      	movs	r3, #1
 80065ee:	9906      	ldr	r1, [sp, #24]
 80065f0:	9805      	ldr	r0, [sp, #20]
 80065f2:	9e07      	ldr	r6, [sp, #28]
 80065f4:	3219      	adds	r2, #25
 80065f6:	47b0      	blx	r6
 80065f8:	3001      	adds	r0, #1
 80065fa:	d09d      	beq.n	8006538 <_printf_i+0x140>
 80065fc:	3501      	adds	r5, #1
 80065fe:	68e3      	ldr	r3, [r4, #12]
 8006600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	42ab      	cmp	r3, r5
 8006606:	dcf0      	bgt.n	80065ea <_printf_i+0x1f2>
 8006608:	e7e9      	b.n	80065de <_printf_i+0x1e6>
 800660a:	2500      	movs	r5, #0
 800660c:	e7f7      	b.n	80065fe <_printf_i+0x206>
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	08006b75 	.word	0x08006b75
 8006614:	08006b86 	.word	0x08006b86

08006618 <__sflush_r>:
 8006618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800661a:	898b      	ldrh	r3, [r1, #12]
 800661c:	0005      	movs	r5, r0
 800661e:	000c      	movs	r4, r1
 8006620:	071a      	lsls	r2, r3, #28
 8006622:	d45c      	bmi.n	80066de <__sflush_r+0xc6>
 8006624:	684a      	ldr	r2, [r1, #4]
 8006626:	2a00      	cmp	r2, #0
 8006628:	dc04      	bgt.n	8006634 <__sflush_r+0x1c>
 800662a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800662c:	2a00      	cmp	r2, #0
 800662e:	dc01      	bgt.n	8006634 <__sflush_r+0x1c>
 8006630:	2000      	movs	r0, #0
 8006632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006634:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006636:	2f00      	cmp	r7, #0
 8006638:	d0fa      	beq.n	8006630 <__sflush_r+0x18>
 800663a:	2200      	movs	r2, #0
 800663c:	2080      	movs	r0, #128	; 0x80
 800663e:	682e      	ldr	r6, [r5, #0]
 8006640:	602a      	str	r2, [r5, #0]
 8006642:	001a      	movs	r2, r3
 8006644:	0140      	lsls	r0, r0, #5
 8006646:	6a21      	ldr	r1, [r4, #32]
 8006648:	4002      	ands	r2, r0
 800664a:	4203      	tst	r3, r0
 800664c:	d034      	beq.n	80066b8 <__sflush_r+0xa0>
 800664e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	075b      	lsls	r3, r3, #29
 8006654:	d506      	bpl.n	8006664 <__sflush_r+0x4c>
 8006656:	6863      	ldr	r3, [r4, #4]
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <__sflush_r+0x4c>
 8006660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006662:	1ac0      	subs	r0, r0, r3
 8006664:	0002      	movs	r2, r0
 8006666:	2300      	movs	r3, #0
 8006668:	0028      	movs	r0, r5
 800666a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800666c:	6a21      	ldr	r1, [r4, #32]
 800666e:	47b8      	blx	r7
 8006670:	89a2      	ldrh	r2, [r4, #12]
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d106      	bne.n	8006684 <__sflush_r+0x6c>
 8006676:	6829      	ldr	r1, [r5, #0]
 8006678:	291d      	cmp	r1, #29
 800667a:	d82c      	bhi.n	80066d6 <__sflush_r+0xbe>
 800667c:	4b2a      	ldr	r3, [pc, #168]	; (8006728 <__sflush_r+0x110>)
 800667e:	410b      	asrs	r3, r1
 8006680:	07db      	lsls	r3, r3, #31
 8006682:	d428      	bmi.n	80066d6 <__sflush_r+0xbe>
 8006684:	2300      	movs	r3, #0
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	6923      	ldr	r3, [r4, #16]
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	04d2      	lsls	r2, r2, #19
 800668e:	d505      	bpl.n	800669c <__sflush_r+0x84>
 8006690:	1c43      	adds	r3, r0, #1
 8006692:	d102      	bne.n	800669a <__sflush_r+0x82>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d100      	bne.n	800669c <__sflush_r+0x84>
 800669a:	6560      	str	r0, [r4, #84]	; 0x54
 800669c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800669e:	602e      	str	r6, [r5, #0]
 80066a0:	2900      	cmp	r1, #0
 80066a2:	d0c5      	beq.n	8006630 <__sflush_r+0x18>
 80066a4:	0023      	movs	r3, r4
 80066a6:	3344      	adds	r3, #68	; 0x44
 80066a8:	4299      	cmp	r1, r3
 80066aa:	d002      	beq.n	80066b2 <__sflush_r+0x9a>
 80066ac:	0028      	movs	r0, r5
 80066ae:	f7ff fbf1 	bl	8005e94 <_free_r>
 80066b2:	2000      	movs	r0, #0
 80066b4:	6360      	str	r0, [r4, #52]	; 0x34
 80066b6:	e7bc      	b.n	8006632 <__sflush_r+0x1a>
 80066b8:	2301      	movs	r3, #1
 80066ba:	0028      	movs	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d1c6      	bne.n	8006650 <__sflush_r+0x38>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0c3      	beq.n	8006650 <__sflush_r+0x38>
 80066c8:	2b1d      	cmp	r3, #29
 80066ca:	d001      	beq.n	80066d0 <__sflush_r+0xb8>
 80066cc:	2b16      	cmp	r3, #22
 80066ce:	d101      	bne.n	80066d4 <__sflush_r+0xbc>
 80066d0:	602e      	str	r6, [r5, #0]
 80066d2:	e7ad      	b.n	8006630 <__sflush_r+0x18>
 80066d4:	89a2      	ldrh	r2, [r4, #12]
 80066d6:	2340      	movs	r3, #64	; 0x40
 80066d8:	4313      	orrs	r3, r2
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	e7a9      	b.n	8006632 <__sflush_r+0x1a>
 80066de:	690e      	ldr	r6, [r1, #16]
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	d0a5      	beq.n	8006630 <__sflush_r+0x18>
 80066e4:	680f      	ldr	r7, [r1, #0]
 80066e6:	600e      	str	r6, [r1, #0]
 80066e8:	1bba      	subs	r2, r7, r6
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	079b      	lsls	r3, r3, #30
 80066f0:	d100      	bne.n	80066f4 <__sflush_r+0xdc>
 80066f2:	694a      	ldr	r2, [r1, #20]
 80066f4:	60a2      	str	r2, [r4, #8]
 80066f6:	9b01      	ldr	r3, [sp, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dd99      	ble.n	8006630 <__sflush_r+0x18>
 80066fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066fe:	0032      	movs	r2, r6
 8006700:	001f      	movs	r7, r3
 8006702:	0028      	movs	r0, r5
 8006704:	9b01      	ldr	r3, [sp, #4]
 8006706:	6a21      	ldr	r1, [r4, #32]
 8006708:	47b8      	blx	r7
 800670a:	2800      	cmp	r0, #0
 800670c:	dc06      	bgt.n	800671c <__sflush_r+0x104>
 800670e:	2340      	movs	r3, #64	; 0x40
 8006710:	2001      	movs	r0, #1
 8006712:	89a2      	ldrh	r2, [r4, #12]
 8006714:	4240      	negs	r0, r0
 8006716:	4313      	orrs	r3, r2
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	e78a      	b.n	8006632 <__sflush_r+0x1a>
 800671c:	9b01      	ldr	r3, [sp, #4]
 800671e:	1836      	adds	r6, r6, r0
 8006720:	1a1b      	subs	r3, r3, r0
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	e7e7      	b.n	80066f6 <__sflush_r+0xde>
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	dfbffffe 	.word	0xdfbffffe

0800672c <_fflush_r>:
 800672c:	690b      	ldr	r3, [r1, #16]
 800672e:	b570      	push	{r4, r5, r6, lr}
 8006730:	0005      	movs	r5, r0
 8006732:	000c      	movs	r4, r1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <_fflush_r+0x12>
 8006738:	2500      	movs	r5, #0
 800673a:	0028      	movs	r0, r5
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	2800      	cmp	r0, #0
 8006740:	d004      	beq.n	800674c <_fflush_r+0x20>
 8006742:	6a03      	ldr	r3, [r0, #32]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <_fflush_r+0x20>
 8006748:	f7ff fa90 	bl	8005c6c <__sinit>
 800674c:	220c      	movs	r2, #12
 800674e:	5ea3      	ldrsh	r3, [r4, r2]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d0f1      	beq.n	8006738 <_fflush_r+0xc>
 8006754:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006756:	07d2      	lsls	r2, r2, #31
 8006758:	d404      	bmi.n	8006764 <_fflush_r+0x38>
 800675a:	059b      	lsls	r3, r3, #22
 800675c:	d402      	bmi.n	8006764 <_fflush_r+0x38>
 800675e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006760:	f7ff fb95 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006764:	0028      	movs	r0, r5
 8006766:	0021      	movs	r1, r4
 8006768:	f7ff ff56 	bl	8006618 <__sflush_r>
 800676c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676e:	0005      	movs	r5, r0
 8006770:	07db      	lsls	r3, r3, #31
 8006772:	d4e2      	bmi.n	800673a <_fflush_r+0xe>
 8006774:	89a3      	ldrh	r3, [r4, #12]
 8006776:	059b      	lsls	r3, r3, #22
 8006778:	d4df      	bmi.n	800673a <_fflush_r+0xe>
 800677a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677c:	f7ff fb88 	bl	8005e90 <__retarget_lock_release_recursive>
 8006780:	e7db      	b.n	800673a <_fflush_r+0xe>

08006782 <__swbuf_r>:
 8006782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006784:	0006      	movs	r6, r0
 8006786:	000d      	movs	r5, r1
 8006788:	0014      	movs	r4, r2
 800678a:	2800      	cmp	r0, #0
 800678c:	d004      	beq.n	8006798 <__swbuf_r+0x16>
 800678e:	6a03      	ldr	r3, [r0, #32]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <__swbuf_r+0x16>
 8006794:	f7ff fa6a 	bl	8005c6c <__sinit>
 8006798:	69a3      	ldr	r3, [r4, #24]
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	071b      	lsls	r3, r3, #28
 80067a0:	d528      	bpl.n	80067f4 <__swbuf_r+0x72>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d025      	beq.n	80067f4 <__swbuf_r+0x72>
 80067a8:	6923      	ldr	r3, [r4, #16]
 80067aa:	6820      	ldr	r0, [r4, #0]
 80067ac:	b2ef      	uxtb	r7, r5
 80067ae:	1ac0      	subs	r0, r0, r3
 80067b0:	6963      	ldr	r3, [r4, #20]
 80067b2:	b2ed      	uxtb	r5, r5
 80067b4:	4283      	cmp	r3, r0
 80067b6:	dc05      	bgt.n	80067c4 <__swbuf_r+0x42>
 80067b8:	0021      	movs	r1, r4
 80067ba:	0030      	movs	r0, r6
 80067bc:	f7ff ffb6 	bl	800672c <_fflush_r>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d11d      	bne.n	8006800 <__swbuf_r+0x7e>
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	3001      	adds	r0, #1
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60a3      	str	r3, [r4, #8]
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	701f      	strb	r7, [r3, #0]
 80067d4:	6963      	ldr	r3, [r4, #20]
 80067d6:	4283      	cmp	r3, r0
 80067d8:	d004      	beq.n	80067e4 <__swbuf_r+0x62>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	07db      	lsls	r3, r3, #31
 80067de:	d507      	bpl.n	80067f0 <__swbuf_r+0x6e>
 80067e0:	2d0a      	cmp	r5, #10
 80067e2:	d105      	bne.n	80067f0 <__swbuf_r+0x6e>
 80067e4:	0021      	movs	r1, r4
 80067e6:	0030      	movs	r0, r6
 80067e8:	f7ff ffa0 	bl	800672c <_fflush_r>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d107      	bne.n	8006800 <__swbuf_r+0x7e>
 80067f0:	0028      	movs	r0, r5
 80067f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067f4:	0021      	movs	r1, r4
 80067f6:	0030      	movs	r0, r6
 80067f8:	f000 f806 	bl	8006808 <__swsetup_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d0d3      	beq.n	80067a8 <__swbuf_r+0x26>
 8006800:	2501      	movs	r5, #1
 8006802:	426d      	negs	r5, r5
 8006804:	e7f4      	b.n	80067f0 <__swbuf_r+0x6e>
	...

08006808 <__swsetup_r>:
 8006808:	4b30      	ldr	r3, [pc, #192]	; (80068cc <__swsetup_r+0xc4>)
 800680a:	b570      	push	{r4, r5, r6, lr}
 800680c:	0005      	movs	r5, r0
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	000c      	movs	r4, r1
 8006812:	2800      	cmp	r0, #0
 8006814:	d004      	beq.n	8006820 <__swsetup_r+0x18>
 8006816:	6a03      	ldr	r3, [r0, #32]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <__swsetup_r+0x18>
 800681c:	f7ff fa26 	bl	8005c6c <__sinit>
 8006820:	230c      	movs	r3, #12
 8006822:	5ee2      	ldrsh	r2, [r4, r3]
 8006824:	b293      	uxth	r3, r2
 8006826:	0711      	lsls	r1, r2, #28
 8006828:	d423      	bmi.n	8006872 <__swsetup_r+0x6a>
 800682a:	06d9      	lsls	r1, r3, #27
 800682c:	d407      	bmi.n	800683e <__swsetup_r+0x36>
 800682e:	2309      	movs	r3, #9
 8006830:	2001      	movs	r0, #1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	3337      	adds	r3, #55	; 0x37
 8006836:	4313      	orrs	r3, r2
 8006838:	81a3      	strh	r3, [r4, #12]
 800683a:	4240      	negs	r0, r0
 800683c:	bd70      	pop	{r4, r5, r6, pc}
 800683e:	075b      	lsls	r3, r3, #29
 8006840:	d513      	bpl.n	800686a <__swsetup_r+0x62>
 8006842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006844:	2900      	cmp	r1, #0
 8006846:	d008      	beq.n	800685a <__swsetup_r+0x52>
 8006848:	0023      	movs	r3, r4
 800684a:	3344      	adds	r3, #68	; 0x44
 800684c:	4299      	cmp	r1, r3
 800684e:	d002      	beq.n	8006856 <__swsetup_r+0x4e>
 8006850:	0028      	movs	r0, r5
 8006852:	f7ff fb1f 	bl	8005e94 <_free_r>
 8006856:	2300      	movs	r3, #0
 8006858:	6363      	str	r3, [r4, #52]	; 0x34
 800685a:	2224      	movs	r2, #36	; 0x24
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	4393      	bics	r3, r2
 8006860:	81a3      	strh	r3, [r4, #12]
 8006862:	2300      	movs	r3, #0
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	2308      	movs	r3, #8
 800686c:	89a2      	ldrh	r2, [r4, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	81a3      	strh	r3, [r4, #12]
 8006872:	6923      	ldr	r3, [r4, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <__swsetup_r+0x88>
 8006878:	21a0      	movs	r1, #160	; 0xa0
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	0089      	lsls	r1, r1, #2
 8006880:	0092      	lsls	r2, r2, #2
 8006882:	400b      	ands	r3, r1
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <__swsetup_r+0x88>
 8006888:	0021      	movs	r1, r4
 800688a:	0028      	movs	r0, r5
 800688c:	f000 f866 	bl	800695c <__smakebuf_r>
 8006890:	220c      	movs	r2, #12
 8006892:	5ea3      	ldrsh	r3, [r4, r2]
 8006894:	2001      	movs	r0, #1
 8006896:	001a      	movs	r2, r3
 8006898:	b299      	uxth	r1, r3
 800689a:	4002      	ands	r2, r0
 800689c:	4203      	tst	r3, r0
 800689e:	d00f      	beq.n	80068c0 <__swsetup_r+0xb8>
 80068a0:	2200      	movs	r2, #0
 80068a2:	60a2      	str	r2, [r4, #8]
 80068a4:	6962      	ldr	r2, [r4, #20]
 80068a6:	4252      	negs	r2, r2
 80068a8:	61a2      	str	r2, [r4, #24]
 80068aa:	2000      	movs	r0, #0
 80068ac:	6922      	ldr	r2, [r4, #16]
 80068ae:	4282      	cmp	r2, r0
 80068b0:	d1c4      	bne.n	800683c <__swsetup_r+0x34>
 80068b2:	0609      	lsls	r1, r1, #24
 80068b4:	d5c2      	bpl.n	800683c <__swsetup_r+0x34>
 80068b6:	2240      	movs	r2, #64	; 0x40
 80068b8:	4313      	orrs	r3, r2
 80068ba:	81a3      	strh	r3, [r4, #12]
 80068bc:	3801      	subs	r0, #1
 80068be:	e7bd      	b.n	800683c <__swsetup_r+0x34>
 80068c0:	0788      	lsls	r0, r1, #30
 80068c2:	d400      	bmi.n	80068c6 <__swsetup_r+0xbe>
 80068c4:	6962      	ldr	r2, [r4, #20]
 80068c6:	60a2      	str	r2, [r4, #8]
 80068c8:	e7ef      	b.n	80068aa <__swsetup_r+0xa2>
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	20000064 	.word	0x20000064

080068d0 <_sbrk_r>:
 80068d0:	2300      	movs	r3, #0
 80068d2:	b570      	push	{r4, r5, r6, lr}
 80068d4:	4d06      	ldr	r5, [pc, #24]	; (80068f0 <_sbrk_r+0x20>)
 80068d6:	0004      	movs	r4, r0
 80068d8:	0008      	movs	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fb fbba 	bl	8002054 <_sbrk>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d103      	bne.n	80068ec <_sbrk_r+0x1c>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d000      	beq.n	80068ec <_sbrk_r+0x1c>
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	46c0      	nop			; (mov r8, r8)
 80068f0:	20000310 	.word	0x20000310

080068f4 <memchr>:
 80068f4:	b2c9      	uxtb	r1, r1
 80068f6:	1882      	adds	r2, r0, r2
 80068f8:	4290      	cmp	r0, r2
 80068fa:	d101      	bne.n	8006900 <memchr+0xc>
 80068fc:	2000      	movs	r0, #0
 80068fe:	4770      	bx	lr
 8006900:	7803      	ldrb	r3, [r0, #0]
 8006902:	428b      	cmp	r3, r1
 8006904:	d0fb      	beq.n	80068fe <memchr+0xa>
 8006906:	3001      	adds	r0, #1
 8006908:	e7f6      	b.n	80068f8 <memchr+0x4>
	...

0800690c <__swhatbuf_r>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	000e      	movs	r6, r1
 8006910:	001d      	movs	r5, r3
 8006912:	230e      	movs	r3, #14
 8006914:	5ec9      	ldrsh	r1, [r1, r3]
 8006916:	0014      	movs	r4, r2
 8006918:	b096      	sub	sp, #88	; 0x58
 800691a:	2900      	cmp	r1, #0
 800691c:	da0c      	bge.n	8006938 <__swhatbuf_r+0x2c>
 800691e:	89b2      	ldrh	r2, [r6, #12]
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	0011      	movs	r1, r2
 8006924:	4019      	ands	r1, r3
 8006926:	421a      	tst	r2, r3
 8006928:	d013      	beq.n	8006952 <__swhatbuf_r+0x46>
 800692a:	2100      	movs	r1, #0
 800692c:	3b40      	subs	r3, #64	; 0x40
 800692e:	2000      	movs	r0, #0
 8006930:	6029      	str	r1, [r5, #0]
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	b016      	add	sp, #88	; 0x58
 8006936:	bd70      	pop	{r4, r5, r6, pc}
 8006938:	466a      	mov	r2, sp
 800693a:	f000 f84d 	bl	80069d8 <_fstat_r>
 800693e:	2800      	cmp	r0, #0
 8006940:	dbed      	blt.n	800691e <__swhatbuf_r+0x12>
 8006942:	23f0      	movs	r3, #240	; 0xf0
 8006944:	9901      	ldr	r1, [sp, #4]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	4019      	ands	r1, r3
 800694a:	4b03      	ldr	r3, [pc, #12]	; (8006958 <__swhatbuf_r+0x4c>)
 800694c:	18c9      	adds	r1, r1, r3
 800694e:	424b      	negs	r3, r1
 8006950:	4159      	adcs	r1, r3
 8006952:	2380      	movs	r3, #128	; 0x80
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	e7ea      	b.n	800692e <__swhatbuf_r+0x22>
 8006958:	ffffe000 	.word	0xffffe000

0800695c <__smakebuf_r>:
 800695c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695e:	2602      	movs	r6, #2
 8006960:	898b      	ldrh	r3, [r1, #12]
 8006962:	0005      	movs	r5, r0
 8006964:	000c      	movs	r4, r1
 8006966:	4233      	tst	r3, r6
 8006968:	d006      	beq.n	8006978 <__smakebuf_r+0x1c>
 800696a:	0023      	movs	r3, r4
 800696c:	3347      	adds	r3, #71	; 0x47
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	6123      	str	r3, [r4, #16]
 8006972:	2301      	movs	r3, #1
 8006974:	6163      	str	r3, [r4, #20]
 8006976:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006978:	466a      	mov	r2, sp
 800697a:	ab01      	add	r3, sp, #4
 800697c:	f7ff ffc6 	bl	800690c <__swhatbuf_r>
 8006980:	9900      	ldr	r1, [sp, #0]
 8006982:	0007      	movs	r7, r0
 8006984:	0028      	movs	r0, r5
 8006986:	f7ff faf1 	bl	8005f6c <_malloc_r>
 800698a:	2800      	cmp	r0, #0
 800698c:	d108      	bne.n	80069a0 <__smakebuf_r+0x44>
 800698e:	220c      	movs	r2, #12
 8006990:	5ea3      	ldrsh	r3, [r4, r2]
 8006992:	059a      	lsls	r2, r3, #22
 8006994:	d4ef      	bmi.n	8006976 <__smakebuf_r+0x1a>
 8006996:	2203      	movs	r2, #3
 8006998:	4393      	bics	r3, r2
 800699a:	431e      	orrs	r6, r3
 800699c:	81a6      	strh	r6, [r4, #12]
 800699e:	e7e4      	b.n	800696a <__smakebuf_r+0xe>
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	89a2      	ldrh	r2, [r4, #12]
 80069a4:	6020      	str	r0, [r4, #0]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	9b00      	ldr	r3, [sp, #0]
 80069ac:	6120      	str	r0, [r4, #16]
 80069ae:	6163      	str	r3, [r4, #20]
 80069b0:	9b01      	ldr	r3, [sp, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00c      	beq.n	80069d0 <__smakebuf_r+0x74>
 80069b6:	0028      	movs	r0, r5
 80069b8:	230e      	movs	r3, #14
 80069ba:	5ee1      	ldrsh	r1, [r4, r3]
 80069bc:	f000 f81e 	bl	80069fc <_isatty_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d005      	beq.n	80069d0 <__smakebuf_r+0x74>
 80069c4:	2303      	movs	r3, #3
 80069c6:	89a2      	ldrh	r2, [r4, #12]
 80069c8:	439a      	bics	r2, r3
 80069ca:	3b02      	subs	r3, #2
 80069cc:	4313      	orrs	r3, r2
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	433b      	orrs	r3, r7
 80069d4:	81a3      	strh	r3, [r4, #12]
 80069d6:	e7ce      	b.n	8006976 <__smakebuf_r+0x1a>

080069d8 <_fstat_r>:
 80069d8:	2300      	movs	r3, #0
 80069da:	b570      	push	{r4, r5, r6, lr}
 80069dc:	4d06      	ldr	r5, [pc, #24]	; (80069f8 <_fstat_r+0x20>)
 80069de:	0004      	movs	r4, r0
 80069e0:	0008      	movs	r0, r1
 80069e2:	0011      	movs	r1, r2
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f7fb fb13 	bl	8002010 <_fstat>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d103      	bne.n	80069f6 <_fstat_r+0x1e>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d000      	beq.n	80069f6 <_fstat_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	20000310 	.word	0x20000310

080069fc <_isatty_r>:
 80069fc:	2300      	movs	r3, #0
 80069fe:	b570      	push	{r4, r5, r6, lr}
 8006a00:	4d06      	ldr	r5, [pc, #24]	; (8006a1c <_isatty_r+0x20>)
 8006a02:	0004      	movs	r4, r0
 8006a04:	0008      	movs	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fb fb10 	bl	800202c <_isatty>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d103      	bne.n	8006a18 <_isatty_r+0x1c>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d000      	beq.n	8006a18 <_isatty_r+0x1c>
 8006a16:	6023      	str	r3, [r4, #0]
 8006a18:	bd70      	pop	{r4, r5, r6, pc}
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	20000310 	.word	0x20000310

08006a20 <_init>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr

08006a2c <_fini>:
 8006a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a32:	bc08      	pop	{r3}
 8006a34:	469e      	mov	lr, r3
 8006a36:	4770      	bx	lr
