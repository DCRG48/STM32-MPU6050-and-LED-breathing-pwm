
Proto_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080023a4  080023a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002438  08002438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002438  08002438  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002438  08002438  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  0800244c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  0800244c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ded  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000174d  00000000  00000000  00028e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0002a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000820  00000000  00000000  0002b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f99  00000000  00000000  0002b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b46a  00000000  00000000  000407f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008971f  00000000  00000000  0004bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002598  00000000  00000000  000d537c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d7914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800238c 	.word	0x0800238c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800238c 	.word	0x0800238c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fa95 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f831 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f8f5 	bl	8000418 <MX_GPIO_Init>
  MX_TIM2_Init();
 800022e:	f000 f88b 	bl	8000348 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 8000232:	1dbb      	adds	r3, r7, #6
 8000234:	2200      	movs	r2, #0
 8000236:	801a      	strh	r2, [r3, #0]
 8000238:	e00c      	b.n	8000254 <main+0x38>
	  {
    /* USER CODE END WHILE */
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x6c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	1dba      	adds	r2, r7, #6
 8000240:	8812      	ldrh	r2, [r2, #0]
 8000242:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 8000244:	200a      	movs	r0, #10
 8000246:	f000 fb09 	bl	800085c <HAL_Delay>
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 800024a:	1dbb      	adds	r3, r7, #6
 800024c:	881a      	ldrh	r2, [r3, #0]
 800024e:	1dbb      	adds	r3, r7, #6
 8000250:	3201      	adds	r2, #1
 8000252:	801a      	strh	r2, [r3, #0]
 8000254:	1dbb      	adds	r3, r7, #6
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2bb3      	cmp	r3, #179	; 0xb3
 800025a:	d9ee      	bls.n	800023a <main+0x1e>
	  }

	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	22b4      	movs	r2, #180	; 0xb4
 8000260:	801a      	strh	r2, [r3, #0]
 8000262:	e00c      	b.n	800027e <main+0x62>
	  {
    /* USER CODE END WHILE */
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty_cycle);
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <main+0x6c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	1d3a      	adds	r2, r7, #4
 800026a:	8812      	ldrh	r2, [r2, #0]
 800026c:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(10);
 800026e:	200a      	movs	r0, #10
 8000270:	f000 faf4 	bl	800085c <HAL_Delay>
	  for(uint16_t duty_cycle = 180; duty_cycle>0; duty_cycle --)
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	881a      	ldrh	r2, [r3, #0]
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	3a01      	subs	r2, #1
 800027c:	801a      	strh	r2, [r3, #0]
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1ee      	bne.n	8000264 <main+0x48>
	  for(uint16_t duty_cycle = 0; duty_cycle<180; duty_cycle ++)
 8000286:	e7d4      	b.n	8000232 <main+0x16>
 8000288:	20000028 	.word	0x20000028

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b590      	push	{r4, r7, lr}
 800028e:	b093      	sub	sp, #76	; 0x4c
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	2410      	movs	r4, #16
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	2338      	movs	r3, #56	; 0x38
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 f849 	bl	8002334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 f842 	bl	8002334 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	0018      	movs	r0, r3
 80002b6:	f000 fd2b 	bl	8000d10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0052      	lsls	r2, r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2240      	movs	r2, #64	; 0x40
 80002d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2202      	movs	r2, #2
 80002e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2208      	movs	r2, #8
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	0292      	lsls	r2, r2, #10
 80002f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	0492      	lsls	r2, r2, #18
 80002fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2280      	movs	r2, #128	; 0x80
 8000302:	0592      	lsls	r2, r2, #22
 8000304:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	187b      	adds	r3, r7, r1
 8000308:	0018      	movs	r0, r3
 800030a:	f000 fd41 	bl	8000d90 <HAL_RCC_OscConfig>
 800030e:	1e03      	subs	r3, r0, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000312:	f000 f955 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000316:	003b      	movs	r3, r7
 8000318:	2207      	movs	r2, #7
 800031a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	003b      	movs	r3, r7
 800031e:	2202      	movs	r2, #2
 8000320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2102      	movs	r1, #2
 8000332:	0018      	movs	r0, r3
 8000334:	f001 f846 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800033c:	f000 f940 	bl	80005c0 <Error_Handler>
  }
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b013      	add	sp, #76	; 0x4c
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b08a      	sub	sp, #40	; 0x28
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800034e:	231c      	movs	r3, #28
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	230c      	movs	r3, #12
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f001 ffeb 	bl	8002334 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800035e:	003b      	movs	r3, r7
 8000360:	0018      	movs	r0, r3
 8000362:	231c      	movs	r3, #28
 8000364:	001a      	movs	r2, r3
 8000366:	2100      	movs	r1, #0
 8000368:	f001 ffe4 	bl	8002334 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_TIM2_Init+0xcc>)
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	05d2      	lsls	r2, r2, #23
 8000372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_TIM2_Init+0xcc>)
 8000376:	2200      	movs	r2, #0
 8000378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_TIM2_Init+0xcc>)
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000380:	4b24      	ldr	r3, [pc, #144]	; (8000414 <MX_TIM2_Init+0xcc>)
 8000382:	22ff      	movs	r2, #255	; 0xff
 8000384:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_TIM2_Init+0xcc>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	4b21      	ldr	r3, [pc, #132]	; (8000414 <MX_TIM2_Init+0xcc>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_TIM2_Init+0xcc>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f9eb 	bl	8001770 <HAL_TIM_PWM_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800039e:	f000 f90f 	bl	80005c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003a2:	211c      	movs	r1, #28
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b0:	187a      	adds	r2, r7, r1
 80003b2:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_TIM2_Init+0xcc>)
 80003b4:	0011      	movs	r1, r2
 80003b6:	0018      	movs	r0, r3
 80003b8:	f001 ff54 	bl	8002264 <HAL_TIMEx_MasterConfigSynchronization>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80003c0:	f000 f8fe 	bl	80005c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2260      	movs	r2, #96	; 0x60
 80003c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 80003ca:	003b      	movs	r3, r7
 80003cc:	220f      	movs	r2, #15
 80003ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003dc:	0039      	movs	r1, r7
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <MX_TIM2_Init+0xcc>)
 80003e0:	2208      	movs	r2, #8
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fafa 	bl	80019dc <HAL_TIM_PWM_ConfigChannel>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80003ec:	f000 f8e8 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  HAL_TIM_Base_Start(&htim2);
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_TIM2_Init+0xcc>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 f970 	bl	80016d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_TIM2_Init+0xcc>)
 80003fa:	2108      	movs	r1, #8
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 fa0f 	bl	8001820 <HAL_TIM_PWM_Start>

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000402:	4b04      	ldr	r3, [pc, #16]	; (8000414 <MX_TIM2_Init+0xcc>)
 8000404:	0018      	movs	r0, r3
 8000406:	f000 f921 	bl	800064c <HAL_TIM_MspPostInit>

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b00a      	add	sp, #40	; 0x28
 8000410:	bd80      	pop	{r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	20000028 	.word	0x20000028

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b089      	sub	sp, #36	; 0x24
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	240c      	movs	r4, #12
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	2314      	movs	r3, #20
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f001 ff83 	bl	8002334 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042e:	4b62      	ldr	r3, [pc, #392]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 8000430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000432:	4b61      	ldr	r3, [pc, #388]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 8000434:	2104      	movs	r1, #4
 8000436:	430a      	orrs	r2, r1
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
 800043a:	4b5f      	ldr	r3, [pc, #380]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 800043c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043e:	2204      	movs	r2, #4
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b5c      	ldr	r3, [pc, #368]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 8000448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800044a:	4b5b      	ldr	r3, [pc, #364]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 800044c:	2101      	movs	r1, #1
 800044e:	430a      	orrs	r2, r1
 8000450:	635a      	str	r2, [r3, #52]	; 0x34
 8000452:	4b59      	ldr	r3, [pc, #356]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 8000454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000456:	2201      	movs	r2, #1
 8000458:	4013      	ands	r3, r2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b56      	ldr	r3, [pc, #344]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000462:	4b55      	ldr	r3, [pc, #340]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 8000464:	2102      	movs	r1, #2
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
 800046a:	4b53      	ldr	r3, [pc, #332]	; (80005b8 <MX_GPIO_Init+0x1a0>)
 800046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046e:	2202      	movs	r2, #2
 8000470:	4013      	ands	r3, r2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000476:	23a0      	movs	r3, #160	; 0xa0
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2200      	movs	r2, #0
 800047c:	213a      	movs	r1, #58	; 0x3a
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fc28 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8000484:	4b4d      	ldr	r3, [pc, #308]	; (80005bc <MX_GPIO_Init+0x1a4>)
 8000486:	2200      	movs	r2, #0
 8000488:	2102      	movs	r1, #2
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fc22 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED3_Pin LED4_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED3_Pin|LED4_Pin|LED5_Pin;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	223a      	movs	r2, #58	; 0x3a
 8000494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2201      	movs	r2, #1
 800049a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	193a      	adds	r2, r7, r4
 80004aa:	23a0      	movs	r3, #160	; 0xa0
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 faab 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	22c0      	movs	r2, #192	; 0xc0
 80004ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2202      	movs	r2, #2
 80004c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	193a      	adds	r2, r7, r4
 80004d6:	23a0      	movs	r3, #160	; 0xa0
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f000 fa95 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	2209      	movs	r2, #9
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	2202      	movs	r2, #2
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	193b      	adds	r3, r7, r4
 8000502:	4a2e      	ldr	r2, [pc, #184]	; (80005bc <MX_GPIO_Init+0x1a4>)
 8000504:	0019      	movs	r1, r3
 8000506:	0010      	movs	r0, r2
 8000508:	f000 fa80 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED6_Pin */
  GPIO_InitStruct.Pin = LED6_Pin;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2202      	movs	r2, #2
 8000510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2201      	movs	r2, #1
 8000516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8000524:	193b      	adds	r3, r7, r4
 8000526:	4a25      	ldr	r2, [pc, #148]	; (80005bc <MX_GPIO_Init+0x1a4>)
 8000528:	0019      	movs	r1, r3
 800052a:	0010      	movs	r0, r2
 800052c:	f000 fa6e 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000530:	0021      	movs	r1, r4
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	0152      	lsls	r2, r2, #5
 8000538:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800053a:	000c      	movs	r4, r1
 800053c:	193b      	adds	r3, r7, r4
 800053e:	2212      	movs	r2, #18
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	193b      	adds	r3, r7, r4
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2206      	movs	r2, #6
 8000552:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	193a      	adds	r2, r7, r4
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fa55 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	0212      	lsls	r2, r2, #8
 8000568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2203      	movs	r2, #3
 800056e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	193a      	adds	r2, r7, r4
 8000578:	23a0      	movs	r3, #160	; 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	0011      	movs	r1, r2
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fa44 	bl	8000a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000584:	0021      	movs	r1, r4
 8000586:	187b      	adds	r3, r7, r1
 8000588:	22c0      	movs	r2, #192	; 0xc0
 800058a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <MX_GPIO_Init+0x1a4>)
 80005a8:	0019      	movs	r1, r3
 80005aa:	0010      	movs	r0, r2
 80005ac:	f000 fa2e 	bl	8000a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b009      	add	sp, #36	; 0x24
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	50000400 	.word	0x50000400

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	641a      	str	r2, [r3, #64]	; 0x40
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0549      	lsls	r1, r1, #21
 80005f4:	430a      	orrs	r2, r1
 80005f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_MspInit+0x44>)
 80005fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	055b      	lsls	r3, r3, #21
 8000600:	4013      	ands	r3, r2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	429a      	cmp	r2, r3
 8000626:	d10b      	bne.n	8000640 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_TIM_PWM_MspInit+0x34>)
 800062a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_TIM_PWM_MspInit+0x34>)
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	63da      	str	r2, [r3, #60]	; 0x3c
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <HAL_TIM_PWM_MspInit+0x34>)
 8000636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000638:	2201      	movs	r2, #1
 800063a:	4013      	ands	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	240c      	movs	r4, #12
 8000656:	193b      	adds	r3, r7, r4
 8000658:	0018      	movs	r0, r3
 800065a:	2314      	movs	r3, #20
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f001 fe68 	bl	8002334 <memset>
  if(htim->Instance==TIM2)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	429a      	cmp	r2, r3
 800066e:	d122      	bne.n	80006b6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_TIM_MspPostInit+0x74>)
 8000672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <HAL_TIM_MspPostInit+0x74>)
 8000676:	2101      	movs	r1, #1
 8000678:	430a      	orrs	r2, r1
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_TIM_MspPostInit+0x74>)
 800067e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000680:	2201      	movs	r2, #1
 8000682:	4013      	ands	r3, r2
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2204      	movs	r2, #4
 800068e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2202      	movs	r2, #2
 8000694:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2202      	movs	r2, #2
 80006a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	187a      	adds	r2, r7, r1
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 f9ab 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b009      	add	sp, #36	; 0x24
 80006bc:	bd90      	pop	{r4, r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <NMI_Handler+0x4>

080006ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 f89c 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000700:	f7ff fff7 	bl	80006f2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopForever+0x6>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	; (800073c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <LoopForever+0xe>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <LoopForever+0x16>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072a:	f001 fe0b 	bl	8002344 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800072e:	f7ff fd75 	bl	800021c <main>

08000732 <LoopForever>:

LoopForever:
  b LoopForever
 8000732:	e7fe      	b.n	8000732 <LoopForever>
  ldr   r0, =_estack
 8000734:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000740:	08002440 	.word	0x08002440
  ldr r2, =_sbss
 8000744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000748:	20000078 	.word	0x20000078

0800074c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_IRQHandler>
	...

08000750 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_Init+0x3c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_Init+0x3c>)
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	0049      	lsls	r1, r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076a:	2003      	movs	r0, #3
 800076c:	f000 f810 	bl	8000790 <HAL_InitTick>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d003      	beq.n	800077c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
 800077a:	e001      	b.n	8000780 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800077c:	f7ff ff26 	bl	80005cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	b002      	add	sp, #8
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_InitTick+0x88>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d02b      	beq.n	8000800 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_InitTick+0x8c>)
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <HAL_InitTick+0x88>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	0019      	movs	r1, r3
 80007b2:	23fa      	movs	r3, #250	; 0xfa
 80007b4:	0098      	lsls	r0, r3, #2
 80007b6:	f7ff fca5 	bl	8000104 <__udivsi3>
 80007ba:	0003      	movs	r3, r0
 80007bc:	0019      	movs	r1, r3
 80007be:	0020      	movs	r0, r4
 80007c0:	f7ff fca0 	bl	8000104 <__udivsi3>
 80007c4:	0003      	movs	r3, r0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f913 	bl	80009f2 <HAL_SYSTICK_Config>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d112      	bne.n	80007f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80a      	bhi.n	80007ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f8f2 	bl	80009c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_InitTick+0x90>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e00d      	b.n	8000808 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	230f      	movs	r3, #15
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e008      	b.n	8000808 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f6:	230f      	movs	r3, #15
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e003      	b.n	8000808 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000800:	230f      	movs	r3, #15
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	781b      	ldrb	r3, [r3, #0]
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b005      	add	sp, #20
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	20000008 	.word	0x20000008
 800081c:	20000000 	.word	0x20000000
 8000820:	20000004 	.word	0x20000004

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x1c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	18d2      	adds	r2, r2, r3
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <HAL_IncTick+0x20>)
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	20000008 	.word	0x20000008
 8000844:	20000074 	.word	0x20000074

08000848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_GetTick+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	20000074 	.word	0x20000074

0800085c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000864:	f7ff fff0 	bl	8000848 <HAL_GetTick>
 8000868:	0003      	movs	r3, r0
 800086a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	3301      	adds	r3, #1
 8000874:	d005      	beq.n	8000882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_Delay+0x44>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	001a      	movs	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	189b      	adds	r3, r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	f7ff ffe0 	bl	8000848 <HAL_GetTick>
 8000888:	0002      	movs	r2, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	d8f7      	bhi.n	8000884 <HAL_Delay+0x28>
  {
  }
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b004      	add	sp, #16
 800089c:	bd80      	pop	{r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	20000008 	.word	0x20000008

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	0002      	movs	r2, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b7f      	cmp	r3, #127	; 0x7f
 80008b8:	d828      	bhi.n	800090c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ba:	4a2f      	ldr	r2, [pc, #188]	; (8000978 <__NVIC_SetPriority+0xd4>)
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	089b      	lsrs	r3, r3, #2
 80008c4:	33c0      	adds	r3, #192	; 0xc0
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	589b      	ldr	r3, [r3, r2]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	0011      	movs	r1, r2
 80008d0:	2203      	movs	r2, #3
 80008d2:	400a      	ands	r2, r1
 80008d4:	00d2      	lsls	r2, r2, #3
 80008d6:	21ff      	movs	r1, #255	; 0xff
 80008d8:	4091      	lsls	r1, r2
 80008da:	000a      	movs	r2, r1
 80008dc:	43d2      	mvns	r2, r2
 80008de:	401a      	ands	r2, r3
 80008e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	019b      	lsls	r3, r3, #6
 80008e6:	22ff      	movs	r2, #255	; 0xff
 80008e8:	401a      	ands	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	0018      	movs	r0, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	4003      	ands	r3, r0
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f8:	481f      	ldr	r0, [pc, #124]	; (8000978 <__NVIC_SetPriority+0xd4>)
 80008fa:	1dfb      	adds	r3, r7, #7
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b25b      	sxtb	r3, r3
 8000900:	089b      	lsrs	r3, r3, #2
 8000902:	430a      	orrs	r2, r1
 8000904:	33c0      	adds	r3, #192	; 0xc0
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800090a:	e031      	b.n	8000970 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <__NVIC_SetPriority+0xd8>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0019      	movs	r1, r3
 8000914:	230f      	movs	r3, #15
 8000916:	400b      	ands	r3, r1
 8000918:	3b08      	subs	r3, #8
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	3306      	adds	r3, #6
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	18d3      	adds	r3, r2, r3
 8000922:	3304      	adds	r3, #4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1dfa      	adds	r2, r7, #7
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	0011      	movs	r1, r2
 800092c:	2203      	movs	r2, #3
 800092e:	400a      	ands	r2, r1
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	21ff      	movs	r1, #255	; 0xff
 8000934:	4091      	lsls	r1, r2
 8000936:	000a      	movs	r2, r1
 8000938:	43d2      	mvns	r2, r2
 800093a:	401a      	ands	r2, r3
 800093c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	22ff      	movs	r2, #255	; 0xff
 8000944:	401a      	ands	r2, r3
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	2303      	movs	r3, #3
 800094e:	4003      	ands	r3, r0
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <__NVIC_SetPriority+0xd8>)
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	001c      	movs	r4, r3
 800095c:	230f      	movs	r3, #15
 800095e:	4023      	ands	r3, r4
 8000960:	3b08      	subs	r3, #8
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	430a      	orrs	r2, r1
 8000966:	3306      	adds	r3, #6
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	18c3      	adds	r3, r0, r3
 800096c:	3304      	adds	r3, #4
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	e000e100 	.word	0xe000e100
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	045b      	lsls	r3, r3, #17
 8000990:	429a      	cmp	r2, r3
 8000992:	d301      	bcc.n	8000998 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000994:	2301      	movs	r3, #1
 8000996:	e010      	b.n	80009ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <SysTick_Config+0x44>)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	3a01      	subs	r2, #1
 800099e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2103      	movs	r1, #3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff ff7c 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <SysTick_Config+0x44>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Config+0x44>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	0018      	movs	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	b002      	add	sp, #8
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	210f      	movs	r1, #15
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	1c02      	adds	r2, r0, #0
 80009d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff5d 	bl	80008a4 <__NVIC_SetPriority>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ffbf 	bl	8000980 <SysTick_Config>
 8000a02:	0003      	movs	r3, r0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1a:	e147      	b.n	8000cac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2101      	movs	r1, #1
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4091      	lsls	r1, r2
 8000a26:	000a      	movs	r2, r1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d100      	bne.n	8000a34 <HAL_GPIO_Init+0x28>
 8000a32:	e138      	b.n	8000ca6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d005      	beq.n	8000a4c <HAL_GPIO_Init+0x40>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2203      	movs	r2, #3
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d130      	bne.n	8000aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2203      	movs	r2, #3
 8000a58:	409a      	lsls	r2, r3
 8000a5a:	0013      	movs	r3, r2
 8000a5c:	43da      	mvns	r2, r3
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	0013      	movs	r3, r2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a82:	2201      	movs	r2, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
 8000a88:	0013      	movs	r3, r2
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	091b      	lsrs	r3, r3, #4
 8000a98:	2201      	movs	r2, #1
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
 8000aa0:	0013      	movs	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d017      	beq.n	8000aea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	0013      	movs	r3, r2
 8000aca:	43da      	mvns	r2, r3
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2203      	movs	r2, #3
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d123      	bne.n	8000b3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	08da      	lsrs	r2, r3, #3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3208      	adds	r2, #8
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	58d3      	ldr	r3, [r2, r3]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	2207      	movs	r2, #7
 8000b08:	4013      	ands	r3, r2
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	409a      	lsls	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	43da      	mvns	r2, r3
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2107      	movs	r1, #7
 8000b22:	400b      	ands	r3, r1
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	08da      	lsrs	r2, r3, #3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3208      	adds	r2, #8
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	6939      	ldr	r1, [r7, #16]
 8000b3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2203      	movs	r2, #3
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	23c0      	movs	r3, #192	; 0xc0
 8000b78:	029b      	lsls	r3, r3, #10
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d100      	bne.n	8000b80 <HAL_GPIO_Init+0x174>
 8000b7e:	e092      	b.n	8000ca6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000b80:	4a50      	ldr	r2, [pc, #320]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	089b      	lsrs	r3, r3, #2
 8000b86:	3318      	adds	r3, #24
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	589b      	ldr	r3, [r3, r2]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2203      	movs	r2, #3
 8000b92:	4013      	ands	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	220f      	movs	r2, #15
 8000b98:	409a      	lsls	r2, r3
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	43da      	mvns	r2, r3
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	23a0      	movs	r3, #160	; 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d013      	beq.n	8000bd6 <HAL_GPIO_Init+0x1ca>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d00d      	beq.n	8000bd2 <HAL_GPIO_Init+0x1c6>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a44      	ldr	r2, [pc, #272]	; (8000ccc <HAL_GPIO_Init+0x2c0>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d007      	beq.n	8000bce <HAL_GPIO_Init+0x1c2>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a43      	ldr	r2, [pc, #268]	; (8000cd0 <HAL_GPIO_Init+0x2c4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_GPIO_Init+0x1be>
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e006      	b.n	8000bd8 <HAL_GPIO_Init+0x1cc>
 8000bca:	2305      	movs	r3, #5
 8000bcc:	e004      	b.n	8000bd8 <HAL_GPIO_Init+0x1cc>
 8000bce:	2302      	movs	r3, #2
 8000bd0:	e002      	b.n	8000bd8 <HAL_GPIO_Init+0x1cc>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <HAL_GPIO_Init+0x1cc>
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	2103      	movs	r1, #3
 8000bdc:	400a      	ands	r2, r1
 8000bde:	00d2      	lsls	r2, r2, #3
 8000be0:	4093      	lsls	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000be8:	4936      	ldr	r1, [pc, #216]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	089b      	lsrs	r3, r3, #2
 8000bee:	3318      	adds	r3, #24
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	2380      	movs	r3, #128	; 0x80
 8000c0c:	035b      	lsls	r3, r3, #13
 8000c0e:	4013      	ands	r3, r2
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c20:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	43da      	mvns	r2, r3
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	039b      	lsls	r3, r3, #14
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d003      	beq.n	8000c44 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000c4c:	2384      	movs	r3, #132	; 0x84
 8000c4e:	58d3      	ldr	r3, [r2, r3]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c70:	4914      	ldr	r1, [pc, #80]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000c72:	2284      	movs	r2, #132	; 0x84
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000c78:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	58d3      	ldr	r3, [r2, r3]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	4013      	ands	r3, r2
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c9e:	4909      	ldr	r1, [pc, #36]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	40da      	lsrs	r2, r3
 8000cb4:	1e13      	subs	r3, r2, #0
 8000cb6:	d000      	beq.n	8000cba <HAL_GPIO_Init+0x2ae>
 8000cb8:	e6b0      	b.n	8000a1c <HAL_GPIO_Init+0x10>
  }
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b006      	add	sp, #24
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	50000400 	.word	0x50000400
 8000ccc:	50000800 	.word	0x50000800
 8000cd0:	50000c00 	.word	0x50000c00

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	0008      	movs	r0, r1
 8000cde:	0011      	movs	r1, r2
 8000ce0:	1cbb      	adds	r3, r7, #2
 8000ce2:	1c02      	adds	r2, r0, #0
 8000ce4:	801a      	strh	r2, [r3, #0]
 8000ce6:	1c7b      	adds	r3, r7, #1
 8000ce8:	1c0a      	adds	r2, r1, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cec:	1c7b      	adds	r3, r7, #1
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf4:	1cbb      	adds	r3, r7, #2
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfc:	e003      	b.n	8000d06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfe:	1cbb      	adds	r3, r7, #2
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	; (8000d84 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	0019      	movs	r1, r3
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d11f      	bne.n	8000d74 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	0013      	movs	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	189b      	adds	r3, r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4912      	ldr	r1, [pc, #72]	; (8000d8c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff f9de 	bl	8000104 <__udivsi3>
 8000d48:	0003      	movs	r3, r0
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d4e:	e008      	b.n	8000d62 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e001      	b.n	8000d62 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e009      	b.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d0ed      	beq.n	8000d50 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	0018      	movs	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40007000 	.word	0x40007000
 8000d84:	fffff9ff 	.word	0xfffff9ff
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	000f4240 	.word	0x000f4240

08000d90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e2fe      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2201      	movs	r2, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	d100      	bne.n	8000dae <HAL_RCC_OscConfig+0x1e>
 8000dac:	e07c      	b.n	8000ea8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dae:	4bc3      	ldr	r3, [pc, #780]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2238      	movs	r2, #56	; 0x38
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000db8:	4bc0      	ldr	r3, [pc, #768]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d102      	bne.n	8000dce <HAL_RCC_OscConfig+0x3e>
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d002      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d10b      	bne.n	8000dec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd4:	4bb9      	ldr	r3, [pc, #740]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	029b      	lsls	r3, r3, #10
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d062      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x116>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d15e      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e2d9      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d107      	bne.n	8000e08 <HAL_RCC_OscConfig+0x78>
 8000df8:	4bb0      	ldr	r3, [pc, #704]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4baf      	ldr	r3, [pc, #700]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	0249      	lsls	r1, r1, #9
 8000e02:	430a      	orrs	r2, r1
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e020      	b.n	8000e4a <HAL_RCC_OscConfig+0xba>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	23a0      	movs	r3, #160	; 0xa0
 8000e0e:	02db      	lsls	r3, r3, #11
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d10e      	bne.n	8000e32 <HAL_RCC_OscConfig+0xa2>
 8000e14:	4ba9      	ldr	r3, [pc, #676]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4ba8      	ldr	r3, [pc, #672]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	2180      	movs	r1, #128	; 0x80
 8000e1c:	02c9      	lsls	r1, r1, #11
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	4ba6      	ldr	r3, [pc, #664]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4ba5      	ldr	r3, [pc, #660]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0249      	lsls	r1, r1, #9
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e00b      	b.n	8000e4a <HAL_RCC_OscConfig+0xba>
 8000e32:	4ba2      	ldr	r3, [pc, #648]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	4ba1      	ldr	r3, [pc, #644]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e38:	49a1      	ldr	r1, [pc, #644]	; (80010c0 <HAL_RCC_OscConfig+0x330>)
 8000e3a:	400a      	ands	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b9e      	ldr	r3, [pc, #632]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e44:	499f      	ldr	r1, [pc, #636]	; (80010c4 <HAL_RCC_OscConfig+0x334>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d014      	beq.n	8000e7c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e52:	f7ff fcf9 	bl	8000848 <HAL_GetTick>
 8000e56:	0003      	movs	r3, r0
 8000e58:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fcf4 	bl	8000848 <HAL_GetTick>
 8000e60:	0002      	movs	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	; 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e298      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e6e:	4b93      	ldr	r3, [pc, #588]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	; 0x80
 8000e74:	029b      	lsls	r3, r3, #10
 8000e76:	4013      	ands	r3, r2
 8000e78:	d0f0      	beq.n	8000e5c <HAL_RCC_OscConfig+0xcc>
 8000e7a:	e015      	b.n	8000ea8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fce4 	bl	8000848 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e86:	f7ff fcdf 	bl	8000848 <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b64      	cmp	r3, #100	; 0x64
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e283      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e98:	4b88      	ldr	r3, [pc, #544]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d1f0      	bne.n	8000e86 <HAL_RCC_OscConfig+0xf6>
 8000ea4:	e000      	b.n	8000ea8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2202      	movs	r2, #2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d100      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x124>
 8000eb2:	e099      	b.n	8000fe8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb4:	4b81      	ldr	r3, [pc, #516]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2238      	movs	r2, #56	; 0x38
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ebe:	4b7f      	ldr	r3, [pc, #508]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b10      	cmp	r3, #16
 8000ecc:	d102      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x144>
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d002      	beq.n	8000eda <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d135      	bne.n	8000f46 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eda:	4b78      	ldr	r3, [pc, #480]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d005      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x162>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e256      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef2:	4b72      	ldr	r3, [pc, #456]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4a74      	ldr	r2, [pc, #464]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8000ef8:	4013      	ands	r3, r2
 8000efa:	0019      	movs	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	021a      	lsls	r2, r3, #8
 8000f02:	4b6e      	ldr	r3, [pc, #440]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f04:	430a      	orrs	r2, r1
 8000f06:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d112      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a6e      	ldr	r2, [pc, #440]	; (80010cc <HAL_RCC_OscConfig+0x33c>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	0019      	movs	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	4b67      	ldr	r3, [pc, #412]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f22:	4b66      	ldr	r3, [pc, #408]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	0adb      	lsrs	r3, r3, #11
 8000f28:	2207      	movs	r2, #7
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	4a68      	ldr	r2, [pc, #416]	; (80010d0 <HAL_RCC_OscConfig+0x340>)
 8000f2e:	40da      	lsrs	r2, r3
 8000f30:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <HAL_RCC_OscConfig+0x344>)
 8000f32:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f34:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <HAL_RCC_OscConfig+0x348>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff fc29 	bl	8000790 <HAL_InitTick>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d051      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e22c      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d030      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f4e:	4b5b      	ldr	r3, [pc, #364]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a5e      	ldr	r2, [pc, #376]	; (80010cc <HAL_RCC_OscConfig+0x33c>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	0019      	movs	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	4b57      	ldr	r3, [pc, #348]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000f62:	4b56      	ldr	r3, [pc, #344]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	4b55      	ldr	r3, [pc, #340]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0049      	lsls	r1, r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f70:	f7ff fc6a 	bl	8000848 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fc65 	bl	8000848 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e209      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f98:	4b48      	ldr	r3, [pc, #288]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a4a      	ldr	r2, [pc, #296]	; (80010c8 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	021a      	lsls	r2, r3, #8
 8000fa8:	4b44      	ldr	r3, [pc, #272]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000faa:	430a      	orrs	r2, r1
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	e01b      	b.n	8000fe8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000fb0:	4b42      	ldr	r3, [pc, #264]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b41      	ldr	r3, [pc, #260]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	4949      	ldr	r1, [pc, #292]	; (80010dc <HAL_RCC_OscConfig+0x34c>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fc44 	bl	8000848 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fc3f 	bl	8000848 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e1e3      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x236>
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fe6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2208      	movs	r2, #8
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d047      	beq.n	8001082 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2238      	movs	r2, #56	; 0x38
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	d10a      	bne.n	8001014 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	2202      	movs	r2, #2
 8001004:	4013      	ands	r3, r2
 8001006:	d03c      	beq.n	8001082 <HAL_RCC_OscConfig+0x2f2>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d138      	bne.n	8001082 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e1c5      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d019      	beq.n	8001050 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 800101e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001022:	2101      	movs	r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001028:	f7ff fc0e 	bl	8000848 <HAL_GetTick>
 800102c:	0003      	movs	r3, r0
 800102e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001032:	f7ff fc09 	bl	8000848 <HAL_GetTick>
 8001036:	0002      	movs	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e1ad      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001048:	2202      	movs	r2, #2
 800104a:	4013      	ands	r3, r2
 800104c:	d0f1      	beq.n	8001032 <HAL_RCC_OscConfig+0x2a2>
 800104e:	e018      	b.n	8001082 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001052:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001056:	2101      	movs	r1, #1
 8001058:	438a      	bics	r2, r1
 800105a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105c:	f7ff fbf4 	bl	8000848 <HAL_GetTick>
 8001060:	0003      	movs	r3, r0
 8001062:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001066:	f7ff fbef 	bl	8000848 <HAL_GetTick>
 800106a:	0002      	movs	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e193      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 800107a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107c:	2202      	movs	r2, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d1f1      	bne.n	8001066 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2204      	movs	r2, #4
 8001088:	4013      	ands	r3, r2
 800108a:	d100      	bne.n	800108e <HAL_RCC_OscConfig+0x2fe>
 800108c:	e0c6      	b.n	800121c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108e:	231f      	movs	r3, #31
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2238      	movs	r2, #56	; 0x38
 800109c:	4013      	ands	r3, r2
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d11e      	bne.n	80010e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_RCC_OscConfig+0x32c>)
 80010a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	d100      	bne.n	80010ae <HAL_RCC_OscConfig+0x31e>
 80010ac:	e0b6      	b.n	800121c <HAL_RCC_OscConfig+0x48c>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <HAL_RCC_OscConfig+0x328>
 80010b6:	e0b1      	b.n	800121c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e171      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	fffeffff 	.word	0xfffeffff
 80010c4:	fffbffff 	.word	0xfffbffff
 80010c8:	ffff80ff 	.word	0xffff80ff
 80010cc:	ffffc7ff 	.word	0xffffc7ff
 80010d0:	00f42400 	.word	0x00f42400
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000004 	.word	0x20000004
 80010dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010e0:	4bb1      	ldr	r3, [pc, #708]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80010e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	055b      	lsls	r3, r3, #21
 80010e8:	4013      	ands	r3, r2
 80010ea:	d101      	bne.n	80010f0 <HAL_RCC_OscConfig+0x360>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x362>
 80010f0:	2300      	movs	r3, #0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d011      	beq.n	800111a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	4bac      	ldr	r3, [pc, #688]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80010f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010fa:	4bab      	ldr	r3, [pc, #684]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	0549      	lsls	r1, r1, #21
 8001100:	430a      	orrs	r2, r1
 8001102:	63da      	str	r2, [r3, #60]	; 0x3c
 8001104:	4ba8      	ldr	r3, [pc, #672]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	055b      	lsls	r3, r3, #21
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001112:	231f      	movs	r3, #31
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111a:	4ba4      	ldr	r3, [pc, #656]	; (80013ac <HAL_RCC_OscConfig+0x61c>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4013      	ands	r3, r2
 8001124:	d11a      	bne.n	800115c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001126:	4ba1      	ldr	r3, [pc, #644]	; (80013ac <HAL_RCC_OscConfig+0x61c>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4ba0      	ldr	r3, [pc, #640]	; (80013ac <HAL_RCC_OscConfig+0x61c>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0049      	lsls	r1, r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001134:	f7ff fb88 	bl	8000848 <HAL_GetTick>
 8001138:	0003      	movs	r3, r0
 800113a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800113e:	f7ff fb83 	bl	8000848 <HAL_GetTick>
 8001142:	0002      	movs	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e127      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001150:	4b96      	ldr	r3, [pc, #600]	; (80013ac <HAL_RCC_OscConfig+0x61c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4013      	ands	r3, r2
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x3e2>
 8001164:	4b90      	ldr	r3, [pc, #576]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001168:	4b8f      	ldr	r3, [pc, #572]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001170:	e01c      	b.n	80011ac <HAL_RCC_OscConfig+0x41c>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b05      	cmp	r3, #5
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x404>
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 800117c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800117e:	4b8a      	ldr	r3, [pc, #552]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001180:	2104      	movs	r1, #4
 8001182:	430a      	orrs	r2, r1
 8001184:	65da      	str	r2, [r3, #92]	; 0x5c
 8001186:	4b88      	ldr	r3, [pc, #544]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800118a:	4b87      	ldr	r3, [pc, #540]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 800118c:	2101      	movs	r1, #1
 800118e:	430a      	orrs	r2, r1
 8001190:	65da      	str	r2, [r3, #92]	; 0x5c
 8001192:	e00b      	b.n	80011ac <HAL_RCC_OscConfig+0x41c>
 8001194:	4b84      	ldr	r3, [pc, #528]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001196:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001198:	4b83      	ldr	r3, [pc, #524]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 800119a:	2101      	movs	r1, #1
 800119c:	438a      	bics	r2, r1
 800119e:	65da      	str	r2, [r3, #92]	; 0x5c
 80011a0:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80011a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011a4:	4b80      	ldr	r3, [pc, #512]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80011a6:	2104      	movs	r1, #4
 80011a8:	438a      	bics	r2, r1
 80011aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d014      	beq.n	80011de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b4:	f7ff fb48 	bl	8000848 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011bc:	e009      	b.n	80011d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011be:	f7ff fb43 	bl	8000848 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	4a79      	ldr	r2, [pc, #484]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e0e6      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x42e>
 80011dc:	e013      	b.n	8001206 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011de:	f7ff fb33 	bl	8000848 <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e6:	e009      	b.n	80011fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7ff fb2e 	bl	8000848 <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <HAL_RCC_OscConfig+0x620>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e0d1      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011fc:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	2202      	movs	r2, #2
 8001202:	4013      	ands	r3, r2
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001206:	231f      	movs	r3, #31
 8001208:	18fb      	adds	r3, r7, r3
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001210:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001214:	4b64      	ldr	r3, [pc, #400]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001216:	4967      	ldr	r1, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x624>)
 8001218:	400a      	ands	r2, r1
 800121a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x496>
 8001224:	e0bb      	b.n	800139e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2238      	movs	r2, #56	; 0x38
 800122c:	4013      	ands	r3, r2
 800122e:	2b10      	cmp	r3, #16
 8001230:	d100      	bne.n	8001234 <HAL_RCC_OscConfig+0x4a4>
 8001232:	e07b      	b.n	800132c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d156      	bne.n	80012ea <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123c:	4b5a      	ldr	r3, [pc, #360]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001242:	495d      	ldr	r1, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fafe 	bl	8000848 <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff faf9 	bl	8000848 <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e09d      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001264:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	049b      	lsls	r3, r3, #18
 800126c:	4013      	ands	r3, r2
 800126e:	d1f0      	bne.n	8001252 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001270:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4a51      	ldr	r2, [pc, #324]	; (80013bc <HAL_RCC_OscConfig+0x62c>)
 8001276:	4013      	ands	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	431a      	orrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129c:	431a      	orrs	r2, r3
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012a0:	430a      	orrs	r2, r1
 80012a2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012a4:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0449      	lsls	r1, r1, #17
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	4b3c      	ldr	r3, [pc, #240]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0549      	lsls	r1, r1, #21
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fac2 	bl	8000848 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ca:	f7ff fabd 	bl	8000848 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e061      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	049b      	lsls	r3, r3, #18
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x53a>
 80012e8:	e059      	b.n	800139e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ea:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 80012f0:	4931      	ldr	r1, [pc, #196]	; (80013b8 <HAL_RCC_OscConfig+0x628>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff faa7 	bl	8000848 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff faa2 	bl	8000848 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e046      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	049b      	lsls	r3, r3, #18
 800131a:	4013      	ands	r3, r2
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 8001324:	4926      	ldr	r1, [pc, #152]	; (80013c0 <HAL_RCC_OscConfig+0x630>)
 8001326:	400a      	ands	r2, r1
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	e038      	b.n	800139e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e033      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_OscConfig+0x618>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2203      	movs	r2, #3
 8001342:	401a      	ands	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	429a      	cmp	r2, r3
 800134a:	d126      	bne.n	800139a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2270      	movs	r2, #112	; 0x70
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	429a      	cmp	r2, r3
 8001358:	d11f      	bne.n	800139a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	23fe      	movs	r3, #254	; 0xfe
 800135e:	01db      	lsls	r3, r3, #7
 8001360:	401a      	ands	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001368:	429a      	cmp	r2, r3
 800136a:	d116      	bne.n	800139a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	23f8      	movs	r3, #248	; 0xf8
 8001370:	039b      	lsls	r3, r3, #14
 8001372:	401a      	ands	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d10e      	bne.n	800139a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	23e0      	movs	r3, #224	; 0xe0
 8001380:	051b      	lsls	r3, r3, #20
 8001382:	401a      	ands	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001388:	429a      	cmp	r2, r3
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	0f5b      	lsrs	r3, r3, #29
 8001390:	075a      	lsls	r2, r3, #29
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001396:	429a      	cmp	r2, r3
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b008      	add	sp, #32
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40007000 	.word	0x40007000
 80013b0:	00001388 	.word	0x00001388
 80013b4:	efffffff 	.word	0xefffffff
 80013b8:	feffffff 	.word	0xfeffffff
 80013bc:	11c1808c 	.word	0x11c1808c
 80013c0:	eefefffc 	.word	0xeefefffc

080013c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0e9      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2207      	movs	r2, #7
 80013de:	4013      	ands	r3, r2
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d91e      	bls.n	8001424 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2207      	movs	r2, #7
 80013ec:	4393      	bics	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013f8:	f7ff fa26 	bl	8000848 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001400:	e009      	b.n	8001416 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001402:	f7ff fa21 	bl	8000848 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4a6a      	ldr	r2, [pc, #424]	; (80015b8 <HAL_RCC_ClockConfig+0x1f4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0ca      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2207      	movs	r2, #7
 800141c:	4013      	ands	r3, r2
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	d1ee      	bne.n	8001402 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2202      	movs	r2, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d015      	beq.n	800145a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2204      	movs	r2, #4
 8001434:	4013      	ands	r3, r2
 8001436:	d006      	beq.n	8001446 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001438:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	4b5f      	ldr	r3, [pc, #380]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 800143e:	21e0      	movs	r1, #224	; 0xe0
 8001440:	01c9      	lsls	r1, r1, #7
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <HAL_RCC_ClockConfig+0x1fc>)
 800144c:	4013      	ands	r3, r2
 800144e:	0019      	movs	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	4b59      	ldr	r3, [pc, #356]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 8001456:	430a      	orrs	r2, r1
 8001458:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2201      	movs	r2, #1
 8001460:	4013      	ands	r3, r2
 8001462:	d057      	beq.n	8001514 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d107      	bne.n	800147c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	029b      	lsls	r3, r3, #10
 8001474:	4013      	ands	r3, r2
 8001476:	d12b      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e097      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d107      	bne.n	8001494 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001484:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	049b      	lsls	r3, r3, #18
 800148c:	4013      	ands	r3, r2
 800148e:	d11f      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e08b      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d107      	bne.n	80014ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149c:	4b47      	ldr	r3, [pc, #284]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	d113      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e07f      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b4:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 80014b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d108      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e074      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d101      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e06d      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014d0:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2207      	movs	r2, #7
 80014d6:	4393      	bics	r3, r2
 80014d8:	0019      	movs	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4b37      	ldr	r3, [pc, #220]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e4:	f7ff f9b0 	bl	8000848 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ec:	e009      	b.n	8001502 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ee:	f7ff f9ab 	bl	8000848 <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_RCC_ClockConfig+0x1f4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e054      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2238      	movs	r2, #56	; 0x38
 8001508:	401a      	ands	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	429a      	cmp	r2, r3
 8001512:	d1ec      	bne.n	80014ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001514:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2207      	movs	r2, #7
 800151a:	4013      	ands	r3, r2
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d21e      	bcs.n	8001560 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2207      	movs	r2, #7
 8001528:	4393      	bics	r3, r2
 800152a:	0019      	movs	r1, r3
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001534:	f7ff f988 	bl	8000848 <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800153c:	e009      	b.n	8001552 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153e:	f7ff f983 	bl	8000848 <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_RCC_ClockConfig+0x1f4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e02c      	b.n	80015ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2207      	movs	r2, #7
 8001558:	4013      	ands	r3, r2
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2204      	movs	r2, #4
 8001566:	4013      	ands	r3, r2
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <HAL_RCC_ClockConfig+0x200>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 800157a:	430a      	orrs	r2, r1
 800157c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800157e:	f000 f829 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001582:	0001      	movs	r1, r0
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_ClockConfig+0x1f8>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	220f      	movs	r2, #15
 800158c:	401a      	ands	r2, r3
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <HAL_RCC_ClockConfig+0x204>)
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	58d3      	ldr	r3, [r2, r3]
 8001594:	221f      	movs	r2, #31
 8001596:	4013      	ands	r3, r2
 8001598:	000a      	movs	r2, r1
 800159a:	40da      	lsrs	r2, r3
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 800159e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff f8f3 	bl	8000790 <HAL_InitTick>
 80015aa:	0003      	movs	r3, r0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40022000 	.word	0x40022000
 80015b8:	00001388 	.word	0x00001388
 80015bc:	40021000 	.word	0x40021000
 80015c0:	fffff0ff 	.word	0xfffff0ff
 80015c4:	ffff8fff 	.word	0xffff8fff
 80015c8:	080023a4 	.word	0x080023a4
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2238      	movs	r2, #56	; 0x38
 80015e0:	4013      	ands	r3, r2
 80015e2:	d10f      	bne.n	8001604 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015e4:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0adb      	lsrs	r3, r3, #11
 80015ea:	2207      	movs	r2, #7
 80015ec:	4013      	ands	r3, r2
 80015ee:	2201      	movs	r2, #1
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	4835      	ldr	r0, [pc, #212]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80015fa:	f7fe fd83 	bl	8000104 <__udivsi3>
 80015fe:	0003      	movs	r3, r0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e05d      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2238      	movs	r2, #56	; 0x38
 800160a:	4013      	ands	r3, r2
 800160c:	2b08      	cmp	r3, #8
 800160e:	d102      	bne.n	8001616 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	e054      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2238      	movs	r2, #56	; 0x38
 800161c:	4013      	ands	r3, r2
 800161e:	2b10      	cmp	r3, #16
 8001620:	d138      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2203      	movs	r2, #3
 8001628:	4013      	ands	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	2207      	movs	r2, #7
 8001634:	4013      	ands	r3, r2
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d10d      	bne.n	800165c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	4824      	ldr	r0, [pc, #144]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001644:	f7fe fd5e 	bl	8000104 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	0019      	movs	r1, r3
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	227f      	movs	r2, #127	; 0x7f
 8001654:	4013      	ands	r3, r2
 8001656:	434b      	muls	r3, r1
 8001658:	617b      	str	r3, [r7, #20]
        break;
 800165a:	e00d      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	481c      	ldr	r0, [pc, #112]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001660:	f7fe fd50 	bl	8000104 <__udivsi3>
 8001664:	0003      	movs	r3, r0
 8001666:	0019      	movs	r1, r3
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	227f      	movs	r2, #127	; 0x7f
 8001670:	4013      	ands	r3, r2
 8001672:	434b      	muls	r3, r1
 8001674:	617b      	str	r3, [r7, #20]
        break;
 8001676:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	0f5b      	lsrs	r3, r3, #29
 800167e:	2207      	movs	r2, #7
 8001680:	4013      	ands	r3, r2
 8001682:	3301      	adds	r3, #1
 8001684:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	6978      	ldr	r0, [r7, #20]
 800168a:	f7fe fd3b 	bl	8000104 <__udivsi3>
 800168e:	0003      	movs	r3, r0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	e015      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2238      	movs	r2, #56	; 0x38
 800169a:	4013      	ands	r3, r2
 800169c:	2b20      	cmp	r3, #32
 800169e:	d103      	bne.n	80016a8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2238      	movs	r2, #56	; 0x38
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b18      	cmp	r3, #24
 80016b2:	d103      	bne.n	80016bc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80016b4:	23fa      	movs	r3, #250	; 0xfa
 80016b6:	01db      	lsls	r3, r3, #7
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e001      	b.n	80016c0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016c0:	693b      	ldr	r3, [r7, #16]
}
 80016c2:	0018      	movs	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b006      	add	sp, #24
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40021000 	.word	0x40021000
 80016d0:	00f42400 	.word	0x00f42400
 80016d4:	007a1200 	.word	0x007a1200

080016d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	223d      	movs	r2, #61	; 0x3d
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d001      	beq.n	80016f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e035      	b.n	800175c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	223d      	movs	r2, #61	; 0x3d
 80016f4:	2102      	movs	r1, #2
 80016f6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_TIM_Base_Start+0x8c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00a      	beq.n	8001718 <HAL_TIM_Base_Start+0x40>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	05db      	lsls	r3, r3, #23
 800170a:	429a      	cmp	r2, r3
 800170c:	d004      	beq.n	8001718 <HAL_TIM_Base_Start+0x40>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_TIM_Base_Start+0x90>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d116      	bne.n	8001746 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <HAL_TIM_Base_Start+0x94>)
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d016      	beq.n	8001758 <HAL_TIM_Base_Start+0x80>
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	025b      	lsls	r3, r3, #9
 8001730:	429a      	cmp	r2, r3
 8001732:	d011      	beq.n	8001758 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2101      	movs	r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001744:	e008      	b.n	8001758 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	e000      	b.n	800175a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001758:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b004      	add	sp, #16
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40012c00 	.word	0x40012c00
 8001768:	40000400 	.word	0x40000400
 800176c:	00010007 	.word	0x00010007

08001770 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e04a      	b.n	8001818 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	223d      	movs	r2, #61	; 0x3d
 8001786:	5c9b      	ldrb	r3, [r3, r2]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d107      	bne.n	800179e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	223c      	movs	r2, #60	; 0x3c
 8001792:	2100      	movs	r1, #0
 8001794:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe ff3b 	bl	8000614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	223d      	movs	r2, #61	; 0x3d
 80017a2:	2102      	movs	r1, #2
 80017a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	0019      	movs	r1, r3
 80017b0:	0010      	movs	r0, r2
 80017b2:	f000 fa13 	bl	8001bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2248      	movs	r2, #72	; 0x48
 80017ba:	2101      	movs	r1, #1
 80017bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	223e      	movs	r2, #62	; 0x3e
 80017c2:	2101      	movs	r1, #1
 80017c4:	5499      	strb	r1, [r3, r2]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	223f      	movs	r2, #63	; 0x3f
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2241      	movs	r2, #65	; 0x41
 80017da:	2101      	movs	r1, #1
 80017dc:	5499      	strb	r1, [r3, r2]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2242      	movs	r2, #66	; 0x42
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2243      	movs	r2, #67	; 0x43
 80017ea:	2101      	movs	r1, #1
 80017ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2244      	movs	r2, #68	; 0x44
 80017f2:	2101      	movs	r1, #1
 80017f4:	5499      	strb	r1, [r3, r2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2245      	movs	r2, #69	; 0x45
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2246      	movs	r2, #70	; 0x46
 8001802:	2101      	movs	r1, #1
 8001804:	5499      	strb	r1, [r3, r2]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2247      	movs	r2, #71	; 0x47
 800180a:	2101      	movs	r1, #1
 800180c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	223d      	movs	r2, #61	; 0x3d
 8001812:	2101      	movs	r1, #1
 8001814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d108      	bne.n	8001842 <HAL_TIM_PWM_Start+0x22>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	223e      	movs	r2, #62	; 0x3e
 8001834:	5c9b      	ldrb	r3, [r3, r2]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	4193      	sbcs	r3, r2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	e037      	b.n	80018b2 <HAL_TIM_PWM_Start+0x92>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2b04      	cmp	r3, #4
 8001846:	d108      	bne.n	800185a <HAL_TIM_PWM_Start+0x3a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	223f      	movs	r2, #63	; 0x3f
 800184c:	5c9b      	ldrb	r3, [r3, r2]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	1e5a      	subs	r2, r3, #1
 8001854:	4193      	sbcs	r3, r2
 8001856:	b2db      	uxtb	r3, r3
 8001858:	e02b      	b.n	80018b2 <HAL_TIM_PWM_Start+0x92>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d108      	bne.n	8001872 <HAL_TIM_PWM_Start+0x52>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2240      	movs	r2, #64	; 0x40
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	3b01      	subs	r3, #1
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	4193      	sbcs	r3, r2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	e01f      	b.n	80018b2 <HAL_TIM_PWM_Start+0x92>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d108      	bne.n	800188a <HAL_TIM_PWM_Start+0x6a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2241      	movs	r2, #65	; 0x41
 800187c:	5c9b      	ldrb	r3, [r3, r2]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	1e5a      	subs	r2, r3, #1
 8001884:	4193      	sbcs	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	e013      	b.n	80018b2 <HAL_TIM_PWM_Start+0x92>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b10      	cmp	r3, #16
 800188e:	d108      	bne.n	80018a2 <HAL_TIM_PWM_Start+0x82>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2242      	movs	r2, #66	; 0x42
 8001894:	5c9b      	ldrb	r3, [r3, r2]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	1e5a      	subs	r2, r3, #1
 800189c:	4193      	sbcs	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	e007      	b.n	80018b2 <HAL_TIM_PWM_Start+0x92>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2243      	movs	r2, #67	; 0x43
 80018a6:	5c9b      	ldrb	r3, [r3, r2]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	1e5a      	subs	r2, r3, #1
 80018ae:	4193      	sbcs	r3, r2
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e081      	b.n	80019be <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d104      	bne.n	80018ca <HAL_TIM_PWM_Start+0xaa>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	223e      	movs	r2, #62	; 0x3e
 80018c4:	2102      	movs	r1, #2
 80018c6:	5499      	strb	r1, [r3, r2]
 80018c8:	e023      	b.n	8001912 <HAL_TIM_PWM_Start+0xf2>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d104      	bne.n	80018da <HAL_TIM_PWM_Start+0xba>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	223f      	movs	r2, #63	; 0x3f
 80018d4:	2102      	movs	r1, #2
 80018d6:	5499      	strb	r1, [r3, r2]
 80018d8:	e01b      	b.n	8001912 <HAL_TIM_PWM_Start+0xf2>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d104      	bne.n	80018ea <HAL_TIM_PWM_Start+0xca>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2240      	movs	r2, #64	; 0x40
 80018e4:	2102      	movs	r1, #2
 80018e6:	5499      	strb	r1, [r3, r2]
 80018e8:	e013      	b.n	8001912 <HAL_TIM_PWM_Start+0xf2>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d104      	bne.n	80018fa <HAL_TIM_PWM_Start+0xda>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2241      	movs	r2, #65	; 0x41
 80018f4:	2102      	movs	r1, #2
 80018f6:	5499      	strb	r1, [r3, r2]
 80018f8:	e00b      	b.n	8001912 <HAL_TIM_PWM_Start+0xf2>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d104      	bne.n	800190a <HAL_TIM_PWM_Start+0xea>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2242      	movs	r2, #66	; 0x42
 8001904:	2102      	movs	r1, #2
 8001906:	5499      	strb	r1, [r3, r2]
 8001908:	e003      	b.n	8001912 <HAL_TIM_PWM_Start+0xf2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2243      	movs	r2, #67	; 0x43
 800190e:	2102      	movs	r1, #2
 8001910:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	2201      	movs	r2, #1
 800191a:	0018      	movs	r0, r3
 800191c:	f000 fc7e 	bl	800221c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_TIM_PWM_Start+0x1a8>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d009      	beq.n	800193e <HAL_TIM_PWM_Start+0x11e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a27      	ldr	r2, [pc, #156]	; (80019cc <HAL_TIM_PWM_Start+0x1ac>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d004      	beq.n	800193e <HAL_TIM_PWM_Start+0x11e>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_TIM_PWM_Start+0x1b0>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_TIM_PWM_Start+0x122>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_TIM_PWM_Start+0x124>
 8001942:	2300      	movs	r3, #0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	0209      	lsls	r1, r1, #8
 8001956:	430a      	orrs	r2, r1
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <HAL_TIM_PWM_Start+0x1a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00a      	beq.n	800197a <HAL_TIM_PWM_Start+0x15a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	429a      	cmp	r2, r3
 800196e:	d004      	beq.n	800197a <HAL_TIM_PWM_Start+0x15a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_TIM_PWM_Start+0x1b4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d116      	bne.n	80019a8 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <HAL_TIM_PWM_Start+0x1b8>)
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2b06      	cmp	r3, #6
 800198a:	d016      	beq.n	80019ba <HAL_TIM_PWM_Start+0x19a>
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	429a      	cmp	r2, r3
 8001994:	d011      	beq.n	80019ba <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019a6:	e008      	b.n	80019ba <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2101      	movs	r1, #1
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e000      	b.n	80019bc <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ba:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40014400 	.word	0x40014400
 80019d0:	40014800 	.word	0x40014800
 80019d4:	40000400 	.word	0x40000400
 80019d8:	00010007 	.word	0x00010007

080019dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2317      	movs	r3, #23
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	223c      	movs	r2, #60	; 0x3c
 80019f4:	5c9b      	ldrb	r3, [r3, r2]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e0e5      	b.n	8001bca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	223c      	movs	r2, #60	; 0x3c
 8001a02:	2101      	movs	r1, #1
 8001a04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b14      	cmp	r3, #20
 8001a0a:	d900      	bls.n	8001a0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001a0c:	e0d1      	b.n	8001bb2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	009a      	lsls	r2, r3, #2
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f95e 	bl	8001ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2108      	movs	r1, #8
 8001a34:	430a      	orrs	r2, r1
 8001a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2104      	movs	r1, #4
 8001a44:	438a      	bics	r2, r1
 8001a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6999      	ldr	r1, [r3, #24]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	619a      	str	r2, [r3, #24]
      break;
 8001a5a:	e0af      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	0011      	movs	r1, r2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f000 f9bd 	bl	8001de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	0109      	lsls	r1, r1, #4
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699a      	ldr	r2, [r3, #24]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4954      	ldr	r1, [pc, #336]	; (8001bd8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6999      	ldr	r1, [r3, #24]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	021a      	lsls	r2, r3, #8
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	619a      	str	r2, [r3, #24]
      break;
 8001aa0:	e08c      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	0011      	movs	r1, r2
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 fa18 	bl	8001ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69da      	ldr	r2, [r3, #28]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2108      	movs	r1, #8
 8001abc:	430a      	orrs	r2, r1
 8001abe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2104      	movs	r1, #4
 8001acc:	438a      	bics	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69d9      	ldr	r1, [r3, #28]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	61da      	str	r2, [r3, #28]
      break;
 8001ae2:	e06b      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fa79 	bl	8001fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69da      	ldr	r2, [r3, #28]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0109      	lsls	r1, r1, #4
 8001b00:	430a      	orrs	r2, r1
 8001b02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4932      	ldr	r1, [pc, #200]	; (8001bd8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69d9      	ldr	r1, [r3, #28]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	021a      	lsls	r2, r3, #8
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	61da      	str	r2, [r3, #28]
      break;
 8001b28:	e048      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	0011      	movs	r1, r2
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 faba 	bl	80020ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2108      	movs	r1, #8
 8001b44:	430a      	orrs	r2, r1
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2104      	movs	r1, #4
 8001b54:	438a      	bics	r2, r1
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001b6a:	e027      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	0011      	movs	r1, r2
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 faf3 	bl	8002160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	0109      	lsls	r1, r1, #4
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4910      	ldr	r1, [pc, #64]	; (8001bd8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	021a      	lsls	r2, r3, #8
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001bb0:	e004      	b.n	8001bbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	701a      	strb	r2, [r3, #0]
      break;
 8001bba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	223c      	movs	r2, #60	; 0x3c
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	5499      	strb	r1, [r3, r2]

  return status;
 8001bc4:	2317      	movs	r3, #23
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	781b      	ldrb	r3, [r3, #0]
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b006      	add	sp, #24
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	080023e4 	.word	0x080023e4
 8001bd8:	fffffbff 	.word	0xfffffbff

08001bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a37      	ldr	r2, [pc, #220]	; (8001ccc <TIM_Base_SetConfig+0xf0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d008      	beq.n	8001c06 <TIM_Base_SetConfig+0x2a>
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d003      	beq.n	8001c06 <TIM_Base_SetConfig+0x2a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <TIM_Base_SetConfig+0xf4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d108      	bne.n	8001c18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2270      	movs	r2, #112	; 0x70
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a2c      	ldr	r2, [pc, #176]	; (8001ccc <TIM_Base_SetConfig+0xf0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d014      	beq.n	8001c4a <TIM_Base_SetConfig+0x6e>
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d00f      	beq.n	8001c4a <TIM_Base_SetConfig+0x6e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <TIM_Base_SetConfig+0xf4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00b      	beq.n	8001c4a <TIM_Base_SetConfig+0x6e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <TIM_Base_SetConfig+0xf8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <TIM_Base_SetConfig+0x6e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <TIM_Base_SetConfig+0xfc>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d003      	beq.n	8001c4a <TIM_Base_SetConfig+0x6e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <TIM_Base_SetConfig+0x100>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d108      	bne.n	8001c5c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <TIM_Base_SetConfig+0x104>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2280      	movs	r2, #128	; 0x80
 8001c60:	4393      	bics	r3, r2
 8001c62:	001a      	movs	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <TIM_Base_SetConfig+0xf0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <TIM_Base_SetConfig+0xbe>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <TIM_Base_SetConfig+0xfc>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d003      	beq.n	8001c9a <TIM_Base_SetConfig+0xbe>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a11      	ldr	r2, [pc, #68]	; (8001cdc <TIM_Base_SetConfig+0x100>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d103      	bne.n	8001ca2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4393      	bics	r3, r2
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]
  }
}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40002000 	.word	0x40002000
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40014800 	.word	0x40014800
 8001ce0:	fffffcff 	.word	0xfffffcff

08001ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4a2e      	ldr	r2, [pc, #184]	; (8001dcc <TIM_OC1_SetConfig+0xe8>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4393      	bics	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <TIM_OC1_SetConfig+0xec>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <TIM_OC1_SetConfig+0x6e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <TIM_OC1_SetConfig+0xf0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d003      	beq.n	8001d52 <TIM_OC1_SetConfig+0x6e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <TIM_OC1_SetConfig+0xf4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10c      	bne.n	8001d6c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2208      	movs	r2, #8
 8001d56:	4393      	bics	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4393      	bics	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <TIM_OC1_SetConfig+0xec>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <TIM_OC1_SetConfig+0xa0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <TIM_OC1_SetConfig+0xf0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <TIM_OC1_SetConfig+0xa0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <TIM_OC1_SetConfig+0xf4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d111      	bne.n	8001da8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <TIM_OC1_SetConfig+0xf8>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <TIM_OC1_SetConfig+0xfc>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	621a      	str	r2, [r3, #32]
}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b006      	add	sp, #24
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	fffeff8f 	.word	0xfffeff8f
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40014400 	.word	0x40014400
 8001dd8:	40014800 	.word	0x40014800
 8001ddc:	fffffeff 	.word	0xfffffeff
 8001de0:	fffffdff 	.word	0xfffffdff

08001de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	001a      	movs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4a2c      	ldr	r2, [pc, #176]	; (8001ec4 <TIM_OC2_SetConfig+0xe0>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <TIM_OC2_SetConfig+0xe4>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	4393      	bics	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <TIM_OC2_SetConfig+0xe8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10d      	bne.n	8001e62 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	4393      	bics	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <TIM_OC2_SetConfig+0xe8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_OC2_SetConfig+0x96>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <TIM_OC2_SetConfig+0xec>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d003      	beq.n	8001e7a <TIM_OC2_SetConfig+0x96>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <TIM_OC2_SetConfig+0xf0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d113      	bne.n	8001ea2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <TIM_OC2_SetConfig+0xf4>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4a15      	ldr	r2, [pc, #84]	; (8001edc <TIM_OC2_SetConfig+0xf8>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	621a      	str	r2, [r3, #32]
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b006      	add	sp, #24
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	feff8fff 	.word	0xfeff8fff
 8001ec8:	fffffcff 	.word	0xfffffcff
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40014400 	.word	0x40014400
 8001ed4:	40014800 	.word	0x40014800
 8001ed8:	fffffbff 	.word	0xfffffbff
 8001edc:	fffff7ff 	.word	0xfffff7ff

08001ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a31      	ldr	r2, [pc, #196]	; (8001fbc <TIM_OC3_SetConfig+0xdc>)
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <TIM_OC3_SetConfig+0xe0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2203      	movs	r2, #3
 8001f14:	4393      	bics	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <TIM_OC3_SetConfig+0xe4>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	021b      	lsls	r3, r3, #8
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <TIM_OC3_SetConfig+0xe8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <TIM_OC3_SetConfig+0xec>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <TIM_OC3_SetConfig+0xf0>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <TIM_OC3_SetConfig+0xe8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <TIM_OC3_SetConfig+0x92>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <TIM_OC3_SetConfig+0xf4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d003      	beq.n	8001f72 <TIM_OC3_SetConfig+0x92>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <TIM_OC3_SetConfig+0xf8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d113      	bne.n	8001f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <TIM_OC3_SetConfig+0xfc>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <TIM_OC3_SetConfig+0x100>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	621a      	str	r2, [r3, #32]
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b006      	add	sp, #24
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	fffffeff 	.word	0xfffffeff
 8001fc0:	fffeff8f 	.word	0xfffeff8f
 8001fc4:	fffffdff 	.word	0xfffffdff
 8001fc8:	40012c00 	.word	0x40012c00
 8001fcc:	fffff7ff 	.word	0xfffff7ff
 8001fd0:	fffffbff 	.word	0xfffffbff
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40014800 	.word	0x40014800
 8001fdc:	ffffefff 	.word	0xffffefff
 8001fe0:	ffffdfff 	.word	0xffffdfff

08001fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a24      	ldr	r2, [pc, #144]	; (800208c <TIM_OC4_SetConfig+0xa8>)
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <TIM_OC4_SetConfig+0xac>)
 8002010:	4013      	ands	r3, r2
 8002012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <TIM_OC4_SetConfig+0xb0>)
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4a1b      	ldr	r2, [pc, #108]	; (8002098 <TIM_OC4_SetConfig+0xb4>)
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	031b      	lsls	r3, r3, #12
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <TIM_OC4_SetConfig+0xb8>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <TIM_OC4_SetConfig+0x70>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <TIM_OC4_SetConfig+0xbc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_OC4_SetConfig+0x70>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <TIM_OC4_SetConfig+0xc0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d109      	bne.n	8002068 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <TIM_OC4_SetConfig+0xc4>)
 8002058:	4013      	ands	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	621a      	str	r2, [r3, #32]
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b006      	add	sp, #24
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	ffffefff 	.word	0xffffefff
 8002090:	feff8fff 	.word	0xfeff8fff
 8002094:	fffffcff 	.word	0xfffffcff
 8002098:	ffffdfff 	.word	0xffffdfff
 800209c:	40012c00 	.word	0x40012c00
 80020a0:	40014400 	.word	0x40014400
 80020a4:	40014800 	.word	0x40014800
 80020a8:	ffffbfff 	.word	0xffffbfff

080020ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4a21      	ldr	r2, [pc, #132]	; (8002148 <TIM_OC5_SetConfig+0x9c>)
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <TIM_OC5_SetConfig+0xa0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4a19      	ldr	r2, [pc, #100]	; (8002150 <TIM_OC5_SetConfig+0xa4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <TIM_OC5_SetConfig+0xa8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <TIM_OC5_SetConfig+0x66>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <TIM_OC5_SetConfig+0xac>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d003      	beq.n	8002112 <TIM_OC5_SetConfig+0x66>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <TIM_OC5_SetConfig+0xb0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d109      	bne.n	8002126 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <TIM_OC5_SetConfig+0x9c>)
 8002116:	4013      	ands	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	621a      	str	r2, [r3, #32]
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	fffeffff 	.word	0xfffeffff
 800214c:	fffeff8f 	.word	0xfffeff8f
 8002150:	fffdffff 	.word	0xfffdffff
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40014400 	.word	0x40014400
 800215c:	40014800 	.word	0x40014800

08002160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <TIM_OC6_SetConfig+0xa0>)
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <TIM_OC6_SetConfig+0xa4>)
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <TIM_OC6_SetConfig+0xa8>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <TIM_OC6_SetConfig+0xac>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d007      	beq.n	80021c8 <TIM_OC6_SetConfig+0x68>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a15      	ldr	r2, [pc, #84]	; (8002210 <TIM_OC6_SetConfig+0xb0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <TIM_OC6_SetConfig+0x68>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a14      	ldr	r2, [pc, #80]	; (8002214 <TIM_OC6_SetConfig+0xb4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d109      	bne.n	80021dc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <TIM_OC6_SetConfig+0xb8>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	621a      	str	r2, [r3, #32]
}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b006      	add	sp, #24
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	ffefffff 	.word	0xffefffff
 8002204:	feff8fff 	.word	0xfeff8fff
 8002208:	ffdfffff 	.word	0xffdfffff
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40014400 	.word	0x40014400
 8002214:	40014800 	.word	0x40014800
 8002218:	fffbffff 	.word	0xfffbffff

0800221c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	221f      	movs	r2, #31
 800222c:	4013      	ands	r3, r2
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	0013      	movs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	43d2      	mvns	r2, r2
 800223e:	401a      	ands	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	211f      	movs	r1, #31
 800224c:	400b      	ands	r3, r1
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4099      	lsls	r1, r3
 8002252:	000b      	movs	r3, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	621a      	str	r2, [r3, #32]
}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b006      	add	sp, #24
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	223c      	movs	r2, #60	; 0x3c
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002278:	2302      	movs	r3, #2
 800227a:	e050      	b.n	800231e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	223c      	movs	r2, #60	; 0x3c
 8002280:	2101      	movs	r1, #1
 8002282:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	223d      	movs	r2, #61	; 0x3d
 8002288:	2102      	movs	r1, #2
 800228a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d108      	bne.n	80022b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2270      	movs	r2, #112	; 0x70
 80022bc:	4393      	bics	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00a      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d004      	beq.n	80022f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10c      	bne.n	800230c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2280      	movs	r2, #128	; 0x80
 80022f6:	4393      	bics	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4313      	orrs	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	223d      	movs	r2, #61	; 0x3d
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	223c      	movs	r2, #60	; 0x3c
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	40012c00 	.word	0x40012c00
 800232c:	ff0fffff 	.word	0xff0fffff
 8002330:	40000400 	.word	0x40000400

08002334 <memset>:
 8002334:	0003      	movs	r3, r0
 8002336:	1882      	adds	r2, r0, r2
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <memset+0xa>
 800233c:	4770      	bx	lr
 800233e:	7019      	strb	r1, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	e7f9      	b.n	8002338 <memset+0x4>

08002344 <__libc_init_array>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	2600      	movs	r6, #0
 8002348:	4c0c      	ldr	r4, [pc, #48]	; (800237c <__libc_init_array+0x38>)
 800234a:	4d0d      	ldr	r5, [pc, #52]	; (8002380 <__libc_init_array+0x3c>)
 800234c:	1b64      	subs	r4, r4, r5
 800234e:	10a4      	asrs	r4, r4, #2
 8002350:	42a6      	cmp	r6, r4
 8002352:	d109      	bne.n	8002368 <__libc_init_array+0x24>
 8002354:	2600      	movs	r6, #0
 8002356:	f000 f819 	bl	800238c <_init>
 800235a:	4c0a      	ldr	r4, [pc, #40]	; (8002384 <__libc_init_array+0x40>)
 800235c:	4d0a      	ldr	r5, [pc, #40]	; (8002388 <__libc_init_array+0x44>)
 800235e:	1b64      	subs	r4, r4, r5
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	42a6      	cmp	r6, r4
 8002364:	d105      	bne.n	8002372 <__libc_init_array+0x2e>
 8002366:	bd70      	pop	{r4, r5, r6, pc}
 8002368:	00b3      	lsls	r3, r6, #2
 800236a:	58eb      	ldr	r3, [r5, r3]
 800236c:	4798      	blx	r3
 800236e:	3601      	adds	r6, #1
 8002370:	e7ee      	b.n	8002350 <__libc_init_array+0xc>
 8002372:	00b3      	lsls	r3, r6, #2
 8002374:	58eb      	ldr	r3, [r5, r3]
 8002376:	4798      	blx	r3
 8002378:	3601      	adds	r6, #1
 800237a:	e7f2      	b.n	8002362 <__libc_init_array+0x1e>
 800237c:	08002438 	.word	0x08002438
 8002380:	08002438 	.word	0x08002438
 8002384:	0800243c 	.word	0x0800243c
 8002388:	08002438 	.word	0x08002438

0800238c <_init>:
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002392:	bc08      	pop	{r3}
 8002394:	469e      	mov	lr, r3
 8002396:	4770      	bx	lr

08002398 <_fini>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239e:	bc08      	pop	{r3}
 80023a0:	469e      	mov	lr, r3
 80023a2:	4770      	bx	lr
